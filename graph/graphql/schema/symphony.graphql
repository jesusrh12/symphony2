# Copyright (c) 2004-present Facebook All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

#  After making changes to this schema file, be sure to regenerate
#  any code that relies on this schema.
#  Inventory Front-End:
#    %> cd ~/symphony/app/fbcnms-projects/inventory
#    %> yarn relay
#  Inventory Back-End:
#    %> cd ~/symphony/graph/
#    %> go generate ./... && go generate
#  Technician App:
#    %> cd ~/fbsource/xplat/fbc-mobile-app
#    %> yarn relay
#  Pyinventory API:
#    %> cd ~/symphony/cli
#    %> sudo python3 setup.py develop
#    %> ./compile_graphql.sh

directive @deprecatedInput(
  name: String!
  duplicateError: String!
  newField: String
) on INPUT_FIELD_DEFINITION

enum UserStatus
  @goModel(model: "github.com/facebookincubator/symphony/pkg/ent/user.Status") {
  ACTIVE
  DEACTIVATED
}

enum UserRole
  @goModel(model: "github.com/facebookincubator/symphony/pkg/ent/user.Role") {
  USER
  ADMIN
  OWNER
}

enum DistanceUnit
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/user.DistanceUnit"
  ) {
  KILOMETER
  MILE
}

type User implements Node & NamedNode {
  id: ID!
  authID: String!
  firstName: String!
  lastName: String!
  name: String!
  email: String!
  status: UserStatus!
  role: UserRole!
  profilePhoto: File
  groups: [UsersGroup]!
  distanceUnit: DistanceUnit
  organizationFk: Organization
}

enum UsersGroupStatus
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/usersgroup.Status"
  ) {
  ACTIVE
  DEACTIVATED
}

type UsersGroup implements Node {
  id: ID!
  name: String!
  description: String
  status: UsersGroupStatus!
  members: [User!]!
  policies: [PermissionsPolicy!]!
}

type PermissionSettings
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/authz/models.PermissionSettings"
  ) {
  adminPolicy: AdministrativePolicy!
  inventoryPolicy: InventoryPolicy!
  workforcePolicy: WorkforcePolicy!
  automationPolicy: AutomationPolicy!
  assurancePolicy: AssurancePolicy!
}

enum PermissionValue
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/authz/models.PermissionValue"
  ) {
  YES
  NO
  BY_CONDITION
}

type BasicPermissionRule
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/authz/models.BasicPermissionRule"
  ) {
  isAllowed: PermissionValue!
}

type LocationPermissionRule
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/authz/models.LocationPermissionRule"
  ) {
  isAllowed: PermissionValue!
  locationTypeIds: [ID!]
}

type DocumentCategoryPermissionRule
@goModel(
  model: "github.com/facebookincubator/symphony/pkg/authz/models.DocumentCategoryPermissionRule"
) {
  isAllowed: PermissionValue!
  documentCategoryIds: [ID!]
}

type PropertyCategoryPermissionRule
@goModel(
  model: "github.com/facebookincubator/symphony/pkg/authz/models.PropertyCategoryPermissionRule"
) {
  isAllowed: PermissionValue!
  propertyCategoryIds: [ID!]
}

type WorkforcePermissionRule
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/authz/models.WorkforcePermissionRule"
  ) {
  isAllowed: PermissionValue!
  projectTypeIds: [ID!]
  workOrderTypeIds: [ID!]
  organizationIds: [ID!]
}

input BasicPermissionRuleInput
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/authz/models.BasicPermissionRuleInput"
  ) {
  isAllowed: PermissionValue!
}

input LocationPermissionRuleInput
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/authz/models.LocationPermissionRuleInput"
  ) {
  isAllowed: PermissionValue!
  locationTypeIds: [ID!]
}

input DocumentCategoryPermissionRuleInput
@goModel(
  model: "github.com/facebookincubator/symphony/pkg/authz/models.DocumentCategoryPermissionRuleInput"
) {
  isAllowed: PermissionValue!
  documentCategoryIds: [ID!]
}

input PropertyCategoryPermissionRuleInput
@goModel(
  model: "github.com/facebookincubator/symphony/pkg/authz/models.PropertyCategoryPermissionRuleInput"
) {
  isAllowed: PermissionValue!
  propertyCategoryIds: [ID!]
}

input WorkforcePermissionRuleInput
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/authz/models.WorkforcePermissionRuleInput"
  ) {
  isAllowed: PermissionValue!
  projectTypeIds: [ID!]
  workOrderTypeIds: [ID!]
  organizationIds: [ID!]
}

type CUD
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/authz/models.Cud"
  ) {
  create: BasicPermissionRule!
  update: BasicPermissionRule!
  delete: BasicPermissionRule!
}

type LocationCUD
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/authz/models.LocationCud"
  ) {
  create: LocationPermissionRule!
  update: LocationPermissionRule!
  delete: LocationPermissionRule!
}

type DocumentCategoryCUD
@goModel(
  model: "github.com/facebookincubator/symphony/pkg/authz/models.DocumentCategoryCud"
) {
  locationTypeID: Int
  read  : DocumentCategoryPermissionRule
  create: DocumentCategoryPermissionRule
  update: DocumentCategoryPermissionRule
  delete: DocumentCategoryPermissionRule
}

type PropertyCategoryCUD
@goModel(
  model: "github.com/facebookincubator/symphony/pkg/authz/models.PropertyCategoryCud"
) {
  read  : PropertyCategoryPermissionRule
  create: PropertyCategoryPermissionRule
  update: PropertyCategoryPermissionRule
  delete: PropertyCategoryPermissionRule
}

input BasicCUDInput
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/authz/models.BasicCUDInput"
  ) {
  create: BasicPermissionRuleInput
  update: BasicPermissionRuleInput
  delete: BasicPermissionRuleInput
}

input LocationCUDInput
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/authz/models.LocationCUDInput"
  ) {
  create: BasicPermissionRuleInput
  update: LocationPermissionRuleInput
  delete: BasicPermissionRuleInput
}

input DocumentCategoryCUDInput
@goModel(
  model: "github.com/facebookincubator/symphony/pkg/authz/models.DocumentCategoryCUDInput"
) {
  locationTypeID: Int
  read  : DocumentCategoryPermissionRuleInput
  create: DocumentCategoryPermissionRuleInput
  update: DocumentCategoryPermissionRuleInput
  delete: DocumentCategoryPermissionRuleInput
}

input PropertyCategoryCUDInput
@goModel(
  model: "github.com/facebookincubator/symphony/pkg/authz/models.PropertyCategoryCUDInput"
) {
  read  : PropertyCategoryPermissionRuleInput
  create: PropertyCategoryPermissionRuleInput
  update: PropertyCategoryPermissionRuleInput
  delete: PropertyCategoryPermissionRuleInput
}

type AdministrativePolicy
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/authz/models.AdministrativePolicy"
  ) {
  access: BasicPermissionRule!
}

type AutomationPolicy
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/authz/models.AutomationPolicy"
  ) {
  read: BasicPermissionRule!
  templates: CUD!
}

input AutomationPolicyInput
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/authz/models.AutomationPolicyInput"
  ) {
  read: BasicPermissionRuleInput
  templates: BasicCUDInput
}

type AssurancePolicy
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/authz/models.AssurancePolicy"
  ) {
  read: BasicPermissionRule!
  templates: CUD!
}

input AssurancePolicyInput
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/authz/models.AssurancePolicyInput"
  ) {
  read: BasicPermissionRuleInput
  templates: BasicCUDInput
}

type InventoryPolicy
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/authz/models.InventoryPolicy"
  ) {
  read: BasicPermissionRule!
  location: LocationCUD!
  documentCategory: DocumentCategoryCUD!
  propertyCategory: PropertyCategoryCUD!
  equipment: CUD!
  equipmentType: CUD!
  locationType: CUD!
  portType: CUD!
  serviceType: CUD!
}

input InventoryPolicyInput
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/authz/models.InventoryPolicyInput"
  ) {
  read: BasicPermissionRuleInput
  location: LocationCUDInput
  documentCategory: DocumentCategoryCUDInput
  propertyCategory: PropertyCategoryCUDInput
  equipment: BasicCUDInput
  equipmentType: BasicCUDInput
  locationType: BasicCUDInput
  portType: BasicCUDInput
  serviceType: BasicCUDInput
}

type WorkforceCUD
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/authz/models.WorkforceCud"
  ) {
  create: WorkforcePermissionRule!
  update: WorkforcePermissionRule!
  delete: WorkforcePermissionRule!
  assign: WorkforcePermissionRule!
  transferOwnership: WorkforcePermissionRule!
}

input WorkforceCUDInput
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/authz/models.WorkforceCUDInput"
  ) {
  create: BasicPermissionRuleInput
  update: BasicPermissionRuleInput
  delete: BasicPermissionRuleInput
  assign: BasicPermissionRuleInput
  transferOwnership: BasicPermissionRuleInput
}

type WorkforcePolicy
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/authz/models.WorkforcePolicy"
  ) {
  read: WorkforcePermissionRule!
  data: WorkforceCUD!
  templates: CUD!
}

input WorkforcePolicyInput
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/authz/models.WorkforcePolicyInput"
  ) {
  read: WorkforcePermissionRuleInput
  data: WorkforceCUDInput
  templates: BasicCUDInput
}

union SystemPolicy
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/authz/models.SystemPolicy"
  ) =
    InventoryPolicy
  | WorkforcePolicy
  | AutomationPolicy
  | AssurancePolicy

type PermissionsPolicy implements Node {
  id: ID!
  name: String!
  description: String
  isGlobal: Boolean!
  policy: SystemPolicy!
  groups: [UsersGroup!]!
}

input AddPermissionsPolicyInput {
  name: String!
  description: String
  isGlobal: Boolean
  inventoryInput: InventoryPolicyInput
  workforceInput: WorkforcePolicyInput
  automationInput: AutomationPolicyInput
  assuranceInput: AssurancePolicyInput
  groups: [ID!]
}

input EditPermissionsPolicyInput {
  id: ID!
  name: String
  description: String
  isGlobal: Boolean
  inventoryInput: InventoryPolicyInput
  workforceInput: WorkforcePolicyInput
  automationInput: AutomationPolicyInput
  assuranceInput: AssurancePolicyInput
  groups: [ID!]
}

type Viewer
  @goModel(model: "github.com/facebookincubator/symphony/pkg/viewer.Viewer") {
  tenant: String!
  user: User
  permissions: PermissionSettings!
}

"""
An object with an ID
"""
interface Node
  @goModel(model: "github.com/facebookincubator/symphony/pkg/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}

interface NamedNode {
  """
  The id of the object.
  """
  id: ID!
  """
  The name of the object.
  """
  name: String!
}

type Field {
  name: String!
  value: String!
  type: String!
}

type Edge {
  name: String!
  type: String!
  ids: [ID!]!
}

type Vertex
  @goModel(model: "github.com/facebookincubator/symphony/pkg/ent.Node") {
  id: ID!
  type: String!
  fields: [Field!]!
  edges: [Edge!]!
}

type Coordinates {
  latitude: Float!
  longitude: Float!
}

# location or site: e.g. building at specific address.
type Location implements Node & NamedNode {
  id: ID!
  externalId: String
  name: String!
  locationType: LocationType! @goField(name: "Type")
  parentLocation: Location @goField(name: "Parent")
  children: [Location]!
  numChildren: Int!
  latitude: Float!
  longitude: Float!
  parentCoords: Coordinates
  equipments: [Equipment]! @goField(name: "Equipment")
  properties: [Property]!
  images: [File]!
  files: [File]! @goField(forceResolver: true)
  siteSurveyNeeded: Boolean!
  topology(depth: Int! = 3 @numberValue(min: 0, max: 10)): NetworkTopology!
  locationHierarchy: [Location!]!
  surveys: [Survey]! @goField(name: "Survey")
  wifiData: [SurveyWiFiScan]! @goField(name: "WifiScan")
  cellData: [SurveyCellScan]! @goField(name: "CellScan")
  distanceKm(latitude: Float!, longitude: Float!): Float!
  floorPlans: [FloorPlan]!
  hyperlinks: [Hyperlink!]!
}

input EditUserInput {
  id: ID!
  firstName: String
  lastName: String
  status: UserStatus
  role: UserRole
  distanceUnit: DistanceUnit
  organizationFk:ID
}

input UpdateUserGroupsInput {
  id: ID!
  addGroupIds: [ID!]!
  removeGroupIds: [ID!]!
}

input AddUsersGroupInput {
  name: String!
  description: String
  members: [ID!]
  policies: [ID!]
}

input EditUsersGroupInput {
  id: ID!
  name: String
  description: String
  status: UsersGroupStatus
  members: [ID!]
  policies: [ID!]
}

input AddLocationInput {
  name: String!
  type: ID!
  parent: ID
  latitude: Float
  longitude: Float
  properties: [PropertyInput!]
  externalID: String
}

input EditLocationInput {
  id: ID!
  name: String!
  latitude: Float!
  longitude: Float!
  properties: [PropertyInput!]
  externalID: String
}

# location type: e.g. building.
type LocationType implements Node {
  id: ID!
  name: String!
  mapType: String
  isSite: Boolean!
  index: Int
  mapZoomLevel: Int
  propertyTypes: [PropertyType]!
  documentCategories: [DocumentCategory]!
  numberOfLocations: Int!
  locations(enforceHasLatLong: Boolean = false): LocationConnection
    @goField(forceResolver: true)
  surveyTemplateCategories: [SurveyTemplateCategory]
}

input AddLocationTypeInput {
  name: String!
  mapType: String
  mapZoomLevel: Int
  isSite: Boolean
  documentCategories: [DocumentCategoryInput!]
  properties: [PropertyTypeInput!]
    @uniqueField(typ: "property type", field: "Name")
  surveyTemplateCategories: [SurveyTemplateCategoryInput!]
}

input EditLocationTypeInput {
  id: ID!
  name: String!
  mapType: String
  mapZoomLevel: Int
  isSite: Boolean
  documentCategories: [DocumentCategoryInput!]
  properties: [PropertyTypeInput!]
    @uniqueField(typ: "property type", field: "Name")
}

input DocumentCategoryInput
@goModel(
  model: "github.com/facebookincubator/symphony/pkg/exporter/models.DocumentCategoryInput"
) {
  id: ID
  name: String!
  index: Int!
}

type NetworkTopology {
  nodes: [Node!]!
  links: [TopologyLink!]!
}

enum TopologyLinkType {
  PHYSICAL
}

type TopologyLink {
  type: TopologyLinkType!
  source: Node!
  target: Node!
}

scalar Time

enum FileType
  @goModel(model: "github.com/facebookincubator/symphony/pkg/ent/file.Type") {
  IMAGE
  FILE
}

type File implements Node {
  id: ID!
  fileName: String!
  sizeInBytes: Int
  modified: Time
  uploaded: Time
  fileType: FileType
  mimeType: String
  storeKey: String
  category: String
  annotation: String
  workorder: WorkOrder
  documentCategory: DocumentCategory
}

type Hyperlink implements Node {
  id: ID!
  url: String!
  displayName: String
  category: String
  createTime: Time!
  documentCategory: DocumentCategory
}

input AddHyperlinkInput {
  entityType: ImageEntity!
  entityId: ID!
  url: String!
  displayName: String
  category: String
  documentCategoryId: ID
}

input AddImageInput {
  entityType: ImageEntity!
  entityId: ID!
  imgKey: String!
  fileName: String!
  fileSize: Int!
  modified: Time!
  contentType: String!
  category: String
  annotation: String
  documentCategoryId: ID
}

type Comment implements Node {
  id: ID!
  author: User!
  text: String!
  createTime: Time!
}

input CommentInput {
  entityType: CommentEntity!
  id: ID!
  text: String!
}

enum ActivityField
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/activity.ActivityType"
  ) {
  STATUS
  PRIORITY
  ASSIGNEE
  CREATION_DATE
  OWNER
  NAME
  DESCRIPTION
  CLOCK_IN
  CLOCK_OUT
}

enum ClockOutReason
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/activity.ClockOutReason"
  ) {
  PAUSE
  SUBMIT
  SUBMIT_INCOMPLETE
  BLOCKED
}

type ClockDetails
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/activity.ClockDetails"
  ) {
  clockOutReason: ClockOutReason
  distanceMeters: Float
  comment: String
}

type ClockActivity {
  author: User!
  details: ClockDetails!
  time: Time!
}

type Activity implements Node {
  id: ID!
  author: User
  isCreate: Boolean!
  activityType: ActivityField!
  newRelatedNode: Node
  oldRelatedNode: Node
  oldValue: String
  newValue: String
  createTime: Time!
  workOrder: WorkOrder!
  clockDetails: ClockDetails
}

input ActivityFilterInput {
  limit: Int! @numberValue(min: 0)
  orderDirection: OrderDirection!
  activityType: ActivityField!
}

# specific equipment instance: e.g. Wifi Access Point X at Location Y.
type Equipment implements Node & NamedNode {
  id: ID!
  externalId: String
  name: String!
  parentLocation: Location @goField(name: "Location")
  parentPosition: EquipmentPosition
  equipmentType: EquipmentType! @goField(name: "Type")
  positions: [EquipmentPosition]!
  ports(availableOnly: Boolean = false): [EquipmentPort]!
    @goField(forceResolver: true)
  descendentsIncludingSelf: [Equipment]!
  properties: [Property]!
  futureState: FutureState
  workOrder: WorkOrder
  locationHierarchy: [Location!]!
  firstLocation: Location!
  positionHierarchy: [EquipmentPosition!]!
  services: [Service]!
  images: [File]!
  files: [File]! @goField(forceResolver: true)
  hyperlinks: [Hyperlink!]!
}

input AddEquipmentInput {
  name: String!
  type: ID!
  location: ID
  parent: ID
  positionDefinition: ID
  properties: [PropertyInput!]
  workOrder: ID
  externalId: String
}

input EditEquipmentInput {
  id: ID!
  name: String!
  properties: [PropertyInput!]
  deviceID: String
  externalId: String
}

input EditEquipmentPortInput {
  side: LinkSide!
  properties: [PropertyInput!]
}

# Equipment type: e.g. Cisco Router Type X.
type EquipmentType implements Node {
  id: ID!
  name: String!
  category: String
  positionDefinitions: [EquipmentPositionDefinition]!
  portDefinitions: [EquipmentPortDefinition]!
  propertyTypes: [PropertyType]!
  equipments: [Equipment]! @goField(name: "Equipment")
  numberOfEquipment: Int!
}

input AddEquipmentTypeInput {
  name: String!
  category: String
  positions: [EquipmentPositionInput!]
  ports: [EquipmentPortInput!]
  properties: [PropertyTypeInput!]
    @uniqueField(typ: "property type", field: "Name")
}

input EditEquipmentTypeInput {
  id: ID!
  name: String!
  category: String
  positions: [EquipmentPositionInput!]
  ports: [EquipmentPortInput!]
  properties: [PropertyTypeInput!]
    @uniqueField(typ: "property type", field: "Name")
}

type EquipmentPositionDefinition implements Node {
  id: ID!
  name: String!
  index: Int
  visibleLabel: String
}

type EquipmentPosition implements Node {
  id: ID!
  definition: EquipmentPositionDefinition!
  parentEquipment: Equipment! @goField(name: "Parent")
  attachedEquipment: Equipment @goField(name: "Attachment")
}

input EquipmentPositionInput {
  id: ID
  name: String!
  index: Int
  visibleLabel: String
}

type WorkOrderExecutionResult {
  id: ID!
  name: String!
  equipmentAdded: [Equipment!]!
  equipmentRemoved: [ID!]!
  linkAdded: [Link!]!
  linkRemoved: [ID!]!
}

input AddWorkOrderTypeInput {
  name: String!
  description: String
  properties: [PropertyTypeInput]
    @uniqueField(typ: "property type", field: "Name")
  checkListCategories: [CheckListCategoryDefinitionInput!]
  assigneeCanCompleteWorkOrder: Boolean
  duration: Float
}

input EditWorkOrderTypeInput {
  id: ID!
  name: String!
  description: String
  properties: [PropertyTypeInput]
    @uniqueField(typ: "property type", field: "Name")
  checkListCategories: [CheckListCategoryDefinitionInput!]
  assigneeCanCompleteWorkOrder: Boolean
  duration: Float
}

input AddWorkOrderInput {
  name: String!
  description: String
  workOrderTypeId: ID!
  locationId: ID
  projectId: ID
  properties: [PropertyInput!]
  checkList: [CheckListItemInput!]
  ownerId: ID
  checkListCategories: [CheckListCategoryInput!]
  assigneeId: ID
  index: Int
  organizationFk:ID
  status: WorkOrderStatus
  priority: WorkOrderPriority
  duration: Float
  dueDate: Time
}

input EditWorkOrderInput {
  id: ID!
  name: String!
  description: String
  ownerId: ID
  installDate: Time
  assigneeId: ID
  index: Int
  organizationFk:ID
  status: WorkOrderStatus
  priority: WorkOrderPriority
  projectId: ID
  properties: [PropertyInput!]
  checkList: [CheckListItemInput!]
  checkListCategories: [CheckListCategoryInput!]
  locationId: ID
  duration: Float
  dueDate: Time
}

input TechnicianCheckListItemInput {
  id: ID!
  selectedEnumValues: String
  stringValue: String
  checked: Boolean
  yesNoResponse: YesNoResponse
  wifiData: [SurveyWiFiScanData!]
  cellData: [SurveyCellScanData!]
  filesData: [FileInput!]
}

input TechnicianWorkOrderUploadInput {
  workOrderId: ID!
  checkListCategories: [CheckListCategoryInput!]
}

type EquipmentPortType implements Node {
  id: ID!
  name: String!
  propertyTypes: [PropertyType]!
  linkPropertyTypes: [PropertyType]!
  numberOfPortDefinitions: Int!
}

input AddEquipmentPortTypeInput {
  name: String!
  properties: [PropertyTypeInput!]
    @uniqueField(typ: "property type", field: "Name")
  linkProperties: [PropertyTypeInput!]
    @uniqueField(typ: "property type", field: "Name")
}

input EditEquipmentPortTypeInput {
  id: ID!
  name: String!
  properties: [PropertyTypeInput!]
    @uniqueField(typ: "property type", field: "Name")
  linkProperties: [PropertyTypeInput!]
    @uniqueField(typ: "property type", field: "Name")
}

type EquipmentPortDefinition implements Node {
  id: ID!
  name: String!
  index: Int
  visibleLabel: String
  portType: EquipmentPortType @goField(name: "EquipmentPortType")
  bandwidth: String
  connectedPorts: [EquipmentPortDefinition!]
}

type EquipmentPort implements Node {
  id: ID!
  definition: EquipmentPortDefinition!
  parentEquipment: Equipment! @goField(name: "Parent")
  link: Link
  properties: [Property!]!
  serviceEndpoints: [ServiceEndpoint!]! @goField(name: "Endpoints")
  services: [Service]! @goField(name: "Service")
}

input EquipmentPortConnectionInput {
  id: ID
  name: String
}

input EquipmentPortInput {
  id: ID
  name: String!
  index: Int
  visibleLabel: String
  portTypeID: ID
  bandwidth: String
  connectedPorts: [EquipmentPortConnectionInput!]
}

type SearchEntry {
  entityId: ID!
  entityType: String!
  name: String!
  type: String!
  externalId: String
}

"""
End To End Path Descovery.
"""
type EndToEndPath {
  """
  The links in the path
  """
  links: [Link]
  """
  The start,end ports in the path
  """
  ports: [EquipmentPort]
}

"""
A search node edge in a connection.
"""
type SearchNodeEdge {
  """
  The search node at the end of the edge.
  """
  node: Node
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
A connection to a list of search nodes.
"""
type SearchNodesConnection {
  """
  Total count of search nodes in all pages.
  """
  totalCount: Int!
  """
  A list of search node edges.
  """
  edges: [SearchNodeEdge!]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A flow draft edge in a connection.
"""
type FlowDraftEdge {
  """
  The FlowDraft type at the end of the edge.
  """
  node: FlowDraft
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
A connection to a list of FlowDrafts.
"""
type FlowDraftConnection {
  """
  Total count of FlowDrafts in all pages.
  """
  totalCount: Int!
  """
  A list of FlowDraft edges.
  """
  edges: [FlowDraftEdge!]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A flow edge in a connection.
"""
type FlowEdge {
  """
  The Flow type at the end of the edge.
  """
  node: Flow
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
A connection to a list of Flows.
"""
type FlowConnection {
  """
  Total count of Flows in all pages.
  """
  totalCount: Int!
  """
  A list of Flow edges.
  """
  edges: [FlowEdge!]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A flow edge in a connection.
"""
type FlowInstanceEdge {
  """
  The Flow type at the end of the edge.
  """
  node: FlowInstance
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
A connection to a list of Flows.
"""
type FlowInstanceConnection {
  """
  Total count of Flows in all pages.
  """
  totalCount: Int!
  """
  A list of Flow edges.
  """
  edges: [FlowInstanceEdge!]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Ordering options for flow instance connections.
"""
input FlowInstanceOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order work orders by.
  """
  field: FlowInstanceOrderField
}

"""
Properties by which flow instances connections can be ordered.
"""
enum FlowInstanceOrderField {
  """
  Order flow instances by start time.
  """
  START_AT

  """
  Order flow instances by end time.
  """
  END_AT

  """
  Order flow instances by update time.
  """
  UPDATED_AT
}

"""
A connection to a list of equipment port types.
"""
type EquipmentPortTypeConnection {
  """
  Total count of equipment port types in all pages.
  """
  totalCount: Int!
  """
  A list of equipment port type edges.
  """
  edges: [EquipmentPortTypeEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An equipment port type edge in a connection.
"""
type EquipmentPortTypeEdge {
  """
  The equipment port type at the end of the edge.
  """
  node: EquipmentPortType
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
A connection to a list of equipment port definitions.
"""
type EquipmentPortDefinitionConnection {
  """
  Total count of equipment port definitions in all pages.
  """
  totalCount: Int!
  """
  A list of equipment port definition edges.
  """
  edges: [EquipmentPortDefinitionEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An equipment port definition edge in a connection.
"""
type EquipmentPortDefinitionEdge {
  """
  The equipment port definition at the end of the edge.
  """
  node: EquipmentPortDefinition
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
A connection to a list of equipment ports.
"""
type EquipmentPortConnection {
  """
  Total count of equipment ports in all pages.
  """
  totalCount: Int!
  """
  A list of equipment port edges.
  """
  edges: [EquipmentPortEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An equipment port edge in a connection.
"""
type EquipmentPortEdge {
  """
  The equipment port at the end of the edge.
  """
  node: EquipmentPort
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
A connection to a list of equipment types.
"""
type EquipmentTypeConnection {
  """
  Total count of equipment types in all pages.
  """
  totalCount: Int!
  """
  A list of equipment type edges.
  """
  edges: [EquipmentTypeEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An equipment type edge in a connection.
"""
type EquipmentTypeEdge {
  """
  The equipment type at the end of the edge.
  """
  node: EquipmentType
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
A connection to a list of equipments.
"""
type EquipmentConnection {
  """
  Total count of equipment in all pages.
  """
  totalCount: Int!
  """
  A list of equipment edges.
  """
  edges: [EquipmentEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An equipment edge in a connection.
"""
type EquipmentEdge {
  """
  The equipment at the end of the edge.
  """
  node: Equipment
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
Properties by which equipment connections can be ordered.
"""
enum EquipmentOrderField {
  """
  Order equipment by name.
  """
  NAME

  """
  Order equipment by future state.
  """
  FUTURE_STATE
}

"""
Ordering options for equipment connections.
"""
input EquipmentOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order equipment by.
  """
  field: EquipmentOrderField
}

"""
A connection to a list of location types.
"""
type LocationTypeConnection {
  """
  Total count of location types in all pages.
  """
  totalCount: Int!
  """
  A list of location type edges.
  """
  edges: [LocationTypeEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A location type edge in a connection.
"""
type LocationTypeEdge {
  """
  The location type at the end of the edge.
  """
  node: LocationType
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

type DocumentCategoryConnection {
  totalCount: Int!
  edges: [DocumentCategoryEdge!]!
  pageInfo: PageInfo!
}

type DocumentCategoryEdge {
  node: DocumentCategory
  cursor: Cursor!
}

"""
A connection to a list of locations.
"""
type LocationConnection {
  """
  Total count of locations in all pages.
  """
  totalCount: Int!
  """
  A list of location edges.
  """
  edges: [LocationEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A location edge in a connection.
"""
type LocationEdge {
  """
  The location at the end of the edge.
  """
  node: Location
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
A connection to a list of links.
"""
type LinkConnection {
  """
  Total count of links in all pages.
  """
  totalCount: Int!
  """
  A list of link edges.
  """
  edges: [LinkEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
Properties by which location connections can be ordered.
"""
enum LocationOrderField {
  """
  Order locations by name.
  """
  NAME
}

"""
Properties by which property categories connections can be ordered.
"""
enum PropertyCategoryOrderField {
  """
  Order Property Category by name.
  """
  NAME
  """
  Order Property Category by index.
  """
  INDEX
}

"""
Ordering options for location connections.
"""
input LocationOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order locations by.
  """
  field: LocationOrderField
}

"""
Ordering options for property category connections.
"""
input PropertyCategoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!
  """
  The field to order property category by.
  """
  field: PropertyCategoryOrderField
}

"""
A link edge in a connection.
"""
type LinkEdge {
  """
  The link at the end of the edge.
  """
  node: Link
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
A connection to a list of services.
"""
type ServiceConnection {
  """
  Total count of services in all pages.
  """
  totalCount: Int!
  """
  A list of service edges.
  """
  edges: [ServiceEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A service edge in a connection.
"""
type ServiceEdge {
  """
  The service at the end of the edge.
  """
  node: Service
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

# maps graphql type to go type.
# ref: https://gqlgen.com/config
directive @goModel(
  model: String
  models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

"""
Position within a pagination.
"""
scalar Cursor

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating forwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating backwards, the cursor to continue.
  """
  endCursor: Cursor
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC

  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}

"""
A connection to a list of service types.
"""
type ServiceTypeConnection {
  """
  Total count of service types in all pages.
  """
  totalCount: Int!
  """
  A list of service type edges.
  """
  edges: [ServiceTypeEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A service type edge in a connection.
"""
type ServiceTypeEdge {
  """
  The service type at the end of the edge.
  """
  node: ServiceType
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

enum PropertyKind
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/propertytype.Type"
  ) {
  string
  int
  bool
  float
  date
  enum
  range
  email
  gps_location
  datetime_local
  node
}

type PropertyType implements Node {
  id: ID!
  externalId: String
  name: String!
  type: PropertyKind!
  nodeType: String
  index: Int
  category: String
  rawValue: String
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  floatValue: Float
  latitudeValue: Float
  longitudeValue: Float
  rangeFromValue: Float
  rangeToValue: Float
  isEditable: Boolean
  isInstanceProperty: Boolean
  isMandatory: Boolean
  isDeleted: Boolean
  propertyCategory: PropertyCategory
  isListable: Boolean
}

type DocumentCategory implements Node {
  id: ID!
  name: String
  index: Int
  files: [File]!
  hyperlinks: [Hyperlink]!
  numberOfDocuments: Int!
  filesByEntity(entity: ImageEntity!, entityID: ID): [File]!
  hyperlinksByEntity(entity: ImageEntity!, entityID: ID): [Hyperlink]!
}

type PropertyCategory implements Node {
  id: ID!
  name: String
  index: Int
  numberOfProperties: Int
}

type ParameterCatalog implements Node {
  id: ID!
  name: String
  index: Int
  isDisabled: Boolean
  propertyCategories: [PropertyCategory]!
}


input PropertyTypeInput
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/exporter/models.PropertyTypeInput"
  ) {
  id: ID
  externalId: String
  name: String!
  type: PropertyKind!
  nodeType: String
  index: Int
  category: String
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  floatValue: Float
  latitudeValue: Float
  longitudeValue: Float
  rangeFromValue: Float
  rangeToValue: Float
  isEditable: Boolean
  isInstanceProperty: Boolean
  isMandatory: Boolean
  isDeleted: Boolean
  propertyCategoryID: ID
  isListable: Boolean
}

input EditIsListableInput {
  id: ID!
  isListable: Boolean!
}

type Property implements Node {
  id: ID!
  propertyType: PropertyType! @goField(name: "Type")
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  floatValue: Float
  latitudeValue: Float
  longitudeValue: Float
  rangeFromValue: Float
  rangeToValue: Float
  nodeValue: NamedNode
  rawValue: String
}

input PropertyInput {
  id: ID
  propertyTypeID: ID!
  stringValue: String
  intValue: Int
  booleanValue: Boolean
  floatValue: Float
  latitudeValue: Float
  longitudeValue: Float
  rangeFromValue: Float
  rangeToValue: Float
  nodeIDValue: ID
  isEditable: Boolean
  isInstanceProperty: Boolean
}

"""
Work Order priority
"""
enum WorkOrderPriority
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/workorder.Priority"
  ) {
  URGENT
  HIGH
  MEDIUM
  LOW
  NONE
}

"""
Work Order status
"""
enum WorkOrderStatus
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/workorder.Status"
  ) {
  PLANNED
  IN_PROGRESS
  PENDING
    @deprecated(
      reason: "Use new status `IN_PROGRESS` instead. Will be removed on 2020-11-01"
    )
  SUBMITTED
  CLOSED
  DONE
    @deprecated(
      reason: "Use new status `CLOSED`, `SUBMITTED` or `BLOCKED` instead. Will be removed on 2020-11-01"
    )
  BLOCKED
  CANCELED
  SUSPENDED
}

enum ServiceStatus
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/service.Status"
  ) {
  PENDING
  IN_SERVICE
  MAINTENANCE
  DISCONNECTED
}

"""
FutureState of an equipment.
"""
enum FutureState
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/schema/enum.FutureState"
  ) {
  INSTALL
  REMOVE
}

enum ImageEntity {
  LOCATION
  WORK_ORDER
  SITE_SURVEY
  EQUIPMENT
  USER
  CHECKLIST_ITEM
}

enum PropertyEntity
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/schema/enum.PropertyEntity"
  ) {
  EQUIPMENT
  SERVICE
  LINK
  PORT
  LOCATION
  WORK_ORDER
  PROJECT
}

enum ParameterCatalogEntity
@goModel(
  model: "github.com/facebookincubator/symphony/pkg/ent/schema/enum.ParameterCatalogEntity"
) {
  PROPERTY_CATEGORY
}

enum CommentEntity {
  WORK_ORDER
  PROJECT
}

# capturing information about a connection between two ports in the network
type Link implements Node {
  id: ID!
  ports: [EquipmentPort]!
  futureState: FutureState
  workOrder: WorkOrder
  properties: [Property]!
  services: [Service]! @goField(name: "Service")
}

input LinkSide {
  equipment: ID!
  port: ID!
}

input AddLinkInput {
  sides: [LinkSide!]! @list(minItems: 2, maxItems: 2)
  workOrder: ID
  properties: [PropertyInput!]
  serviceIds: [ID!]
}

input EditLinkInput {
  id: ID!
  properties: [PropertyInput!]
  serviceIds: [ID!]
}

type WorkOrderDefinition implements Node {
  id: ID!
  index: Int
  type: WorkOrderType!
}

input WorkOrderDefinitionInput {
  id: ID
  index: Int
  type: ID!
}

enum YesNoResponse
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/checklistitem.YesNoVal"
  ) {
  YES
  NO
}

enum CheckListItemType
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/schema/enum.CheckListItemType"
  ) {
  simple
  string
  enum
  files
  yes_no
  cell_scan
  wifi_scan
}

enum CheckListItemEnumSelectionMode
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/schema/enum.CheckListItemEnumSelectionMode"
  ) {
  single
  multiple
}

type CheckListCategoryDefinition {
  id: ID!
  title: String!
  description: String
  checklistItemDefinitions: [CheckListItemDefinition!]!
}

type CheckListItemDefinition {
  id: ID!
  title: String!
  type: CheckListItemType!
  index: Int
  isMandatory: Boolean
  enumValues: String
  enumSelectionMode: CheckListItemEnumSelectionMode
    @goField(name: "EnumSelectionModeValue")
  helpText: String
}

input CheckListDefinitionInput {
  id: ID
  title: String!
  type: CheckListItemType!
  index: Int
  isMandatory: Boolean
  enumValues: String
  enumSelectionMode: CheckListItemEnumSelectionMode
  helpText: String
}

input CheckListCategoryDefinitionInput {
  id: ID
  title: String!
  description: String
  checkList: [CheckListDefinitionInput!]!
}

type CheckListCategory implements Node {
  id: ID!
  title: String!
  description: String
  checkList: [CheckListItem!]! @goField(name: "CheckListItems")
}

type CheckListItem implements Node {
  id: ID!
  title: String!
  type: CheckListItemType!
  index: Int
  isMandatory: Boolean
  helpText: String
  enumValues: String
  enumSelectionMode: CheckListItemEnumSelectionMode
    @goField(name: "EnumSelectionModeValue")
  selectedEnumValues: String
  stringValue: String
  checked: Boolean
  files: [File!]
  yesNoResponse: YesNoResponse @goField(name: "YesNoVal")
  wifiData: [SurveyWiFiScan!] @goField(name: "WifiScan")
  cellData: [SurveyCellScan!] @goField(name: "CellScan")
}

input CheckListCategoryInput {
  id: ID
  title: String!
  description: String
  checkList: [CheckListItemInput!]
}

input CheckListItemInput {
  id: ID
  title: String!
  type: CheckListItemType!
  index: Int
  isMandatory: Boolean
  helpText: String
  enumValues: String
  enumSelectionMode: CheckListItemEnumSelectionMode
  selectedEnumValues: String
  stringValue: String
  checked: Boolean
  files: [FileInput!]
  yesNoResponse: YesNoResponse
  wifiData: [SurveyWiFiScanData!]
  cellData: [SurveyCellScanData!]
}

enum FilterEntity {
  WORK_ORDER
  PORT
  EQUIPMENT
  LINK
  LOCATION
  SERVICE
}

type GeneralFilter {
  filterType: String!
  key: String!
  operator: FilterOperator!
  stringValue: String
  idSet: [ID!]
  stringSet: [String!]
  boolValue: Boolean
  propertyValue: PropertyType
}

type ReportFilter implements Node {
  id: ID!
  name: String!
  entity: FilterEntity!
  filters: [GeneralFilter!]!
}

input GeneralFilterInput {
  filterType: String!
  key: String!
  operator: FilterOperator!
  stringValue: String
  idSet: [ID!]
  stringSet: [String!]
  boolValue: Boolean
  propertyValue: PropertyTypeInput
}

input EditReportFilterInput {
  id: ID!
  name: String!
}

input ReportFilterInput {
  name: String!
  entity: FilterEntity!
  filters: [GeneralFilterInput]
}

enum ExportType
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/exporttask.Type"
  ) {
  EQUIPMENT
  LOCATION
  PORT
  LINK
  SERVICE
  WORK_ORDER
}
enum ExportStatus
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/exporttask.Status"
  ) {
  PENDING
  IN_PROGRESS
  SUCCEEDED
  FAILED
}
type ExportTask implements Node {
  id: ID!
  type: ExportType!
  status: ExportStatus!
  progress: Float!
  filters: [GeneralFilter!]!
  storeKey: String!
}

type WorkOrderTemplate {
  name: String!
  description: String
  propertyTypes: [PropertyType]!
  checkListCategoryDefinitions: [CheckListCategoryDefinition!]!
  assigneeCanCompleteWorkOrder: Boolean
}

"""
Work Order type schema: e.g. construction work.
"""
type WorkOrderType implements Node {
  id: ID!
  name: String!
  description: String
  propertyTypes: [PropertyType]!
  numberOfWorkOrders: Int!
  checkListCategoryDefinitions: [CheckListCategoryDefinition!]!
  assigneeCanCompleteWorkOrder: Boolean
}

"""
Work Order instance - capturing information about a change in the network
"""
type WorkOrder implements Node & NamedNode {
  id: ID!
  workOrderType: WorkOrderType! @goField(name: "Type")
  workOrderTemplate: WorkOrderTemplate @goField(name: "Template")
  name: String!
  description: String
  owner: User!
  creationDate: Time!
  installDate: Time
  assignedTo: User @goField(name: "Assignee")
  index: Int!
  status: WorkOrderStatus!
  priority: WorkOrderPriority!
  equipmentToAdd: [Equipment]!
  equipmentToRemove: [Equipment]!
  linksToAdd: [Link]!
  linksToRemove: [Link]!
  images: [File]!
  files: [File]! @goField(forceResolver: true)
  comments: [Comment]!
  activities(filter: ActivityFilterInput): [Activity!]!
    @goField(forceResolver: true)
  location: Location
  properties: [Property]!
  project: Project
  checkListCategories: [CheckListCategory!]!
  hyperlinks: [Hyperlink!]!
  closeDate: Time
  organizationFk: Organization
}

"""
A connection to a list of users.
"""
type UserConnection {
  """
  Total count of users in all pages.
  """
  totalCount: Int!
  """
  A list of user type edges.
  """
  edges: [UserEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

type Organization implements Node {
  id: ID!
  name: String!
  description: String!  
  
}

input AddOrganizationInput {  
  name: String!
  description: String!  
  
}

input EditOrganizationInput {
  id: ID!
  name: String!
  description: String!  
  
}
enum OrganizationFilterType {
  ID
  NAME
  DESCRIPTION
}

input OrganizationFilterInput {
  filterType: OrganizationFilterType!
  operator: FilterOperator!
  stringValue: String
  idSet: [ID!]
  maxDepth: Int = 5
  stringSet: [String!]
}

"""
A connection to a list of permissions policies.
"""
type PermissionsPolicyConnection {
  """
  Total count of permission policies in all pages.
  """
  totalCount: Int!
  """
  A list of permissions policies type edges.
  """
  edges: [PermissionsPolicyEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A connection to a list of users groups.
"""
type UsersGroupConnection {
  """
  Total count of user groups in all pages.
  """
  totalCount: Int!
  """
  A list of users group type edges.
  """
  edges: [UsersGroupEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A work order type edge in a connection.
"""
type UserEdge {
  """
  The user type at the end of the edge.
  """
  node: User
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
A permission policy type edge in a connection.
"""
type PermissionsPolicyEdge {
  """
  The permission policy type at the end of the edge.
  """
  node: PermissionsPolicy
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
A work order type edge in a connection.
"""
type UsersGroupEdge {
  """
  The user type at the end of the edge.
  """
  node: UsersGroup
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
A connection to a list of work order types.
"""
type WorkOrderTypeConnection {
  """
  Total count of work order types in all pages.
  """
  totalCount: Int!
  """
  A list of work order type edges.
  """
  edges: [WorkOrderTypeEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A work order type edge in a connection.
"""
type WorkOrderTypeEdge {
  """
  The work order type at the end of the edge.
  """
  node: WorkOrderType
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
A connection to a list of work orders.
"""
type WorkOrderConnection {
  """
  Total count of work orders in all pages.
  """
  totalCount: Int!
  """
  A list of work order edges.
  """
  edges: [WorkOrderEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A connection to a list of Property Category.
"""
type PropertyCategoryConnection {
  """
  Total count of Property Category in all pages.
  """
  totalCount: Int!
  """
  A list of Property Category edges.
  """
  edges: [PropertyCategoryEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A Property Category edge in a connection.
"""
type PropertyCategoryEdge {
  """
  The Property Category at the end of the edge.
  """
  node: PropertyCategory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
A connection to a list of Parameter Catalog
"""
type ParameterCatalogConnection {
  """
  Total count of Parameter Catalog in all pages.
  """
  totalCount: Int!
  """
  A list of Parameter Catalog edges.
  """
  edges: [ParameterCatalogEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A Parameter Catalog edge in a connection.
"""
type ParameterCatalogEdge {
  """
  The Parameter Catalog at the end of the edge.
  """
  node: ParameterCatalog
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
A work order edge in a connection.
"""
type WorkOrderEdge {
  """
  The work order at the end of the edge.
  """
  node: WorkOrder
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
Ordering options for work order connections.
"""
input WorkOrderOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order work orders by.
  """
  field: WorkOrderOrderField
}

"""
Properties by which work order connections can be ordered.
"""
enum WorkOrderOrderField {
  """
  Order work orders by creation time.
  """
  CREATED_AT

  """
  Order work orders by update time.
  """
  UPDATED_AT

  """
  Order work orders by closure time.
  """
  CLOSED_AT

  """
  Order work orders by name.
  """
  NAME
}

"""
@numberValue directive is used to describe possible numeric values.
"""
directive @numberValue(
  """
  The value of multipleOf MUST be a number, strictly greater than 0.
  A numeric instance is valid only if division by this constraint's
  value results in an integer.
  """
  multipleOf: Float

  """
  The value of max MUST be a number, representing an inclusive upper
  limit for a numeric instance. A numeric instance is valid only if
  the instance is less than or exactly equal to max.
  """
  max: Float

  """
  The value of min MUST be a number, representing an inclusive
  upper limit for a numeric instance. A numeric instance is
  valid only if the instance is greater than or exactly equal to min.
  """
  min: Float

  """
  The value of exclusiveMax MUST be a number, representing an exclusive
  upper limit for a numeric instance. A numeric instance is valid only if
  it is strictly less than (not equal to) exclusiveMax.
  """
  exclusiveMax: Float

  """
  The value of exclusiveMin MUST be a number, representing an exclusive
  upper limit for a numeric instance. A numeric instance is valid only
  if it has a value strictly greater than (not equal to) exclusiveMin.
  """
  exclusiveMin: Float

  """
  The value of this argument MUST be an array. This array SHOULD
  have at least one element. Elements in the array SHOULD be unique.
  An instance is valid only if its value is equal to one of the elements
  in this constraint's array value.
  """
  oneOf: [Float!]

  """
  A numeric instance is valid only if its value is equal to
  the value of the constrain.
  """
  equals: Float
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION

"""
@stringValue directive is used to describe possible string values.
"""
directive @stringValue(
  """
  The value of this constraint MUST be a non-negative integer. A string instance
  is valid against this constraint if its length is less than, or equal to maxLength.
  The length of a string instance is defined as the number of its characters.
  """
  maxLength: Int

  """
  The value of this constraint MUST be a non-negative integer. A string instance
  is valid against this constraint if its length is greater than, or equal to minLength.
  The length of a string instance is defined as the number of its characters.
  """
  minLength: Int

  """
  The value of this constraint MUST be a string.
  An instance is valid if it begins with the characters of the constraint's string.
  """
  startsWith: String

  """
  The value of this constraint MUST be a string.
  An instance is valid if it ends with the characters of the constraint's string.
  """
  endsWith: String

  """
  The value of this constraint MUST be a string. An instance is valid if
  constraint's value may be found within the instance string.
  """
  includes: String

  """
  The value of this constraint MUST be a string. This string SHOULD be a valid regular expression.
  An instance is valid if the regular expression matches the instance successfully.
  """
  regex: String

  """
  The value of this argument MUST be an array. This array SHOULD
  have at least one element. Elements in the array SHOULD be unique.
  An instance is valid only if its value is equal to one of the elements
  in this constraint's array value.
  """
  oneOf: [String!]

  """
  A value is valid only if its equal to the value of the constrain.
  """
  equals: String
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION

"""
@list directive is used to describe list values.
"""
directive @list(
  """
  The value of this constraint MUST be a non-negative integer.
  An instance is valid if only its size is less than, or equal to,
  the value of this directive.
  """
  maxItems: Int
  """
  The value of this constraint MUST be a non-negative integer.
  An instance is valid against minItems if its size is greater than,
  or equal to, the value of this constraint.
  Omitting this constraint has the same behavior as a value of 0.
  """
  minItems: Int
  """
  The value of this constraint MUST be a boolean.
  If it has boolean value true, the instance is valid
  if all of its elements are unique.
  """
  uniqueItems: Boolean
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION

type ProjectTemplate {
  name: String!
  description: String
  properties: [PropertyType]!
  workOrders: [WorkOrderDefinition]!
}

type ProjectType implements Node {
  id: ID!
  name: String! @stringValue(minLength: 1)
  description: String
  projects: [Project!]!
  numberOfProjects: Int!
  properties: [PropertyType!]!
  workOrders: [WorkOrderDefinition]!
}

input AddProjectTypeInput {
  name: String! @stringValue(minLength: 1)
  description: String
  properties: [PropertyTypeInput!]
    @uniqueField(typ: "property type", field: "Name")
  workOrders: [WorkOrderDefinitionInput!]
}

input EditProjectTypeInput {
  id: ID!
  name: String! @stringValue(minLength: 1)
  description: String
  properties: [PropertyTypeInput!]
    @uniqueField(typ: "property type", field: "Name")
  workOrders: [WorkOrderDefinitionInput!]
}

input AddCustomerInput {
  name: String! @stringValue(minLength: 1)
  externalId: String
}

# customizes go fields
# ref: https://gqlgen.com/config
directive @goField(
  forceResolver: Boolean
  name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

"""
A connection to a list of project types.
"""
type ProjectTypeConnection {
  """
  Total count of project types in all pages.
  """
  totalCount: Int!
  """
  A list of project type edges.
  """
  edges: [ProjectTypeEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A project type edge in a connection.
"""
type ProjectTypeEdge {
  """
  The project type at the end of the edge.
  """
  node: ProjectType
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
A connection to a list of projects.
"""
type ProjectConnection {
  """
  Total count of projects in all pages.
  """
  totalCount: Int!
  """
  A list of project edges.
  """
  edges: [ProjectEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A project edge in a connection.
"""
type ProjectEdge {
  """
  The project at the end of the edge.
  """
  node: Project
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
Properties by which project connections can be ordered.
"""
enum ProjectOrderField {
  """
  Order projects by name.
  """
  NAME

  """
  Order projects by creation time.
  """
  CREATED_AT

  """
  Order projects by update time.
  """
  UPDATED_AT

  """
  Order projects by priority.
  """
  PRIORITY

  """
  Order projects by property type.
  """
  PROPERTY
}


"""
Ordering options for project connections.
"""
input ProjectOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order projects by.
  """
  field: ProjectOrderField
}

"""
Properties by which counters connections can be ordered.
"""
enum CounterOrderField {
  """
  Order counters by name.
  """
  NAME

  """
  Order counters by creation time.
  """
  CREATED_AT

  """
  Order counters by update time.
  """
  UPDATED_AT
}

"""
Ordering options for counters connections.
"""
input CounterOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order counters by.
  """
  field: CounterOrderField
}

"""
A connection to a list of counters.
"""
type CounterConnection {
  """
  Total counters of projects in all pages.
  """
  totalCount: Int!
  """
  A list of counters edges.
  """
  edges: [CounterEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A counters edge in a connection.
"""
type CounterEdge {
  """
  The counters at the end of the edge.
  """
  node: Counter
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
Properties by which kpi's connections can be ordered.
"""
enum KpiOrderField {
  """
  Order kpi's by name.
  """
  NAME

  """
  Order kpi's by creation time.
  """
  CREATED_AT

  """
  Order kpi's by update time.
  """
  UPDATED_AT
}

"""
Ordering options for kpi's connections.
"""
input KpiOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order kpi's by.
  """
  field: KpiOrderField
}

"""
A connection to a list of kpi's.
"""
type KpiConnection {
  """
  Total kpi's of projects in all pages.
  """
  totalCount: Int!
  """
  A list of kpi's edges.
  """
  edges: [KpiEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A kpi's edge in a connection.
"""
type KpiEdge {
  """
  The kpi's at the end of the edge.
  """
  node: Kpi
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Properties by which kpiCategoriess connections can be ordered.
"""
enum KpiCategoryOrderField {
  """
  Order kpiCategoriess by name.
  """
  NAME

  """
  Order kpiCategoriess by creation time.
  """
  CREATED_AT

  """
  Order kpiCategoriess by update time.
  """
  UPDATED_AT
}

"""
Ordering options for kpiCategoriess connections.
"""
input KpiCategoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order kpiCategoriess by.
  """
  field: KpiCategoryOrderField
}

"""
A connection to a list of kpiCategoriess.
"""
type KpiCategoryConnection {
  """
  Total kpiCategoriess of projects in all pages.
  """
  totalCount: Int!
  """
  A list of kpiCategoriess edges.
  """
  edges: [KpiCategoryEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A kpiCategoriess edge in a connection.
"""
type KpiCategoryEdge {
  """
  The kpiCategoriess at the end of the edge.
  """
  node: KpiCategory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}


"""
Properties by which Threshold connections can be ordered.
"""
enum ThresholdOrderField {
  """
  Order Threshold by name.
  """
  NAME

  """
  Order Threshold by creation time.
  """
  CREATED_AT

  """
  Order Threshold by update time.
  """
  UPDATED_AT
}

"""
Ordering options for Threshold connections.
"""
input ThresholdOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order Threshold by.
  """
  field: ThresholdOrderField
}

"""
A connection to a list of Threshold.
"""
type ThresholdConnection {
  """
  Total Threshold of projects in all pages.
  """
  totalCount: Int!
  """
  A list of Threshold edges.
  """
  edges: [ThresholdEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A Threshold edge in a connection.
"""
type ThresholdEdge {
  """
  The Threshold at the end of the edge.
  """
  node: Threshold
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}


"""
Properties by which AlarmFilter connections can be ordered.
"""
enum AlarmFilterOrderField {
  """
  Order AlarmFilter by name.
  """
  NAME

  """
  Order AlarmFilter by creation time.
  """
  CREATED_AT

  """
  Order AlarmFilter by update time.
  """
  UPDATED_AT
}

"""
Ordering options for AlarmFilter connections.
"""
input AlarmFilterOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order AlarmFilter by.
  """
  field: AlarmFilterOrderField
}

"""
A connection to a list of AlarmFilter.
"""
type AlarmFilterConnection {
  """
  Total AlarmFilter of projects in all pages.
  """
  totalCount: Int!
  """
  A list of AlarmFilter edges.
  """
  edges: [AlarmFilterEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A AlarmFilter edge in a connection.
"""
type AlarmFilterEdge {
  """
  The AlarmFilter at the end of the edge.
  """
  node: AlarmFilter
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}


"""
Properties by which domains connections can be ordered.
"""
enum DomainOrderField {
  """
  Order domains by name.
  """
  NAME

  """
  Order domains by creation time.
  """
  CREATED_AT

  """
  Order domains by update time.
  """
  UPDATED_AT
}

"""
Ordering options for domains connections.
"""
input DomainOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order domains by.
  """
  field: DomainOrderField
}

"""
A connection to a list of domains.
"""
type DomainConnection {
  """
  Total domains of projects in all pages.
  """
  totalCount: Int!
  """
  A list of domains edges.
  """
  edges: [DomainEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A domains edge in a connection.
"""
type DomainEdge {
  """
  The domains at the end of the edge.
  """
  node: Domain
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
Properties by which vendors connections can be ordered.
"""
enum VendorOrderField {
  """
  Order vendors by name.
  """
  NAME

  """
  Order vendors by creation time.
  """
  CREATED_AT

  """
  Order vendors by update time.
  """
  UPDATED_AT
}

"""
Ordering options for vendors connections.
"""
input VendorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order vendors by.
  """
  field: VendorOrderField
}

"""
A connection to a list of vendors.
"""
type VendorConnection {
  """
  Total vendors of projects in all pages.
  """
  totalCount: Int!
  """
  A list of vendors edges.
  """
  edges: [VendorEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A vendors edge in a connection.
"""
type VendorEdge {
  """
  The vendors at the end of the edge.
  """
  node: Vendor
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
Properties by which counterFamilies connections can be ordered.
"""
enum CounterFamilyOrderField {
  """
  Order counterFamilies by name.
  """
  NAME

  """
  Order counterFamilies by creation time.
  """
  CREATED_AT

  """
  Order counterFamilies by update time.
  """
  UPDATED_AT
}

"""
Ordering options for counterFamilies connections.
"""
input CounterFamilyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order counterFamilies by.
  """
  field: CounterFamilyOrderField
}

"""
A connection to a list of counterFamilies.
"""
type CounterFamilyConnection {
  """
  Total counterFamilies of projects in all pages.
  """
  totalCount: Int!
  """
  A list of counterFamilies edges.
  """
  edges: [CounterFamilyEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A counterFamilies edge in a connection.
"""
type CounterFamilyEdge {
  """
  The counterFamilies at the end of the edge.
  """
  node: CounterFamily
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
Properties by which ruleTypes connections can be ordered.
"""
enum RuleTypeOrderField {
  """
  Order ruleTypes by name.
  """
  NAME

  """
  Order ruleTypes by creation time.
  """
  CREATED_AT

  """
  Order ruleTypes by update time.
  """
  UPDATED_AT
}

"""
Ordering options for ruleTypes connections.
"""
input RuleTypeOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order ruleTypes by.
  """
  field: RuleTypeOrderField
}

"""
A connection to a list of ruleTypes.
"""
type RuleTypeConnection {
  """
  Total ruleTypes of projects in all pages.
  """
  totalCount: Int!
  """
  A list of ruleTypes edges.
  """
  edges: [RuleTypeEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A ruleTypes edge in a connection.
"""
type RuleTypeEdge {
  """
  The ruleTypes at the end of the edge.
  """
  node: RuleType
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
Properties by which eventSeverities connections can be ordered.
"""
enum EventSeverityOrderField {
  """
  Order eventSeverities by name.
  """
  NAME

  """
  Order eventSeverities by creation time.
  """
  CREATED_AT

  """
  Order eventSeverities by update time.
  """
  UPDATED_AT
}

"""
Ordering options for eventSeverities connections.
"""
input EventSeverityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order eventSeverities by.
  """
  field: EventSeverityOrderField
}

"""
A connection to a list of eventSeverities.
"""
type EventSeverityConnection {
  """
  Total eventSeverities of projects in all pages.
  """
  totalCount: Int!
  """
  A list of eventSeverities edges.
  """
  edges: [EventSeverityEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A eventSeverities edge in a connection.
"""
type EventSeverityEdge {
  """
  The eventSeverities at the end of the edge.
  """
  node: EventSeverity
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
Properties by which comparator connections can be ordered.
"""
enum ComparatorOrderField {
  """
  Order comparator by name.
  """
  NAME

  """
  Order comparator by creation time.
  """
  CREATED_AT

  """
  Order comparator by update time.
  """
  UPDATED_AT
}

"""
Ordering options for comparator connections.
"""
input ComparatorOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order comparator by.
  """
  field: ComparatorOrderField
}

"""
A connection to a list of comparator.
"""
type ComparatorConnection {
  """
  Total comparator of projects in all pages.
  """
  totalCount: Int!
  """
  A list of comparator edges.
  """
  edges: [ComparatorEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A comparator edge in a connection.
"""
type ComparatorEdge {
  """
  The comparator at the end of the edge.
  """
  node: Comparator
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
Properties by which alarmStatus connections can be ordered.
"""
enum AlarmStatusOrderField {
  """
  Order alarmStatus by name.
  """
  NAME

  """
  Order alarmStatus by creation time.
  """
  CREATED_AT

  """
  Order alarmStatus by update time.
  """
  UPDATED_AT
}

"""
Ordering options for alarmStatus connections.
"""
input AlarmStatusOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order alarmStatus by.
  """
  field: AlarmStatusOrderField
}

"""
A connection to a list of alarmStatus.
"""
type AlarmStatusConnection {
  """
  Total alarmStatus of projects in all pages.
  """
  totalCount: Int!
  """
  A list of alarmStatus edges.
  """
  edges: [AlarmStatusEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A alarmStatus edge in a connection.
"""
type AlarmStatusEdge {
  """
  The alarmStatus at the end of the edge.
  """
  node: AlarmStatus
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
Properties by which Kqi connections can be ordered.
"""
enum KqiOrderField {
  """
  Order Kqi by name.
  """
  NAME

  """
  Order Kqi by creation time.
  """
  CREATED_AT

  """
  Order Kqi by update time.
  """
  UPDATED_AT
}

"""
Ordering options for Kqi connections.
"""
input KqiOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order Kqi by.
  """
  field: KqiOrderField
}

"""
A connection to a list of Kqi.
"""
type KqiConnection {
  """
  Total Kqi of projects in all pages.
  """
  totalCount: Int!
  """
  A list of Kqi edges.
  """
  edges: [KqiEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A Kqi edge in a connection.
"""
type KqiEdge {
  """
  The Kqi at the end of the edge.
  """
  node: Kqi
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
################################ conection Organization ###############################################
"""
Properties by which Organization connections can be ordered.
"""
enum OrganizationOrderField {
  """
  Order Organization by name.
  """
  NAME

  """
  Order Organization by creation time.
  """
  CREATED_AT

  """
  Order Organization by update time.
  """
  UPDATED_AT
}

"""
Ordering options for Organization connections.
"""
input OrganizationOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order Organization by.
  """
  field: OrganizationOrderField
}

"""
A connection to a list of Organization.
"""
type OrganizationConnection {
  """
  Total Organization of projects in all pages.
  """
  totalCount: Int!
  """
  A list of Organization edges.
  """
  edges: [OrganizationEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A Organization edge in a connection.
"""
type OrganizationEdge {
  """
  The Organization at the end of the edge.
  """
  node: Organization
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

################################ conection recommendations ###############################################
"""
Properties by which RecPropertyCategoryNodeommendations connections can be ordered.
"""
enum RecommendationsOrderField {
  """
  Order Recommendations by name.
  """
  NAME

  """
  Order Recommendations by creation time.
  """
  CREATED_AT

  """
  Order Recommendations by update time.
  """
  UPDATED_AT
}

"""
Ordering options for Recommendations connections.
"""
input RecommendationsOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order Recommendations by.
  """
  field: RecommendationsOrderField
}

"""
A connection to a list of Recommendations.
"""
type RecommendationsConnection {
  """
  Total Recommendations of projects in all pages.
  """
  totalCount: Int!
  """
  A list of Recommendations edges.
  """
  edges: [RecommendationsEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A Recommendations edge in a connection.
"""
type RecommendationsEdge {
  """
  The Recommendations at the end of the edge.
  """
  node: Recommendations
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

################################ conection recommendationsSources ###############################################
"""
Properties by which RecommendationsSources connections can be ordered.
"""
enum RecommendationsSourcesOrderField {
  """
  Order RecommendationsSources by name.
  """
  NAME

  """
  Order RecommendationsSources by creation time.
  """
  CREATED_AT

  """
  Order RecommendationsSources by update time.
  """
  UPDATED_AT
}

"""
Ordering options for RecommendationsSources connections.
"""
input RecommendationsSourcesOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order RecommendationsSources by.
  """
  field: RecommendationsSourcesOrderField
}

"""
A connection to a list of RecommendationsSources.
"""
type RecommendationsSourcesConnection {
  """
  Total RecommendationsSources of projects in all pages.
  """
  totalCount: Int!
  """
  A list of RecommendationsSources edges.
  """
  edges: [RecommendationsSourcesEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A RecommendationsSources edge in a connection.
"""
type RecommendationsSourcesEdge {
  """
  The RecommendationsSources at the end of the edge.
  """
  node: RecommendationsSources
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

################################ conection recommendationsCategory ###############################################
"""
Properties by which RecommendationsCategory connections can be ordered.
"""
enum RecommendationsCategoryOrderField {
  """
  Order RecommendationsCategory by name.
  """
  NAME

  """
  Order RecommendationsCategory by creation time.
  """
  CREATED_AT

  """
  Order RecommendationsCategory by update time.
  """
  UPDATED_AT
}

"""
Ordering options for RecommendationsCategory connections.
"""
input RecommendationsCategoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order RecommendationsCategory by.
  """
  field: RecommendationsCategoryOrderField
}

"""
A connection to a list of RecommendationsCategory.
"""
type RecommendationsCategoryConnection {
  """
  Total RecommendationsCategory of projects in all pages.
  """
  totalCount: Int!
  """
  A list of RecommendationsCategory edges.
  """
  edges: [RecommendationsCategoryEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A RecommendationsCategory edge in a connection.
"""
type RecommendationsCategoryEdge {
  """
  The RecommendationsCategory at the end of the edge.
  """
  node: RecommendationsCategory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
Properties by which kqi category connections can be ordered.
""" 
enum KqiCategoryOrderField {
  """
  Order kqi category by name.
  """
  NAME

  """
  Order kqi category by creation time.
  """
  CREATED_AT

  """
  Order kqi category by update time.
  """
  UPDATED_AT
}

"""
Ordering options for kqi category connections.
"""
input KqiCategoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order kqi category by.
  """
  field: KqiCategoryOrderField
}

"""
A connection to a list of kqi category.
"""
type KqiCategoryConnection {
  """
  Total kqi category of projects in all pages.
  """
  totalCount: Int!
  """
  A list of kqi category edges.
  """
  edges: [KqiCategoryEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A kqi category edge in a connection.
"""
type KqiCategoryEdge {
  """
  The kqi category at the end of the edge.
  """
  node: KqiCategory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
Properties by which kqi perspective connections can be ordered.
""" 
enum KqiPerspectiveOrderField {
  """
  Order kqi perspective by name.
  """
  NAME

  """
  Order kqi perspective by creation time.
  """
  CREATED_AT

  """
  Order kqi perspective by update time.
  """
  UPDATED_AT
}

"""
Ordering options for kqi perspective connections.
"""
input KqiPerspectiveOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order kqi perspective by.
  """
  field: KqiPerspectiveOrderField
}

"""
A connection to a list of kqi perspective.
"""
type KqiPerspectiveConnection {
  """
  Total kqi perspective of projects in all pages.
  """
  totalCount: Int!
  """
  A list of kqi perspective edges.
  """
  edges: [KqiPerspectiveEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A kqi perspective edge in a connection.
"""
type KqiPerspectiveEdge {
  """
  The kqi perspective at the end of the edge.
  """
  node: KqiPerspective
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
Properties by which kqi temporal frequency connections can be ordered.
""" 
enum KqiTemporalFrequencyOrderField {
  """
  Order kqi temporal frequency by name.
  """
  NAME

  """
  Order kqi temporal frequency by creation time.
  """
  CREATED_AT

  """
  Order kqi temporal frequency by update time.
  """
  UPDATED_AT
}

"""
Ordering options for kqi temporal frequency connections.
"""
input KqiTemporalFrequencyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order kqi temporal frequency by.
  """
  field: KqiTemporalFrequencyOrderField
}

"""
A connection to a list of kqi temporal frequency.
"""
type KqiTemporalFrequencyConnection {
  """
  Total kqi temporal frequency of projects in all pages.
  """
  totalCount: Int!
  """
  A list of kqi temporal frequency edges.
  """
  edges: [KqiTemporalFrequencyEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A kqi temporal frequency edge in a connection.
"""
type KqiTemporalFrequencyEdge {
  """
  The kqi temporal frequency at the end of the edge.
  """
  node: KqiTemporalFrequency
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
Properties by which kqi source connections can be ordered.
""" 
enum KqiSourceOrderField {
  """
  Order kqi source by name.
  """
  NAME

  """
  Order kqi source by creation time.
  """
  CREATED_AT

  """
  Order kqi source by update time.
  """
  UPDATED_AT
}

"""
Ordering options for kqi source connections.
"""
input KqiSourceOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order kqi source by.
  """
  field: KqiSourceOrderField
}

"""
A connection to a list of kqi source.
"""
type KqiSourceConnection {
  """
  Total kqi source of projects in all pages.
  """
  totalCount: Int!
  """
  A list of kqi source edges.
  """
  edges: [KqiSourceEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A kqi source edge in a connection.
"""
type KqiSourceEdge {
  """
  The kqi source at the end of the edge.
  """
  node: KqiSource
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

"""
Properties by which kqi target connections can be ordered.
""" 
enum KqiTargetOrderField {
  """
  Order kqi target by name.
  """
  NAME

  """
  Order kqi target by creation time.
  """
  CREATED_AT

  """
  Order kqi target by update time.
  """
  UPDATED_AT
}

"""
Ordering options for kqi target connections.
"""
input KqiTargetOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order kqi target by.
  """
  field: KqiTargetOrderField
}

"""
A connection to a list of kqi target.
"""
type KqiTargetConnection {
  """
  Total kqi target of projects in all pages.
  """
  totalCount: Int!
  """
  A list of kqi target edges.
  """
  edges: [KqiTargetEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A kqi target edge in a connection.
"""
type KqiTargetEdge {
  """
  The kqi target at the end of the edge.
  """
  node: KqiTarget
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Properties by which formulas connections can be ordered.
"""
enum FormulaOrderField {
  """
  Order formulas by name.
  """
  NAME

  """
  Order formulas by creation time.
  """
  CREATED_AT

  """
  Order formulas by update time.
  """
  UPDATED_AT
}

"""
Ordering options for formulas connections.
"""
input FormulaOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order formulas by.
  """
  field: FormulaOrderField
}

"""
A connection to a list of formulas.
"""
type FormulaConnection {
  """
  Total formulas of projects in all pages.
  """
  totalCount: Int!
  """
  A list of formulas edges.
  """
  edges: [FormulaEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A formulas edge in a connection.
"""
type FormulaEdge {
  """
  The formulas at the end of the edge.
  """
  node: Formula
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Properties by which techs connections can be ordered.
"""
enum TechOrderField {
  """
  Order techs by name.
  """
  NAME

  """
  Order techs by creation time.
  """
  CREATED_AT

  """
  Order techs by update time.
  """
  UPDATED_AT
}

"""
Ordering options for techs connections.
"""
input TechOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order techs by.
  """
  field: TechOrderField
}

"""
A connection to a list of techs.
"""
type TechConnection {
  """
  Total techs of projects in all pages.
  """
  totalCount: Int!
  """
  A list of techs edges.
  """
  edges: [TechEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A techs edge in a connection.
"""
type TechEdge {
  """
  The techs at the end of the edge.
  """
  node: Tech
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}


"""
Properties by which network types connections can be ordered.
"""
enum NetworkTypeOrderField {
  """
  Order network types by name.
  """
  NAME

  """
  Order network types by creation time.
  """
  CREATED_AT

  """
  Order network types by update time.
  """
  UPDATED_AT
}

"""
Ordering options for network types connections.
"""
input NetworkTypeOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!

  """
  The field to order network types by.
  """
  field: NetworkTypeOrderField
}

"""
A connection to a list of network types.
"""
type NetworkTypeConnection {
  """
  Total network types of projects in all pages.
  """
  totalCount: Int!
  """
  A list of network types edges.
  """
  edges: [NetworkTypeEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A network types edge in a connection.
"""
type NetworkTypeEdge {
  """
  The network types at the end of the edge.
  """
  node: NetworkType
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

enum ProjectPriority
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/project.Priority"
  ) {
  URGENT
  HIGH
  MEDIUM
  LOW
  NONE
}

type Project implements Node & NamedNode {
  id: ID!
  name: String! @stringValue(minLength: 1)
  description: String
  priority: ProjectPriority!
  createdBy: User @goField(name: "Creator")
  createTime: Time!
  type: ProjectType!
  template: ProjectTemplate
  location: Location
  workOrders: [WorkOrder!]!
  numberOfWorkOrders: Int!
  properties: [Property!]!
  comments: [Comment]!
}

input AddProjectInput {
  name: String! @stringValue(minLength: 1)
  description: String
  priority: ProjectPriority
  creatorId: ID
  type: ID!
  location: ID
  properties: [PropertyInput!]
}

input EditProjectInput {
  id: ID!
  name: String! @stringValue(minLength: 1)
  description: String
  priority: ProjectPriority
  creatorId: ID
  type: ID!
  location: ID
  properties: [PropertyInput!]
}

"""
operators to filter search by
"""
enum FilterOperator
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/schema/enum.FilterOperator"
  ) {
  IS
  IS_NIL
  IS_NIL_OR_DATE_GREATER_OR_EQUAL_THAN
  CONTAINS
  IS_ONE_OF
  IS_NOT_ONE_OF
  DATE_GREATER_THAN
  DATE_LESS_THAN
  DATE_GREATER_OR_EQUAL_THAN
  DATE_LESS_OR_EQUAL_THAN
}

"""
what type of equipment we filter about
"""
enum EquipmentFilterType
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/schema/enum.EquipmentFilterType"
  ) {
  EQUIP_INST_NAME
  EQUIP_INST_EXTERNAL_ID
  PROPERTY
  LOCATION_INST
  LOCATION_INST_EXTERNAL_ID
  EQUIPMENT_TYPE
}

input EquipmentFilterInput
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/exporter/models.EquipmentFilterInput"
  ) {
  filterType: EquipmentFilterType!
  operator: FilterOperator!
  stringValue: String
  propertyValue: PropertyTypeInput
  idSet: [ID!]
  stringSet: [String!]
  maxDepth: Int = 5
}

type PortSearchResult
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/exporter/models.PortSearchResult"
  ) {
  ports: [EquipmentPort]!
  count: Int!
}

type LinkSearchResult
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/exporter/models.LinkSearchResult"
  ) {
  links: [Link]!
  count: Int!
}

type LocationSearchResult
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/exporter/models.LocationSearchResult"
  ) {
  locations: [Location]!
  count: Int!
}

type ServiceSearchResult
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/exporter/models.ServiceSearchResult"
  ) {
  services: [Service]!
  count: Int!
}

type UserSearchResult {
  users: [User]!
  count: Int!
}

type WorkOrderSearchResult
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/exporter/models.WorkOrderSearchResult"
  ) {
  workOrders: [WorkOrder]!
  count: Int!
}

type PermissionsPolicySearchResult {
  permissionsPolicies: [PermissionsPolicy]!
  count: Int!
}

type UsersGroupSearchResult {
  usersGroups: [UsersGroup]!
  count: Int!
}

"""
what filters should we apply on ports
"""
enum PortFilterType
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/schema/enum.PortFilterType"
  ) {
  PORT_DEF
  PORT_INST_HAS_LINK
  PORT_INST_EQUIPMENT
  LOCATION_INST
  LOCATION_INST_EXTERNAL_ID
  PROPERTY
  SERVICE_INST
}

"""
what filters should we apply on links
"""
enum LinkFilterType
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/schema/enum.LinkFilterType"
  ) {
  LINK_FUTURE_STATUS
  EQUIPMENT_TYPE
  LOCATION_INST
  LOCATION_INST_EXTERNAL_ID
  PROPERTY
  SERVICE_INST
  EQUIPMENT_INST
}

"""
what filters should we apply on locations
"""
enum LocationFilterType
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/schema/enum.LocationFilterType"
  ) {
  LOCATION_INST
  LOCATION_INST_NAME
  LOCATION_INST_EXTERNAL_ID
  LOCATION_TYPE
  LOCATION_INST_HAS_EQUIPMENT
  PROPERTY
}

"""
what filters should we apply on services
"""
enum ServiceFilterType
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/schema/enum.ServiceFilterType"
  ) {
  SERVICE_INST_NAME
  SERVICE_STATUS
  SERVICE_DISCOVERY_METHOD
  SERVICE_TYPE
  SERVICE_INST_EXTERNAL_ID
  SERVICE_INST_CUSTOMER_NAME
  PROPERTY
  LOCATION_INST
  LOCATION_INST_EXTERNAL_ID
  EQUIPMENT_IN_SERVICE
}

"""
what filters should we apply on users
"""
enum UserFilterType {
  USER_NAME
  USER_STATUS
  USER_ORGANIZATION
}

"""
what filters should we apply on permissionsPolicy
"""
enum PermissionsPolicyFilterType {
  PERMISSIONS_POLICY_NAME
}

"""
what filters should we apply on usersGroups
"""
enum UsersGroupFilterType {
  GROUP_NAME
}

input PortFilterInput
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/exporter/models.PortFilterInput"
  ) {
  filterType: PortFilterType!
  operator: FilterOperator!
  boolValue: Boolean
  stringValue: String
  propertyValue: PropertyTypeInput
  idSet: [ID!]
  stringSet: [String!]
  maxDepth: Int = 5
}

input LinkFilterInput
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/exporter/models.LinkFilterInput"
  ) {
  filterType: LinkFilterType!
  operator: FilterOperator!
  stringValue: String
  propertyValue: PropertyTypeInput
  idSet: [ID!]
  stringSet: [String!]
  maxDepth: Int = 5
}

input LocationFilterInput
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/exporter/models.LocationFilterInput"
  ) {
  filterType: LocationFilterType!
  operator: FilterOperator!
  boolValue: Boolean
  stringValue: String
  propertyValue: PropertyTypeInput
  idSet: [ID!]
  stringSet: [String!]
  maxDepth: Int = 5
}

input ServiceFilterInput
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/exporter/models.ServiceFilterInput"
  ) {
  filterType: ServiceFilterType!
  operator: FilterOperator!
  stringValue: String
  propertyValue: PropertyTypeInput
  idSet: [ID!]
  stringSet: [String!]
  maxDepth: Int = 5
}

input UserFilterInput {
  filterType: UserFilterType!
  operator: FilterOperator!
  stringValue: String
  propertyValue: PropertyTypeInput
  statusValue: UserStatus
  idSet: [ID!]
  stringSet: [String!]
  maxDepth: Int = 5
}

input PermissionsPolicyFilterInput {
  filterType: PermissionsPolicyFilterType!
  operator: FilterOperator!
  stringValue: String
  maxDepth: Int = 5
}

input UsersGroupFilterInput {
  filterType: UsersGroupFilterType!
  operator: FilterOperator!
  stringValue: String
  maxDepth: Int = 5
}

"""
what type of work order we filter about
"""
enum WorkOrderFilterType
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/schema/enum.WorkOrderFilterType"
  ) {
  WORK_ORDER_NAME
  WORK_ORDER_STATUS
  WORK_ORDER_OWNED_BY
  WORK_ORDER_TYPE
  WORK_ORDER_CREATION_DATE
  WORK_ORDER_CLOSE_DATE
  WORK_ORDER_ASSIGNED_TO
  WORK_ORDER_LOCATION_INST
  WORK_ORDER_PRIORITY
  LOCATION_INST
  LOCATION_INST_EXTERNAL_ID
  WORK_ORDER_ORGANIZATION
}

"""
what type of properties category we filter about
"""
enum PropertiesByCategoryFilterType
@goModel(
  model: "github.com/facebookincubator/symphony/pkg/ent/schema/enum.PropertiesByCategoryFilterType"
) {
  PROPERTY_CATEGORY_ID
  LOCATION_ID
  PROPERTY_CATEGORY_IS_NIL
}

input WorkOrderFilterInput
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/exporter/models.WorkOrderFilterInput"
  ) {
  filterType: WorkOrderFilterType!
  operator: FilterOperator!
  stringValue: String
  idSet: [ID!]
  stringSet: [String!]
  propertyValue: PropertyTypeInput
  timeValue: Time
  maxDepth: Int = 5
}

input PropertiesByCategoryFilterInput
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/exporter/models.PropertiesByCategoryFilterInput"
  ) {
  filterType: PropertiesByCategoryFilterType!
  operator: FilterOperator!
  stringValue: String
  intValue: Int
  idSet: [ID!]
  stringSet: [String!]
}

enum ProjectFilterType {
  PROJECT_NAME
  PROJECT_OWNED_BY
  PROJECT_TYPE
  LOCATION_INST
  PROJECT_PRIORITY
  PROPERTY
  PROJECT_CREATION_DATE
}

input ProjectFilterInput {
  filterType: ProjectFilterType!
  operator: FilterOperator!
  stringValue: String
  idSet: [ID!]
  maxDepth: Int = 5
  stringSet: [String!]
  propertyValue: PropertyTypeInput
  timeValue: Time
}

enum CounterFilterType {
  NAME
  EXTERNALID
  NETWORKMANAGERSYSTEM
  COUNTERFAMILY
  VENDORFK
}

input CounterFilterInput {
  filterType: CounterFilterType!
  operator: FilterOperator!
  stringValue: String
  idSet: [ID!]
  maxDepth: Int = 5
  stringSet: [String!]
  propertyValue: CounterFamilyInput
}

enum KpiFilterType {
  NAME
}

input KpiFilterInput {
  filterType: KpiFilterType!
  operator: FilterOperator!
  stringValue: String
  idSet: [ID!]
  maxDepth: Int = 5
  stringSet: [String!]
}
enum FormulaFilterType {  
  TEXTFORMULA  
  STATUS
  
}

input FormulaFilterInput {
  filterType: FormulaFilterType!
  operator: FilterOperator!
  stringValue: String
  idSet: [ID!]
  maxDepth: Int = 5
  stringSet: [String!]
  boolValue: Boolean
  
}

enum TechFilterType {
  NAME
  
}

input TechFilterInput {
  filterType: TechFilterType!
  operator: FilterOperator!
  stringValue: String
  idSet: [ID!]
  maxDepth: Int = 5
  stringSet: [String!]
  
}


"""
A connection to a list of customers.
"""
type CustomerConnection {
  """
  Total count of customers in all pages.
  """
  totalCount: Int!
  """
  A list of customer edges.
  """
  edges: [CustomerEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A customer edge in a connection.
"""
type CustomerEdge {
  """
  The customer at the end of the edge.
  """
  node: Customer
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

type Customer implements Node {
  id: ID!
  name: String!
  externalId: String
}

type ServiceEndpoint implements Node {
  id: ID!
  port: EquipmentPort
  equipment: Equipment!
  service: Service!
  definition: ServiceEndpointDefinition!
}

"""
Model for properties group by property categories
"""
type PropertiesByCategories
{
  id: ID
  name: String
  properties: [Property]
  propertyType: [PropertyType]
}

"""
Modeling a specific service: e.g. a L2 VPN instance.
"""
type Service implements Node & NamedNode {
  id: ID!
  name: String!
  externalId: String
  status: ServiceStatus!
  customer: Customer
  serviceType: ServiceType! @goField(name: "Type")
  upstream: [Service]!
  downstream: [Service]!
  properties: [Property]!
  endpoints: [ServiceEndpoint]!
  links: [Link]!
  ports: [EquipmentPort]!
  topology: NetworkTopology!
}

type ServiceEndpointDefinition implements Node {
  id: ID!
  index: Int!
  role: String
  name: String!
  endpoints: [ServiceEndpoint]!
  equipmentType: EquipmentType!
  serviceType: ServiceType!
}

"""
Service type schema: e.g. L2 VPN.
"""
type ServiceType implements Node {
  id: ID!
  name: String!
  isDeleted: Boolean!
  hasCustomer: Boolean!
  propertyTypes: [PropertyType]!
  services: [Service]!
  numberOfServices: Int!
  endpointDefinitions: [ServiceEndpointDefinition!]!
  discoveryMethod: DiscoveryMethod!
}

directive @uniqueField(
  typ: String!
  field: String!
) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

input LocationTypeIndex {
  locationTypeID: ID!
  index: Int!
}

enum DiscoveryMethod
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/servicetype.DiscoveryMethod"
  ) {
  MANUAL
  INVENTORY
}

input ServiceTypeCreateData {
  name: String!
  hasCustomer: Boolean!
  properties: [PropertyTypeInput]
    @uniqueField(typ: "property type", field: "Name")
  endpoints: [ServiceEndpointDefinitionInput]
  discoveryMethod: DiscoveryMethod
}

input ServiceTypeEditData {
  id: ID!
  name: String!
  hasCustomer: Boolean!
  properties: [PropertyTypeInput]
    @uniqueField(typ: "property type", field: "Name")
  endpoints: [ServiceEndpointDefinitionInput]
}

input ServiceCreateData {
  name: String!
  externalId: String
  status: ServiceStatus! = PENDING
  serviceTypeId: ID!
  customerId: ID
  upstreamServiceIds: [ID!]!
  properties: [PropertyInput]
}

input ServiceEditData {
  id: ID!
  name: String
  externalId: String
  status: ServiceStatus
  customerId: ID
  upstreamServiceIds: [ID!]
  properties: [PropertyInput]
}

input AddServiceEndpointInput {
  id: ID!
  portId: ID
  equipmentID: ID!
  definition: ID!
}

input AddBulkServiceLinksAndPortsInput {
  id: ID!
  portIds: [ID!]
  linkIds: [ID!]
}

input ServiceEndpointDefinitionInput {
  id: ID
  name: String!
  role: String
  index: Int!
  equipmentTypeID: ID!
}

input SurveyCreateData {
  name: String!
  ownerName: String
  creationTimestamp: Int
  completionTimestamp: Int!
  status: SurveyStatus
  locationID: ID!
  surveyResponses: [SurveyQuestionResponse!]!
}

enum SurveyStatus {
  PLANNED
  INPROGRESS
  COMPLETED
}

type Survey implements Node {
  id: ID!
  name: String!
  ownerName: String
  creationTimestamp: Int
  completionTimestamp: Int!
  locationID: ID!
  sourceFile: File
  surveyResponses: [SurveyQuestion]! @goField(name: "Questions")
}

input AddFloorPlanInput {
  name: String!
  locationID: ID!
  image: AddImageInput!
  referenceX: Int!
  referenceY: Int!
  latitude: Float!
  longitude: Float!
  referencePoint1X: Int!
  referencePoint1Y: Int!
  referencePoint2X: Int!
  referencePoint2Y: Int!
  scaleInMeters: Float!
}

type FloorPlan implements Node {
  id: ID!
  name: String!
  locationID: ID!
  image: File!
  referencePoint: FloorPlanReferencePoint!
  scale: FloorPlanScale!
}

type FloorPlanScale {
  referencePoint1X: Int!
  referencePoint1Y: Int!
  referencePoint2X: Int!
  referencePoint2Y: Int!
  scaleInMeters: Float!
}

type FloorPlanReferencePoint {
  x: Int!
  y: Int!
  latitude: Float!
  longitude: Float!
}

input FileInput {
  id: ID
  fileName: String!
  sizeInBytes: Int
  modificationTime: Int
  uploadTime: Int
  fileType: FileType
  mimeType: String
  storeKey: String!
  annotation: String
}

input SurveyTemplateQuestionInput {
  id: ID
  questionTitle: String!
  questionDescription: String!
  questionType: SurveyQuestionType!
  index: Int!
}

input SurveyTemplateCategoryInput {
  id: ID
  categoryTitle: String!
  categoryDescription: String!
  surveyTemplateQuestions: [SurveyTemplateQuestionInput]
}

type SurveyTemplateQuestion implements Node {
  id: ID!
  questionTitle: String!
  questionDescription: String!
  questionType: SurveyQuestionType!
  index: Int!
}

type SurveyTemplateCategory implements Node {
  id: ID!
  categoryTitle: String!
  categoryDescription: String!
  surveyTemplateQuestions: [SurveyTemplateQuestion]
}

input SurveyQuestionResponse {
  formName: String
  formDescription: String
  formIndex: Int!
  questionFormat: SurveyQuestionType
  questionText: String!
  questionIndex: Int!
  boolData: Boolean
  emailData: String
  latitude: Float
  longitude: Float
  locationAccuracy: Float
  altitude: Float
  phoneData: String
  textData: String
  floatData: Float
  intData: Int
  dateData: Int
  photoData: FileInput
  wifiData: [SurveyWiFiScanData!]
  cellData: [SurveyCellScanData!]
  imagesData: [FileInput!]
}

type SurveyQuestion implements Node {
  id: ID!
  formName: String
  formDescription: String
  formIndex: Int!
  questionFormat: SurveyQuestionType
  questionText: String!
  questionIndex: Int!
  boolData: Boolean
  emailData: String
  latitude: Float
  longitude: Float
  locationAccuracy: Float
  altitude: Float
  phoneData: String
  textData: String
  floatData: Float
  intData: Int
  dateData: Int
  photoData: File
  wifiData: [SurveyWiFiScan]
  cellData: [SurveyCellScan]
  images: [File!]
}

enum SurveyQuestionType {
  BOOL
  EMAIL
  COORDS
  PHONE
  TEXT
  TEXTAREA
  PHOTO
  WIFI
  CELLULAR
  FLOAT
  INTEGER
  DATE
}

input SurveyWiFiScanData {
  timestamp: Int!
  frequency: Int!
  channel: Int!
  bssid: String!
  strength: Int!
  ssid: String
  band: String
  channelWidth: Int
  capabilities: String
  latitude: Float
  longitude: Float
  altitude: Float
  heading: Float
  rssi: Float
}

type SurveyWiFiScan implements Node {
  id: ID!
  timestamp: Int!
  frequency: Int!
  channel: Int!
  bssid: String!
  strength: Int!
  ssid: String
  band: String
  channelWidth: Int
  capabilities: String
  latitude: Float
  longitude: Float
  altitude: Float
  heading: Float
  rssi: Float
}

input SurveyCellScanData {
  networkType: CellularNetworkType!
  signalStrength: Int!
  timestamp: Int
  baseStationID: String
  networkID: String
  systemID: String
  cellID: String
  locationAreaCode: String
  mobileCountryCode: String
  mobileNetworkCode: String
  primaryScramblingCode: String
  operator: String
  arfcn: Int
  physicalCellID: String
  trackingAreaCode: String
  timingAdvance: Int
  earfcn: Int
  uarfcn: Int
  latitude: Float
  longitude: Float
  altitude: Float
  heading: Float
  rssi: Float
}

type SurveyCellScan implements Node {
  id: ID!
  networkType: CellularNetworkType!
  signalStrength: Int!
  timestamp: Int
  baseStationID: String
  networkID: String
  systemID: String
  cellID: String
  locationAreaCode: String
  mobileCountryCode: String
  mobileNetworkCode: String
  primaryScramblingCode: String
  operator: String
  arfcn: Int
  physicalCellID: String
  trackingAreaCode: String
  timingAdvance: Int
  earfcn: Int
  uarfcn: Int
  latitude: Float
  longitude: Float
  altitude: Float
  heading: Float
  rssi: Float
}

type EquipmentSearchResult
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/exporter/models.EquipmentSearchResult"
  ) {
  equipment: [Equipment]!
  count: Int!
}

enum CellularNetworkType
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/surveycellscan.NetworkType"
  ) {
  CDMA
  GSM
  LTE
  WCDMA
}

type PythonPackage {
  version: String!
  whlFileKey: String!
  uploadTime: Time!
  hasBreakingChange: Boolean!
}

type LatestPythonPackageResult {
  lastPythonPackage: PythonPackage
  lastBreakingPythonPackage: PythonPackage
}

input TechnicianWorkOrderCheckInInput {
  distanceMeters: Float
  checkInTime: Time
}

enum VariableType
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/schema/enum.VariableType"
  ) {
  STRING
  INT
  DATE
  WORK_ORDER
  WORK_ORDER_TYPE
  LOCATION
  PROJECT
  USER
}

enum VariableUsage
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/schema/enum.VariableUsage"
  ) {
  INPUT
  OUTPUT
  INPUT_AND_OUTPUT
}

type VariableDefinition
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/flowengine/flowschema.VariableDefinition"
  ) {
  key: String!
  name: String!
  type: VariableType!
  mandatory: Boolean!
  multipleValues: Boolean!
  choices: [String!]
  defaultValue: String
  usage: VariableUsage!
  nestedVariables(value: String!): [VariableDefinition!]!
}

input VariableDefinitionInput
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/flowengine/flowschema.VariableDefinition"
  ) {
  key: String!
  type: VariableType!
  mandatory: Boolean
  multipleValues: Boolean
  choices: [String!]
  defaultValue: String
}

type ActionType
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/flowengine/actions.ActionType"
  ) {
  id: ActionTypeId!
  description: String!
  variables: [VariableDefinition!]!
}

enum TriggerTypeId
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/flowengine/flowschema.TriggerTypeID"
  ) {
  work_order
}

enum ActionTypeId
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/flowengine/flowschema.ActionTypeID"
  ) {
  work_order
  update_inventory
  update_workforce
  worker
}

type TriggerType
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/flowengine/triggers.TriggerType"
  ) {
  id: TriggerTypeId!
  description: String!
  variables: [VariableDefinition!]!
}

# Block definitions

type Block implements Node {
  id: ID!
  cid: String!
  nextBlocks: [Block!]!
  prevBlocks: [Block!]!
  details: BlockDetails!
  inputParamDefinitions: [VariableDefinition!]!
  outputParamDefinitions: [VariableDefinition!]!
  uiRepresentation: BlockUIRepresentation
}

type BlockVariable
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/flowengine/flowschema.BlockVariable"
  ) {
  block: Block!
  type: VariableExpressionType!
  inputVariableDefinition: VariableDefinition
  inputPropertyTypeDefinition: PropertyType
  checkListItemDefinition: CheckListItemDefinition
}

input BlockVariableInput {
  blockCid: String!
  type: VariableExpressionType!
  variableDefinitionKey: String
  propertyTypeId: Int
  checkListItemDefinitionId: Int
}

"""
what type variableExpression should we apply
"""
enum VariableExpressionType
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/schema/enum.VariableExpressionType"
  ) {
  VariableDefinition
  PropertyTypeDefinition
  DecisionDefinition
  ChekListItemDefinition
}

type VariableExpression
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/flowengine/flowschema.VariableExpression"
  ) {
  type: VariableExpressionType!
  variableDefinition: VariableDefinition
  propertyTypeDefinition: PropertyType
  expression: String!
  blockVariables: [BlockVariable!]
}

input VariableExpressionInput {
  type: VariableExpressionType!
  variableDefinitionKey: String
  propertyTypeId: Int
  expression: String!
  blockVariables: [BlockVariableInput!]
}

type BlockUIRepresentation
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/flowengine/flowschema.BlockUIRepresentation"
  ) {
  name: String!
  xPosition: Int!
  yPosition: Int!
}

input BlockUIRepresentationInput
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/flowengine/flowschema.BlockUIRepresentation"
  ) {
  name: String!
  xPosition: Int!
  yPosition: Int!
}

enum EntryPointRole
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/flowengine/flowschema.EntryPointRole"
  ) {
  DEFAULT
}

enum ExitPointRole
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/flowengine/flowschema.ExitPointRole"
  ) {
  DEFAULT
  DECISION
}

type ExitPoint implements Node {
  id: ID!
  parentBlock: Block!
  cid: String
  nextEntryPoints: [EntryPoint!]!
  condition: VariableExpression
}

type EntryPoint implements Node {
  id: ID!
  parentBlock: Block!
  cid: String
  prevExitPoints: [ExitPoint!]!
}

type StartBlock {
  paramDefinitions: [VariableDefinition!]!
  exitPoint: ExitPoint!
}

type EndBlock {
  params: [VariableExpression!]!
  entryPoint: EntryPoint!
}

type DecisionRoute {
  exitPoint: ExitPoint
}

type DecisionBlock {
  entryPoint: EntryPoint!
  defaultExitPoint: ExitPoint!
  routes: [DecisionRoute!]!
}

type TrueFalseBlock {
  entryPoint: EntryPoint!
  trueExitPoint: ExitPoint!
  falseExitPoint: ExitPoint!
}

type SubflowBlock {
  flow: Flow
  params: [VariableExpression!]!
  entryPoint: EntryPoint!
  exitPoint: ExitPoint!
}

type GotoBlock {
  target: Block
  entryPoint: EntryPoint!
}

type TriggerBlock {
  triggerType: TriggerType!
  params: [VariableExpression!]!
  exitPoint: ExitPoint!
}

type ActionBlock {
  actionType: ActionType!
  params: [VariableExpression!]!
  entryPoint: EntryPoint!
  exitPoint: ExitPoint!
  workOrderType: WorkOrderType
  workerType: WorkerType
}

union BlockDetails =
    StartBlock
  | EndBlock
  | DecisionBlock
  | GotoBlock
  | SubflowBlock
  | TriggerBlock
  | ActionBlock
  | TrueFalseBlock

input StartBlockInput {
  cid: String!
  paramDefinitions: [VariableDefinitionInput!]!
  uiRepresentation: BlockUIRepresentationInput
}

input EndBlockInput {
  cid: String!
  params: [VariableExpressionInput!]!
  uiRepresentation: BlockUIRepresentationInput
}

input DecisionRouteInput {
  cid: String
  condition: VariableExpressionInput!
}

input DecisionBlockInput {
  cid: String!
  routes: [DecisionRouteInput!]
  uiRepresentation: BlockUIRepresentationInput
}

input TrueFalseBlockInput {
  cid: String!
  uiRepresentation: BlockUIRepresentationInput
}

input GotoBlockInput {
  cid: String!
  targetBlockCid: String
  uiRepresentation: BlockUIRepresentationInput
}

input SubflowBlockInput {
  cid: String!
  flowId: ID!
  params: [VariableExpressionInput!]!
  uiRepresentation: BlockUIRepresentationInput
}

input TriggerBlockInput {
  cid: String!
  triggerType: TriggerTypeId!
  params: [VariableExpressionInput!]!
  uiRepresentation: BlockUIRepresentationInput
}

input ActionBlockInput {
  cid: String!
  actionType: ActionTypeId!
  params: [VariableExpressionInput!]!
  uiRepresentation: BlockUIRepresentationInput
}

input ExitPointInput {
  role: ExitPointRole
  cid: String
}

input EntryPointInput {
  role: EntryPointRole
  cid: String
}

input ConnectorInput {
  sourceBlockCid: String!
  sourcePoint: ExitPointInput
  targetBlockCid: String!
  targetPoint: EntryPointInput
}

type Connector {
  source: ExitPoint!
  target: EntryPoint!
}

input ImportFlowDraftInput {
  id: ID!
  name: String!
  description: String
  endParamDefinitions: [VariableDefinitionInput!]!
  startBlock: StartBlockInput
  endBlocks: [EndBlockInput!]
  decisionBlocks: [DecisionBlockInput!]
  gotoBlocks: [GotoBlockInput!]
  subflowBlocks: [SubflowBlockInput!]
  triggerBlocks: [TriggerBlockInput!]
  actionBlocks: [ActionBlockInput!]
  trueFalseBlocks: [TrueFalseBlockInput!]
  connectors: [ConnectorInput!]
}

input EditBlockInput {
  id: ID!
  uiRepresentation: BlockUIRepresentationInput
}

# Flow Definitions

enum FlowStatus
  @goModel(model: "github.com/facebookincubator/symphony/pkg/ent/flow.Status") {
  PUBLISHED
  UNPUBLISHED
  ARCHIVED
}

enum FlowNewInstancesPolicy
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/flow.NewInstancesPolicy"
  ) {
  ENABLED
  DISABLED
}

type Flow implements Node {
  id: ID!
  name: String!
  description: String
  endParamDefinitions: [VariableDefinition!]!
  status: FlowStatus!
  newInstancesPolicy: FlowNewInstancesPolicy!
  blocks: [Block!]!
  connectors: [Connector!]!
  draft: FlowDraft
}

type FlowDraft implements Node {
  id: ID!
  name: String!
  description: String
  endParamDefinitions: [VariableDefinition!]!
  blocks: [Block!]!
  connectors: [Connector!]!
  sameAsFlow: Boolean!
}

"""
what filters should we apply on flow instances
"""
enum FlowInstanceFilterType {
  FLOW_INSTANCE_STATUS
  FLOW_INSTANCE_TYPE
  FLOW_INSTANCE_BSS_CODE
  FLOW_INSTANCE_SERVICE_INSTANCE_CODE
}

input FlowInstanceFilterInput {
  filterType: FlowInstanceFilterType!
  operator: FilterOperator!
  stringValue: String
  idSet: [ID!]
  stringSet: [String!]
  propertyValue: PropertyTypeInput
  timeValue: Time
  maxDepth: Int = 5
}

enum FlowInstanceStatus
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/flowinstance.Status"
  ) {
  IN_PROGRESS
  FAILED
  COMPLETED
  CANCELED
}

type FlowExecutionTemplate implements Node {
  id: ID!
  name: String!
  description: String
  blocks: [Block!]!
  connectors: [Connector!]!
}

enum BlockInstanceStatus
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/blockinstance.Status"
  ) {
  PENDING
  IN_PROGRESS
  FAILED
  COMPLETED
  WAITING
}

type VariableValue
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/flowengine/flowschema.VariableValue"
  ) {
  variableDefinitionKey: String!
  value: String!
}

type BlockInstance implements Node {
  id: ID!
  status: BlockInstanceStatus!
  inputs: [VariableValue!]!
  outputs: [VariableValue!]!
  failure_reason: String
  block: Block!
  startDate: Time!
  endDate: Time
}

input AddBlockInstanceInput {
  status: BlockInstanceStatus
  inputs: [VariableValueInput!]
  outputs: [VariableValueInput!]
  blockId: ID!
  startDate: Time!
}

input EditBlockInstanceInput {
  id: ID!
  status: BlockInstanceStatus
  inputs: [VariableValueInput!]
  outputs: [VariableValueInput!]
  failure_reason: String
  endDate: Time
}

type FlowInstance implements Node {
  id: ID!
  bssCode: String!
  serviceInstanceCode: String
  status: FlowInstanceStatus!
  template: FlowExecutionTemplate!
  blocks: [BlockInstance!]!
  startDate: Time!
  endDate: Time
}

input EditFlowInstanceInput {
  id: ID!
  serviceInstanceCode: String
  status: FlowInstanceStatus
  endDate: Time
}

input AddFlowDraftInput {
  name: String!
  description: String
  flowID: ID
  endParamDefinitions: [VariableDefinitionInput!]!
}

input PublishFlowInput {
  flowDraftID: ID!
  flowInstancesPolicy: FlowNewInstancesPolicy!
}

input VariableValueInput
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/flowengine/flowschema.VariableValue"
  ) {
  variableDefinitionKey: String!
  value: String!
}

input StartFlowInput {
  flowID: ID!
  bssCode: String!
  startDate: Time!
  params: [VariableValueInput]!
}

input TechnicianWorkOrderCheckOutInput {
  workOrderId: ID!
  reason: ClockOutReason!
  checkListCategories: [CheckListCategoryInput!]
  comment: String
  distanceMeters: Float
  checkOutTime: Time
}

"""
A connection to a list of worker types.
"""
type WorkerTypeConnection {
  """
  Total count of worker types in all pages.
  """
  totalCount: Int!
  """
  A list of worker type edges.
  """
  edges: [WorkerTypeEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An worker type edge in a connection.
"""
type WorkerTypeEdge {
  """
  The worker type at the end of the edge.
  """
  node: WorkerType
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}

type WorkerType implements Node {
  id: ID!
  name: String!
  description: String
  propertyTypes: [PropertyType]!
}

input AddWorkerTypeInput {
  name: String!
  description: String
  propertyTypes: [PropertyTypeInput!]
    @uniqueField(typ: "property type", field: "Name")
}

input EditWorkerTypeInput {
  id: ID!
  name: String!
  description: String
  propertyTypes: [PropertyTypeInput!]
    @uniqueField(typ: "property type", field: "Name")
}

type Query {
  """
  Fetches current viewer.
  """
  me: Viewer

  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  user(authID: String!): User
  actionType(id: ActionTypeId!): ActionType
  triggerType(id: TriggerTypeId!): TriggerType
  locationTypes(
    after: Cursor
    first: Int @numberValue(min: 0)
    before: Cursor
    last: Int @numberValue(min: 0)
  ): LocationTypeConnection
  documentCategories(
    """
    Filter by location type ID
    """
    locationTypeID: ID
    after: Cursor
    first: Int @numberValue(min: 0)
    before: Cursor
    last: Int @numberValue(min: 0)
  ): DocumentCategoryConnection
  """
  Fetches end to end path of links
  """
  endToEndPath(
    """
    find to end to end path containing this link
    """
    linkId: ID

    """
    find to end to end path containing this port
    """
    portId: ID
  ): EndToEndPath

  """
  A list of locations.
  """
  locations(
    """
    Filter to only root locations.
    """
    onlyTopLevel: Boolean

    """
    Filter to only locations under location types.
    """
    types: [ID!]

    """
    Filter location containing case insensitive name.
    """
    name: String

    """
    Filter by locations needing site survey.
    """
    needsSiteSurvey: Boolean

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int @numberValue(min: 0)

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int @numberValue(min: 0)

    """
    Ordering options for the returned locations.
    """
    orderBy: LocationOrder

    """
    Filtering options for the returned locations.
    """
    filterBy: [LocationFilterInput!]
  ): LocationConnection
  equipmentPortTypes(
    after: Cursor
    first: Int @numberValue(min: 0)
    before: Cursor
    last: Int @numberValue(min: 0)
  ): EquipmentPortTypeConnection!
  equipmentPortDefinitions(
    after: Cursor
    first: Int @numberValue(min: 0)
    before: Cursor
    last: Int @numberValue(min: 0)
  ): EquipmentPortDefinitionConnection!
  equipmentPorts(
    after: Cursor
    first: Int @numberValue(min: 0)
    before: Cursor
    last: Int @numberValue(min: 0)
    filterBy: [PortFilterInput!]
  ): EquipmentPortConnection!
  equipmentTypes(
    after: Cursor
    first: Int @numberValue(min: 0)
    before: Cursor
    last: Int @numberValue(min: 0)
  ): EquipmentTypeConnection!

  """
  A list of equipment.
  """
  equipments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int @numberValue(min: 0)

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int @numberValue(min: 0)

    """
    Ordering options for the returned equipment.
    """
    orderBy: EquipmentOrder

    """
    Filtering options for the returned equipment.
    """
    filterBy: [EquipmentFilterInput!]
  ): EquipmentConnection!
  serviceTypes(
    after: Cursor
    first: Int @numberValue(min: 0)
    before: Cursor
    last: Int @numberValue(min: 0)
  ): ServiceTypeConnection

  """
  A list of work orders.
  """
  workOrders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int @numberValue(min: 0)

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int @numberValue(min: 0)

    """
    Ordering options for the returned work orders.
    """
    orderBy: WorkOrderOrder

    """
    Filtering options for the returned work orders.
    """
    filterBy: [WorkOrderFilterInput!]
  ): WorkOrderConnection!
  workOrderTypes(
    after: Cursor
    first: Int @numberValue(min: 0)
    before: Cursor
    last: Int @numberValue(min: 0)
  ): WorkOrderTypeConnection!
  links(
    after: Cursor
    first: Int @numberValue(min: 0)
    before: Cursor
    last: Int @numberValue(min: 0)
    filterBy: [LinkFilterInput!]
  ): LinkConnection!
  services(
    after: Cursor
    first: Int @numberValue(min: 0)
    before: Cursor
    last: Int @numberValue(min: 0)
    filterBy: [ServiceFilterInput!]
  ): ServiceConnection!
  users(
    after: Cursor
    first: Int @numberValue(min: 0)
    before: Cursor
    last: Int @numberValue(min: 0)
    filterBy: [UserFilterInput!]
  ): UserConnection
  usersGroups(
    after: Cursor
    first: Int @numberValue(min: 0)
    before: Cursor
    last: Int @numberValue(min: 0)
    filterBy: [UsersGroupFilterInput!]
  ): UsersGroupConnection
  permissionsPolicies(
    after: Cursor
    first: Int @numberValue(min: 0)
    before: Cursor
    last: Int @numberValue(min: 0)
    filterBy: [PermissionsPolicyFilterInput!]
  ): PermissionsPolicyConnection
  searchForNode(
    name: String!
    after: Cursor
    first: Int = 10 @numberValue(min: 0)
    before: Cursor
    last: Int @numberValue(min: 0)
  ): SearchNodesConnection!
  possibleProperties(entityType: PropertyEntity!): [PropertyType!]!
  surveys: [Survey!]!
  latestPythonPackage: LatestPythonPackageResult
  pythonPackages: [PythonPackage!]!
  nearestSites(
    latitude: Float! @numberValue(min: -90, max: 90)
    longitude: Float! @numberValue(min: -180, max: 180)
    first: Int! = 10 @numberValue(min: 0)
  ): [Location!]!
  vertex(id: ID!): Vertex
  projectTypes(
    after: Cursor
    first: Int @numberValue(min: 0)
    before: Cursor
    last: Int @numberValue(min: 0)
  ): ProjectTypeConnection

  """
  A list of projects.
  """
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int @numberValue(min: 0)

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int @numberValue(min: 0)

    """
    Ordering options for the returned projects.
    """
    orderBy: ProjectOrder

    """
    Filtering options for the returned projects.
    """
    filterBy: [ProjectFilterInput!]

    """
    Property value for ordering projects.
    """
    propertyValue: String,

    """
    Property direction for ordering projects.
    """
    propertyOrder: String
  ): ProjectConnection!
  customers(
    after: Cursor
    first: Int @numberValue(min: 0)
    before: Cursor
    last: Int @numberValue(min: 0)
  ): CustomerConnection
  reportFilters(entity: FilterEntity!): [ReportFilter!]!
  flowDrafts(
    after: Cursor
    first: Int @numberValue(min: 0)
    before: Cursor
    last: Int @numberValue(min: 0)
    """
    Filter flowDrafts by case sensitive name.
    """
    name: String
  ): FlowDraftConnection!
  flows(
    after: Cursor
    first: Int @numberValue(min: 0)
    before: Cursor
    last: Int @numberValue(min: 0)
    """
    Filter flows by case sensitive name.
    """
    name: String
  ): FlowConnection!
  flowInstances(
    after: Cursor
    first: Int @numberValue(min: 0)
    before: Cursor
    last: Int @numberValue(min: 0)
    orderBy: FlowInstanceOrder
    filterBy: [FlowInstanceFilterInput!]
  ): FlowInstanceConnection!
  workerTypes(
    after: Cursor
    first: Int @numberValue(min: 0)
    before: Cursor
    last: Int @numberValue(min: 0)
  ): WorkerTypeConnection!
  
  """
  A list of counters.
  """
  counters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int @numberValue(min: 0)

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int @numberValue(min: 0)

    """
    Ordering options for the returned counters.
    """
    orderBy: CounterOrder

    
    #Filtering options for the returned counters.
    
    filterBy: [CounterFilterInput!]
  ): CounterConnection!
  
  """
  A list of kpis.
  """
  kpis(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int @numberValue(min: 0)

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int @numberValue(min: 0)

    """
    Ordering options for the returned kpis.
    """
    orderBy: KpiOrder

    
    #Filtering options for the returned kpis.
    
    filterBy: [KpiFilterInput!]
  ): KpiConnection!

  """
  A list of kpiCategories.
  """
  kpiCategories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int @numberValue(min: 0)

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int @numberValue(min: 0)

    """
    Ordering options for the returned kpiCategoriess.
    """
    orderBy: KpiCategoryOrder

    
    #Filtering options for the returned kpiCategoriess.
    
    filterBy: [KpiCategoryFilterInput!]
  ): KpiCategoryConnection!

  """
  A list of thresholds.
  """
  thresholds(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int @numberValue(min: 0)

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int @numberValue(min: 0)

    """
    Ordering options for the returned counters.
    """
    orderBy: ThresholdOrder

    
    #Filtering options for the returned counters.
    
    filterBy: [ThresholdFilterInput!]
  ): ThresholdConnection!
  
  """
  A list of AlarmFilter.
  """
  alarmFilters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int @numberValue(min: 0)

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int @numberValue(min: 0)

    """
    Ordering options for the returned counters.
    """
    orderBy: AlarmFilterOrder

    
    #Filtering options for the returned counters.
    
    filterBy: [AlarmFilterFilterInput!]
  ): AlarmFilterConnection!

  
  """
  A list of domains.
  """
  domains(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int @numberValue(min: 0)

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int @numberValue(min: 0)

    """
    Ordering options for the returned domains.
    """
    orderBy: DomainOrder

    
    #Filtering options for the returned domains.
    
    filterBy: [DomainFilterInput!]
  ): DomainConnection!

  """
  A list of vendors.
  """
  vendors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int @numberValue(min: 0)

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int @numberValue(min: 0)

    """
    Ordering options for the returned vendors.
    """
    orderBy: VendorOrder

    
    #Filtering options for the returned vendors.
    
    filterBy: [VendorFilterInput!]
  ): VendorConnection!

  """
  A list of counterFamilies.
  """
  counterFamilies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int @numberValue(min: 0)

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int @numberValue(min: 0)

    """
    Ordering options for the returned counterFamilies.
    """
    orderBy: CounterFamilyOrder

    
    #Filtering options for the returned counterFamilies.
    
    filterBy: [CounterFamilyFilterInput!]
  ): CounterFamilyConnection!

  
  """
  A list of ruleTypes.
  """
  ruleTypes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int @numberValue(min: 0)

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int @numberValue(min: 0)

    """
    Ordering options for the returned ruleTypes.
    """
    orderBy: RuleTypeOrder

    
    #Filtering options for the returned ruleTypes.
    
    filterBy: [RuleTypeFilterInput!]
  ): RuleTypeConnection!

  """
  A list of eventSeverities.
  """
  eventSeverities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int @numberValue(min: 0)

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int @numberValue(min: 0)

    """
    Ordering options for the returned eventSeverities.
    """
    orderBy: EventSeverityOrder

    
    #Filtering options for the returned eventSeverities.
    
    filterBy: [EventSeverityFilterInput!]
  ): EventSeverityConnection!
  
  """
  A list of comparator.
  """
  
  comparators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int @numberValue(min: 0)

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int @numberValue(min: 0)

    """
    Ordering options for the returned comparator.
    """
    orderBy: ComparatorOrder

    
    #Filtering options for the returned comparator.
    
    filterBy: [ComparatorFilterInput!]
  ): ComparatorConnection!

  """
  A list of alarmStatus.
  """
  
  alarmStatus(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int @numberValue(min: 0)

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int @numberValue(min: 0)

    """
    Ordering options for the returned alarmStatus.
    """
    orderBy: AlarmStatusOrder

    
    #Filtering options for the returned alarmStatus.
    
    filterBy: [AlarmStatusFilterInput!]
  ): AlarmStatusConnection!

  """
  A list of Kqi.
  """
  kqis(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int @numberValue(min: 0)

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int @numberValue(min: 0)

    """
    Ordering options for the returned counters.
    """
    orderBy: KqiOrder

    
    #Filtering options for the returned counters.
    
    filterBy: [KqiFilterInput!]
  ): KqiConnection!
  
  """
  A list of kqiCategories.
  """
  kqiCategories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int @numberValue(min: 0)

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int @numberValue(min: 0)

    """
    Ordering options for the returned kqiCategories.
    """
    orderBy: KqiCategoryOrder

    
    #Filtering options for the returned kqiCategories.
    
    filterBy: [KqiCategoryFilterInput!]
  ): KqiCategoryConnection!

  """
  A list of kqiPerspectives.
  """
  kqiPerspectives(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int @numberValue(min: 0)

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int @numberValue(min: 0)

    """
    Ordering options for the returned kqiPerspectives.
    """
    orderBy: KqiPerspectiveOrder

    
    #Filtering options for the returned kqiPerspectives.
    
    filterBy: [KqiPerspectiveFilterInput!]
  ): KqiPerspectiveConnection!

  """
  A list of kqiTemporalFrequency.
  """
  kqiTemporalFrequencies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int @numberValue(min: 0)

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int @numberValue(min: 0)

    """
    Ordering options for the returned kqiTemporalFrequency.
    """
    orderBy: KqiTemporalFrequencyOrder

    
    #Filtering options for the returned kqiTemporalFrequency.
    
    filterBy: [KqiTemporalFrequencyFilterInput!]
  ): KqiTemporalFrequencyConnection!

  """
  A list of kqiSource.
  """
  kqiSources(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int @numberValue(min: 0)

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int @numberValue(min: 0)

    """
    Ordering options for the returned kqiSource.
    """
    orderBy: KqiSourceOrder

    
    #Filtering options for the returned kqiSource.
    
    filterBy: [KqiSourceFilterInput!]
  ): KqiSourceConnection!

  """
  A list of kqiTarget.
  """
  kqiTargets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int @numberValue(min: 0)

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int @numberValue(min: 0)

    """
    Ordering options for the returned kqiTarget.
    """
    orderBy: KqiTargetOrder

    
    #Filtering options for the returned kqiTarget.
    filterBy: [KqiTargetFilterInput!]
  ): KqiTargetConnection!

  """
  A list of organization.
  """
  
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int @numberValue(min: 0)

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int @numberValue(min: 0)

    """
    Ordering options for the returned organization.
    """
    orderBy: OrganizationOrder

    
    #Filtering options for the returned organization.
    
    filterBy: [OrganizationFilterInput!]
  ): OrganizationConnection!
  """
  A list of Recommendations.
  """
  Recommendations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int @numberValue(min: 0)

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int @numberValue(min: 0)

    """
    Ordering options for the returned counters.
    """
    orderBy: RecommendationsOrder

    
    #Filtering options for the returned counters.
    
    filterBy: [RecommendationsFilterInput!]
  ): RecommendationsConnection!
  """
  A list of RecommendationsSources.
  """
  RecommendationsSources(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int @numberValue(min: 0)

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int @numberValue(min: 0)

    """
    Ordering options for the returned counters.
    """
    orderBy: RecommendationsSourcesOrder

    
    #Filtering options for the returned counters.
    
    filterBy: [RecommendationsSourcesFilterInput!]
  ): RecommendationsSourcesConnection!
  """
  A list of RecommendationsCategories.
  """
  RecommendationsCategories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int @numberValue(min: 0)

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int @numberValue(min: 0)

    """
    Ordering options for the returned counters.
    """
    orderBy: RecommendationsCategoryOrder

    
    #Filtering options for the returned counters.
    
    filterBy: [RecommendationsCategoryFilterInput!]
  ): RecommendationsCategoryConnection!
     """
  A list of formulas.
  """
  formulas(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int @numberValue(min: 0)

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int @numberValue(min: 0)

    """
    Ordering options for the returned formulas.
    """
    orderBy: FormulaOrder

    
    #Filtering options for the returned formulas.
    
    filterBy: [FormulaFilterInput!]
  ): FormulaConnection!

    """
  A list of techs.
  """
  techs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int @numberValue(min: 0)

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int @numberValue(min: 0)

    """
    Ordering options for the returned techs.
    """
    orderBy: TechOrder

    
    #Filtering options for the returned techs.
    
    filterBy: [TechFilterInput!]
  ): TechConnection!

  """
  A list of networkTypes.
  """
  networkTypes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int @numberValue(min: 0)

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int @numberValue(min: 0)

    """
    Ordering options for the returned networkTypes.
    """
    orderBy: NetworkTypeOrder

    
    #Filtering options for the returned networkTypes.
    
    filterBy: [NetworkTypeFilterInput!]
  ): NetworkTypeConnection!
 
  appointments(
    after: Cursor
    first: Int @numberValue(min: 0)
    before: Cursor
    last: Int @numberValue(min: 0)
    slotFilterBy: SlotFilterInput
  ): AppointmentConnection!
  usersAvailability(
    filterBy: [UserFilterInput!]
    slotFilterBy: SlotFilterInput!
    duration: Float!
    regularHours: RegularHoursInput!
  ): [UserAvailability!]
  propertyCategories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int @numberValue(min: 0)

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int @numberValue(min: 0)

    orderBy: PropertyCategoryOrder
  ): PropertyCategoryConnection!
  parametersCatalog(
  """
  Returns the elements in the list that come after the specified cursor.
  """
  after: Cursor

  """
  Returns the first _n_ elements from the list.
  """
  first: Int @numberValue(min: 0)

  """
  Returns the elements in the list that come before the specified cursor.
  """
  before: Cursor

  """
  Returns the last _n_ elements from the list.
  """
  last: Int @numberValue(min: 0)
  ): ParameterCatalogConnection!
  propertiesByCategories(filterBy: [PropertiesByCategoryFilterInput!]): [PropertiesByCategories]!
}

type Mutation {
  editUser(input: EditUserInput!): User!
  addUsersGroup(input: AddUsersGroupInput!): UsersGroup!
  editUsersGroup(input: EditUsersGroupInput!): UsersGroup!
  updateUserGroups(input: UpdateUserGroupsInput!): User!
  deleteUsersGroup(id: ID!): Boolean!
  createSurvey(data: SurveyCreateData!): ID!
  addLocation(input: AddLocationInput!): Location!
  editLocation(input: EditLocationInput!): Location!
  removeLocation(id: ID!): ID!
  addLocationType(input: AddLocationTypeInput!): LocationType!
  editLocationType(input: EditLocationTypeInput!): LocationType!
  removeLocationType(id: ID!): ID!
  removeDocumentCategory(id: ID!): ID!
  addEquipment(input: AddEquipmentInput!): Equipment!
  editEquipment(input: EditEquipmentInput!): Equipment!
  removeEquipment(id: ID!, workOrderId: ID): ID!
  addEquipmentType(input: AddEquipmentTypeInput!): EquipmentType!
  editEquipmentType(input: EditEquipmentTypeInput!): EquipmentType!
  removeEquipmentType(id: ID!): ID!
  addEquipmentPortType(input: AddEquipmentPortTypeInput!): EquipmentPortType!
  editEquipmentPortType(input: EditEquipmentPortTypeInput!): EquipmentPortType!
  removeEquipmentPortType(id: ID!): ID!
  addLink(input: AddLinkInput!): Link!
  editLink(input: EditLinkInput!): Link!
  removeLink(id: ID!, workOrderId: ID): Link!
  addService(
    """
    data to create service
    """
    data: ServiceCreateData!
  ): Service!
  editService(
    """
    data to edit service
    """
    data: ServiceEditData!
  ): Service!
  addServiceLink(id: ID!, linkId: ID!): Service!
  removeServiceLink(id: ID!, linkId: ID!): Service!
  addServiceEndpoint(input: AddServiceEndpointInput!): Service!
  removeServiceEndpoint(serviceEndpointId: ID!): Service!
  addServicePort(id: ID!, portId: ID!): Service!
  addBulkServiceLinksAndPorts(input: AddBulkServiceLinksAndPortsInput): Service!
  removeServicePort(id: ID!, portId: ID!): Service!
  addServiceType(
    """
    AddServiceEndpointInput
    data to edit service type
    """
    data: ServiceTypeCreateData!
  ): ServiceType!
  editServiceType(
    """
    data to edit service type
    """
    data: ServiceTypeEditData!
  ): ServiceType!
  removeEquipmentFromPosition(
    positionId: ID!

    """
    id of the work order to remove this equipment
    """
    workOrderId: ID
  ): EquipmentPosition!
  moveEquipmentToPosition(
    """
    id of the equipment of the position definition to attach to
    """
    parentEquipmentId: ID

    """
    id of the position definition to attach to
    """
    positionDefinitionId: ID

    """
    id of the equipment to that will be attached as a child to the position
    """
    equipmentId: ID!
  ): EquipmentPosition!
  addComment(input: CommentInput!): Comment!
  addImage(input: AddImageInput!): File!
  addHyperlink(input: AddHyperlinkInput!): Hyperlink!
  deleteHyperlink(id: ID!): Hyperlink!
  deleteImage(
    """
    type of the entity whre image is at
    """
    entityType: ImageEntity!

    """
    id of the entity whre image is at
    """
    entityId: ID!

    """
    id of the image file
    """
    id: ID!
  ): File!
  removeWorkOrder(id: ID!): ID!
  executeWorkOrder(id: ID!): WorkOrderExecutionResult!
  removeWorkOrderType(id: ID!): ID!
  markSiteSurveyNeeded(locationId: ID!, needed: Boolean!): Location!
  removeService(id: ID!): ID!
  removeServiceType(id: ID!): ID!
  editLocationTypeSurveyTemplateCategories(
    """
    id of the location type to edit
    """
    id: ID!

    """
    survey categories and questions we want to configure for this type
    """
    surveyTemplateCategories: [SurveyTemplateCategoryInput!]!
  ): [SurveyTemplateCategory!]
  editEquipmentPort(input: EditEquipmentPortInput!): EquipmentPort!
  removeSiteSurvey(id: ID!): ID!
  addWiFiScans(
    """
    wifi scan data
    """
    data: [SurveyWiFiScanData]!

    """
    location of where wifi scan was collected
    """
    locationID: ID!
  ): [SurveyWiFiScan]
  addCellScans(
    """
    cell scan data
    """
    data: [SurveyCellScanData]!

    """
    location of where cell scan was collected
    """
    locationID: ID!
  ): [SurveyCellScan]
  moveLocation(
    """
    ID of the location that will be moved
    """
    locationID: ID!
    """
    ID of the location to be the new parent
    """
    parentLocationID: ID
  ): Location!
  editLocationTypesIndex(
    """
    edit the location index to the location
    """
    locationTypesIndex: [LocationTypeIndex]!
  ): [LocationType]
  addWorkOrder(input: AddWorkOrderInput!): WorkOrder!
  editWorkOrder(input: EditWorkOrderInput!): WorkOrder!
  addWorkOrderType(input: AddWorkOrderTypeInput!): WorkOrderType!
  editWorkOrderType(input: EditWorkOrderTypeInput!): WorkOrderType!
  createProjectType(input: AddProjectTypeInput!): ProjectType!
  editProjectType(input: EditProjectTypeInput!): ProjectType!
  deleteProjectType(id: ID!): Boolean!
  createProject(input: AddProjectInput!): Project!
  editProject(input: EditProjectInput!): Project!
  deleteProject(id: ID!): Boolean!
  addCustomer(input: AddCustomerInput!): Customer!
  removeCustomer(id: ID!): ID!
  addFloorPlan(input: AddFloorPlanInput!): FloorPlan!
  deleteFloorPlan(id: ID!): Boolean!
  technicianWorkOrderCheckIn(
    workOrderId: ID!
    input: TechnicianWorkOrderCheckInInput
  ): WorkOrder!
  technicianWorkOrderCheckOut(
    input: TechnicianWorkOrderCheckOutInput!
  ): WorkOrder!
  technicianWorkOrderUploadData(
    input: TechnicianWorkOrderUploadInput!
  ): WorkOrder!
    @deprecated(
      reason: "Use `technicianWorkOrderCheckOut` instead. Will be removed on 2020-11-01"
    )
  addReportFilter(input: ReportFilterInput!): ReportFilter!
  editReportFilter(input: EditReportFilterInput!): ReportFilter!
  deleteReportFilter(id: ID!): Boolean!
  addPermissionsPolicy(input: AddPermissionsPolicyInput!): PermissionsPolicy!
  editPermissionsPolicy(input: EditPermissionsPolicyInput!): PermissionsPolicy!
  deletePermissionsPolicy(id: ID!): Boolean!
  addStartBlock(flowDraftId: ID!, input: StartBlockInput!): Block!
  addEndBlock(flowDraftId: ID!, input: EndBlockInput!): Block!
  addDecisionBlock(flowDraftId: ID!, input: DecisionBlockInput!): Block!
  addGotoBlock(flowDraftId: ID!, input: GotoBlockInput!): Block!
  addSubflowBlock(flowDraftId: ID!, input: SubflowBlockInput!): Block!
  addTriggerBlock(flowDraftId: ID!, input: TriggerBlockInput!): Block!
  addActionBlock(flowDraftId: ID!, input: ActionBlockInput!): Block!
  addTrueFalseBlock(flowDraftId: ID!, input: TrueFalseBlockInput!): Block!
  editBlock(input: EditBlockInput!): Block!
  deleteBlock(id: ID!): Boolean!
  addConnector(flowDraftId: ID!, input: ConnectorInput!): Connector!
  deleteConnector(flowDraftId: ID!, input: ConnectorInput!): Boolean!
  addFlowDraft(input: AddFlowDraftInput!): FlowDraft!
  publishFlow(input: PublishFlowInput!): Flow!
  deleteFlowDraft(id: ID!): Boolean!
  importFlowDraft(input: ImportFlowDraftInput!): FlowDraft!
  startFlow(input: StartFlowInput!): FlowInstance!
  editFlowInstance(input: EditFlowInstanceInput): FlowInstance!
  addBlockInstance(
    flowInstanceId: ID!
    input: AddBlockInstanceInput!
  ): BlockInstance!
  editBlockInstance(input: EditBlockInstanceInput!): BlockInstance!
  addWorkerType(input: AddWorkerTypeInput!): WorkerType!
  editWorkerType(input: EditWorkerTypeInput!): WorkerType!
  removeWorkerType(id: ID!): ID!
  addCounter(input: AddCounterInput!):Counter!
  editCounter(input: EditCounterInput!): Counter!
  removeCounter(id: ID!): ID!
  addCounterFamily(input: AddCounterFamilyInput!):CounterFamily!
  editCounterFamily(input: EditCounterFamilyInput!): CounterFamily!
  removeCounterFamily(id: ID!): ID!
  addVendor(input: AddVendorInput!):Vendor!
  editVendor(input: EditVendorInput!): Vendor!
  removeVendor(id: ID!): ID!
  addFormula(input: AddFormulaInput!):Formula!
  editFormula(input: EditFormulaInput!): Formula!
  removeFormula(id: ID!): ID!
  addKpi(input: AddKpiInput!):Kpi!
  editKpi(input: EditKpiInput!): Kpi!
  removeKpi(id: ID!): ID!
  addKpiCategory(input: AddKpiCategoryInput!):KpiCategory!
  editKpiCategory(input: EditKpiCategoryInput!): KpiCategory!
  removeKpiCategory(id: ID!): ID!
  addDomain(input: AddDomainInput!):Domain!
  editDomain(input: EditDomainInput!): Domain!
  removeDomain(id: ID!): ID!
  addTech(input: AddTechInput!):Tech!
  editTech(input: EditTechInput!): Tech!
  removeTech(id: ID!): ID!
  addNetworkType(input: AddNetworkTypeInput!):NetworkType!
  editNetworkType(input: EditNetworkTypeInput!): NetworkType!
  removeNetworkType(id: ID!): ID!
  addCounterFormula(input: AddCounterFormulaInput!):CounterFormula!
  addCounterFormulaList(input: AddCounterFormulaListInput!):[CounterFormula!]!
  editCounterFormula(input: EditCounterFormulaInput!):CounterFormula!
  removeCounterFormula(id: ID!): ID!
  addThreshold(input: AddThresholdInput!):Threshold!
  editThreshold(input: EditThresholdInput!): Threshold!
  removeThreshold(id: ID!): ID!
  addComparator(input: AddComparatorInput!):Comparator!
  editComparator(input: EditComparatorInput!): Comparator!
  removeComparator(id: ID!): ID!
  addEventSeverity(input: AddEventSeverityInput!):EventSeverity!
  editEventSeverity(input: EditEventSeverityInput!): EventSeverity!
  removeEventSeverity(id: ID!): ID!
  addRule(input: AddRuleInput!):Rule!
  editRule(input: EditRuleInput!): Rule!
  removeRule(id: ID!): ID!
  addRuleLimit(input: AddRuleLimitInput!):RuleLimit!
  editRuleLimit(input: EditRuleLimitInput!): RuleLimit!
  removeRuleLimit(id: ID!): ID!
  addRuleType(input: AddRuleTypeInput!):RuleType!
  editRuleType(input: EditRuleTypeInput!): RuleType!
  removeRuleType(id: ID!): ID!
  addAlarmFilter(input: AddAlarmFilterInput!):AlarmFilter!
  editAlarmFilter(input: EditAlarmFilterInput!): AlarmFilter!
  removeAlarmFilter(id: ID!): ID!
  addAlarmStatus(input: AddAlarmStatusInput!):AlarmStatus!
  editAlarmStatus(input: EditAlarmStatusInput!): AlarmStatus!
  removeAlarmStatus(id: ID!): ID!
  addOrganization(input: AddOrganizationInput!):Organization!
  editOrganization(input: EditOrganizationInput!): Organization!
  removeOrganization(id: ID!): ID!
  addKqi(input: AddKqiInput!):Kqi!
  editKqi(input: EditKqiInput!): Kqi!
  removeKqi(id: ID!): ID!
  addKqiCategory(input: AddKqiCategoryInput!):KqiCategory!
  editKqiCategory(input: EditKqiCategoryInput!): KqiCategory!
  removeKqiCategory(id: ID!): ID!
  addKqiPerspective(input: AddKqiPerspectiveInput!):KqiPerspective!
  editKqiPerspective(input: EditKqiPerspectiveInput!): KqiPerspective!
  removeKqiPerspective(id: ID!): ID!
  addKqiTemporalFrequency(input: AddKqiTemporalFrequencyInput!):KqiTemporalFrequency!
  editKqiTemporalFrequency(input: EditKqiTemporalFrequencyInput!): KqiTemporalFrequency!
  removeKqiTemporalFrequency(id: ID!): ID!
  addKqiSource(input: AddKqiSourceInput!):KqiSource!
  editKqiSource(input: EditKqiSourceInput!): KqiSource!
  removeKqiSource(id: ID!): ID!
  addKqiTarget(input: AddKqiTargetInput!):KqiTarget!
  editKqiTarget(input: EditKqiTargetInput!): KqiTarget!
  removeKqiTarget(id: ID!): ID!
  addKqiComparator(input: AddKqiComparatorInput!):KqiComparator!
  editKqiComparator(input: EditKqiComparatorInput!): KqiComparator!
  removeKqiComparator(id: ID!): ID!
  addRecommendations(input: AddRecommendationsInput!):Recommendations!
  editRecommendations(input: EditRecommendationsInput!): Recommendations!
  removeRecommendations(id: ID!): ID!
  addRecommendationsList(input: AddRecommendationsListInput!): [Recommendations!]!
  addRecommendationsSources(input: AddRecommendationsSourcesInput!):RecommendationsSources!
  editRecommendationsSources(input: EditRecommendationsSourcesInput!): RecommendationsSources!
  removeRecommendationsSources(id: ID!): ID!
  addRecommendationsCategory(input: AddRecommendationsCategoryInput!):RecommendationsCategory!
  editRecommendationsCategory(input: EditRecommendationsCategoryInput!): RecommendationsCategory!
  removeRecommendationsCategory(id: ID!): ID!
  addAppointment(input: AddAppointmentInput!): Appointment!
  editAppointment(input: EditAppointmentInput!): Appointment!
  removeAppointment(id: ID!): ID!
  editPropertyCategories(propertyCategories: [EditPropertyCategoryInput]): [PropertyCategory!]
  removePropertyCategory(id: ID!): ID!
  editParametersCatalog(parametersCatalog: [EditParameterCatalogInput]!): [ParameterCatalog!]
  removeParameterCatalog(entityType: ParameterCatalogEntity!, id: ID!): ID!
  editIsListable(input: EditIsListableInput!): PropertyType!
}

"""
Payload of the workOrderStatusChanged subscription.
"""
type WorkOrderStatusChangedPayload
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/event.WorkOrderStatusChangedPayload"
  ) {
  """
  Previous status of the work order.
  """
  from: WorkOrderStatus

  """
  Current status of the work order.
  """
  to: WorkOrderStatus!

  """
  The work order of which status was modified.
  """
  workOrder: WorkOrder!
}

type Subscription {
  workOrderAdded: WorkOrder
  workOrderDone: WorkOrder
  workOrderStatusChanged: WorkOrderStatusChangedPayload!
  flowInstanceDone: FlowInstance!
  projectAdded: Project
  projectChanged: Project
  locationAdded: Location
  locationChanged: Location
  AddImage: File
}

type Counter implements Node {
  id: ID!
  name: String!
  externalID: String!
  networkManagerSystem: String!
  counterformula: [CounterFormula]!
  counterFamily: CounterFamily
  vendorFk: Vendor!
}

input AddCounterInput {
  name: String!
  externalID: String!
  networkManagerSystem: String!
  counterFamily: ID!
  vendorFk: ID!
}

input EditCounterInput {
  id: ID!
  name: String!
  externalID: String!
  networkManagerSystem: String!
  vendorFk: ID!
}

type CounterFamily implements Node {
  id: ID!
  name: String!
  
}

input CounterFamilyInput {
  name: String!
  
}

input AddCounterFamilyInput {
  name: String!
  
}

input EditCounterFamilyInput {
  id: ID!
  name: String!
  
}

enum CounterFamilyFilterType {
  NAME
}

input CounterFamilyFilterInput {
  filterType: CounterFamilyFilterType!
  operator: FilterOperator!
  stringValue: String
  idSet: [ID!]
  maxDepth: Int = 5
  stringSet: [String!]
}


type Vendor implements Node {
  id: ID!
  name: String!
  vendorRecommendations: [Recommendations!]
}

input AddVendorInput {
  name: String!
}

input EditVendorInput {
  id: ID!
  name: String!
}
enum VendorFilterType {
  NAME
}

input VendorFilterInput {
  filterType: VendorFilterType!
  operator: FilterOperator!
  stringValue: String
  idSet: [ID!]
  maxDepth: Int = 5
  stringSet: [String!]
}

type Domain implements Node {
  id: ID!
  name: String!
}

input DomainInput {
  id: ID!
  name: String!
}

input AddDomainInput {
  name: String!
}

input EditDomainInput {
  id: ID!
  name: String!
}
enum DomainFilterType {
  NAME
}

input DomainFilterInput {
  filterType: DomainFilterType!
  operator: FilterOperator!
  stringValue: String
  idSet: [ID!]
  maxDepth: Int = 5
  stringSet: [String!]
}

type KpiCategory implements Node {
  id: ID!
  name: String!
}

input AddKpiCategoryInput {
  name: String!
}

input EditKpiCategoryInput {
  id: ID!
  name: String!
}

enum KpiCategoryFilterType{
  NAME
}

input KpiCategoryFilterInput {
  filterType: KpiCategoryFilterType!
  operator: FilterOperator!
  stringValue: String
  idSet: [ID!]
  maxDepth: Int = 5
  stringSet: [String!]
}

type Kpi implements Node {
  id: ID!
  name: String!
  description: String!
  threshold: Threshold!
  status: Boolean!
  domainFk: Domain!
  formulaFk: [Formula]
  kpiCategoryFK: KpiCategory!
}

input AddKpiInput {
  name: String!
  description: String!
  domainFk: ID!
  kpiCategoryFK: ID!
  status: Boolean!
}

input EditKpiInput {
  id: ID!
  name: String!
  description: String!
  domainFk: ID!
  kpiCategoryFK: ID!
  status: Boolean!
}

type Tech implements Node {
  id: ID!
  name: String!
  domainFk: Domain!
}

input AddTechInput {
  name: String!
  domainFk: ID!
}

input EditTechInput {
  id: ID!
  name: String!
  domainFk: ID!
}

type NetworkType implements Node {
  id: ID!
  name: String!
}

input AddNetworkTypeInput {
  name: String!
}

input EditNetworkTypeInput {
  id: ID!
  name: String!
}

enum NetworkTypeFilterType {
  NAME
}

input NetworkTypeFilterInput {
  filterType: NetworkTypeFilterType!
  operator: FilterOperator!
  stringValue: String
  idSet: [ID!]
  maxDepth: Int = 5
  stringSet: [String!]
}

type Formula implements Node {
  id: ID!
  textFormula: String!
  status: Boolean!
  techFk: Tech!
  networkTypeFk: NetworkType!
  kpiFk: Kpi!
  counterformulaFk: [CounterFormula]
}

input AddFormulaInput {
  textFormula: String!
  status: Boolean!
  techFk: ID!
  networkTypeFk: ID!
  kpiFk: ID!
}

input EditFormulaInput {
  id: ID!
  textFormula: String!
  status: Boolean!
  techFk: ID!
  networkTypeFk: ID!
  kpiFk: ID!
}

type CounterFormula implements Node {
  id: ID!
  mandatory: Boolean!
  counterFk: Counter!
  formulaFk: Formula!
}

input CounterListInput {
  counterFk: ID!
  mandatory: Boolean!
}

input AddCounterFormulaListInput {
  formulaFk: ID!
  counterList: [CounterListInput]!
}


input AddCounterFormulaInput {
  mandatory: Boolean!
  counterFk: ID!
  formulaFk: ID!
}

input EditCounterFormulaInput {
  id: ID!
  mandatory: Boolean!
  counterFk: ID!
  formulaFk: ID!
}

type Threshold implements Node {
  id: ID!
  name: String!
  description: String!
  status: Boolean!
  rule: [Rule!]
  kpi: Kpi
  
}

input AddThresholdInput {
  name: String!
  description: String!
  status: Boolean!
  kpi: ID!
  
}

input ThresholdInput {
  name: String!
  description: String!
  status: Boolean!
  rule: [RuleInput!]
  kpi: ID!
  
}

input EditThresholdInput {
  id: ID!
  name: String!
  description: String!
  status: Boolean!
}

enum ThresholdFilterType {
  NAME
}

input ThresholdFilterInput {
  filterType: ThresholdFilterType!
  operator: FilterOperator!
  stringValue: String
  idSet: [ID!]
  maxDepth: Int = 5
  stringSet: [String!]
}
type Comparator implements Node {
  id: ID!
  name: String!
  ruleLimit: [RuleLimit!]
}

input AddComparatorInput {
  name: String!
}

input EditComparatorInput {
  id: ID!
  name: String!
}
enum ComparatorFilterType {
  NAME
}

input ComparatorFilterInput {
  filterType: ComparatorFilterType!
  operator: FilterOperator!
  stringValue: String
  idSet: [ID!]
  maxDepth: Int = 5
  stringSet: [String!]
}

type RuleType implements Node {
  id: ID!
  name: String!
  rule: [Rule!]
}

input AddRuleTypeInput {
  name: String!
}

input EditRuleTypeInput {
  id: ID!
  name: String!
}
enum RuleTypeFilterType {
  NAME
}

input RuleTypeFilterInput {
  filterType: RuleTypeFilterType!
  operator: FilterOperator!
  stringValue: String
  idSet: [ID!]
  maxDepth: Int = 5
  stringSet: [String!]
}


type RuleLimit implements Node {
  id: ID!
  number: Int!
  limitType: String!
  comparator: Comparator!
  rule: Rule
}

input RuleLimitInput {
  number: Int!
  limitType: String!
  comparator: ID!
  rule: ID!
}

input AddRuleLimitInput {
  number: Int!
  limitType: String!
  comparator: ID!
  rule: ID!
}

input EditRuleLimitInput {
  id: ID!
  number: Int!
  limitType: String!
  comparator: ID!
  rule: ID!
}

type Rule implements Node {
  id: ID!
  name: String!
  gracePeriod: Int
  startDateTime: Time
  endDateTime: Time
  ruleLimit: [RuleLimit!]
  ruleType: RuleType!
  eventTypeName: String
  specificProblem: String
  additionalInfo: String
  status: Boolean!
  eventSeverity: EventSeverity!
  threshold: Threshold!
}

input RuleInput {
  name: String!
  gracePeriod: Int
  startDateTime: Time
  endDateTime: Time
  eventTypeName: String!
  specificProblem: String!
  additionalInfo: String!
  status: Boolean!
  ruleLimit: [RuleLimitInput!]
}

input AddRuleInput {
  name: String!
  gracePeriod: Int!
  startDateTime: Time!
  endDateTime: Time!
  ruleType: ID!
  eventTypeName: String
  specificProblem: String
  additionalInfo: String
  status: Boolean!
  eventSeverity: ID!
  threshold: ID!
}

input EditRuleInput {
  id: ID!
  name: String!
  gracePeriod: Int
  startDateTime: Time
  endDateTime: Time
  ruleType: ID!
  eventTypeName: String
  specificProblem: String
  additionalInfo: String
  status: Boolean!
  eventSeverity: ID!
  threshold: ID!
}

type EventSeverity implements Node {
  id: ID!
  name: String!
  rule: [Rule!]
}

input AddEventSeverityInput {
  name: String!
}

input EditEventSeverityInput {
  id: ID!
  name: String!
}
enum EventSeverityFilterType {
  NAME
}

input EventSeverityFilterInput {
  filterType: EventSeverityFilterType!
  operator: FilterOperator!
  stringValue: String
  idSet: [ID!]
  maxDepth: Int = 5
  stringSet: [String!]
}

type AlarmFilter implements Node {
  id: ID!
  name: String!
  networkResource: String!
  enable: Boolean!
  beginTime: Time!
  endTime: Time!
  reason: String!
  user: String!
  creationTime: Time! 
  alarmStatus: AlarmStatus
}

input AddAlarmFilterInput {
  name: String!
  networkResource: String!
  enable: Boolean!
  beginTime: Time!
  endTime: Time!
  reason: String!
  user: String!
  creationTime: Time!  
  alarmStatus: ID
}

input AlarmFilterInput {
  name: String!
  networkResource: String!
  enable: Boolean!
  beginTime: Time!
  endTime: Time!
  reason: String!
  user: String!
  creationTime: Time!
}

input EditAlarmFilterInput {
  id: ID!
  name: String!
  networkResource: String!
  enable: Boolean!
  beginTime: Time!
  endTime: Time!
  reason: String! 
  alarmStatus: ID
}

enum AlarmFilterFilterType {
  NAME
}

input AlarmFilterFilterInput {
  filterType: AlarmFilterFilterType!
  operator: FilterOperator!
  stringValue: String
  idSet: [ID!]
  maxDepth: Int = 5
  stringSet: [String!]
}

type AlarmStatus implements Node {
  id: ID!
  name: String!
  AlarmFilter: [AlarmFilter!]
}

input AlarmStatusInput {
  id: ID!
  name: String!
}

input AddAlarmStatusInput {
  name: String!
}

input EditAlarmStatusInput {
  id: ID!
  name: String!
}
enum AlarmStatusFilterType {
  NAME
}

input AlarmStatusFilterInput {
  filterType: AlarmStatusFilterType!
  operator: FilterOperator!
  stringValue: String
  idSet: [ID!]
  maxDepth: Int = 5
  stringSet: [String!]
}

type Kqi implements Node {
  id: ID!
  name: String!
  description: String!
  formula: String!
  startDateTime: Time!
  endDateTime: Time!
  kqiCategory: KqiCategory!
  kqiPerspective: KqiPerspective!
  kqiSource: KqiSource!
  kqiTemporalFrequency: KqiTemporalFrequency!
  kqiTarget: [KqiTarget!]
}

input AddKqiInput {
  name: String!
  description: String!
  formula: String!
  startDateTime: Time!
  endDateTime: Time!
  kqiCategory: ID!
  kqiPerspective: ID!
  kqiSource: ID!
  kqiTemporalFrequency: ID!
}

input EditKqiInput {
  id: ID!
  name: String!
  description: String!
  formula: String!
  startDateTime: Time!
  endDateTime: Time!
  kqiCategory: ID!
  kqiPerspective: ID!
  kqiSource: ID!
  kqiTemporalFrequency: ID!
}

enum KqiFilterType {
  NAME
}

input KqiFilterInput {
  filterType: KqiFilterType!
  operator: FilterOperator!
  stringValue: String
  idSet: [ID!]
  maxDepth: Int = 5
  stringSet: [String!]
}

type KqiCategory implements Node {
  id: ID!
  name: String! 
  kqi: [Kqi!]
}

input AddKqiCategoryInput {
  name: String!
}

input EditKqiCategoryInput {
  id: ID!
  name: String!
}

enum KqiCategoryFilterType {
  NAME
}

input KqiCategoryFilterInput {
  filterType: KqiCategoryFilterType!
  operator: FilterOperator!
  stringValue: String
  idSet: [ID!]
  maxDepth: Int = 5
  stringSet: [String!]
}

type KqiPerspective implements Node {
  id: ID!
  name: String! 
  kqi: [Kqi!]
}

input AddKqiPerspectiveInput {
  name: String!
}

input EditKqiPerspectiveInput {
  id: ID!
  name: String!
}

enum KqiPerspectiveFilterType {
  NAME
}

input KqiPerspectiveFilterInput {
  filterType: KqiPerspectiveFilterType!
  operator: FilterOperator!
  stringValue: String
  idSet: [ID!]
  maxDepth: Int = 5
  stringSet: [String!]
}

type KqiSource implements Node {
  id: ID!
  name: String! 
  kqi: [Kqi!]
}

input AddKqiSourceInput {
  name: String!
}

input EditKqiSourceInput {
  id: ID!
  name: String!
}

enum KqiSourceFilterType {
  NAME
}

input KqiSourceFilterInput {
  filterType: KqiSourceFilterType!
  operator: FilterOperator!
  stringValue: String
  idSet: [ID!]
  maxDepth: Int = 5
  stringSet: [String!]
}

type KqiTemporalFrequency implements Node {
  id: ID!
  name: String! 
  kqi: [Kqi!]
}

input AddKqiTemporalFrequencyInput {
  name: String!
}

input EditKqiTemporalFrequencyInput {
  id: ID!
  name: String!
}

enum KqiTemporalFrequencyFilterType {
  NAME
}

input KqiTemporalFrequencyFilterInput {
  filterType: KqiTemporalFrequencyFilterType!
  operator: FilterOperator!
  stringValue: String
  idSet: [ID!]
  maxDepth: Int = 5
  stringSet: [String!]
}

type KqiTarget implements Node {
  id: ID!
  name: String! 
  impact: String!
  period: Float!
  allowedVariation: Float!
  initTime: Time!
  endTime: Time!
  status: Boolean!
  kqi: Kqi!
  kqiComparator: [KqiComparator]!
}

input AddKqiTargetInput {
  name: String! 
  impact: String!
  period: Float!
  allowedVariation: Float!
  initTime: Time!
  endTime: Time!
  status: Boolean!
  kqi: ID!
}

input EditKqiTargetInput {
  id: ID!
  name: String! 
  impact: String!
  period: Float!
  allowedVariation: Float!
  initTime: Time!
  endTime: Time!
  status: Boolean!
  kqi: ID!
}

enum KqiTargetFilterType {
  NAME
}

input KqiTargetFilterInput {
  filterType: KqiTargetFilterType!
  operator: FilterOperator!
  stringValue: String
  idSet: [ID!]
  maxDepth: Int = 5
  stringSet: [String!]
}

type KqiComparator implements Node {
  id: ID!
  kqiTargetFk: KqiTarget!
  comparatorFk: Comparator!
  number: Float!
  comparatorType: String!
}

input AddKqiComparatorInput {
  kqiTargetFk: ID!
  comparatorFk: ID!
  number: Float!
  comparatorType: String!
}

input EditKqiComparatorInput {
  id: ID!
  kqiTargetFk: ID!
  comparatorFk: ID!
  number: Float!
  comparatorType: String!
}

##################### RECOMMENDATIONS #######################

type Recommendations implements Node {
  id: ID!
  externalID: String!
  resource: String!
  alarmType: String!
  shortDescription: String!
  longDescription: String!
  command: String
  priority: Int!
  status: Boolean!
  runbook: String
  used: Int
  recommendationsSources: RecommendationsSources!
  recommendationsCategory: RecommendationsCategory!
  userApprobed: User
  userCreate: User!
  vendor: Vendor!
}

input AddRecommendationsInput {
  externalID: String!
  resource: String!
  alarmType: String!
  shortDescription: String!
  longDescription: String!
  command: String
  priority: Int!
  status: Boolean!
  runbook: String
  used: Int
  recommendationsSources: ID!
  recommendationsCategory: ID!
  userApprobed: ID
  userCreate: ID!
  vendor: ID!
}

input AddRecommendationsListInput {
  recommendations: [AddRecommendationsInput!]!
}

input EditRecommendationsInput {
  id: ID!
  externalID: String!
  resource: String!
  alarmType: String!
  shortDescription: String!
  longDescription: String!
  command: String
  priority: Int!
  status: Boolean!
  runbook: String
  used: Int
  recommendationsSources: ID!
  recommendationsCategory: ID!
  userApprobed: ID
  vendor: ID!
}
######################## filter ###################
enum RecommendationsFilterType {
  EXTERNALID
  RESOURCE
  ALARMTYPE
  SHORTDESCRIPTION
  LONGDESCRIPTION
  COMMAND
  PRIORITY
  STATUS
  USED
  RUNBOOK
  RECOMMENDATIONSSOURCE
  RECOMMENDATIONSCATEGORY
  USERCREATE
  USERAPPROVE
  VENDORRECOMMENDATIONS
}

input RecommendationsFilterInput {
  filterType: RecommendationsFilterType!
  operator: FilterOperator!
  stringValue: String
  boolValue: Boolean
  intValue: Int
  idSet: [ID!]
  maxDepth: Int = 5
  stringSet: [String!]
}

type RecommendationsSources implements Node {
  id: ID!
  name: String! 
  recommendations: [Recommendations!]
}

input AddRecommendationsSourcesInput {
  name: String!
}

input EditRecommendationsSourcesInput {
  id: ID!
  name: String!
}

enum RecommendationsSourcesFilterType {
  NAME
}

input RecommendationsSourcesFilterInput {
  filterType: RecommendationsSourcesFilterType!
  operator: FilterOperator!
  stringValue: String
  idSet: [ID!]
  maxDepth: Int = 5
  stringSet: [String!]
}

type RecommendationsCategory implements Node {
  id: ID!
  name: String! 
  recommendations: [Recommendations!]
}

input AddRecommendationsCategoryInput {
  name: String!
}

input EditRecommendationsCategoryInput {
  id: ID!
  name: String!
}

enum RecommendationsCategoryFilterType {
  NAME
}

input RecommendationsCategoryFilterInput {
  filterType: RecommendationsCategoryFilterType!
  operator: FilterOperator!
  stringValue: String
  idSet: [ID!]
  maxDepth: Int = 5
  stringSet: [String!]
}

## scheduling
"""
A connection to a list of appoinments.
"""
type AppointmentConnection {
  """
  Total count of appoinments in all pages.
  """
  totalCount: Int!
  """
  A list of project edges.
  """
  edges: [AppointmentEdge!]!
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}
"""
A project edge in a connection.
"""
type AppointmentEdge {
  """
  The project at the end of the edge.
  """
  node: Appointment
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Properties by which project connections can be ordered.
"""
enum AppointmentOrderField {
  """
  Order appoinments by date.
  """
  DATE
  """
  Order appoinments by creation time.
  """
  CREATED_AT
  """
  Order appoinments by update time.
  """
  UPDATED_AT
}
"""
Ordering options for project connections.
"""
input AppointmentOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection!
  """
  The field to order appoinments by.
  """
  field: AppointmentOrderField
}
type Appointment implements Node {
  id: ID!
  creationDate: Time!
  assignee: User!
  workOrder: WorkOrder!
  start: Time!
  end: Time!
  duration: Float!
}
input AddAppointmentInput {
  creatorId: ID
  assigneeID: ID!
  workorderID: ID!
  date: Time!
  duration: Float!
}
input EditAppointmentInput {
  id: ID!
  assigneeID: ID!
  workorderID: ID!
  date: Time!
  status: AppointmentStatus
  duration: Float!
}
type UserAvailability {
  user: User!
  slotStartDate: Time!
  slotEndDate: Time!
}
input SlotFilterInput {
  slotStartDate: Time!
  slotEndDate: Time!
}
input RegularHoursInput {
  workdayStartHour: Int!
  workdayStartMinute: Int!
  workdayEndHour: Int!
  workdayEndMinute: Int!
  timezone: String
}

input EditPropertyCategoryInput {
  id: ID
  name: String!
  index: Int!
  parameterCatalogId: ID!
}

input EditParameterCatalogInput {
  id: ID
  name: String!
  index: Int!
  disabled: Boolean
}

"""
Appointment Status
"""
enum AppointmentStatus
  @goModel(
    model: "github.com/facebookincubator/symphony/pkg/ent/appointment.Status"
  ) {
  ACTIVE
  CANCELED
}