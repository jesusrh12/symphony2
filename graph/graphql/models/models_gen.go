// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"

	models1 "github.com/facebookincubator/symphony/pkg/authz/models"
	"github.com/facebookincubator/symphony/pkg/ent"
	"github.com/facebookincubator/symphony/pkg/ent/activity"
	"github.com/facebookincubator/symphony/pkg/ent/appointment"
	"github.com/facebookincubator/symphony/pkg/ent/blockinstance"
	"github.com/facebookincubator/symphony/pkg/ent/checklistitem"
	"github.com/facebookincubator/symphony/pkg/ent/file"
	"github.com/facebookincubator/symphony/pkg/ent/flow"
	"github.com/facebookincubator/symphony/pkg/ent/flowinstance"
	"github.com/facebookincubator/symphony/pkg/ent/project"
	"github.com/facebookincubator/symphony/pkg/ent/schema/enum"
	"github.com/facebookincubator/symphony/pkg/ent/service"
	"github.com/facebookincubator/symphony/pkg/ent/servicetype"
	"github.com/facebookincubator/symphony/pkg/ent/surveycellscan"
	"github.com/facebookincubator/symphony/pkg/ent/user"
	"github.com/facebookincubator/symphony/pkg/ent/usersgroup"
	"github.com/facebookincubator/symphony/pkg/ent/workorder"
	"github.com/facebookincubator/symphony/pkg/exporter/models"
	"github.com/facebookincubator/symphony/pkg/flowengine/actions"
	"github.com/facebookincubator/symphony/pkg/flowengine/flowschema"
	"github.com/facebookincubator/symphony/pkg/flowengine/triggers"
)

type BlockDetails interface {
	IsBlockDetails()
}

type NamedNode interface {
	IsNamedNode()
}

type ActionBlock struct {
	ActionType    actions.ActionType               `json:"actionType"`
	Params        []*flowschema.VariableExpression `json:"params"`
	EntryPoint    *ent.EntryPoint                  `json:"entryPoint"`
	ExitPoint     *ent.ExitPoint                   `json:"exitPoint"`
	WorkOrderType *ent.WorkOrderType               `json:"workOrderType"`
	WorkerType    *ent.WorkerType                  `json:"workerType"`
}

func (ActionBlock) IsBlockDetails() {}

type ActionBlockInput struct {
	Cid              string                            `json:"cid"`
	ActionType       flowschema.ActionTypeID           `json:"actionType"`
	Params           []*VariableExpressionInput        `json:"params"`
	UIRepresentation *flowschema.BlockUIRepresentation `json:"uiRepresentation"`
}

type ActivityFilterInput struct {
	Limit          int                   `json:"limit"`
	OrderDirection ent.OrderDirection    `json:"orderDirection"`
	ActivityType   activity.ActivityType `json:"activityType"`
}

type AddAlarmFilterInput struct {
	Name            string    `json:"name"`
	NetworkResource string    `json:"networkResource"`
	Enable          bool      `json:"enable"`
	BeginTime       time.Time `json:"beginTime"`
	EndTime         time.Time `json:"endTime"`
	Reason          string    `json:"reason"`
	User            string    `json:"user"`
	CreationTime    time.Time `json:"creationTime"`
	AlarmStatus     *int      `json:"alarmStatus"`
}

type AddAlarmStatusInput struct {
	Name string `json:"name"`
}

type AddAppointmentInput struct {
	CreatorID   *int      `json:"creatorId"`
	AssigneeID  int       `json:"assigneeID"`
	WorkorderID int       `json:"workorderID"`
	Date        time.Time `json:"date"`
	Duration    float64   `json:"duration"`
}

type AddBlockInstanceInput struct {
	Status    *blockinstance.Status       `json:"status"`
	Inputs    []*flowschema.VariableValue `json:"inputs"`
	Outputs   []*flowschema.VariableValue `json:"outputs"`
	BlockID   int                         `json:"blockId"`
	StartDate time.Time                   `json:"startDate"`
}

type AddBulkServiceLinksAndPortsInput struct {
	ID      int   `json:"id"`
	PortIds []int `json:"portIds"`
	LinkIds []int `json:"linkIds"`
}

type AddComparatorInput struct {
	Name string `json:"name"`
}

type AddCounterFamilyInput struct {
	Name string `json:"name"`
}

type AddCounterFormulaInput struct {
	Mandatory bool `json:"mandatory"`
	CounterFk int  `json:"counterFk"`
	FormulaFk int  `json:"formulaFk"`
}

type AddCounterFormulaListInput struct {
	FormulaFk   int                 `json:"formulaFk"`
	CounterList []*CounterListInput `json:"counterList"`
}

type AddCounterInput struct {
	Name                 string `json:"name"`
	ExternalID           string `json:"externalID"`
	NetworkManagerSystem string `json:"networkManagerSystem"`
	CounterFamily        int    `json:"counterFamily"`
	VendorFk             int    `json:"vendorFk"`
}

type AddCustomerInput struct {
	Name       string  `json:"name"`
	ExternalID *string `json:"externalId"`
}

type AddDomainInput struct {
	Name string `json:"name"`
}

type AddEquipmentInput struct {
	Name               string           `json:"name"`
	Type               int              `json:"type"`
	Location           *int             `json:"location"`
	Parent             *int             `json:"parent"`
	PositionDefinition *int             `json:"positionDefinition"`
	Properties         []*PropertyInput `json:"properties"`
	WorkOrder          *int             `json:"workOrder"`
	ExternalID         *string          `json:"externalId"`
}

type AddEquipmentPortTypeInput struct {
	Name           string                      `json:"name"`
	Properties     []*models.PropertyTypeInput `json:"properties"`
	LinkProperties []*models.PropertyTypeInput `json:"linkProperties"`
}

type AddEquipmentTypeInput struct {
	Name       string                      `json:"name"`
	Category   *string                     `json:"category"`
	Positions  []*EquipmentPositionInput   `json:"positions"`
	Ports      []*EquipmentPortInput       `json:"ports"`
	Properties []*models.PropertyTypeInput `json:"properties"`
}

type AddEventSeverityInput struct {
	Name string `json:"name"`
}

type AddFloorPlanInput struct {
	Name             string         `json:"name"`
	LocationID       int            `json:"locationID"`
	Image            *AddImageInput `json:"image"`
	ReferenceX       int            `json:"referenceX"`
	ReferenceY       int            `json:"referenceY"`
	Latitude         float64        `json:"latitude"`
	Longitude        float64        `json:"longitude"`
	ReferencePoint1x int            `json:"referencePoint1X"`
	ReferencePoint1y int            `json:"referencePoint1Y"`
	ReferencePoint2x int            `json:"referencePoint2X"`
	ReferencePoint2y int            `json:"referencePoint2Y"`
	ScaleInMeters    float64        `json:"scaleInMeters"`
}

type AddFlowDraftInput struct {
	Name                string                           `json:"name"`
	Description         *string                          `json:"description"`
	FlowID              *int                             `json:"flowID"`
	EndParamDefinitions []*flowschema.VariableDefinition `json:"endParamDefinitions"`
}

type AddFormulaInput struct {
	TextFormula   string `json:"textFormula"`
	Status        bool   `json:"status"`
	TechFk        int    `json:"techFk"`
	NetworkTypeFk int    `json:"networkTypeFk"`
	KpiFk         int    `json:"kpiFk"`
}

type AddHyperlinkInput struct {
	EntityType         ImageEntity `json:"entityType"`
	EntityID           int         `json:"entityId"`
	URL                string      `json:"url"`
	DisplayName        *string     `json:"displayName"`
	Category           *string     `json:"category"`
	DocumentCategoryID *int        `json:"documentCategoryId"`
}

type AddImageInput struct {
	EntityType         ImageEntity `json:"entityType"`
	EntityID           int         `json:"entityId"`
	ImgKey             string      `json:"imgKey"`
	FileName           string      `json:"fileName"`
	FileSize           int         `json:"fileSize"`
	Modified           time.Time   `json:"modified"`
	ContentType        string      `json:"contentType"`
	Category           *string     `json:"category"`
	Annotation         *string     `json:"annotation"`
	DocumentCategoryID *int        `json:"documentCategoryId"`
}

type AddKpiCategoryInput struct {
	Name string `json:"name"`
}

type AddKpiInput struct {
	Name          string `json:"name"`
	Description   string `json:"description"`
	DomainFk      int    `json:"domainFk"`
	KpiCategoryFk int    `json:"kpiCategoryFK"`
	Status        bool   `json:"status"`
}

type AddKqiCategoryInput struct {
	Name string `json:"name"`
}

type AddKqiComparatorInput struct {
	KqiTargetFk    int     `json:"kqiTargetFk"`
	ComparatorFk   int     `json:"comparatorFk"`
	Number         float64 `json:"number"`
	ComparatorType string  `json:"comparatorType"`
}

type AddKqiInput struct {
	Name                 string    `json:"name"`
	Description          string    `json:"description"`
	Formula              string    `json:"formula"`
	StartDateTime        time.Time `json:"startDateTime"`
	EndDateTime          time.Time `json:"endDateTime"`
	KqiCategory          int       `json:"kqiCategory"`
	KqiPerspective       int       `json:"kqiPerspective"`
	KqiSource            int       `json:"kqiSource"`
	KqiTemporalFrequency int       `json:"kqiTemporalFrequency"`
}

type AddKqiPerspectiveInput struct {
	Name string `json:"name"`
}

type AddKqiSourceInput struct {
	Name string `json:"name"`
}

type AddKqiTargetInput struct {
	Name             string    `json:"name"`
	Impact           string    `json:"impact"`
	Period           float64   `json:"period"`
	AllowedVariation float64   `json:"allowedVariation"`
	InitTime         time.Time `json:"initTime"`
	EndTime          time.Time `json:"endTime"`
	Status           bool      `json:"status"`
	Kqi              int       `json:"kqi"`
}

type AddKqiTemporalFrequencyInput struct {
	Name string `json:"name"`
}

type AddLinkInput struct {
	Sides      []*LinkSide      `json:"sides"`
	WorkOrder  *int             `json:"workOrder"`
	Properties []*PropertyInput `json:"properties"`
	ServiceIds []int            `json:"serviceIds"`
}

type AddLocationInput struct {
	Name       string           `json:"name"`
	Type       int              `json:"type"`
	Parent     *int             `json:"parent"`
	Latitude   *float64         `json:"latitude"`
	Longitude  *float64         `json:"longitude"`
	Properties []*PropertyInput `json:"properties"`
	ExternalID *string          `json:"externalID"`
}

type AddLocationTypeInput struct {
	Name                     string                          `json:"name"`
	MapType                  *string                         `json:"mapType"`
	MapZoomLevel             *int                            `json:"mapZoomLevel"`
	IsSite                   *bool                           `json:"isSite"`
	DocumentCategories       []*models.DocumentCategoryInput `json:"documentCategories"`
	Properties               []*models.PropertyTypeInput     `json:"properties"`
	SurveyTemplateCategories []*SurveyTemplateCategoryInput  `json:"surveyTemplateCategories"`
}

type AddNetworkTypeInput struct {
	Name string `json:"name"`
}

type AddOrganizationInput struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

type AddPermissionsPolicyInput struct {
	Name            string                         `json:"name"`
	Description     *string                        `json:"description"`
	IsGlobal        *bool                          `json:"isGlobal"`
	InventoryInput  *models1.InventoryPolicyInput  `json:"inventoryInput"`
	WorkforceInput  *models1.WorkforcePolicyInput  `json:"workforceInput"`
	AutomationInput *models1.AutomationPolicyInput `json:"automationInput"`
	AssuranceInput  *models1.AssurancePolicyInput  `json:"assuranceInput"`
	Groups          []int                          `json:"groups"`
}

type AddProjectInput struct {
	Name        string            `json:"name"`
	Description *string           `json:"description"`
	Priority    *project.Priority `json:"priority"`
	CreatorID   *int              `json:"creatorId"`
	Type        int               `json:"type"`
	Location    *int              `json:"location"`
	Properties  []*PropertyInput  `json:"properties"`
}

type AddProjectTypeInput struct {
	Name        string                      `json:"name"`
	Description *string                     `json:"description"`
	Properties  []*models.PropertyTypeInput `json:"properties"`
	WorkOrders  []*WorkOrderDefinitionInput `json:"workOrders"`
}

type AddRecommendationsCategoryInput struct {
	Name string `json:"name"`
}

type AddRecommendationsInput struct {
	ExternalID              string  `json:"externalID"`
	Resource                string  `json:"resource"`
	AlarmType               string  `json:"alarmType"`
	ShortDescription        string  `json:"shortDescription"`
	LongDescription         string  `json:"longDescription"`
	Command                 *string `json:"command"`
	Priority                int     `json:"priority"`
	Status                  bool    `json:"status"`
	Runbook                 *string `json:"runbook"`
	Used                    *int    `json:"used"`
	RecommendationsSources  int     `json:"recommendationsSources"`
	RecommendationsCategory int     `json:"recommendationsCategory"`
	UserApprobed            *int    `json:"userApprobed"`
	UserCreate              int     `json:"userCreate"`
	Vendor                  int     `json:"vendor"`
}

type AddRecommendationsListInput struct {
	Recommendations []*AddRecommendationsInput `json:"recommendations"`
}

type AddRecommendationsSourcesInput struct {
	Name string `json:"name"`
}

type AddRuleInput struct {
	Name            string    `json:"name"`
	GracePeriod     int       `json:"gracePeriod"`
	StartDateTime   time.Time `json:"startDateTime"`
	EndDateTime     time.Time `json:"endDateTime"`
	RuleType        int       `json:"ruleType"`
	EventTypeName   *string   `json:"eventTypeName"`
	SpecificProblem *string   `json:"specificProblem"`
	AdditionalInfo  *string   `json:"additionalInfo"`
	Status          bool      `json:"status"`
	EventSeverity   int       `json:"eventSeverity"`
	Threshold       int       `json:"threshold"`
}

type AddRuleLimitInput struct {
	Number     int    `json:"number"`
	LimitType  string `json:"limitType"`
	Comparator int    `json:"comparator"`
	Rule       int    `json:"rule"`
}

type AddRuleTypeInput struct {
	Name string `json:"name"`
}

type AddServiceEndpointInput struct {
	ID          int  `json:"id"`
	PortID      *int `json:"portId"`
	EquipmentID int  `json:"equipmentID"`
	Definition  int  `json:"definition"`
}

type AddTechInput struct {
	Name     string `json:"name"`
	DomainFk int    `json:"domainFk"`
}

type AddThresholdInput struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	Status      bool   `json:"status"`
	Kpi         int    `json:"kpi"`
}

type AddUsersGroupInput struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
	Members     []int   `json:"members"`
	Policies    []int   `json:"policies"`
}

type AddVendorInput struct {
	Name string `json:"name"`
}

type AddWorkOrderInput struct {
	Name                string                    `json:"name"`
	Description         *string                   `json:"description"`
	WorkOrderTypeID     int                       `json:"workOrderTypeId"`
	LocationID          *int                      `json:"locationId"`
	ProjectID           *int                      `json:"projectId"`
	Properties          []*PropertyInput          `json:"properties"`
	CheckList           []*CheckListItemInput     `json:"checkList"`
	OwnerID             *int                      `json:"ownerId"`
	CheckListCategories []*CheckListCategoryInput `json:"checkListCategories"`
	AssigneeID          *int                      `json:"assigneeId"`
	Index               *int                      `json:"index"`
	OrganizationFk      *int                      `json:"organizationFk"`
	Status              *workorder.Status         `json:"status"`
	Priority            *workorder.Priority       `json:"priority"`
	Duration            *float64                  `json:"duration"`
	DueDate             *time.Time                `json:"dueDate"`
}

type AddWorkOrderTypeInput struct {
	Name                         string                              `json:"name"`
	Description                  *string                             `json:"description"`
	Properties                   []*models.PropertyTypeInput         `json:"properties"`
	CheckListCategories          []*CheckListCategoryDefinitionInput `json:"checkListCategories"`
	AssigneeCanCompleteWorkOrder *bool                               `json:"assigneeCanCompleteWorkOrder"`
	Duration                     *float64                            `json:"duration"`
}

type AddWorkerTypeInput struct {
	Name          string                      `json:"name"`
	Description   *string                     `json:"description"`
	PropertyTypes []*models.PropertyTypeInput `json:"propertyTypes"`
}

type AlarmFilterFilterInput struct {
	FilterType  AlarmFilterFilterType `json:"filterType"`
	Operator    enum.FilterOperator   `json:"operator"`
	StringValue *string               `json:"stringValue"`
	IDSet       []int                 `json:"idSet"`
	MaxDepth    *int                  `json:"maxDepth"`
	StringSet   []string              `json:"stringSet"`
}

type AlarmFilterInput struct {
	Name            string    `json:"name"`
	NetworkResource string    `json:"networkResource"`
	Enable          bool      `json:"enable"`
	BeginTime       time.Time `json:"beginTime"`
	EndTime         time.Time `json:"endTime"`
	Reason          string    `json:"reason"`
	User            string    `json:"user"`
	CreationTime    time.Time `json:"creationTime"`
}

type AlarmStatusFilterInput struct {
	FilterType  AlarmStatusFilterType `json:"filterType"`
	Operator    enum.FilterOperator   `json:"operator"`
	StringValue *string               `json:"stringValue"`
	IDSet       []int                 `json:"idSet"`
	MaxDepth    *int                  `json:"maxDepth"`
	StringSet   []string              `json:"stringSet"`
}

type AlarmStatusInput struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type BlockVariableInput struct {
	BlockCid                  string                      `json:"blockCid"`
	Type                      enum.VariableExpressionType `json:"type"`
	VariableDefinitionKey     *string                     `json:"variableDefinitionKey"`
	PropertyTypeID            *int                        `json:"propertyTypeId"`
	CheckListItemDefinitionID *int                        `json:"checkListItemDefinitionId"`
}

type CheckListCategoryDefinitionInput struct {
	ID          *int                        `json:"id"`
	Title       string                      `json:"title"`
	Description *string                     `json:"description"`
	CheckList   []*CheckListDefinitionInput `json:"checkList"`
}

type CheckListCategoryInput struct {
	ID          *int                  `json:"id"`
	Title       string                `json:"title"`
	Description *string               `json:"description"`
	CheckList   []*CheckListItemInput `json:"checkList"`
}

type CheckListDefinitionInput struct {
	ID                *int                                 `json:"id"`
	Title             string                               `json:"title"`
	Type              enum.CheckListItemType               `json:"type"`
	Index             *int                                 `json:"index"`
	IsMandatory       *bool                                `json:"isMandatory"`
	EnumValues        *string                              `json:"enumValues"`
	EnumSelectionMode *enum.CheckListItemEnumSelectionMode `json:"enumSelectionMode"`
	HelpText          *string                              `json:"helpText"`
}

type CheckListItemInput struct {
	ID                 *int                                 `json:"id"`
	Title              string                               `json:"title"`
	Type               enum.CheckListItemType               `json:"type"`
	Index              *int                                 `json:"index"`
	IsMandatory        *bool                                `json:"isMandatory"`
	HelpText           *string                              `json:"helpText"`
	EnumValues         *string                              `json:"enumValues"`
	EnumSelectionMode  *enum.CheckListItemEnumSelectionMode `json:"enumSelectionMode"`
	SelectedEnumValues *string                              `json:"selectedEnumValues"`
	StringValue        *string                              `json:"stringValue"`
	Checked            *bool                                `json:"checked"`
	Files              []*FileInput                         `json:"files"`
	YesNoResponse      *checklistitem.YesNoVal              `json:"yesNoResponse"`
	WifiData           []*SurveyWiFiScanData                `json:"wifiData"`
	CellData           []*SurveyCellScanData                `json:"cellData"`
}

type ClockActivity struct {
	Author  *ent.User              `json:"author"`
	Details *activity.ClockDetails `json:"details"`
	Time    time.Time              `json:"time"`
}

type CommentInput struct {
	EntityType CommentEntity `json:"entityType"`
	ID         int           `json:"id"`
	Text       string        `json:"text"`
}

type ComparatorFilterInput struct {
	FilterType  ComparatorFilterType `json:"filterType"`
	Operator    enum.FilterOperator  `json:"operator"`
	StringValue *string              `json:"stringValue"`
	IDSet       []int                `json:"idSet"`
	MaxDepth    *int                 `json:"maxDepth"`
	StringSet   []string             `json:"stringSet"`
}

type Connector struct {
	Source *ent.ExitPoint  `json:"source"`
	Target *ent.EntryPoint `json:"target"`
}

type ConnectorInput struct {
	SourceBlockCid string           `json:"sourceBlockCid"`
	SourcePoint    *ExitPointInput  `json:"sourcePoint"`
	TargetBlockCid string           `json:"targetBlockCid"`
	TargetPoint    *EntryPointInput `json:"targetPoint"`
}

type Coordinates struct {
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
}

type CounterFamilyFilterInput struct {
	FilterType  CounterFamilyFilterType `json:"filterType"`
	Operator    enum.FilterOperator     `json:"operator"`
	StringValue *string                 `json:"stringValue"`
	IDSet       []int                   `json:"idSet"`
	MaxDepth    *int                    `json:"maxDepth"`
	StringSet   []string                `json:"stringSet"`
}

type CounterFamilyInput struct {
	Name string `json:"name"`
}

type CounterFilterInput struct {
	FilterType    CounterFilterType   `json:"filterType"`
	Operator      enum.FilterOperator `json:"operator"`
	StringValue   *string             `json:"stringValue"`
	IDSet         []int               `json:"idSet"`
	MaxDepth      *int                `json:"maxDepth"`
	StringSet     []string            `json:"stringSet"`
	PropertyValue *CounterFamilyInput `json:"propertyValue"`
}

type CounterListInput struct {
	CounterFk int  `json:"counterFk"`
	Mandatory bool `json:"mandatory"`
}

type DecisionBlock struct {
	EntryPoint       *ent.EntryPoint  `json:"entryPoint"`
	DefaultExitPoint *ent.ExitPoint   `json:"defaultExitPoint"`
	Routes           []*DecisionRoute `json:"routes"`
}

func (DecisionBlock) IsBlockDetails() {}

type DecisionBlockInput struct {
	Cid              string                            `json:"cid"`
	Routes           []*DecisionRouteInput             `json:"routes"`
	UIRepresentation *flowschema.BlockUIRepresentation `json:"uiRepresentation"`
}

type DecisionRoute struct {
	ExitPoint *ent.ExitPoint `json:"exitPoint"`
}

type DecisionRouteInput struct {
	Cid       *string                  `json:"cid"`
	Condition *VariableExpressionInput `json:"condition"`
}

type DomainFilterInput struct {
	FilterType  DomainFilterType    `json:"filterType"`
	Operator    enum.FilterOperator `json:"operator"`
	StringValue *string             `json:"stringValue"`
	IDSet       []int               `json:"idSet"`
	MaxDepth    *int                `json:"maxDepth"`
	StringSet   []string            `json:"stringSet"`
}

type DomainInput struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type EditAlarmFilterInput struct {
	ID              int       `json:"id"`
	Name            string    `json:"name"`
	NetworkResource string    `json:"networkResource"`
	Enable          bool      `json:"enable"`
	BeginTime       time.Time `json:"beginTime"`
	EndTime         time.Time `json:"endTime"`
	Reason          string    `json:"reason"`
	AlarmStatus     *int      `json:"alarmStatus"`
}

type EditAlarmStatusInput struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type EditAppointmentInput struct {
	ID          int                 `json:"id"`
	AssigneeID  int                 `json:"assigneeID"`
	WorkorderID int                 `json:"workorderID"`
	Date        time.Time           `json:"date"`
	Status      *appointment.Status `json:"status"`
	Duration    float64             `json:"duration"`
}

type EditBlockInput struct {
	ID               int                               `json:"id"`
	UIRepresentation *flowschema.BlockUIRepresentation `json:"uiRepresentation"`
}

type EditBlockInstanceInput struct {
	ID            int                         `json:"id"`
	Status        *blockinstance.Status       `json:"status"`
	Inputs        []*flowschema.VariableValue `json:"inputs"`
	Outputs       []*flowschema.VariableValue `json:"outputs"`
	FailureReason *string                     `json:"failure_reason"`
	EndDate       *time.Time                  `json:"endDate"`
}

type EditComparatorInput struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type EditCounterFamilyInput struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type EditCounterFormulaInput struct {
	ID        int  `json:"id"`
	Mandatory bool `json:"mandatory"`
	CounterFk int  `json:"counterFk"`
	FormulaFk int  `json:"formulaFk"`
}

type EditCounterInput struct {
	ID                   int    `json:"id"`
	Name                 string `json:"name"`
	ExternalID           string `json:"externalID"`
	NetworkManagerSystem string `json:"networkManagerSystem"`
	VendorFk             int    `json:"vendorFk"`
}

type EditDomainInput struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type EditEquipmentInput struct {
	ID         int              `json:"id"`
	Name       string           `json:"name"`
	Properties []*PropertyInput `json:"properties"`
	DeviceID   *string          `json:"deviceID"`
	ExternalID *string          `json:"externalId"`
}

type EditEquipmentPortInput struct {
	Side       *LinkSide        `json:"side"`
	Properties []*PropertyInput `json:"properties"`
}

type EditEquipmentPortTypeInput struct {
	ID             int                         `json:"id"`
	Name           string                      `json:"name"`
	Properties     []*models.PropertyTypeInput `json:"properties"`
	LinkProperties []*models.PropertyTypeInput `json:"linkProperties"`
}

type EditEquipmentTypeInput struct {
	ID         int                         `json:"id"`
	Name       string                      `json:"name"`
	Category   *string                     `json:"category"`
	Positions  []*EquipmentPositionInput   `json:"positions"`
	Ports      []*EquipmentPortInput       `json:"ports"`
	Properties []*models.PropertyTypeInput `json:"properties"`
}

type EditEventSeverityInput struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type EditFlowInstanceInput struct {
	ID                  int                  `json:"id"`
	ServiceInstanceCode *string              `json:"serviceInstanceCode"`
	Status              *flowinstance.Status `json:"status"`
	EndDate             *time.Time           `json:"endDate"`
}

type EditFormulaInput struct {
	ID            int    `json:"id"`
	TextFormula   string `json:"textFormula"`
	Status        bool   `json:"status"`
	TechFk        int    `json:"techFk"`
	NetworkTypeFk int    `json:"networkTypeFk"`
	KpiFk         int    `json:"kpiFk"`
}

type EditIsListableInput struct {
	ID         int  `json:"id"`
	IsListable bool `json:"isListable"`
}

type EditKpiCategoryInput struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type EditKpiInput struct {
	ID            int    `json:"id"`
	Name          string `json:"name"`
	Description   string `json:"description"`
	DomainFk      int    `json:"domainFk"`
	KpiCategoryFk int    `json:"kpiCategoryFK"`
	Status        bool   `json:"status"`
}

type EditKqiCategoryInput struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type EditKqiComparatorInput struct {
	ID             int     `json:"id"`
	KqiTargetFk    int     `json:"kqiTargetFk"`
	ComparatorFk   int     `json:"comparatorFk"`
	Number         float64 `json:"number"`
	ComparatorType string  `json:"comparatorType"`
}

type EditKqiInput struct {
	ID                   int       `json:"id"`
	Name                 string    `json:"name"`
	Description          string    `json:"description"`
	Formula              string    `json:"formula"`
	StartDateTime        time.Time `json:"startDateTime"`
	EndDateTime          time.Time `json:"endDateTime"`
	KqiCategory          int       `json:"kqiCategory"`
	KqiPerspective       int       `json:"kqiPerspective"`
	KqiSource            int       `json:"kqiSource"`
	KqiTemporalFrequency int       `json:"kqiTemporalFrequency"`
}

type EditKqiPerspectiveInput struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type EditKqiSourceInput struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type EditKqiTargetInput struct {
	ID               int       `json:"id"`
	Name             string    `json:"name"`
	Impact           string    `json:"impact"`
	Period           float64   `json:"period"`
	AllowedVariation float64   `json:"allowedVariation"`
	InitTime         time.Time `json:"initTime"`
	EndTime          time.Time `json:"endTime"`
	Status           bool      `json:"status"`
	Kqi              int       `json:"kqi"`
}

type EditKqiTemporalFrequencyInput struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type EditLinkInput struct {
	ID         int              `json:"id"`
	Properties []*PropertyInput `json:"properties"`
	ServiceIds []int            `json:"serviceIds"`
}

type EditLocationInput struct {
	ID         int              `json:"id"`
	Name       string           `json:"name"`
	Latitude   float64          `json:"latitude"`
	Longitude  float64          `json:"longitude"`
	Properties []*PropertyInput `json:"properties"`
	ExternalID *string          `json:"externalID"`
}

type EditLocationTypeInput struct {
	ID                 int                             `json:"id"`
	Name               string                          `json:"name"`
	MapType            *string                         `json:"mapType"`
	MapZoomLevel       *int                            `json:"mapZoomLevel"`
	IsSite             *bool                           `json:"isSite"`
	DocumentCategories []*models.DocumentCategoryInput `json:"documentCategories"`
	Properties         []*models.PropertyTypeInput     `json:"properties"`
}

type EditNetworkTypeInput struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type EditOrganizationInput struct {
	ID          int    `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

type EditParameterCatalogInput struct {
	ID       *int   `json:"id"`
	Name     string `json:"name"`
	Index    int    `json:"index"`
	Disabled *bool  `json:"disabled"`
}

type EditPermissionsPolicyInput struct {
	ID              int                            `json:"id"`
	Name            *string                        `json:"name"`
	Description     *string                        `json:"description"`
	IsGlobal        *bool                          `json:"isGlobal"`
	InventoryInput  *models1.InventoryPolicyInput  `json:"inventoryInput"`
	WorkforceInput  *models1.WorkforcePolicyInput  `json:"workforceInput"`
	AutomationInput *models1.AutomationPolicyInput `json:"automationInput"`
	AssuranceInput  *models1.AssurancePolicyInput  `json:"assuranceInput"`
	Groups          []int                          `json:"groups"`
}

type EditProjectInput struct {
	ID          int               `json:"id"`
	Name        string            `json:"name"`
	Description *string           `json:"description"`
	Priority    *project.Priority `json:"priority"`
	CreatorID   *int              `json:"creatorId"`
	Type        int               `json:"type"`
	Location    *int              `json:"location"`
	Properties  []*PropertyInput  `json:"properties"`
}

type EditProjectTypeInput struct {
	ID          int                         `json:"id"`
	Name        string                      `json:"name"`
	Description *string                     `json:"description"`
	Properties  []*models.PropertyTypeInput `json:"properties"`
	WorkOrders  []*WorkOrderDefinitionInput `json:"workOrders"`
}

type EditPropertyCategoryInput struct {
	ID                 *int   `json:"id"`
	Name               string `json:"name"`
	Index              int    `json:"index"`
	ParameterCatalogID int    `json:"parameterCatalogId"`
}

type EditRecommendationsCategoryInput struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type EditRecommendationsInput struct {
	ID                      int     `json:"id"`
	ExternalID              string  `json:"externalID"`
	Resource                string  `json:"resource"`
	AlarmType               string  `json:"alarmType"`
	ShortDescription        string  `json:"shortDescription"`
	LongDescription         string  `json:"longDescription"`
	Command                 *string `json:"command"`
	Priority                int     `json:"priority"`
	Status                  bool    `json:"status"`
	Runbook                 *string `json:"runbook"`
	Used                    *int    `json:"used"`
	RecommendationsSources  int     `json:"recommendationsSources"`
	RecommendationsCategory int     `json:"recommendationsCategory"`
	UserApprobed            *int    `json:"userApprobed"`
	Vendor                  int     `json:"vendor"`
}

type EditRecommendationsSourcesInput struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type EditReportFilterInput struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type EditRuleInput struct {
	ID              int        `json:"id"`
	Name            string     `json:"name"`
	GracePeriod     *int       `json:"gracePeriod"`
	StartDateTime   *time.Time `json:"startDateTime"`
	EndDateTime     *time.Time `json:"endDateTime"`
	RuleType        int        `json:"ruleType"`
	EventTypeName   *string    `json:"eventTypeName"`
	SpecificProblem *string    `json:"specificProblem"`
	AdditionalInfo  *string    `json:"additionalInfo"`
	Status          bool       `json:"status"`
	EventSeverity   int        `json:"eventSeverity"`
	Threshold       int        `json:"threshold"`
}

type EditRuleLimitInput struct {
	ID         int    `json:"id"`
	Number     int    `json:"number"`
	LimitType  string `json:"limitType"`
	Comparator int    `json:"comparator"`
	Rule       int    `json:"rule"`
}

type EditRuleTypeInput struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type EditTechInput struct {
	ID       int    `json:"id"`
	Name     string `json:"name"`
	DomainFk int    `json:"domainFk"`
}

type EditThresholdInput struct {
	ID          int    `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	Status      bool   `json:"status"`
}

type EditUserInput struct {
	ID             int                `json:"id"`
	FirstName      *string            `json:"firstName"`
	LastName       *string            `json:"lastName"`
	Status         *user.Status       `json:"status"`
	Role           *user.Role         `json:"role"`
	DistanceUnit   *user.DistanceUnit `json:"distanceUnit"`
	OrganizationFk *int               `json:"organizationFk"`
}

type EditUsersGroupInput struct {
	ID          int                `json:"id"`
	Name        *string            `json:"name"`
	Description *string            `json:"description"`
	Status      *usersgroup.Status `json:"status"`
	Members     []int              `json:"members"`
	Policies    []int              `json:"policies"`
}

type EditVendorInput struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type EditWorkOrderInput struct {
	ID                  int                       `json:"id"`
	Name                string                    `json:"name"`
	Description         *string                   `json:"description"`
	OwnerID             *int                      `json:"ownerId"`
	InstallDate         *time.Time                `json:"installDate"`
	AssigneeID          *int                      `json:"assigneeId"`
	Index               *int                      `json:"index"`
	OrganizationFk      *int                      `json:"organizationFk"`
	Status              *workorder.Status         `json:"status"`
	Priority            *workorder.Priority       `json:"priority"`
	ProjectID           *int                      `json:"projectId"`
	Properties          []*PropertyInput          `json:"properties"`
	CheckList           []*CheckListItemInput     `json:"checkList"`
	CheckListCategories []*CheckListCategoryInput `json:"checkListCategories"`
	LocationID          *int                      `json:"locationId"`
	Duration            *float64                  `json:"duration"`
	DueDate             *time.Time                `json:"dueDate"`
}

type EditWorkOrderTypeInput struct {
	ID                           int                                 `json:"id"`
	Name                         string                              `json:"name"`
	Description                  *string                             `json:"description"`
	Properties                   []*models.PropertyTypeInput         `json:"properties"`
	CheckListCategories          []*CheckListCategoryDefinitionInput `json:"checkListCategories"`
	AssigneeCanCompleteWorkOrder *bool                               `json:"assigneeCanCompleteWorkOrder"`
	Duration                     *float64                            `json:"duration"`
}

type EditWorkerTypeInput struct {
	ID            int                         `json:"id"`
	Name          string                      `json:"name"`
	Description   *string                     `json:"description"`
	PropertyTypes []*models.PropertyTypeInput `json:"propertyTypes"`
}

type EndBlock struct {
	Params     []*flowschema.VariableExpression `json:"params"`
	EntryPoint *ent.EntryPoint                  `json:"entryPoint"`
}

func (EndBlock) IsBlockDetails() {}

type EndBlockInput struct {
	Cid              string                            `json:"cid"`
	Params           []*VariableExpressionInput        `json:"params"`
	UIRepresentation *flowschema.BlockUIRepresentation `json:"uiRepresentation"`
}

// End To End Path Descovery.
type EndToEndPath struct {
	// The links in the path
	Links []*ent.Link `json:"links"`
	// The start,end ports in the path
	Ports []*ent.EquipmentPort `json:"ports"`
}

type EntryPointInput struct {
	Role *flowschema.EntryPointRole `json:"role"`
	Cid  *string                    `json:"cid"`
}

type EquipmentPortConnectionInput struct {
	ID   *int    `json:"id"`
	Name *string `json:"name"`
}

type EquipmentPortInput struct {
	ID             *int                            `json:"id"`
	Name           string                          `json:"name"`
	Index          *int                            `json:"index"`
	VisibleLabel   *string                         `json:"visibleLabel"`
	PortTypeID     *int                            `json:"portTypeID"`
	Bandwidth      *string                         `json:"bandwidth"`
	ConnectedPorts []*EquipmentPortConnectionInput `json:"connectedPorts"`
}

type EquipmentPositionInput struct {
	ID           *int    `json:"id"`
	Name         string  `json:"name"`
	Index        *int    `json:"index"`
	VisibleLabel *string `json:"visibleLabel"`
}

type EventSeverityFilterInput struct {
	FilterType  EventSeverityFilterType `json:"filterType"`
	Operator    enum.FilterOperator     `json:"operator"`
	StringValue *string                 `json:"stringValue"`
	IDSet       []int                   `json:"idSet"`
	MaxDepth    *int                    `json:"maxDepth"`
	StringSet   []string                `json:"stringSet"`
}

type ExitPointInput struct {
	Role *flowschema.ExitPointRole `json:"role"`
	Cid  *string                   `json:"cid"`
}

type FileInput struct {
	ID               *int       `json:"id"`
	FileName         string     `json:"fileName"`
	SizeInBytes      *int       `json:"sizeInBytes"`
	ModificationTime *int       `json:"modificationTime"`
	UploadTime       *int       `json:"uploadTime"`
	FileType         *file.Type `json:"fileType"`
	MimeType         *string    `json:"mimeType"`
	StoreKey         string     `json:"storeKey"`
	Annotation       *string    `json:"annotation"`
}

type FlowInstanceFilterInput struct {
	FilterType    FlowInstanceFilterType    `json:"filterType"`
	Operator      enum.FilterOperator       `json:"operator"`
	StringValue   *string                   `json:"stringValue"`
	IDSet         []int                     `json:"idSet"`
	StringSet     []string                  `json:"stringSet"`
	PropertyValue *models.PropertyTypeInput `json:"propertyValue"`
	TimeValue     *time.Time                `json:"timeValue"`
	MaxDepth      *int                      `json:"maxDepth"`
}

type FormulaFilterInput struct {
	FilterType  FormulaFilterType   `json:"filterType"`
	Operator    enum.FilterOperator `json:"operator"`
	StringValue *string             `json:"stringValue"`
	IDSet       []int               `json:"idSet"`
	MaxDepth    *int                `json:"maxDepth"`
	StringSet   []string            `json:"stringSet"`
	BoolValue   *bool               `json:"boolValue"`
}

type GeneralFilter struct {
	FilterType    string              `json:"filterType"`
	Key           string              `json:"key"`
	Operator      enum.FilterOperator `json:"operator"`
	StringValue   *string             `json:"stringValue"`
	IDSet         []int               `json:"idSet"`
	StringSet     []string            `json:"stringSet"`
	BoolValue     *bool               `json:"boolValue"`
	PropertyValue *ent.PropertyType   `json:"propertyValue"`
}

type GeneralFilterInput struct {
	FilterType    string                    `json:"filterType"`
	Key           string                    `json:"key"`
	Operator      enum.FilterOperator       `json:"operator"`
	StringValue   *string                   `json:"stringValue"`
	IDSet         []int                     `json:"idSet"`
	StringSet     []string                  `json:"stringSet"`
	BoolValue     *bool                     `json:"boolValue"`
	PropertyValue *models.PropertyTypeInput `json:"propertyValue"`
}

type GotoBlock struct {
	Target     *ent.Block      `json:"target"`
	EntryPoint *ent.EntryPoint `json:"entryPoint"`
}

func (GotoBlock) IsBlockDetails() {}

type GotoBlockInput struct {
	Cid              string                            `json:"cid"`
	TargetBlockCid   *string                           `json:"targetBlockCid"`
	UIRepresentation *flowschema.BlockUIRepresentation `json:"uiRepresentation"`
}

type ImportFlowDraftInput struct {
	ID                  int                              `json:"id"`
	Name                string                           `json:"name"`
	Description         *string                          `json:"description"`
	EndParamDefinitions []*flowschema.VariableDefinition `json:"endParamDefinitions"`
	StartBlock          *StartBlockInput                 `json:"startBlock"`
	EndBlocks           []*EndBlockInput                 `json:"endBlocks"`
	DecisionBlocks      []*DecisionBlockInput            `json:"decisionBlocks"`
	GotoBlocks          []*GotoBlockInput                `json:"gotoBlocks"`
	SubflowBlocks       []*SubflowBlockInput             `json:"subflowBlocks"`
	TriggerBlocks       []*TriggerBlockInput             `json:"triggerBlocks"`
	ActionBlocks        []*ActionBlockInput              `json:"actionBlocks"`
	TrueFalseBlocks     []*TrueFalseBlockInput           `json:"trueFalseBlocks"`
	Connectors          []*ConnectorInput                `json:"connectors"`
}

type KpiCategoryFilterInput struct {
	FilterType  KpiCategoryFilterType `json:"filterType"`
	Operator    enum.FilterOperator   `json:"operator"`
	StringValue *string               `json:"stringValue"`
	IDSet       []int                 `json:"idSet"`
	MaxDepth    *int                  `json:"maxDepth"`
	StringSet   []string              `json:"stringSet"`
}

type KpiFilterInput struct {
	FilterType  KpiFilterType       `json:"filterType"`
	Operator    enum.FilterOperator `json:"operator"`
	StringValue *string             `json:"stringValue"`
	IDSet       []int               `json:"idSet"`
	MaxDepth    *int                `json:"maxDepth"`
	StringSet   []string            `json:"stringSet"`
}

type KqiCategoryFilterInput struct {
	FilterType  KqiCategoryFilterType `json:"filterType"`
	Operator    enum.FilterOperator   `json:"operator"`
	StringValue *string               `json:"stringValue"`
	IDSet       []int                 `json:"idSet"`
	MaxDepth    *int                  `json:"maxDepth"`
	StringSet   []string              `json:"stringSet"`
}

type KqiFilterInput struct {
	FilterType  KqiFilterType       `json:"filterType"`
	Operator    enum.FilterOperator `json:"operator"`
	StringValue *string             `json:"stringValue"`
	IDSet       []int               `json:"idSet"`
	MaxDepth    *int                `json:"maxDepth"`
	StringSet   []string            `json:"stringSet"`
}

type KqiPerspectiveFilterInput struct {
	FilterType  KqiPerspectiveFilterType `json:"filterType"`
	Operator    enum.FilterOperator      `json:"operator"`
	StringValue *string                  `json:"stringValue"`
	IDSet       []int                    `json:"idSet"`
	MaxDepth    *int                     `json:"maxDepth"`
	StringSet   []string                 `json:"stringSet"`
}

type KqiSourceFilterInput struct {
	FilterType  KqiSourceFilterType `json:"filterType"`
	Operator    enum.FilterOperator `json:"operator"`
	StringValue *string             `json:"stringValue"`
	IDSet       []int               `json:"idSet"`
	MaxDepth    *int                `json:"maxDepth"`
	StringSet   []string            `json:"stringSet"`
}

type KqiTargetFilterInput struct {
	FilterType  KqiTargetFilterType `json:"filterType"`
	Operator    enum.FilterOperator `json:"operator"`
	StringValue *string             `json:"stringValue"`
	IDSet       []int               `json:"idSet"`
	MaxDepth    *int                `json:"maxDepth"`
	StringSet   []string            `json:"stringSet"`
}

type KqiTemporalFrequencyFilterInput struct {
	FilterType  KqiTemporalFrequencyFilterType `json:"filterType"`
	Operator    enum.FilterOperator            `json:"operator"`
	StringValue *string                        `json:"stringValue"`
	IDSet       []int                          `json:"idSet"`
	MaxDepth    *int                           `json:"maxDepth"`
	StringSet   []string                       `json:"stringSet"`
}

type LatestPythonPackageResult struct {
	LastPythonPackage         *PythonPackage `json:"lastPythonPackage"`
	LastBreakingPythonPackage *PythonPackage `json:"lastBreakingPythonPackage"`
}

type LinkSide struct {
	Equipment int `json:"equipment"`
	Port      int `json:"port"`
}

type LocationTypeIndex struct {
	LocationTypeID int `json:"locationTypeID"`
	Index          int `json:"index"`
}

type NetworkTopology struct {
	Nodes []ent.Noder     `json:"nodes"`
	Links []*TopologyLink `json:"links"`
}

type NetworkTypeFilterInput struct {
	FilterType  NetworkTypeFilterType `json:"filterType"`
	Operator    enum.FilterOperator   `json:"operator"`
	StringValue *string               `json:"stringValue"`
	IDSet       []int                 `json:"idSet"`
	MaxDepth    *int                  `json:"maxDepth"`
	StringSet   []string              `json:"stringSet"`
}

type OrganizationFilterInput struct {
	FilterType  OrganizationFilterType `json:"filterType"`
	Operator    enum.FilterOperator    `json:"operator"`
	StringValue *string                `json:"stringValue"`
	IDSet       []int                  `json:"idSet"`
	MaxDepth    *int                   `json:"maxDepth"`
	StringSet   []string               `json:"stringSet"`
}

type PermissionsPolicyFilterInput struct {
	FilterType  PermissionsPolicyFilterType `json:"filterType"`
	Operator    enum.FilterOperator         `json:"operator"`
	StringValue *string                     `json:"stringValue"`
	MaxDepth    *int                        `json:"maxDepth"`
}

type PermissionsPolicySearchResult struct {
	PermissionsPolicies []*ent.PermissionsPolicy `json:"permissionsPolicies"`
	Count               int                      `json:"count"`
}

type ProjectFilterInput struct {
	FilterType    ProjectFilterType         `json:"filterType"`
	Operator      enum.FilterOperator       `json:"operator"`
	StringValue   *string                   `json:"stringValue"`
	IDSet         []int                     `json:"idSet"`
	MaxDepth      *int                      `json:"maxDepth"`
	StringSet     []string                  `json:"stringSet"`
	PropertyValue *models.PropertyTypeInput `json:"propertyValue"`
	TimeValue     *time.Time                `json:"timeValue"`
}

// Model for properties group by property categories
type PropertiesByCategories struct {
	ID           *int                `json:"id"`
	Name         *string             `json:"name"`
	Properties   []*ent.Property     `json:"properties"`
	PropertyType []*ent.PropertyType `json:"propertyType"`
}

type PropertyInput struct {
	ID                 *int     `json:"id"`
	PropertyTypeID     int      `json:"propertyTypeID"`
	StringValue        *string  `json:"stringValue"`
	IntValue           *int     `json:"intValue"`
	BooleanValue       *bool    `json:"booleanValue"`
	FloatValue         *float64 `json:"floatValue"`
	LatitudeValue      *float64 `json:"latitudeValue"`
	LongitudeValue     *float64 `json:"longitudeValue"`
	RangeFromValue     *float64 `json:"rangeFromValue"`
	RangeToValue       *float64 `json:"rangeToValue"`
	NodeIDValue        *int     `json:"nodeIDValue"`
	IsEditable         *bool    `json:"isEditable"`
	IsInstanceProperty *bool    `json:"isInstanceProperty"`
}

type PublishFlowInput struct {
	FlowDraftID         int                     `json:"flowDraftID"`
	FlowInstancesPolicy flow.NewInstancesPolicy `json:"flowInstancesPolicy"`
}

type PythonPackage struct {
	Version           string    `json:"version"`
	WhlFileKey        string    `json:"whlFileKey"`
	UploadTime        time.Time `json:"uploadTime"`
	HasBreakingChange bool      `json:"hasBreakingChange"`
}

type RecommendationsCategoryFilterInput struct {
	FilterType  RecommendationsCategoryFilterType `json:"filterType"`
	Operator    enum.FilterOperator               `json:"operator"`
	StringValue *string                           `json:"stringValue"`
	IDSet       []int                             `json:"idSet"`
	MaxDepth    *int                              `json:"maxDepth"`
	StringSet   []string                          `json:"stringSet"`
}

type RecommendationsFilterInput struct {
	FilterType  RecommendationsFilterType `json:"filterType"`
	Operator    enum.FilterOperator       `json:"operator"`
	StringValue *string                   `json:"stringValue"`
	BoolValue   *bool                     `json:"boolValue"`
	IntValue    *int                      `json:"intValue"`
	IDSet       []int                     `json:"idSet"`
	MaxDepth    *int                      `json:"maxDepth"`
	StringSet   []string                  `json:"stringSet"`
}

type RecommendationsSourcesFilterInput struct {
	FilterType  RecommendationsSourcesFilterType `json:"filterType"`
	Operator    enum.FilterOperator              `json:"operator"`
	StringValue *string                          `json:"stringValue"`
	IDSet       []int                            `json:"idSet"`
	MaxDepth    *int                             `json:"maxDepth"`
	StringSet   []string                         `json:"stringSet"`
}

type RegularHoursInput struct {
	WorkdayStartHour   int     `json:"workdayStartHour"`
	WorkdayStartMinute int     `json:"workdayStartMinute"`
	WorkdayEndHour     int     `json:"workdayEndHour"`
	WorkdayEndMinute   int     `json:"workdayEndMinute"`
	Timezone           *string `json:"timezone"`
}

type ReportFilterInput struct {
	Name    string                `json:"name"`
	Entity  FilterEntity          `json:"entity"`
	Filters []*GeneralFilterInput `json:"filters"`
}

type RuleInput struct {
	Name            string            `json:"name"`
	GracePeriod     *int              `json:"gracePeriod"`
	StartDateTime   *time.Time        `json:"startDateTime"`
	EndDateTime     *time.Time        `json:"endDateTime"`
	EventTypeName   string            `json:"eventTypeName"`
	SpecificProblem string            `json:"specificProblem"`
	AdditionalInfo  string            `json:"additionalInfo"`
	Status          bool              `json:"status"`
	RuleLimit       []*RuleLimitInput `json:"ruleLimit"`
}

type RuleLimitInput struct {
	Number     int    `json:"number"`
	LimitType  string `json:"limitType"`
	Comparator int    `json:"comparator"`
	Rule       int    `json:"rule"`
}

type RuleTypeFilterInput struct {
	FilterType  RuleTypeFilterType  `json:"filterType"`
	Operator    enum.FilterOperator `json:"operator"`
	StringValue *string             `json:"stringValue"`
	IDSet       []int               `json:"idSet"`
	MaxDepth    *int                `json:"maxDepth"`
	StringSet   []string            `json:"stringSet"`
}

type SearchEntry struct {
	EntityID   int     `json:"entityId"`
	EntityType string  `json:"entityType"`
	Name       string  `json:"name"`
	Type       string  `json:"type"`
	ExternalID *string `json:"externalId"`
}

// A search node edge in a connection.
type SearchNodeEdge struct {
	// The search node at the end of the edge.
	Node ent.Noder `json:"node"`
	// A cursor for use in pagination.
	Cursor ent.Cursor `json:"cursor"`
}

// A connection to a list of search nodes.
type SearchNodesConnection struct {
	// Total count of search nodes in all pages.
	TotalCount int `json:"totalCount"`
	// A list of search node edges.
	Edges []*SearchNodeEdge `json:"edges"`
	// Information to aid in pagination.
	PageInfo *ent.PageInfo `json:"pageInfo"`
}

type ServiceCreateData struct {
	Name               string           `json:"name"`
	ExternalID         *string          `json:"externalId"`
	Status             service.Status   `json:"status"`
	ServiceTypeID      int              `json:"serviceTypeId"`
	CustomerID         *int             `json:"customerId"`
	UpstreamServiceIds []int            `json:"upstreamServiceIds"`
	Properties         []*PropertyInput `json:"properties"`
}

type ServiceEditData struct {
	ID                 int              `json:"id"`
	Name               *string          `json:"name"`
	ExternalID         *string          `json:"externalId"`
	Status             *service.Status  `json:"status"`
	CustomerID         *int             `json:"customerId"`
	UpstreamServiceIds []int            `json:"upstreamServiceIds"`
	Properties         []*PropertyInput `json:"properties"`
}

type ServiceEndpointDefinitionInput struct {
	ID              *int    `json:"id"`
	Name            string  `json:"name"`
	Role            *string `json:"role"`
	Index           int     `json:"index"`
	EquipmentTypeID int     `json:"equipmentTypeID"`
}

type ServiceTypeCreateData struct {
	Name            string                            `json:"name"`
	HasCustomer     bool                              `json:"hasCustomer"`
	Properties      []*models.PropertyTypeInput       `json:"properties"`
	Endpoints       []*ServiceEndpointDefinitionInput `json:"endpoints"`
	DiscoveryMethod *servicetype.DiscoveryMethod      `json:"discoveryMethod"`
}

type ServiceTypeEditData struct {
	ID          int                               `json:"id"`
	Name        string                            `json:"name"`
	HasCustomer bool                              `json:"hasCustomer"`
	Properties  []*models.PropertyTypeInput       `json:"properties"`
	Endpoints   []*ServiceEndpointDefinitionInput `json:"endpoints"`
}

type SlotFilterInput struct {
	SlotStartDate time.Time `json:"slotStartDate"`
	SlotEndDate   time.Time `json:"slotEndDate"`
}

type StartBlock struct {
	ParamDefinitions []*flowschema.VariableDefinition `json:"paramDefinitions"`
	ExitPoint        *ent.ExitPoint                   `json:"exitPoint"`
}

func (StartBlock) IsBlockDetails() {}

type StartBlockInput struct {
	Cid              string                            `json:"cid"`
	ParamDefinitions []*flowschema.VariableDefinition  `json:"paramDefinitions"`
	UIRepresentation *flowschema.BlockUIRepresentation `json:"uiRepresentation"`
}

type StartFlowInput struct {
	FlowID    int                         `json:"flowID"`
	BssCode   string                      `json:"bssCode"`
	StartDate time.Time                   `json:"startDate"`
	Params    []*flowschema.VariableValue `json:"params"`
}

type SubflowBlock struct {
	Flow       *ent.Flow                        `json:"flow"`
	Params     []*flowschema.VariableExpression `json:"params"`
	EntryPoint *ent.EntryPoint                  `json:"entryPoint"`
	ExitPoint  *ent.ExitPoint                   `json:"exitPoint"`
}

func (SubflowBlock) IsBlockDetails() {}

type SubflowBlockInput struct {
	Cid              string                            `json:"cid"`
	FlowID           int                               `json:"flowId"`
	Params           []*VariableExpressionInput        `json:"params"`
	UIRepresentation *flowschema.BlockUIRepresentation `json:"uiRepresentation"`
}

type SurveyCellScanData struct {
	NetworkType           surveycellscan.NetworkType `json:"networkType"`
	SignalStrength        int                        `json:"signalStrength"`
	Timestamp             *int                       `json:"timestamp"`
	BaseStationID         *string                    `json:"baseStationID"`
	NetworkID             *string                    `json:"networkID"`
	SystemID              *string                    `json:"systemID"`
	CellID                *string                    `json:"cellID"`
	LocationAreaCode      *string                    `json:"locationAreaCode"`
	MobileCountryCode     *string                    `json:"mobileCountryCode"`
	MobileNetworkCode     *string                    `json:"mobileNetworkCode"`
	PrimaryScramblingCode *string                    `json:"primaryScramblingCode"`
	Operator              *string                    `json:"operator"`
	Arfcn                 *int                       `json:"arfcn"`
	PhysicalCellID        *string                    `json:"physicalCellID"`
	TrackingAreaCode      *string                    `json:"trackingAreaCode"`
	TimingAdvance         *int                       `json:"timingAdvance"`
	Earfcn                *int                       `json:"earfcn"`
	Uarfcn                *int                       `json:"uarfcn"`
	Latitude              *float64                   `json:"latitude"`
	Longitude             *float64                   `json:"longitude"`
	Altitude              *float64                   `json:"altitude"`
	Heading               *float64                   `json:"heading"`
	Rssi                  *float64                   `json:"rssi"`
}

type SurveyCreateData struct {
	Name                string                    `json:"name"`
	OwnerName           *string                   `json:"ownerName"`
	CreationTimestamp   *int                      `json:"creationTimestamp"`
	CompletionTimestamp int                       `json:"completionTimestamp"`
	Status              *SurveyStatus             `json:"status"`
	LocationID          int                       `json:"locationID"`
	SurveyResponses     []*SurveyQuestionResponse `json:"surveyResponses"`
}

type SurveyQuestionResponse struct {
	FormName         *string               `json:"formName"`
	FormDescription  *string               `json:"formDescription"`
	FormIndex        int                   `json:"formIndex"`
	QuestionFormat   *SurveyQuestionType   `json:"questionFormat"`
	QuestionText     string                `json:"questionText"`
	QuestionIndex    int                   `json:"questionIndex"`
	BoolData         *bool                 `json:"boolData"`
	EmailData        *string               `json:"emailData"`
	Latitude         *float64              `json:"latitude"`
	Longitude        *float64              `json:"longitude"`
	LocationAccuracy *float64              `json:"locationAccuracy"`
	Altitude         *float64              `json:"altitude"`
	PhoneData        *string               `json:"phoneData"`
	TextData         *string               `json:"textData"`
	FloatData        *float64              `json:"floatData"`
	IntData          *int                  `json:"intData"`
	DateData         *int                  `json:"dateData"`
	PhotoData        *FileInput            `json:"photoData"`
	WifiData         []*SurveyWiFiScanData `json:"wifiData"`
	CellData         []*SurveyCellScanData `json:"cellData"`
	ImagesData       []*FileInput          `json:"imagesData"`
}

type SurveyTemplateCategoryInput struct {
	ID                      *int                           `json:"id"`
	CategoryTitle           string                         `json:"categoryTitle"`
	CategoryDescription     string                         `json:"categoryDescription"`
	SurveyTemplateQuestions []*SurveyTemplateQuestionInput `json:"surveyTemplateQuestions"`
}

type SurveyTemplateQuestionInput struct {
	ID                  *int               `json:"id"`
	QuestionTitle       string             `json:"questionTitle"`
	QuestionDescription string             `json:"questionDescription"`
	QuestionType        SurveyQuestionType `json:"questionType"`
	Index               int                `json:"index"`
}

type SurveyWiFiScanData struct {
	Timestamp    int      `json:"timestamp"`
	Frequency    int      `json:"frequency"`
	Channel      int      `json:"channel"`
	Bssid        string   `json:"bssid"`
	Strength     int      `json:"strength"`
	Ssid         *string  `json:"ssid"`
	Band         *string  `json:"band"`
	ChannelWidth *int     `json:"channelWidth"`
	Capabilities *string  `json:"capabilities"`
	Latitude     *float64 `json:"latitude"`
	Longitude    *float64 `json:"longitude"`
	Altitude     *float64 `json:"altitude"`
	Heading      *float64 `json:"heading"`
	Rssi         *float64 `json:"rssi"`
}

type TechFilterInput struct {
	FilterType  TechFilterType      `json:"filterType"`
	Operator    enum.FilterOperator `json:"operator"`
	StringValue *string             `json:"stringValue"`
	IDSet       []int               `json:"idSet"`
	MaxDepth    *int                `json:"maxDepth"`
	StringSet   []string            `json:"stringSet"`
}

type TechnicianCheckListItemInput struct {
	ID                 int                     `json:"id"`
	SelectedEnumValues *string                 `json:"selectedEnumValues"`
	StringValue        *string                 `json:"stringValue"`
	Checked            *bool                   `json:"checked"`
	YesNoResponse      *checklistitem.YesNoVal `json:"yesNoResponse"`
	WifiData           []*SurveyWiFiScanData   `json:"wifiData"`
	CellData           []*SurveyCellScanData   `json:"cellData"`
	FilesData          []*FileInput            `json:"filesData"`
}

type TechnicianWorkOrderCheckInInput struct {
	DistanceMeters *float64   `json:"distanceMeters"`
	CheckInTime    *time.Time `json:"checkInTime"`
}

type TechnicianWorkOrderCheckOutInput struct {
	WorkOrderID         int                       `json:"workOrderId"`
	Reason              activity.ClockOutReason   `json:"reason"`
	CheckListCategories []*CheckListCategoryInput `json:"checkListCategories"`
	Comment             *string                   `json:"comment"`
	DistanceMeters      *float64                  `json:"distanceMeters"`
	CheckOutTime        *time.Time                `json:"checkOutTime"`
}

type TechnicianWorkOrderUploadInput struct {
	WorkOrderID         int                       `json:"workOrderId"`
	CheckListCategories []*CheckListCategoryInput `json:"checkListCategories"`
}

type ThresholdFilterInput struct {
	FilterType  ThresholdFilterType `json:"filterType"`
	Operator    enum.FilterOperator `json:"operator"`
	StringValue *string             `json:"stringValue"`
	IDSet       []int               `json:"idSet"`
	MaxDepth    *int                `json:"maxDepth"`
	StringSet   []string            `json:"stringSet"`
}

type ThresholdInput struct {
	Name        string       `json:"name"`
	Description string       `json:"description"`
	Status      bool         `json:"status"`
	Rule        []*RuleInput `json:"rule"`
	Kpi         int          `json:"kpi"`
}

type TopologyLink struct {
	Type   TopologyLinkType `json:"type"`
	Source ent.Noder        `json:"source"`
	Target ent.Noder        `json:"target"`
}

type TriggerBlock struct {
	TriggerType triggers.TriggerType             `json:"triggerType"`
	Params      []*flowschema.VariableExpression `json:"params"`
	ExitPoint   *ent.ExitPoint                   `json:"exitPoint"`
}

func (TriggerBlock) IsBlockDetails() {}

type TriggerBlockInput struct {
	Cid              string                            `json:"cid"`
	TriggerType      flowschema.TriggerTypeID          `json:"triggerType"`
	Params           []*VariableExpressionInput        `json:"params"`
	UIRepresentation *flowschema.BlockUIRepresentation `json:"uiRepresentation"`
}

type TrueFalseBlock struct {
	EntryPoint     *ent.EntryPoint `json:"entryPoint"`
	TrueExitPoint  *ent.ExitPoint  `json:"trueExitPoint"`
	FalseExitPoint *ent.ExitPoint  `json:"falseExitPoint"`
}

func (TrueFalseBlock) IsBlockDetails() {}

type TrueFalseBlockInput struct {
	Cid              string                            `json:"cid"`
	UIRepresentation *flowschema.BlockUIRepresentation `json:"uiRepresentation"`
}

type UpdateUserGroupsInput struct {
	ID             int   `json:"id"`
	AddGroupIds    []int `json:"addGroupIds"`
	RemoveGroupIds []int `json:"removeGroupIds"`
}

type UserAvailability struct {
	User          *ent.User `json:"user"`
	SlotStartDate time.Time `json:"slotStartDate"`
	SlotEndDate   time.Time `json:"slotEndDate"`
}

type UserFilterInput struct {
	FilterType    UserFilterType            `json:"filterType"`
	Operator      enum.FilterOperator       `json:"operator"`
	StringValue   *string                   `json:"stringValue"`
	PropertyValue *models.PropertyTypeInput `json:"propertyValue"`
	StatusValue   *user.Status              `json:"statusValue"`
	IDSet         []int                     `json:"idSet"`
	StringSet     []string                  `json:"stringSet"`
	MaxDepth      *int                      `json:"maxDepth"`
}

type UserSearchResult struct {
	Users []*ent.User `json:"users"`
	Count int         `json:"count"`
}

type UsersGroupFilterInput struct {
	FilterType  UsersGroupFilterType `json:"filterType"`
	Operator    enum.FilterOperator  `json:"operator"`
	StringValue *string              `json:"stringValue"`
	MaxDepth    *int                 `json:"maxDepth"`
}

type UsersGroupSearchResult struct {
	UsersGroups []*ent.UsersGroup `json:"usersGroups"`
	Count       int               `json:"count"`
}

type VariableExpressionInput struct {
	Type                  enum.VariableExpressionType `json:"type"`
	VariableDefinitionKey *string                     `json:"variableDefinitionKey"`
	PropertyTypeID        *int                        `json:"propertyTypeId"`
	Expression            string                      `json:"expression"`
	BlockVariables        []*BlockVariableInput       `json:"blockVariables"`
}

type VendorFilterInput struct {
	FilterType  VendorFilterType    `json:"filterType"`
	Operator    enum.FilterOperator `json:"operator"`
	StringValue *string             `json:"stringValue"`
	IDSet       []int               `json:"idSet"`
	MaxDepth    *int                `json:"maxDepth"`
	StringSet   []string            `json:"stringSet"`
}

type WorkOrderDefinitionInput struct {
	ID    *int `json:"id"`
	Index *int `json:"index"`
	Type  int  `json:"type"`
}

type WorkOrderExecutionResult struct {
	ID               int              `json:"id"`
	Name             string           `json:"name"`
	EquipmentAdded   []*ent.Equipment `json:"equipmentAdded"`
	EquipmentRemoved []int            `json:"equipmentRemoved"`
	LinkAdded        []*ent.Link      `json:"linkAdded"`
	LinkRemoved      []int            `json:"linkRemoved"`
}

type AlarmFilterFilterType string

const (
	AlarmFilterFilterTypeName AlarmFilterFilterType = "NAME"
)

var AllAlarmFilterFilterType = []AlarmFilterFilterType{
	AlarmFilterFilterTypeName,
}

func (e AlarmFilterFilterType) IsValid() bool {
	switch e {
	case AlarmFilterFilterTypeName:
		return true
	}
	return false
}

func (e AlarmFilterFilterType) String() string {
	return string(e)
}

func (e *AlarmFilterFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AlarmFilterFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AlarmFilterFilterType", str)
	}
	return nil
}

func (e AlarmFilterFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AlarmStatusFilterType string

const (
	AlarmStatusFilterTypeName AlarmStatusFilterType = "NAME"
)

var AllAlarmStatusFilterType = []AlarmStatusFilterType{
	AlarmStatusFilterTypeName,
}

func (e AlarmStatusFilterType) IsValid() bool {
	switch e {
	case AlarmStatusFilterTypeName:
		return true
	}
	return false
}

func (e AlarmStatusFilterType) String() string {
	return string(e)
}

func (e *AlarmStatusFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AlarmStatusFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AlarmStatusFilterType", str)
	}
	return nil
}

func (e AlarmStatusFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CommentEntity string

const (
	CommentEntityWorkOrder CommentEntity = "WORK_ORDER"
	CommentEntityProject   CommentEntity = "PROJECT"
)

var AllCommentEntity = []CommentEntity{
	CommentEntityWorkOrder,
	CommentEntityProject,
}

func (e CommentEntity) IsValid() bool {
	switch e {
	case CommentEntityWorkOrder, CommentEntityProject:
		return true
	}
	return false
}

func (e CommentEntity) String() string {
	return string(e)
}

func (e *CommentEntity) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CommentEntity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CommentEntity", str)
	}
	return nil
}

func (e CommentEntity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ComparatorFilterType string

const (
	ComparatorFilterTypeName ComparatorFilterType = "NAME"
)

var AllComparatorFilterType = []ComparatorFilterType{
	ComparatorFilterTypeName,
}

func (e ComparatorFilterType) IsValid() bool {
	switch e {
	case ComparatorFilterTypeName:
		return true
	}
	return false
}

func (e ComparatorFilterType) String() string {
	return string(e)
}

func (e *ComparatorFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ComparatorFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ComparatorFilterType", str)
	}
	return nil
}

func (e ComparatorFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CounterFamilyFilterType string

const (
	CounterFamilyFilterTypeName CounterFamilyFilterType = "NAME"
)

var AllCounterFamilyFilterType = []CounterFamilyFilterType{
	CounterFamilyFilterTypeName,
}

func (e CounterFamilyFilterType) IsValid() bool {
	switch e {
	case CounterFamilyFilterTypeName:
		return true
	}
	return false
}

func (e CounterFamilyFilterType) String() string {
	return string(e)
}

func (e *CounterFamilyFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CounterFamilyFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CounterFamilyFilterType", str)
	}
	return nil
}

func (e CounterFamilyFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CounterFilterType string

const (
	CounterFilterTypeName                 CounterFilterType = "NAME"
	CounterFilterTypeExternalid           CounterFilterType = "EXTERNALID"
	CounterFilterTypeNetworkmanagersystem CounterFilterType = "NETWORKMANAGERSYSTEM"
	CounterFilterTypeCounterfamily        CounterFilterType = "COUNTERFAMILY"
	CounterFilterTypeVendorfk             CounterFilterType = "VENDORFK"
)

var AllCounterFilterType = []CounterFilterType{
	CounterFilterTypeName,
	CounterFilterTypeExternalid,
	CounterFilterTypeNetworkmanagersystem,
	CounterFilterTypeCounterfamily,
	CounterFilterTypeVendorfk,
}

func (e CounterFilterType) IsValid() bool {
	switch e {
	case CounterFilterTypeName, CounterFilterTypeExternalid, CounterFilterTypeNetworkmanagersystem, CounterFilterTypeCounterfamily, CounterFilterTypeVendorfk:
		return true
	}
	return false
}

func (e CounterFilterType) String() string {
	return string(e)
}

func (e *CounterFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CounterFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CounterFilterType", str)
	}
	return nil
}

func (e CounterFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DomainFilterType string

const (
	DomainFilterTypeName DomainFilterType = "NAME"
)

var AllDomainFilterType = []DomainFilterType{
	DomainFilterTypeName,
}

func (e DomainFilterType) IsValid() bool {
	switch e {
	case DomainFilterTypeName:
		return true
	}
	return false
}

func (e DomainFilterType) String() string {
	return string(e)
}

func (e *DomainFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DomainFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DomainFilterType", str)
	}
	return nil
}

func (e DomainFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EventSeverityFilterType string

const (
	EventSeverityFilterTypeName EventSeverityFilterType = "NAME"
)

var AllEventSeverityFilterType = []EventSeverityFilterType{
	EventSeverityFilterTypeName,
}

func (e EventSeverityFilterType) IsValid() bool {
	switch e {
	case EventSeverityFilterTypeName:
		return true
	}
	return false
}

func (e EventSeverityFilterType) String() string {
	return string(e)
}

func (e *EventSeverityFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventSeverityFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventSeverityFilterType", str)
	}
	return nil
}

func (e EventSeverityFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FilterEntity string

const (
	FilterEntityWorkOrder FilterEntity = "WORK_ORDER"
	FilterEntityPort      FilterEntity = "PORT"
	FilterEntityEquipment FilterEntity = "EQUIPMENT"
	FilterEntityLink      FilterEntity = "LINK"
	FilterEntityLocation  FilterEntity = "LOCATION"
	FilterEntityService   FilterEntity = "SERVICE"
)

var AllFilterEntity = []FilterEntity{
	FilterEntityWorkOrder,
	FilterEntityPort,
	FilterEntityEquipment,
	FilterEntityLink,
	FilterEntityLocation,
	FilterEntityService,
}

func (e FilterEntity) IsValid() bool {
	switch e {
	case FilterEntityWorkOrder, FilterEntityPort, FilterEntityEquipment, FilterEntityLink, FilterEntityLocation, FilterEntityService:
		return true
	}
	return false
}

func (e FilterEntity) String() string {
	return string(e)
}

func (e *FilterEntity) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FilterEntity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FilterEntity", str)
	}
	return nil
}

func (e FilterEntity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// what filters should we apply on flow instances
type FlowInstanceFilterType string

const (
	FlowInstanceFilterTypeFlowInstanceStatus              FlowInstanceFilterType = "FLOW_INSTANCE_STATUS"
	FlowInstanceFilterTypeFlowInstanceType                FlowInstanceFilterType = "FLOW_INSTANCE_TYPE"
	FlowInstanceFilterTypeFlowInstanceBssCode             FlowInstanceFilterType = "FLOW_INSTANCE_BSS_CODE"
	FlowInstanceFilterTypeFlowInstanceServiceInstanceCode FlowInstanceFilterType = "FLOW_INSTANCE_SERVICE_INSTANCE_CODE"
)

var AllFlowInstanceFilterType = []FlowInstanceFilterType{
	FlowInstanceFilterTypeFlowInstanceStatus,
	FlowInstanceFilterTypeFlowInstanceType,
	FlowInstanceFilterTypeFlowInstanceBssCode,
	FlowInstanceFilterTypeFlowInstanceServiceInstanceCode,
}

func (e FlowInstanceFilterType) IsValid() bool {
	switch e {
	case FlowInstanceFilterTypeFlowInstanceStatus, FlowInstanceFilterTypeFlowInstanceType, FlowInstanceFilterTypeFlowInstanceBssCode, FlowInstanceFilterTypeFlowInstanceServiceInstanceCode:
		return true
	}
	return false
}

func (e FlowInstanceFilterType) String() string {
	return string(e)
}

func (e *FlowInstanceFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FlowInstanceFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FlowInstanceFilterType", str)
	}
	return nil
}

func (e FlowInstanceFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FormulaFilterType string

const (
	FormulaFilterTypeTextformula FormulaFilterType = "TEXTFORMULA"
	FormulaFilterTypeStatus      FormulaFilterType = "STATUS"
)

var AllFormulaFilterType = []FormulaFilterType{
	FormulaFilterTypeTextformula,
	FormulaFilterTypeStatus,
}

func (e FormulaFilterType) IsValid() bool {
	switch e {
	case FormulaFilterTypeTextformula, FormulaFilterTypeStatus:
		return true
	}
	return false
}

func (e FormulaFilterType) String() string {
	return string(e)
}

func (e *FormulaFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FormulaFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FormulaFilterType", str)
	}
	return nil
}

func (e FormulaFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ImageEntity string

const (
	ImageEntityLocation      ImageEntity = "LOCATION"
	ImageEntityWorkOrder     ImageEntity = "WORK_ORDER"
	ImageEntitySiteSurvey    ImageEntity = "SITE_SURVEY"
	ImageEntityEquipment     ImageEntity = "EQUIPMENT"
	ImageEntityUser          ImageEntity = "USER"
	ImageEntityChecklistItem ImageEntity = "CHECKLIST_ITEM"
)

var AllImageEntity = []ImageEntity{
	ImageEntityLocation,
	ImageEntityWorkOrder,
	ImageEntitySiteSurvey,
	ImageEntityEquipment,
	ImageEntityUser,
	ImageEntityChecklistItem,
}

func (e ImageEntity) IsValid() bool {
	switch e {
	case ImageEntityLocation, ImageEntityWorkOrder, ImageEntitySiteSurvey, ImageEntityEquipment, ImageEntityUser, ImageEntityChecklistItem:
		return true
	}
	return false
}

func (e ImageEntity) String() string {
	return string(e)
}

func (e *ImageEntity) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ImageEntity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ImageEntity", str)
	}
	return nil
}

func (e ImageEntity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type KpiCategoryFilterType string

const (
	KpiCategoryFilterTypeName KpiCategoryFilterType = "NAME"
)

var AllKpiCategoryFilterType = []KpiCategoryFilterType{
	KpiCategoryFilterTypeName,
}

func (e KpiCategoryFilterType) IsValid() bool {
	switch e {
	case KpiCategoryFilterTypeName:
		return true
	}
	return false
}

func (e KpiCategoryFilterType) String() string {
	return string(e)
}

func (e *KpiCategoryFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = KpiCategoryFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid KpiCategoryFilterType", str)
	}
	return nil
}

func (e KpiCategoryFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type KpiFilterType string

const (
	KpiFilterTypeName KpiFilterType = "NAME"
)

var AllKpiFilterType = []KpiFilterType{
	KpiFilterTypeName,
}

func (e KpiFilterType) IsValid() bool {
	switch e {
	case KpiFilterTypeName:
		return true
	}
	return false
}

func (e KpiFilterType) String() string {
	return string(e)
}

func (e *KpiFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = KpiFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid KpiFilterType", str)
	}
	return nil
}

func (e KpiFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type KqiCategoryFilterType string

const (
	KqiCategoryFilterTypeName KqiCategoryFilterType = "NAME"
)

var AllKqiCategoryFilterType = []KqiCategoryFilterType{
	KqiCategoryFilterTypeName,
}

func (e KqiCategoryFilterType) IsValid() bool {
	switch e {
	case KqiCategoryFilterTypeName:
		return true
	}
	return false
}

func (e KqiCategoryFilterType) String() string {
	return string(e)
}

func (e *KqiCategoryFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = KqiCategoryFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid KqiCategoryFilterType", str)
	}
	return nil
}

func (e KqiCategoryFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type KqiFilterType string

const (
	KqiFilterTypeName KqiFilterType = "NAME"
)

var AllKqiFilterType = []KqiFilterType{
	KqiFilterTypeName,
}

func (e KqiFilterType) IsValid() bool {
	switch e {
	case KqiFilterTypeName:
		return true
	}
	return false
}

func (e KqiFilterType) String() string {
	return string(e)
}

func (e *KqiFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = KqiFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid KqiFilterType", str)
	}
	return nil
}

func (e KqiFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type KqiPerspectiveFilterType string

const (
	KqiPerspectiveFilterTypeName KqiPerspectiveFilterType = "NAME"
)

var AllKqiPerspectiveFilterType = []KqiPerspectiveFilterType{
	KqiPerspectiveFilterTypeName,
}

func (e KqiPerspectiveFilterType) IsValid() bool {
	switch e {
	case KqiPerspectiveFilterTypeName:
		return true
	}
	return false
}

func (e KqiPerspectiveFilterType) String() string {
	return string(e)
}

func (e *KqiPerspectiveFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = KqiPerspectiveFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid KqiPerspectiveFilterType", str)
	}
	return nil
}

func (e KqiPerspectiveFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type KqiSourceFilterType string

const (
	KqiSourceFilterTypeName KqiSourceFilterType = "NAME"
)

var AllKqiSourceFilterType = []KqiSourceFilterType{
	KqiSourceFilterTypeName,
}

func (e KqiSourceFilterType) IsValid() bool {
	switch e {
	case KqiSourceFilterTypeName:
		return true
	}
	return false
}

func (e KqiSourceFilterType) String() string {
	return string(e)
}

func (e *KqiSourceFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = KqiSourceFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid KqiSourceFilterType", str)
	}
	return nil
}

func (e KqiSourceFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type KqiTargetFilterType string

const (
	KqiTargetFilterTypeName KqiTargetFilterType = "NAME"
)

var AllKqiTargetFilterType = []KqiTargetFilterType{
	KqiTargetFilterTypeName,
}

func (e KqiTargetFilterType) IsValid() bool {
	switch e {
	case KqiTargetFilterTypeName:
		return true
	}
	return false
}

func (e KqiTargetFilterType) String() string {
	return string(e)
}

func (e *KqiTargetFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = KqiTargetFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid KqiTargetFilterType", str)
	}
	return nil
}

func (e KqiTargetFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type KqiTemporalFrequencyFilterType string

const (
	KqiTemporalFrequencyFilterTypeName KqiTemporalFrequencyFilterType = "NAME"
)

var AllKqiTemporalFrequencyFilterType = []KqiTemporalFrequencyFilterType{
	KqiTemporalFrequencyFilterTypeName,
}

func (e KqiTemporalFrequencyFilterType) IsValid() bool {
	switch e {
	case KqiTemporalFrequencyFilterTypeName:
		return true
	}
	return false
}

func (e KqiTemporalFrequencyFilterType) String() string {
	return string(e)
}

func (e *KqiTemporalFrequencyFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = KqiTemporalFrequencyFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid KqiTemporalFrequencyFilterType", str)
	}
	return nil
}

func (e KqiTemporalFrequencyFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NetworkTypeFilterType string

const (
	NetworkTypeFilterTypeName NetworkTypeFilterType = "NAME"
)

var AllNetworkTypeFilterType = []NetworkTypeFilterType{
	NetworkTypeFilterTypeName,
}

func (e NetworkTypeFilterType) IsValid() bool {
	switch e {
	case NetworkTypeFilterTypeName:
		return true
	}
	return false
}

func (e NetworkTypeFilterType) String() string {
	return string(e)
}

func (e *NetworkTypeFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NetworkTypeFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NetworkTypeFilterType", str)
	}
	return nil
}

func (e NetworkTypeFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrganizationFilterType string

const (
	OrganizationFilterTypeID          OrganizationFilterType = "ID"
	OrganizationFilterTypeName        OrganizationFilterType = "NAME"
	OrganizationFilterTypeDescription OrganizationFilterType = "DESCRIPTION"
)

var AllOrganizationFilterType = []OrganizationFilterType{
	OrganizationFilterTypeID,
	OrganizationFilterTypeName,
	OrganizationFilterTypeDescription,
}

func (e OrganizationFilterType) IsValid() bool {
	switch e {
	case OrganizationFilterTypeID, OrganizationFilterTypeName, OrganizationFilterTypeDescription:
		return true
	}
	return false
}

func (e OrganizationFilterType) String() string {
	return string(e)
}

func (e *OrganizationFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrganizationFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrganizationFilterType", str)
	}
	return nil
}

func (e OrganizationFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// what filters should we apply on permissionsPolicy
type PermissionsPolicyFilterType string

const (
	PermissionsPolicyFilterTypePermissionsPolicyName PermissionsPolicyFilterType = "PERMISSIONS_POLICY_NAME"
)

var AllPermissionsPolicyFilterType = []PermissionsPolicyFilterType{
	PermissionsPolicyFilterTypePermissionsPolicyName,
}

func (e PermissionsPolicyFilterType) IsValid() bool {
	switch e {
	case PermissionsPolicyFilterTypePermissionsPolicyName:
		return true
	}
	return false
}

func (e PermissionsPolicyFilterType) String() string {
	return string(e)
}

func (e *PermissionsPolicyFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PermissionsPolicyFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PermissionsPolicyFilterType", str)
	}
	return nil
}

func (e PermissionsPolicyFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProjectFilterType string

const (
	ProjectFilterTypeProjectName         ProjectFilterType = "PROJECT_NAME"
	ProjectFilterTypeProjectOwnedBy      ProjectFilterType = "PROJECT_OWNED_BY"
	ProjectFilterTypeProjectType         ProjectFilterType = "PROJECT_TYPE"
	ProjectFilterTypeLocationInst        ProjectFilterType = "LOCATION_INST"
	ProjectFilterTypeProjectPriority     ProjectFilterType = "PROJECT_PRIORITY"
	ProjectFilterTypeProperty            ProjectFilterType = "PROPERTY"
	ProjectFilterTypeProjectCreationDate ProjectFilterType = "PROJECT_CREATION_DATE"
)

var AllProjectFilterType = []ProjectFilterType{
	ProjectFilterTypeProjectName,
	ProjectFilterTypeProjectOwnedBy,
	ProjectFilterTypeProjectType,
	ProjectFilterTypeLocationInst,
	ProjectFilterTypeProjectPriority,
	ProjectFilterTypeProperty,
	ProjectFilterTypeProjectCreationDate,
}

func (e ProjectFilterType) IsValid() bool {
	switch e {
	case ProjectFilterTypeProjectName, ProjectFilterTypeProjectOwnedBy, ProjectFilterTypeProjectType, ProjectFilterTypeLocationInst, ProjectFilterTypeProjectPriority, ProjectFilterTypeProperty, ProjectFilterTypeProjectCreationDate:
		return true
	}
	return false
}

func (e ProjectFilterType) String() string {
	return string(e)
}

func (e *ProjectFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectFilterType", str)
	}
	return nil
}

func (e ProjectFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RecommendationsCategoryFilterType string

const (
	RecommendationsCategoryFilterTypeName RecommendationsCategoryFilterType = "NAME"
)

var AllRecommendationsCategoryFilterType = []RecommendationsCategoryFilterType{
	RecommendationsCategoryFilterTypeName,
}

func (e RecommendationsCategoryFilterType) IsValid() bool {
	switch e {
	case RecommendationsCategoryFilterTypeName:
		return true
	}
	return false
}

func (e RecommendationsCategoryFilterType) String() string {
	return string(e)
}

func (e *RecommendationsCategoryFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RecommendationsCategoryFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RecommendationsCategoryFilterType", str)
	}
	return nil
}

func (e RecommendationsCategoryFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RecommendationsFilterType string

const (
	RecommendationsFilterTypeExternalid              RecommendationsFilterType = "EXTERNALID"
	RecommendationsFilterTypeResource                RecommendationsFilterType = "RESOURCE"
	RecommendationsFilterTypeAlarmtype               RecommendationsFilterType = "ALARMTYPE"
	RecommendationsFilterTypeShortdescription        RecommendationsFilterType = "SHORTDESCRIPTION"
	RecommendationsFilterTypeLongdescription         RecommendationsFilterType = "LONGDESCRIPTION"
	RecommendationsFilterTypeCommand                 RecommendationsFilterType = "COMMAND"
	RecommendationsFilterTypePriority                RecommendationsFilterType = "PRIORITY"
	RecommendationsFilterTypeStatus                  RecommendationsFilterType = "STATUS"
	RecommendationsFilterTypeUsed                    RecommendationsFilterType = "USED"
	RecommendationsFilterTypeRunbook                 RecommendationsFilterType = "RUNBOOK"
	RecommendationsFilterTypeRecommendationssource   RecommendationsFilterType = "RECOMMENDATIONSSOURCE"
	RecommendationsFilterTypeRecommendationscategory RecommendationsFilterType = "RECOMMENDATIONSCATEGORY"
	RecommendationsFilterTypeUsercreate              RecommendationsFilterType = "USERCREATE"
	RecommendationsFilterTypeUserapprove             RecommendationsFilterType = "USERAPPROVE"
	RecommendationsFilterTypeVendorrecommendations   RecommendationsFilterType = "VENDORRECOMMENDATIONS"
)

var AllRecommendationsFilterType = []RecommendationsFilterType{
	RecommendationsFilterTypeExternalid,
	RecommendationsFilterTypeResource,
	RecommendationsFilterTypeAlarmtype,
	RecommendationsFilterTypeShortdescription,
	RecommendationsFilterTypeLongdescription,
	RecommendationsFilterTypeCommand,
	RecommendationsFilterTypePriority,
	RecommendationsFilterTypeStatus,
	RecommendationsFilterTypeUsed,
	RecommendationsFilterTypeRunbook,
	RecommendationsFilterTypeRecommendationssource,
	RecommendationsFilterTypeRecommendationscategory,
	RecommendationsFilterTypeUsercreate,
	RecommendationsFilterTypeUserapprove,
	RecommendationsFilterTypeVendorrecommendations,
}

func (e RecommendationsFilterType) IsValid() bool {
	switch e {
	case RecommendationsFilterTypeExternalid, RecommendationsFilterTypeResource, RecommendationsFilterTypeAlarmtype, RecommendationsFilterTypeShortdescription, RecommendationsFilterTypeLongdescription, RecommendationsFilterTypeCommand, RecommendationsFilterTypePriority, RecommendationsFilterTypeStatus, RecommendationsFilterTypeUsed, RecommendationsFilterTypeRunbook, RecommendationsFilterTypeRecommendationssource, RecommendationsFilterTypeRecommendationscategory, RecommendationsFilterTypeUsercreate, RecommendationsFilterTypeUserapprove, RecommendationsFilterTypeVendorrecommendations:
		return true
	}
	return false
}

func (e RecommendationsFilterType) String() string {
	return string(e)
}

func (e *RecommendationsFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RecommendationsFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RecommendationsFilterType", str)
	}
	return nil
}

func (e RecommendationsFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RecommendationsSourcesFilterType string

const (
	RecommendationsSourcesFilterTypeName RecommendationsSourcesFilterType = "NAME"
)

var AllRecommendationsSourcesFilterType = []RecommendationsSourcesFilterType{
	RecommendationsSourcesFilterTypeName,
}

func (e RecommendationsSourcesFilterType) IsValid() bool {
	switch e {
	case RecommendationsSourcesFilterTypeName:
		return true
	}
	return false
}

func (e RecommendationsSourcesFilterType) String() string {
	return string(e)
}

func (e *RecommendationsSourcesFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RecommendationsSourcesFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RecommendationsSourcesFilterType", str)
	}
	return nil
}

func (e RecommendationsSourcesFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RuleTypeFilterType string

const (
	RuleTypeFilterTypeName RuleTypeFilterType = "NAME"
)

var AllRuleTypeFilterType = []RuleTypeFilterType{
	RuleTypeFilterTypeName,
}

func (e RuleTypeFilterType) IsValid() bool {
	switch e {
	case RuleTypeFilterTypeName:
		return true
	}
	return false
}

func (e RuleTypeFilterType) String() string {
	return string(e)
}

func (e *RuleTypeFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RuleTypeFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RuleTypeFilterType", str)
	}
	return nil
}

func (e RuleTypeFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SurveyQuestionType string

const (
	SurveyQuestionTypeBool     SurveyQuestionType = "BOOL"
	SurveyQuestionTypeEmail    SurveyQuestionType = "EMAIL"
	SurveyQuestionTypeCoords   SurveyQuestionType = "COORDS"
	SurveyQuestionTypePhone    SurveyQuestionType = "PHONE"
	SurveyQuestionTypeText     SurveyQuestionType = "TEXT"
	SurveyQuestionTypeTextarea SurveyQuestionType = "TEXTAREA"
	SurveyQuestionTypePhoto    SurveyQuestionType = "PHOTO"
	SurveyQuestionTypeWifi     SurveyQuestionType = "WIFI"
	SurveyQuestionTypeCellular SurveyQuestionType = "CELLULAR"
	SurveyQuestionTypeFloat    SurveyQuestionType = "FLOAT"
	SurveyQuestionTypeInteger  SurveyQuestionType = "INTEGER"
	SurveyQuestionTypeDate     SurveyQuestionType = "DATE"
)

var AllSurveyQuestionType = []SurveyQuestionType{
	SurveyQuestionTypeBool,
	SurveyQuestionTypeEmail,
	SurveyQuestionTypeCoords,
	SurveyQuestionTypePhone,
	SurveyQuestionTypeText,
	SurveyQuestionTypeTextarea,
	SurveyQuestionTypePhoto,
	SurveyQuestionTypeWifi,
	SurveyQuestionTypeCellular,
	SurveyQuestionTypeFloat,
	SurveyQuestionTypeInteger,
	SurveyQuestionTypeDate,
}

func (e SurveyQuestionType) IsValid() bool {
	switch e {
	case SurveyQuestionTypeBool, SurveyQuestionTypeEmail, SurveyQuestionTypeCoords, SurveyQuestionTypePhone, SurveyQuestionTypeText, SurveyQuestionTypeTextarea, SurveyQuestionTypePhoto, SurveyQuestionTypeWifi, SurveyQuestionTypeCellular, SurveyQuestionTypeFloat, SurveyQuestionTypeInteger, SurveyQuestionTypeDate:
		return true
	}
	return false
}

func (e SurveyQuestionType) String() string {
	return string(e)
}

func (e *SurveyQuestionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SurveyQuestionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SurveyQuestionType", str)
	}
	return nil
}

func (e SurveyQuestionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SurveyStatus string

const (
	SurveyStatusPlanned    SurveyStatus = "PLANNED"
	SurveyStatusInprogress SurveyStatus = "INPROGRESS"
	SurveyStatusCompleted  SurveyStatus = "COMPLETED"
)

var AllSurveyStatus = []SurveyStatus{
	SurveyStatusPlanned,
	SurveyStatusInprogress,
	SurveyStatusCompleted,
}

func (e SurveyStatus) IsValid() bool {
	switch e {
	case SurveyStatusPlanned, SurveyStatusInprogress, SurveyStatusCompleted:
		return true
	}
	return false
}

func (e SurveyStatus) String() string {
	return string(e)
}

func (e *SurveyStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SurveyStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SurveyStatus", str)
	}
	return nil
}

func (e SurveyStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TechFilterType string

const (
	TechFilterTypeName TechFilterType = "NAME"
)

var AllTechFilterType = []TechFilterType{
	TechFilterTypeName,
}

func (e TechFilterType) IsValid() bool {
	switch e {
	case TechFilterTypeName:
		return true
	}
	return false
}

func (e TechFilterType) String() string {
	return string(e)
}

func (e *TechFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TechFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TechFilterType", str)
	}
	return nil
}

func (e TechFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ThresholdFilterType string

const (
	ThresholdFilterTypeName ThresholdFilterType = "NAME"
)

var AllThresholdFilterType = []ThresholdFilterType{
	ThresholdFilterTypeName,
}

func (e ThresholdFilterType) IsValid() bool {
	switch e {
	case ThresholdFilterTypeName:
		return true
	}
	return false
}

func (e ThresholdFilterType) String() string {
	return string(e)
}

func (e *ThresholdFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ThresholdFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ThresholdFilterType", str)
	}
	return nil
}

func (e ThresholdFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TopologyLinkType string

const (
	TopologyLinkTypePhysical TopologyLinkType = "PHYSICAL"
)

var AllTopologyLinkType = []TopologyLinkType{
	TopologyLinkTypePhysical,
}

func (e TopologyLinkType) IsValid() bool {
	switch e {
	case TopologyLinkTypePhysical:
		return true
	}
	return false
}

func (e TopologyLinkType) String() string {
	return string(e)
}

func (e *TopologyLinkType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TopologyLinkType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TopologyLinkType", str)
	}
	return nil
}

func (e TopologyLinkType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// what filters should we apply on users
type UserFilterType string

const (
	UserFilterTypeUserName         UserFilterType = "USER_NAME"
	UserFilterTypeUserStatus       UserFilterType = "USER_STATUS"
	UserFilterTypeUserOrganization UserFilterType = "USER_ORGANIZATION"
)

var AllUserFilterType = []UserFilterType{
	UserFilterTypeUserName,
	UserFilterTypeUserStatus,
	UserFilterTypeUserOrganization,
}

func (e UserFilterType) IsValid() bool {
	switch e {
	case UserFilterTypeUserName, UserFilterTypeUserStatus, UserFilterTypeUserOrganization:
		return true
	}
	return false
}

func (e UserFilterType) String() string {
	return string(e)
}

func (e *UserFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserFilterType", str)
	}
	return nil
}

func (e UserFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// what filters should we apply on usersGroups
type UsersGroupFilterType string

const (
	UsersGroupFilterTypeGroupName UsersGroupFilterType = "GROUP_NAME"
)

var AllUsersGroupFilterType = []UsersGroupFilterType{
	UsersGroupFilterTypeGroupName,
}

func (e UsersGroupFilterType) IsValid() bool {
	switch e {
	case UsersGroupFilterTypeGroupName:
		return true
	}
	return false
}

func (e UsersGroupFilterType) String() string {
	return string(e)
}

func (e *UsersGroupFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UsersGroupFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UsersGroupFilterType", str)
	}
	return nil
}

func (e UsersGroupFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type VendorFilterType string

const (
	VendorFilterTypeName VendorFilterType = "NAME"
)

var AllVendorFilterType = []VendorFilterType{
	VendorFilterTypeName,
}

func (e VendorFilterType) IsValid() bool {
	switch e {
	case VendorFilterTypeName:
		return true
	}
	return false
}

func (e VendorFilterType) String() string {
	return string(e)
}

func (e *VendorFilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VendorFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VendorFilterType", str)
	}
	return nil
}

func (e VendorFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
