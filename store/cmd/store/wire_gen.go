// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"context"
	"fmt"
	"github.com/facebookincubator/symphony/pkg/log"
	"github.com/facebookincubator/symphony/pkg/server"
	"github.com/facebookincubator/symphony/pkg/server/metrics"
	"github.com/facebookincubator/symphony/pkg/server/xserver"
	"github.com/facebookincubator/symphony/pkg/telemetry"
	"github.com/facebookincubator/symphony/store/handler"
	"gocloud.dev/blob"
	"gocloud.dev/server/health"
)

import (
	_ "gocloud.dev/blob/azureblob"
	_ "gocloud.dev/blob/gcsblob"
	_ "gocloud.dev/blob/s3blob"
)

// Injectors from wire.go:

func newApplication(ctx context.Context, flags *cliFlags) (*application, func(), error) {
	config := flags.LogConfig
	logger, cleanup, err := log.ProvideLogger(config)
	if err != nil {
		return nil, nil, err
	}
	zapLogger := log.ProvideZapLogger(logger)
	bucket, cleanup2, err := provideBucket(ctx, flags)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	handlerConfig := handler.Config{
		Logger: logger,
		Bucket: bucket,
	}
	handlerHandler := handler.New(handlerConfig)
	xserverZapLogger := xserver.NewRequestLogger(logger)
	v := _wireValue
	telemetryConfig := flags.TelemetryConfig
	exporter, cleanup3, err := telemetry.ProvideTraceExporter(telemetryConfig)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	profilingAddress := _wireProfilingAddressValue
	sampler := telemetry.ProvideTraceSampler(telemetryConfig)
	handlerFunc := xserver.NewRecoveryHandler(logger)
	defaultDriver := _wireDefaultDriverValue
	options := &server.Options{
		RequestLogger:         xserverZapLogger,
		HealthChecks:          v,
		TraceExporter:         exporter,
		ProfilingAddress:      profilingAddress,
		DefaultSamplingPolicy: sampler,
		RecoveryHandler:       handlerFunc,
		Driver:                defaultDriver,
	}
	serverServer := server.New(handlerHandler, options)
	string2 := flags.ListenAddress
	viewExporter, err := telemetry.ProvideViewExporter(telemetryConfig)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	v2 := xserver.DefaultViews()
	metricsConfig := metrics.Config{
		Log:      zapLogger,
		Exporter: viewExporter,
		Views:    v2,
	}
	metricsMetrics := metrics.New(metricsConfig)
	addr := flags.MetricsAddress
	mainApplication := &application{
		Logger:      zapLogger,
		server:      serverServer,
		addr:        string2,
		metrics:     metricsMetrics,
		metricsAddr: addr,
	}
	return mainApplication, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

var (
	_wireValue                 = []health.Checker(nil)
	_wireProfilingAddressValue = server.ProfilingAddress(":6060")
	_wireDefaultDriverValue    = &server.DefaultDriver{}
)

// wire.go:

func provideBucket(ctx context.Context, flags *cliFlags) (*blob.Bucket, func(), error) {
	bucket, err := blob.OpenBucket(ctx, flags.BucketURL.String())
	if err != nil {
		return nil, nil, fmt.Errorf("cannot open blob bucket: %w", err)
	}
	return bucket, func() { _ = bucket.Close() }, nil
}
