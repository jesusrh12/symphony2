version: 2.1

aliases:
  - &mktestdir
    run:
      name: Create results directory
      command: mkdir -p ~/test-results

  - &storetestdir
    store_test_results:
      path: ~/test-results

  - &publishworkspace
    workspace:
      default: /tmp/publish
      type: string

  - &onlymaster
    filters:
      branches:
        only: master

  - &onlypr
    filters:
      branches:
        ignore: master

  - &tfworkdir
    working_directory: infra/tf/symphony

  - &tfvardir
    vardir: /tmp/tfvars

  - &appdir
    working_directory: app

  - &invdir
    working_directory: app/fbcnms-projects/inventory

  - &clidir
    working_directory: cli

orbs:
  artifactory: circleci/artifactory@1.0.0
  docker: circleci/docker@1.5.0
  go: circleci/go@1.4.0
  helm: circleci/helm@1.0.0

executors:
  node:
    docker:
      - image: circleci/node
  golangci:
    parameters:
      tag:
        default: v1.31
        type: string
    docker:
      - image: golangci/golangci-lint:<<parameters.tag>>
  terraform:
    parameters:
      tag:
        default: 0.13.5
        type: string
    docker:
      - image: hashicorp/terraform:<<parameters.tag>>
  tflint:
    docker:
      - image: wata727/tflint
  testim:
    docker:
      - image: testim/docker-cli
  yarnnode:
    docker:
      - image: circleci/node:10-buster-browsers-legacy
  python:
    docker:
      - image: circleci/python:3.7

commands:
  helm-install:
    steps:
      - helm/install-helm-client:
          version: v3.3.2

  helm-lint:
    parameters:
      chart:
        type: string
      working_directory:
        type: string
    steps:
      - run:
          name: Lint <<parameters.chart>> chart
          working_directory: <<parameters.working_directory>>
          command: helm lint --strict <<parameters.chart>>

  helm-package:
    parameters:
      destination:
        type: string
      chart:
        type: string
      working_directory:
        default: infra/helm
        type: string
    steps:
      - run:
          name: Package chart
          working_directory: <<parameters.working_directory>>
          command: helm package -d <<parameters.destination>> <<parameters.chart>>

  tfinit:
    parameters:
      working_directory:
        default: infra/tf/symphony
        type: string
      workspace:
        default: ""
        type: string
    steps:
      - run:
          name: Initialize terraform working directory
          working_directory: <<parameters.working_directory>>
          command: terraform init
      - when:
          condition: <<parameters.workspace>>
          steps:
            - run:
                name: Select terraform workspace
                working_directory: <<parameters.working_directory>>
                command: terraform workspace select <<parameters.workspace>>

  tfdiff:
    parameters:
      vardir:
        type: string
      tag:
        type: string
      repo:
        type: string
      working_directory:
        default: infra/tf/symphony
        type: string
    steps:
      - run:
          name: Compare <<parameters.tag>> versions
          working_directory: <<parameters.working_directory>>
          command: |
            current=$(terraform output <<parameters.tag>>)
            latest=$(jfrog rt s --sort-by created --sort-order desc --limit 1 \
              --props 'docker.manifest=*;docker.repoName=<<parameters.repo>>' symphony-prod-docker | \
              jq -r '.[].props."docker.manifest"[0]')
            if [ "$current" != "$latest" ]; then
              echo <<parameters.tag>> modified from $current to $latest
              printf '<<parameters.tag>> = "%s"\n' $latest > <<parameters.vardir>>/<<parameters.tag>>.auto.tfvars
            else
              echo <<parameters.tag>> $current not modified
            fi

  tfathalt:
    parameters:
      vardir:
        type: string
    steps:
      - attach_workspace:
          name: Attach tfvars directory
          at: <<parameters.vardir>>
      - run:
          name: Halt on no tfvars
          working_directory: <<parameters.vardir>>
          command: ls *.auto.tfvars &> /dev/null || circleci step halt

  tfprepare:
    parameters:
      vardir:
        type: string
      working_directory:
        default: infra/tf/symphony
        type: string
    steps:
      - tfathalt:
          vardir: <<parameters.vardir>>
      - run:
          name: Copy tfvars
          working_directory: <<parameters.working_directory>>
          command: cp <<parameters.vardir>>/*.auto.tfvars .

  tfblocker:
    parameters:
      workspace:
        type: string
    steps:
      - run:
          name: Check deploy blocker
          command: |
            test "${WORKSPACE_DEPLOY+1}" || exit 0
            for workspace in ${WORKSPACE_DEPLOY//,/ }; do
              test "$workspace" != "<<parameters.workspace>>" || exit 0
            done
            circleci step halt

  yarn-install:
    steps:
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "app/yarn.lock" }}
      - run:
          name: Install Dependencies
          <<: *appdir
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "app/yarn.lock" }}
          paths:
            - ~/.cache/yarn

  psym-setup:
    steps:
      - run:
          name: Install Python requirements
          <<: *clidir
          command: sudo pip install -r requirements.txt

  validate-gql:
    parameters:
      schema_directory:
        type: string
      package_name:
        type: string
    steps:
      - run:
          name: Validate <<parameters.package_name>> GraphQL files
          <<: *clidir
          command: gql-compiler --verify <<parameters.schema_directory>> <<parameters.package_name>>/graphql/

jobs:
  lint:
    executor: golangci
    resource_class: large
    steps:
      - checkout
      - *mktestdir
      - go/mod-download-cached
      - run:
          name: Lint tests
          command: golangci-lint run --out-format junit-xml > ~/test-results/lint.xml
      - *storetestdir

  unit:
    docker:
      - image: circleci/golang
      - image: circleci/mysql:5.7
        environment:
          MYSQL_ROOT_PASSWORD: root
    resource_class: large
    steps:
      - checkout
      - run:
          name: Wait for database
          command: dockerize -timeout 1m -wait tcp://localhost:3306
      - *mktestdir
      - go/mod-download-cached
      - run:
          name: Unit tests
          environment:
            DB_URL: mysql://root:root@localhost:3306/circle_test?parseTime=True
          command: gotestsum -f short-verbose --junitfile ~/test-results/unit.xml
      - *storetestdir

  docker-publish:
    executor: node
    resource_class: large
    environment:
      DOCKER_BUILDKIT: 1
    parameters:
      path:
        default: .
        type: string
      docker-context:
        default: .
        type: string
      dockerfile:
        default: Dockerfile
        type: string
      image:
        type: string
      tag:
        default: $CIRCLE_SHA1
        type: string
      registry:
        default: facebookconnectivity-symphony-dev-docker.jfrog.io
        type: string
      <<: *publishworkspace
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: 19.03.12
      - docker/check:
          registry: <<parameters.registry>>
      - docker/build:
          docker-context: <<parameters.docker-context>>
          dockerfile: <<parameters.dockerfile>>
          extra_build_args: --pull --progress plain
          image: <<parameters.image>>
          tag: <<parameters.tag>>
          lint-dockerfile: true
          path: <<parameters.path>>
          registry: <<parameters.registry>>
      - artifactory/install
      - artifactory/configure
      - artifactory/docker-publish:
          docker-tag: <<parameters.registry>>/<<parameters.image>>:<<parameters.tag>>
          repository: symphony-dev-docker
          build-name: $CIRCLE_PROJECT_REPONAME/<<parameters.image>>
          build-number: $CIRCLE_BUILD_NUM
      - run:
          name: Halt on non master branch
          command: test $CIRCLE_BRANCH = "master" || circleci step halt
      - artifactory/build-integration:
          build-name: $CIRCLE_PROJECT_REPONAME/<<parameters.image>>
          build-number: $CIRCLE_BUILD_NUM
      - run:
          name: Preserve build number
          command: |
            mkdir <<parameters.workspace>>
            echo $CIRCLE_BUILD_NUM > <<parameters.workspace>>/<<parameters.image>>
      - persist_to_workspace:
          root: <<parameters.workspace>>
          paths:
            - <<parameters.image>>

  helm-lint:
    executor: docker/docker
    parameters:
      working_directory:
        default: infra/helm
        type: string
    steps:
      - checkout
      - helm-install
      - helm-lint:
          chart: symphony
          working_directory: <<parameters.working_directory>>
      - helm-lint:
          chart: storybook
          working_directory: <<parameters.working_directory>>

  tflint:
    executor: tflint
    steps:
      - checkout
      - run:
          name: Run tflint
          working_directory: infra/tf
          command: tflint --deep --module

  integration:
    executor:
      name: docker/machine
      dlc: true
      image: ubuntu-1604:202007-01
    resource_class: large
    environment:
      COMPOSE_FILE: <<parameters.compose_file>>
      DOCKER_REGISTRY: facebookconnectivity-symphony-dev-docker.jfrog.io
      COMPOSE_DOCKER_CLI_BUILD: 1
      DOCKER_BUILDKIT: 1
    parameters:
      compose_file:
        type: string
        default: integration/docker-compose.pr.yaml
      pull_images:
        type: boolean
        default: false
      extra_build_args:
        type: string
        default: ""
    steps:
      - checkout
      - run:
          name: Setup environment variables
          command: echo "export TAG=$CIRCLE_SHA1" >> $BASH_ENV
      - *mktestdir
      - when:
          condition: <<parameters.pull_images>>
          steps:
            - docker/check:
                registry: $DOCKER_REGISTRY
            - run:
                name: Pull service images
                command: docker-compose pull
      - run:
          name: Build services
          command: docker-compose build --parallel --progress plain <<parameters.extra_build_args>>
      - run:
          name: Start containers
          command: docker-compose up -d --scale tests=0 --scale pytests=0 --scale testimio=0
      - run:
          name: Run go tests
          command: docker-compose run --use-aliases -e GOTESTSUM_JUNITFILE=integration.xml tests
      - run:
          name: Run Testimio tests
          command: docker-compose run --use-aliases -e GOTESTSUM_JUNITFILE=testimio.xml testimio
      - run:
          name: Run python tests
          command: docker-compose run --use-aliases -e XML_OUTPUT_DIRECTORY=. pytests
      - run:
          name: Collect tests results
          command: |
            mv integration/tests/integration.xml ~/test-results/
            mv cli/TEST-*.xml ~/test-results/
          when: always
      - run:
          name: Stop and remove containers
          command: docker-compose down
          when: always
      - *storetestdir

  promote-images:
    parameters: *publishworkspace
    executor: artifactory/default
    steps:
      - artifactory/install
      - artifactory/configure
      - attach_workspace:
          at: <<parameters.workspace>>
      - run:
          name: Promote builds
          working_directory: <<parameters.workspace>>
          command: |
            project=$CIRCLE_PROJECT_REPONAME
            workflow=$CIRCLE_WORKFLOW_ID
            for f in $(ls -1); do
              build_name="$project/$f"
              build_number=$(cat $f)
              jfrog rt bpr --source-repo symphony-dev-docker \
                --props "build.project=$project;build.workflow=$workflow" \
                $build_name $build_number symphony-prod-docker
            done

  tfdiff:
    parameters:
      workspace:
        type: string
      vardir:
        type: string
    executor: terraform
    steps:
      - checkout
      - run:
          name: Install shell tools
          command: apk add curl jq sudo
      - artifactory/install
      - artifactory/configure
      - tfinit:
          workspace: <<parameters.workspace>>
      - run:
          name: Create tfvars directory
          command: mkdir <<parameters.vardir>> && touch <<parameters.vardir>>/.sentinel
      - tfdiff:
          vardir: <<parameters.vardir>>
          tag: symphony_tag
          repo: graph
      - tfdiff:
          vardir: <<parameters.vardir>>
          tag: storybook_tag
          repo: storybook
      - persist_to_workspace:
          root: <<parameters.vardir>>
          paths:
            - ".sentinel"
            - "*.auto.tfvars"

  tfapply:
    parameters:
      workspace:
        type: string
      targets:
        type: string
        default: >-
          -target=helm_release.symphony
          -target=helm_release.storybook
      after_checkout:
        default: []
        type: steps
      dryrun:
        default: false
        type: boolean
    executor: terraform
    steps:
      - tfblocker:
          workspace: <<parameters.workspace>>
      - checkout
      - when:
          condition: <<parameters.after_checkout>>
          name: Run after_checkout lifecycle hook steps
          steps: <<parameters.after_checkout>>
      - tfinit:
          workspace: <<parameters.workspace>>
      - unless:
          condition: <<parameters.dryrun>>
          steps:
            - run:
                name: Apply terraform changes
                <<: *tfworkdir
                command: terraform apply -auto-approve <<parameters.targets>>
      - when:
          condition: <<parameters.dryrun>>
          steps:
            - run:
                name: Plan terraform changes
                <<: *tfworkdir
                command: terraform plan <<parameters.targets>>

  testim:
    parameters:
      before_test:
        default: []
        type: steps
      token:
        default: TESTIMIO_TOKEN
        type: env_var_name
      project:
        default: $TESTIMIO_PROJECT
        type: string
      grid:
        default: Testim-Grid
        type: string
      options:
        default: ""
        type: string
    executor: testim
    steps:
      - when:
          condition: <<parameters.before_test>>
          name: Run before_test lifecycle hook steps
          steps: <<parameters.before_test>>
      - *mktestdir
      - run:
          name: Run tests
          command: |
            testim --project "<<parameters.project>>" \
              --grid "<<parameters.grid>>" \
              --token "$<<parameters.token>>" \
              --retries 3 \
              --result-label "push-blocking" \
              --parallel 5 \
              --report-file ~/test-results/testim.xml \
              --base-url testimio.staging.thesymphony.cloud/ \
              <<#parameters.options>><<parameters.options>><</parameters.options>>
      - *storetestdir

  flowtest:
    executor: yarnnode
    resource_class: large
    steps:
      - checkout
      - run:
          name: install flow
          <<: *appdir
          # Extract the specified flow version from the .flowconfig
          command: yarn add --dev -W flow-bin@$(x=$(grep "\[version\]" .flowconfig -A 1 | tail -n 1); echo ${x:1})

      - yarn-install
      - run:
          name: limit flow server
          <<: *appdir
          command: echo "$(awk '{sub(/\[options\]/,"[options]\nserver.max_workers=3")}1' .flowconfig)" > .flowconfig && cat .flowconfig
      - run:
          name: flow typecheck
          <<: *appdir
          command: yarn run flow stop && yarn run flow

  validate-gql-test:
    parameters:
      schema_directory:
        default: ../graph/graphql/schema
        type: string
      psym_package:
        default: psym
        type: string
    executor: python
    steps:
      - checkout
      - psym-setup
      - validate-gql:
          schema_directory: <<parameters.schema_directory>>
          package_name: <<parameters.psym_package>>
      - run:
          name: To fix this test
          command: |
            echo "Some python files does not match GraphQL compilation result. Please run './compile_graphql.sh' from cli directory"
            exit 1
          when: on_fail
      - run:
          name: GraphQL Breaking Changes
          <<: *clidir
          command: python3 -m test_gql_breaking_changes <<parameters.schema_directory>>

  mypytest:
    executor: python
    steps:
      - checkout
      - psym-setup
      - run:
          name: mypy check
          <<: *clidir
          command: python3 -m mypy

  py_formatting:
    executor: python
    steps:
      - checkout
      - psym-setup
      - run:
          name: python formatting check
          <<: *clidir
          command: black . --exclude "(./graphql/.|.rpc_pb2.py|.rpc_pb2_grpc.py)" --check
      - run:
          name: To fix this test
          command: |
            echo "Some python files are not formatted according to black. Please run 'black . --exclude "(./graphql/.|.rpc_pb2.py|.rpc_pb2_grpc.py)"' from cli directory"
            exit 1
          when: on_fail

  flake8test:
    executor: python
    steps:
      - checkout
      - psym-setup
      - run:
          name: flake8 check
          <<: *clidir
          command: python3 -m flake8

  psym-release:
    executor: python
    steps:
      - checkout
      - run:
          name: Install setuptools, wheel and twine
          command: python3 -m pip install setuptools wheel twine
      - run:
          name: Install latest psym package
          command: python3 -m pip install psym
      - run:
          name: Verify psym version
          <<: *clidir
          command: |
            published=$(pip3 show psym | grep Version | sed 's/Version: \(.*\)/\1/')
            current=$(grep __version__ psym/common/constant.py | sed 's/__version__ = \"\(.*\)\"/\1/')
            if [[ $published == $current ]]; then
              circleci step halt
            fi
      - run:
          name: Init .pypirc
          <<: *clidir
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = __token__ " >> ~/.pypirc
            echo -e "password = $PYPI_TOKEN" >> ~/.pypirc
      - run:
          name: Create packages
          <<: *clidir
          command: python3 -m setup sdist bdist_wheel
      - run:
          name: Upload to PyPi
          <<: *clidir
          command: python3 -m twine upload dist/*

  yarntest:
    executor: yarnnode
    steps:
      - checkout
      - yarn-install
      - run:
          name: yarn test
          <<: *appdir
          command: yarn test:ci

  eslint:
    executor: yarnnode
    steps:
      - checkout
      - yarn-install
      - run:
          name: eslint
          <<: *appdir
          command: yarn run eslint ./

  test-relay-build:
    executor: yarnnode
    steps:
      - checkout
      - yarn-install
      - run:
          name: Run Relay Build Check
          <<: *invdir
          command: |
            yarn relay
            if ! git status | grep 'nothing to commit'; then
              echo "'yarn relay' modified changes. Please run 'yarn relay' from /fbcnms-projects/inventory" >&2
              echo "'git status' output is:"
              git status
              exit 1
            fi

parameters:
  deploy:
    type: boolean
    default: false
  pypi_release:
    type: boolean
    default: false

workflows:
  version: 2.1
  all:
    when:
      and:
        - not: << pipeline.parameters.deploy >>
        - not: << pipeline.parameters.pypi_release >>
    jobs:
      - lint
      - validate-gql-test
      - mypytest
      - py_formatting
      - flake8test
      - test-relay-build
      - eslint:
          <<: *onlypr
      - unit
      - flowtest
      - yarntest
      - docker-publish:
          name: graph/publish
          context: symphony
          path: graph
          image: graph
          requires: &dpreq
            - lint
            - unit
            - validate-gql-test
          <<: *onlymaster
      - docker-publish:
          name: admin/publish
          context: symphony
          path: admin
          image: admin
          requires: *dpreq
          <<: *onlymaster
      - docker-publish:
          name: store/publish
          context: symphony
          path: store
          image: store
          requires: *dpreq
          <<: *onlymaster
      - docker-publish:
          name: async/publish
          context: symphony
          path: async
          image: async
          requires: *dpreq
          <<: *onlymaster
      - docker-publish:
          name: migrate/publish
          context: symphony
          path: migrate
          image: migrate
          requires: *dpreq
          <<: *onlymaster
      - docker-publish:
          name: docs/publish
          context: symphony
          docker-context: docs
          path: docs
          image: docs
          requires: *dpreq
          <<: *onlymaster
      - docker-publish:
          name: front/publish
          context: symphony
          docker-context: app
          dockerfile: Dockerfile.prod
          path: app/fbcnms-projects/platform-server
          image: front
          requires: *dpreq
          <<: *onlymaster
      - docker-publish:
          name: storybook/publish
          context: symphony
          docker-context: app
          path: app/fbcnms-projects/storybook
          image: storybook
          requires: *dpreq
          <<: *onlymaster
      - docker-publish:
          name: jobrunner/publish
          context: symphony
          path: jobrunner
          image: jobrunner
          requires: *dpreq
          <<: *onlymaster
      - helm-lint
      - tflint:
          context: symphony
      - integration:
          name: integration/pr
          <<: *onlypr
      - integration:
          context: symphony
          pull_images: true
          extra_build_args: --pull
          compose_file: integration/docker-compose.ci.yaml
          requires:
            - graph/publish
            - admin/publish
            - store/publish
            - front/publish
            - async/publish
            - migrate/publish
          <<: *onlymaster
      - promote-images: &promote
          context: symphony
          requires:
            - integration
            - docs/publish
            - storybook/publish
            - jobrunner/publish
            - helm-lint
          <<: *onlymaster
      - artifactory/upload:
          name: upload-charts
          context: symphony
          build-steps:
            - helm-install
            - run: mkdir /tmp/helm-charts
            - helm-package:
                chart: symphony
                destination: /tmp/helm-charts
            - helm-package:
                chart: storybook
                destination: /tmp/helm-charts
          source: /tmp/helm-charts/*.tgz
          target: symphony-charts
          build-integration: false
          <<: *promote

  pypi-release:
    when:
      and:
        - equal: [master, << pipeline.git.branch >>]
        - << pipeline.parameters.pypi_release >>
    jobs:
      - validate-gql-test
      - mypytest
      - py_formatting
      - flake8test
      - psym-release:
          name: psym/release
          context: symphony
          requires:
            - validate-gql-test
            - mypytest
            - py_formatting
            - flake8test

  deploy:
    when:
      and:
        - equal: [master, << pipeline.git.branch >>]
        - << pipeline.parameters.deploy >>
    jobs:
      - tfdiff:
          workspace: production
          context: symphony
          <<: *tfvardir
      - tfapply:
          name: staging/deploy
          workspace: staging
          context: symphony
          after_checkout:
            - tfprepare: &tfprepare
                <<: *tfvardir
                <<: *tfworkdir
          requires:
            - tfdiff
      - testim:
          context: symphony
          before_test:
            - run:
                name: Check testim blocker
                command: test -z $TESTIMIO_SKIP || circleci step halt
            - tfathalt:
                <<: *tfvardir
          options: "--suite Sanity"
          requires:
            - staging/deploy
      - tfapply:
          name: production/deploy
          workspace: production
          context: symphony
          after_checkout:
            - tfprepare: *tfprepare
          requires:
            - testim
