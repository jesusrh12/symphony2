// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	ev "github.com/facebookincubator/symphony/pkg/ev"
	mock "github.com/stretchr/testify/mock"
)

// Factory is an autogenerated mock type for the Factory type
type Factory struct {
	mock.Mock
}

// NewEmitter provides a mock function with given fields: _a0
func (_m *Factory) NewEmitter(_a0 context.Context) (ev.Emitter, error) {
	ret := _m.Called(_a0)

	var r0 ev.Emitter
	if rf, ok := ret.Get(0).(func(context.Context) ev.Emitter); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ev.Emitter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReceiver provides a mock function with given fields: _a0, _a1
func (_m *Factory) NewReceiver(_a0 context.Context, _a1 ev.EventObject) (ev.Receiver, error) {
	ret := _m.Called(_a0, _a1)

	var r0 ev.Receiver
	if rf, ok := ret.Get(0).(func(context.Context, ev.EventObject) ev.Receiver); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ev.Receiver)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ev.EventObject) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
