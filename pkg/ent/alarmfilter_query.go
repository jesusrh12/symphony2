// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/alarmfilter"
	"github.com/facebookincubator/symphony/pkg/ent/alarmstatus"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
)

// AlarmFilterQuery is the builder for querying AlarmFilter entities.
type AlarmFilterQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.AlarmFilter
	// eager-loading edges.
	withAlarmStatusFk *AlarmStatusQuery
	withFKs           bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (afq *AlarmFilterQuery) Where(ps ...predicate.AlarmFilter) *AlarmFilterQuery {
	afq.predicates = append(afq.predicates, ps...)
	return afq
}

// Limit adds a limit step to the query.
func (afq *AlarmFilterQuery) Limit(limit int) *AlarmFilterQuery {
	afq.limit = &limit
	return afq
}

// Offset adds an offset step to the query.
func (afq *AlarmFilterQuery) Offset(offset int) *AlarmFilterQuery {
	afq.offset = &offset
	return afq
}

// Order adds an order step to the query.
func (afq *AlarmFilterQuery) Order(o ...OrderFunc) *AlarmFilterQuery {
	afq.order = append(afq.order, o...)
	return afq
}

// QueryAlarmStatusFk chains the current query on the alarmStatusFk edge.
func (afq *AlarmFilterQuery) QueryAlarmStatusFk() *AlarmStatusQuery {
	query := &AlarmStatusQuery{config: afq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := afq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := afq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(alarmfilter.Table, alarmfilter.FieldID, selector),
			sqlgraph.To(alarmstatus.Table, alarmstatus.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, alarmfilter.AlarmStatusFkTable, alarmfilter.AlarmStatusFkColumn),
		)
		fromU = sqlgraph.SetNeighbors(afq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AlarmFilter entity in the query. Returns *NotFoundError when no alarmfilter was found.
func (afq *AlarmFilterQuery) First(ctx context.Context) (*AlarmFilter, error) {
	nodes, err := afq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{alarmfilter.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (afq *AlarmFilterQuery) FirstX(ctx context.Context) *AlarmFilter {
	node, err := afq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AlarmFilter id in the query. Returns *NotFoundError when no id was found.
func (afq *AlarmFilterQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = afq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{alarmfilter.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (afq *AlarmFilterQuery) FirstIDX(ctx context.Context) int {
	id, err := afq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only AlarmFilter entity in the query, returns an error if not exactly one entity was returned.
func (afq *AlarmFilterQuery) Only(ctx context.Context) (*AlarmFilter, error) {
	nodes, err := afq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{alarmfilter.Label}
	default:
		return nil, &NotSingularError{alarmfilter.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (afq *AlarmFilterQuery) OnlyX(ctx context.Context) *AlarmFilter {
	node, err := afq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only AlarmFilter id in the query, returns an error if not exactly one id was returned.
func (afq *AlarmFilterQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = afq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{alarmfilter.Label}
	default:
		err = &NotSingularError{alarmfilter.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (afq *AlarmFilterQuery) OnlyIDX(ctx context.Context) int {
	id, err := afq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AlarmFilters.
func (afq *AlarmFilterQuery) All(ctx context.Context) ([]*AlarmFilter, error) {
	if err := afq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return afq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (afq *AlarmFilterQuery) AllX(ctx context.Context) []*AlarmFilter {
	nodes, err := afq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AlarmFilter ids.
func (afq *AlarmFilterQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := afq.Select(alarmfilter.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (afq *AlarmFilterQuery) IDsX(ctx context.Context) []int {
	ids, err := afq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (afq *AlarmFilterQuery) Count(ctx context.Context) (int, error) {
	if err := afq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return afq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (afq *AlarmFilterQuery) CountX(ctx context.Context) int {
	count, err := afq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (afq *AlarmFilterQuery) Exist(ctx context.Context) (bool, error) {
	if err := afq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return afq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (afq *AlarmFilterQuery) ExistX(ctx context.Context) bool {
	exist, err := afq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (afq *AlarmFilterQuery) Clone() *AlarmFilterQuery {
	if afq == nil {
		return nil
	}
	return &AlarmFilterQuery{
		config:            afq.config,
		limit:             afq.limit,
		offset:            afq.offset,
		order:             append([]OrderFunc{}, afq.order...),
		unique:            append([]string{}, afq.unique...),
		predicates:        append([]predicate.AlarmFilter{}, afq.predicates...),
		withAlarmStatusFk: afq.withAlarmStatusFk.Clone(),
		// clone intermediate query.
		sql:  afq.sql.Clone(),
		path: afq.path,
	}
}

//  WithAlarmStatusFk tells the query-builder to eager-loads the nodes that are connected to
// the "alarmStatusFk" edge. The optional arguments used to configure the query builder of the edge.
func (afq *AlarmFilterQuery) WithAlarmStatusFk(opts ...func(*AlarmStatusQuery)) *AlarmFilterQuery {
	query := &AlarmStatusQuery{config: afq.config}
	for _, opt := range opts {
		opt(query)
	}
	afq.withAlarmStatusFk = query
	return afq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AlarmFilter.Query().
//		GroupBy(alarmfilter.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (afq *AlarmFilterQuery) GroupBy(field string, fields ...string) *AlarmFilterGroupBy {
	group := &AlarmFilterGroupBy{config: afq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := afq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return afq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.AlarmFilter.Query().
//		Select(alarmfilter.FieldCreateTime).
//		Scan(ctx, &v)
//
func (afq *AlarmFilterQuery) Select(field string, fields ...string) *AlarmFilterSelect {
	selector := &AlarmFilterSelect{config: afq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := afq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return afq.sqlQuery(), nil
	}
	return selector
}

func (afq *AlarmFilterQuery) prepareQuery(ctx context.Context) error {
	if afq.path != nil {
		prev, err := afq.path(ctx)
		if err != nil {
			return err
		}
		afq.sql = prev
	}
	if err := alarmfilter.Policy.EvalQuery(ctx, afq); err != nil {
		return err
	}
	return nil
}

func (afq *AlarmFilterQuery) sqlAll(ctx context.Context) ([]*AlarmFilter, error) {
	var (
		nodes       = []*AlarmFilter{}
		withFKs     = afq.withFKs
		_spec       = afq.querySpec()
		loadedTypes = [1]bool{
			afq.withAlarmStatusFk != nil,
		}
	)
	if afq.withAlarmStatusFk != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, alarmfilter.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &AlarmFilter{config: afq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, afq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := afq.withAlarmStatusFk; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*AlarmFilter)
		for i := range nodes {
			if fk := nodes[i].alarm_status_alarm_status_fk; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(alarmstatus.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "alarm_status_alarm_status_fk" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.AlarmStatusFk = n
			}
		}
	}

	return nodes, nil
}

func (afq *AlarmFilterQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := afq.querySpec()
	return sqlgraph.CountNodes(ctx, afq.driver, _spec)
}

func (afq *AlarmFilterQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := afq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (afq *AlarmFilterQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   alarmfilter.Table,
			Columns: alarmfilter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: alarmfilter.FieldID,
			},
		},
		From:   afq.sql,
		Unique: true,
	}
	if ps := afq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := afq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := afq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := afq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, alarmfilter.ValidColumn)
			}
		}
	}
	return _spec
}

func (afq *AlarmFilterQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(afq.driver.Dialect())
	t1 := builder.Table(alarmfilter.Table)
	selector := builder.Select(t1.Columns(alarmfilter.Columns...)...).From(t1)
	if afq.sql != nil {
		selector = afq.sql
		selector.Select(selector.Columns(alarmfilter.Columns...)...)
	}
	for _, p := range afq.predicates {
		p(selector)
	}
	for _, p := range afq.order {
		p(selector, alarmfilter.ValidColumn)
	}
	if offset := afq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := afq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AlarmFilterGroupBy is the builder for group-by AlarmFilter entities.
type AlarmFilterGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (afgb *AlarmFilterGroupBy) Aggregate(fns ...AggregateFunc) *AlarmFilterGroupBy {
	afgb.fns = append(afgb.fns, fns...)
	return afgb
}

// Scan applies the group-by query and scan the result into the given value.
func (afgb *AlarmFilterGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := afgb.path(ctx)
	if err != nil {
		return err
	}
	afgb.sql = query
	return afgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (afgb *AlarmFilterGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := afgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (afgb *AlarmFilterGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(afgb.fields) > 1 {
		return nil, errors.New("ent: AlarmFilterGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := afgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (afgb *AlarmFilterGroupBy) StringsX(ctx context.Context) []string {
	v, err := afgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (afgb *AlarmFilterGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = afgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{alarmfilter.Label}
	default:
		err = fmt.Errorf("ent: AlarmFilterGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (afgb *AlarmFilterGroupBy) StringX(ctx context.Context) string {
	v, err := afgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (afgb *AlarmFilterGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(afgb.fields) > 1 {
		return nil, errors.New("ent: AlarmFilterGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := afgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (afgb *AlarmFilterGroupBy) IntsX(ctx context.Context) []int {
	v, err := afgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (afgb *AlarmFilterGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = afgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{alarmfilter.Label}
	default:
		err = fmt.Errorf("ent: AlarmFilterGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (afgb *AlarmFilterGroupBy) IntX(ctx context.Context) int {
	v, err := afgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (afgb *AlarmFilterGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(afgb.fields) > 1 {
		return nil, errors.New("ent: AlarmFilterGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := afgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (afgb *AlarmFilterGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := afgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (afgb *AlarmFilterGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = afgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{alarmfilter.Label}
	default:
		err = fmt.Errorf("ent: AlarmFilterGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (afgb *AlarmFilterGroupBy) Float64X(ctx context.Context) float64 {
	v, err := afgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (afgb *AlarmFilterGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(afgb.fields) > 1 {
		return nil, errors.New("ent: AlarmFilterGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := afgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (afgb *AlarmFilterGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := afgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (afgb *AlarmFilterGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = afgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{alarmfilter.Label}
	default:
		err = fmt.Errorf("ent: AlarmFilterGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (afgb *AlarmFilterGroupBy) BoolX(ctx context.Context) bool {
	v, err := afgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (afgb *AlarmFilterGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range afgb.fields {
		if !alarmfilter.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := afgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := afgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (afgb *AlarmFilterGroupBy) sqlQuery() *sql.Selector {
	selector := afgb.sql
	columns := make([]string, 0, len(afgb.fields)+len(afgb.fns))
	columns = append(columns, afgb.fields...)
	for _, fn := range afgb.fns {
		columns = append(columns, fn(selector, alarmfilter.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(afgb.fields...)
}

// AlarmFilterSelect is the builder for select fields of AlarmFilter entities.
type AlarmFilterSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (afs *AlarmFilterSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := afs.path(ctx)
	if err != nil {
		return err
	}
	afs.sql = query
	return afs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (afs *AlarmFilterSelect) ScanX(ctx context.Context, v interface{}) {
	if err := afs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (afs *AlarmFilterSelect) Strings(ctx context.Context) ([]string, error) {
	if len(afs.fields) > 1 {
		return nil, errors.New("ent: AlarmFilterSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := afs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (afs *AlarmFilterSelect) StringsX(ctx context.Context) []string {
	v, err := afs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (afs *AlarmFilterSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = afs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{alarmfilter.Label}
	default:
		err = fmt.Errorf("ent: AlarmFilterSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (afs *AlarmFilterSelect) StringX(ctx context.Context) string {
	v, err := afs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (afs *AlarmFilterSelect) Ints(ctx context.Context) ([]int, error) {
	if len(afs.fields) > 1 {
		return nil, errors.New("ent: AlarmFilterSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := afs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (afs *AlarmFilterSelect) IntsX(ctx context.Context) []int {
	v, err := afs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (afs *AlarmFilterSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = afs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{alarmfilter.Label}
	default:
		err = fmt.Errorf("ent: AlarmFilterSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (afs *AlarmFilterSelect) IntX(ctx context.Context) int {
	v, err := afs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (afs *AlarmFilterSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(afs.fields) > 1 {
		return nil, errors.New("ent: AlarmFilterSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := afs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (afs *AlarmFilterSelect) Float64sX(ctx context.Context) []float64 {
	v, err := afs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (afs *AlarmFilterSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = afs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{alarmfilter.Label}
	default:
		err = fmt.Errorf("ent: AlarmFilterSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (afs *AlarmFilterSelect) Float64X(ctx context.Context) float64 {
	v, err := afs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (afs *AlarmFilterSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(afs.fields) > 1 {
		return nil, errors.New("ent: AlarmFilterSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := afs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (afs *AlarmFilterSelect) BoolsX(ctx context.Context) []bool {
	v, err := afs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (afs *AlarmFilterSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = afs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{alarmfilter.Label}
	default:
		err = fmt.Errorf("ent: AlarmFilterSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (afs *AlarmFilterSelect) BoolX(ctx context.Context) bool {
	v, err := afs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (afs *AlarmFilterSelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range afs.fields {
		if !alarmfilter.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := afs.sqlQuery().Query()
	if err := afs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (afs *AlarmFilterSelect) sqlQuery() sql.Querier {
	selector := afs.sql
	selector.Select(selector.Columns(afs.fields...)...)
	return selector
}
