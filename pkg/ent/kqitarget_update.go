// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/kqi"
	"github.com/facebookincubator/symphony/pkg/ent/kqicomparator"
	"github.com/facebookincubator/symphony/pkg/ent/kqitarget"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
)

// KqiTargetUpdate is the builder for updating KqiTarget entities.
type KqiTargetUpdate struct {
	config
	hooks    []Hook
	mutation *KqiTargetMutation
}

// Where adds a new predicate for the builder.
func (ktu *KqiTargetUpdate) Where(ps ...predicate.KqiTarget) *KqiTargetUpdate {
	ktu.mutation.predicates = append(ktu.mutation.predicates, ps...)
	return ktu
}

// SetName sets the name field.
func (ktu *KqiTargetUpdate) SetName(s string) *KqiTargetUpdate {
	ktu.mutation.SetName(s)
	return ktu
}

// SetPeriod sets the period field.
func (ktu *KqiTargetUpdate) SetPeriod(f float64) *KqiTargetUpdate {
	ktu.mutation.ResetPeriod()
	ktu.mutation.SetPeriod(f)
	return ktu
}

// AddPeriod adds f to period.
func (ktu *KqiTargetUpdate) AddPeriod(f float64) *KqiTargetUpdate {
	ktu.mutation.AddPeriod(f)
	return ktu
}

// SetAllowedVariation sets the allowedVariation field.
func (ktu *KqiTargetUpdate) SetAllowedVariation(f float64) *KqiTargetUpdate {
	ktu.mutation.ResetAllowedVariation()
	ktu.mutation.SetAllowedVariation(f)
	return ktu
}

// AddAllowedVariation adds f to allowedVariation.
func (ktu *KqiTargetUpdate) AddAllowedVariation(f float64) *KqiTargetUpdate {
	ktu.mutation.AddAllowedVariation(f)
	return ktu
}

// SetInitTime sets the initTime field.
func (ktu *KqiTargetUpdate) SetInitTime(t time.Time) *KqiTargetUpdate {
	ktu.mutation.SetInitTime(t)
	return ktu
}

// SetEndTime sets the endTime field.
func (ktu *KqiTargetUpdate) SetEndTime(t time.Time) *KqiTargetUpdate {
	ktu.mutation.SetEndTime(t)
	return ktu
}

// SetImpact sets the impact field.
func (ktu *KqiTargetUpdate) SetImpact(s string) *KqiTargetUpdate {
	ktu.mutation.SetImpact(s)
	return ktu
}

// SetStatus sets the status field.
func (ktu *KqiTargetUpdate) SetStatus(b bool) *KqiTargetUpdate {
	ktu.mutation.SetStatus(b)
	return ktu
}

// SetKqiTargetFkID sets the kqiTargetFk edge to Kqi by id.
func (ktu *KqiTargetUpdate) SetKqiTargetFkID(id int) *KqiTargetUpdate {
	ktu.mutation.SetKqiTargetFkID(id)
	return ktu
}

// SetNillableKqiTargetFkID sets the kqiTargetFk edge to Kqi by id if the given value is not nil.
func (ktu *KqiTargetUpdate) SetNillableKqiTargetFkID(id *int) *KqiTargetUpdate {
	if id != nil {
		ktu = ktu.SetKqiTargetFkID(*id)
	}
	return ktu
}

// SetKqiTargetFk sets the kqiTargetFk edge to Kqi.
func (ktu *KqiTargetUpdate) SetKqiTargetFk(k *Kqi) *KqiTargetUpdate {
	return ktu.SetKqiTargetFkID(k.ID)
}

// AddKqitargetcomparatorfkIDs adds the kqitargetcomparatorfk edge to KqiComparator by ids.
func (ktu *KqiTargetUpdate) AddKqitargetcomparatorfkIDs(ids ...int) *KqiTargetUpdate {
	ktu.mutation.AddKqitargetcomparatorfkIDs(ids...)
	return ktu
}

// AddKqitargetcomparatorfk adds the kqitargetcomparatorfk edges to KqiComparator.
func (ktu *KqiTargetUpdate) AddKqitargetcomparatorfk(k ...*KqiComparator) *KqiTargetUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return ktu.AddKqitargetcomparatorfkIDs(ids...)
}

// Mutation returns the KqiTargetMutation object of the builder.
func (ktu *KqiTargetUpdate) Mutation() *KqiTargetMutation {
	return ktu.mutation
}

// ClearKqiTargetFk clears the "kqiTargetFk" edge to type Kqi.
func (ktu *KqiTargetUpdate) ClearKqiTargetFk() *KqiTargetUpdate {
	ktu.mutation.ClearKqiTargetFk()
	return ktu
}

// ClearKqitargetcomparatorfk clears all "kqitargetcomparatorfk" edges to type KqiComparator.
func (ktu *KqiTargetUpdate) ClearKqitargetcomparatorfk() *KqiTargetUpdate {
	ktu.mutation.ClearKqitargetcomparatorfk()
	return ktu
}

// RemoveKqitargetcomparatorfkIDs removes the kqitargetcomparatorfk edge to KqiComparator by ids.
func (ktu *KqiTargetUpdate) RemoveKqitargetcomparatorfkIDs(ids ...int) *KqiTargetUpdate {
	ktu.mutation.RemoveKqitargetcomparatorfkIDs(ids...)
	return ktu
}

// RemoveKqitargetcomparatorfk removes kqitargetcomparatorfk edges to KqiComparator.
func (ktu *KqiTargetUpdate) RemoveKqitargetcomparatorfk(k ...*KqiComparator) *KqiTargetUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return ktu.RemoveKqitargetcomparatorfkIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ktu *KqiTargetUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ktu.defaults()
	if len(ktu.hooks) == 0 {
		if err = ktu.check(); err != nil {
			return 0, err
		}
		affected, err = ktu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KqiTargetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ktu.check(); err != nil {
				return 0, err
			}
			ktu.mutation = mutation
			affected, err = ktu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ktu.hooks) - 1; i >= 0; i-- {
			mut = ktu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ktu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ktu *KqiTargetUpdate) SaveX(ctx context.Context) int {
	affected, err := ktu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ktu *KqiTargetUpdate) Exec(ctx context.Context) error {
	_, err := ktu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ktu *KqiTargetUpdate) ExecX(ctx context.Context) {
	if err := ktu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ktu *KqiTargetUpdate) defaults() {
	if _, ok := ktu.mutation.UpdateTime(); !ok {
		v := kqitarget.UpdateDefaultUpdateTime()
		ktu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ktu *KqiTargetUpdate) check() error {
	if v, ok := ktu.mutation.Name(); ok {
		if err := kqitarget.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (ktu *KqiTargetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kqitarget.Table,
			Columns: kqitarget.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kqitarget.FieldID,
			},
		},
	}
	if ps := ktu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ktu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kqitarget.FieldUpdateTime,
		})
	}
	if value, ok := ktu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kqitarget.FieldName,
		})
	}
	if value, ok := ktu.mutation.Period(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kqitarget.FieldPeriod,
		})
	}
	if value, ok := ktu.mutation.AddedPeriod(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kqitarget.FieldPeriod,
		})
	}
	if value, ok := ktu.mutation.AllowedVariation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kqitarget.FieldAllowedVariation,
		})
	}
	if value, ok := ktu.mutation.AddedAllowedVariation(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kqitarget.FieldAllowedVariation,
		})
	}
	if value, ok := ktu.mutation.InitTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kqitarget.FieldInitTime,
		})
	}
	if value, ok := ktu.mutation.EndTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kqitarget.FieldEndTime,
		})
	}
	if value, ok := ktu.mutation.Impact(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kqitarget.FieldImpact,
		})
	}
	if value, ok := ktu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: kqitarget.FieldStatus,
		})
	}
	if ktu.mutation.KqiTargetFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kqitarget.KqiTargetFkTable,
			Columns: []string{kqitarget.KqiTargetFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqi.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ktu.mutation.KqiTargetFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kqitarget.KqiTargetFkTable,
			Columns: []string{kqitarget.KqiTargetFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqi.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ktu.mutation.KqitargetcomparatorfkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kqitarget.KqitargetcomparatorfkTable,
			Columns: []string{kqitarget.KqitargetcomparatorfkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqicomparator.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ktu.mutation.RemovedKqitargetcomparatorfkIDs(); len(nodes) > 0 && !ktu.mutation.KqitargetcomparatorfkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kqitarget.KqitargetcomparatorfkTable,
			Columns: []string{kqitarget.KqitargetcomparatorfkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqicomparator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ktu.mutation.KqitargetcomparatorfkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kqitarget.KqitargetcomparatorfkTable,
			Columns: []string{kqitarget.KqitargetcomparatorfkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqicomparator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ktu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kqitarget.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// KqiTargetUpdateOne is the builder for updating a single KqiTarget entity.
type KqiTargetUpdateOne struct {
	config
	hooks    []Hook
	mutation *KqiTargetMutation
}

// SetName sets the name field.
func (ktuo *KqiTargetUpdateOne) SetName(s string) *KqiTargetUpdateOne {
	ktuo.mutation.SetName(s)
	return ktuo
}

// SetPeriod sets the period field.
func (ktuo *KqiTargetUpdateOne) SetPeriod(f float64) *KqiTargetUpdateOne {
	ktuo.mutation.ResetPeriod()
	ktuo.mutation.SetPeriod(f)
	return ktuo
}

// AddPeriod adds f to period.
func (ktuo *KqiTargetUpdateOne) AddPeriod(f float64) *KqiTargetUpdateOne {
	ktuo.mutation.AddPeriod(f)
	return ktuo
}

// SetAllowedVariation sets the allowedVariation field.
func (ktuo *KqiTargetUpdateOne) SetAllowedVariation(f float64) *KqiTargetUpdateOne {
	ktuo.mutation.ResetAllowedVariation()
	ktuo.mutation.SetAllowedVariation(f)
	return ktuo
}

// AddAllowedVariation adds f to allowedVariation.
func (ktuo *KqiTargetUpdateOne) AddAllowedVariation(f float64) *KqiTargetUpdateOne {
	ktuo.mutation.AddAllowedVariation(f)
	return ktuo
}

// SetInitTime sets the initTime field.
func (ktuo *KqiTargetUpdateOne) SetInitTime(t time.Time) *KqiTargetUpdateOne {
	ktuo.mutation.SetInitTime(t)
	return ktuo
}

// SetEndTime sets the endTime field.
func (ktuo *KqiTargetUpdateOne) SetEndTime(t time.Time) *KqiTargetUpdateOne {
	ktuo.mutation.SetEndTime(t)
	return ktuo
}

// SetImpact sets the impact field.
func (ktuo *KqiTargetUpdateOne) SetImpact(s string) *KqiTargetUpdateOne {
	ktuo.mutation.SetImpact(s)
	return ktuo
}

// SetStatus sets the status field.
func (ktuo *KqiTargetUpdateOne) SetStatus(b bool) *KqiTargetUpdateOne {
	ktuo.mutation.SetStatus(b)
	return ktuo
}

// SetKqiTargetFkID sets the kqiTargetFk edge to Kqi by id.
func (ktuo *KqiTargetUpdateOne) SetKqiTargetFkID(id int) *KqiTargetUpdateOne {
	ktuo.mutation.SetKqiTargetFkID(id)
	return ktuo
}

// SetNillableKqiTargetFkID sets the kqiTargetFk edge to Kqi by id if the given value is not nil.
func (ktuo *KqiTargetUpdateOne) SetNillableKqiTargetFkID(id *int) *KqiTargetUpdateOne {
	if id != nil {
		ktuo = ktuo.SetKqiTargetFkID(*id)
	}
	return ktuo
}

// SetKqiTargetFk sets the kqiTargetFk edge to Kqi.
func (ktuo *KqiTargetUpdateOne) SetKqiTargetFk(k *Kqi) *KqiTargetUpdateOne {
	return ktuo.SetKqiTargetFkID(k.ID)
}

// AddKqitargetcomparatorfkIDs adds the kqitargetcomparatorfk edge to KqiComparator by ids.
func (ktuo *KqiTargetUpdateOne) AddKqitargetcomparatorfkIDs(ids ...int) *KqiTargetUpdateOne {
	ktuo.mutation.AddKqitargetcomparatorfkIDs(ids...)
	return ktuo
}

// AddKqitargetcomparatorfk adds the kqitargetcomparatorfk edges to KqiComparator.
func (ktuo *KqiTargetUpdateOne) AddKqitargetcomparatorfk(k ...*KqiComparator) *KqiTargetUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return ktuo.AddKqitargetcomparatorfkIDs(ids...)
}

// Mutation returns the KqiTargetMutation object of the builder.
func (ktuo *KqiTargetUpdateOne) Mutation() *KqiTargetMutation {
	return ktuo.mutation
}

// ClearKqiTargetFk clears the "kqiTargetFk" edge to type Kqi.
func (ktuo *KqiTargetUpdateOne) ClearKqiTargetFk() *KqiTargetUpdateOne {
	ktuo.mutation.ClearKqiTargetFk()
	return ktuo
}

// ClearKqitargetcomparatorfk clears all "kqitargetcomparatorfk" edges to type KqiComparator.
func (ktuo *KqiTargetUpdateOne) ClearKqitargetcomparatorfk() *KqiTargetUpdateOne {
	ktuo.mutation.ClearKqitargetcomparatorfk()
	return ktuo
}

// RemoveKqitargetcomparatorfkIDs removes the kqitargetcomparatorfk edge to KqiComparator by ids.
func (ktuo *KqiTargetUpdateOne) RemoveKqitargetcomparatorfkIDs(ids ...int) *KqiTargetUpdateOne {
	ktuo.mutation.RemoveKqitargetcomparatorfkIDs(ids...)
	return ktuo
}

// RemoveKqitargetcomparatorfk removes kqitargetcomparatorfk edges to KqiComparator.
func (ktuo *KqiTargetUpdateOne) RemoveKqitargetcomparatorfk(k ...*KqiComparator) *KqiTargetUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return ktuo.RemoveKqitargetcomparatorfkIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (ktuo *KqiTargetUpdateOne) Save(ctx context.Context) (*KqiTarget, error) {
	var (
		err  error
		node *KqiTarget
	)
	ktuo.defaults()
	if len(ktuo.hooks) == 0 {
		if err = ktuo.check(); err != nil {
			return nil, err
		}
		node, err = ktuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KqiTargetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ktuo.check(); err != nil {
				return nil, err
			}
			ktuo.mutation = mutation
			node, err = ktuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ktuo.hooks) - 1; i >= 0; i-- {
			mut = ktuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ktuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ktuo *KqiTargetUpdateOne) SaveX(ctx context.Context) *KqiTarget {
	node, err := ktuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ktuo *KqiTargetUpdateOne) Exec(ctx context.Context) error {
	_, err := ktuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ktuo *KqiTargetUpdateOne) ExecX(ctx context.Context) {
	if err := ktuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ktuo *KqiTargetUpdateOne) defaults() {
	if _, ok := ktuo.mutation.UpdateTime(); !ok {
		v := kqitarget.UpdateDefaultUpdateTime()
		ktuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ktuo *KqiTargetUpdateOne) check() error {
	if v, ok := ktuo.mutation.Name(); ok {
		if err := kqitarget.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (ktuo *KqiTargetUpdateOne) sqlSave(ctx context.Context) (_node *KqiTarget, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kqitarget.Table,
			Columns: kqitarget.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kqitarget.FieldID,
			},
		},
	}
	id, ok := ktuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing KqiTarget.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ktuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kqitarget.FieldUpdateTime,
		})
	}
	if value, ok := ktuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kqitarget.FieldName,
		})
	}
	if value, ok := ktuo.mutation.Period(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kqitarget.FieldPeriod,
		})
	}
	if value, ok := ktuo.mutation.AddedPeriod(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kqitarget.FieldPeriod,
		})
	}
	if value, ok := ktuo.mutation.AllowedVariation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kqitarget.FieldAllowedVariation,
		})
	}
	if value, ok := ktuo.mutation.AddedAllowedVariation(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kqitarget.FieldAllowedVariation,
		})
	}
	if value, ok := ktuo.mutation.InitTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kqitarget.FieldInitTime,
		})
	}
	if value, ok := ktuo.mutation.EndTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kqitarget.FieldEndTime,
		})
	}
	if value, ok := ktuo.mutation.Impact(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kqitarget.FieldImpact,
		})
	}
	if value, ok := ktuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: kqitarget.FieldStatus,
		})
	}
	if ktuo.mutation.KqiTargetFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kqitarget.KqiTargetFkTable,
			Columns: []string{kqitarget.KqiTargetFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqi.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ktuo.mutation.KqiTargetFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kqitarget.KqiTargetFkTable,
			Columns: []string{kqitarget.KqiTargetFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqi.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ktuo.mutation.KqitargetcomparatorfkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kqitarget.KqitargetcomparatorfkTable,
			Columns: []string{kqitarget.KqitargetcomparatorfkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqicomparator.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ktuo.mutation.RemovedKqitargetcomparatorfkIDs(); len(nodes) > 0 && !ktuo.mutation.KqitargetcomparatorfkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kqitarget.KqitargetcomparatorfkTable,
			Columns: []string{kqitarget.KqitargetcomparatorfkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqicomparator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ktuo.mutation.KqitargetcomparatorfkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kqitarget.KqitargetcomparatorfkTable,
			Columns: []string{kqitarget.KqitargetcomparatorfkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqicomparator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &KqiTarget{config: ktuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ktuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kqitarget.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
