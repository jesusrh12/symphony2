// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/block"
	"github.com/facebookincubator/symphony/pkg/ent/exitpoint"
	"github.com/facebookincubator/symphony/pkg/flowengine/flowschema"
)

// ExitPoint is the model entity for the ExitPoint schema.
type ExitPoint struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Role holds the value of the "role" field.
	Role flowschema.ExitPointRole `json:"role,omitempty"`
	// Cid holds the value of the "cid" field.
	Cid *string `json:"cid,omitempty"`
	// Condition holds the value of the "condition" field.
	Condition *flowschema.VariableExpression `json:"condition,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExitPointQuery when eager-loading is set.
	Edges             ExitPointEdges `json:"edges"`
	block_exit_points *int
}

// ExitPointEdges holds the relations/edges for other nodes in the graph.
type ExitPointEdges struct {
	// NextEntryPoints holds the value of the next_entry_points edge.
	NextEntryPoints []*EntryPoint
	// ParentBlock holds the value of the parent_block edge.
	ParentBlock *Block
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// NextEntryPointsOrErr returns the NextEntryPoints value or an error if the edge
// was not loaded in eager-loading.
func (e ExitPointEdges) NextEntryPointsOrErr() ([]*EntryPoint, error) {
	if e.loadedTypes[0] {
		return e.NextEntryPoints, nil
	}
	return nil, &NotLoadedError{edge: "next_entry_points"}
}

// ParentBlockOrErr returns the ParentBlock value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExitPointEdges) ParentBlockOrErr() (*Block, error) {
	if e.loadedTypes[1] {
		if e.ParentBlock == nil {
			// The edge parent_block was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: block.Label}
		}
		return e.ParentBlock, nil
	}
	return nil, &NotLoadedError{edge: "parent_block"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ExitPoint) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // role
		&sql.NullString{}, // cid
		&[]byte{},         // condition
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*ExitPoint) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // block_exit_points
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ExitPoint fields.
func (ep *ExitPoint) assignValues(values ...interface{}) error {
	if m, n := len(values), len(exitpoint.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ep.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		ep.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		ep.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field role", values[2])
	} else if value.Valid {
		ep.Role = flowschema.ExitPointRole(value.String)
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field cid", values[3])
	} else if value.Valid {
		ep.Cid = new(string)
		*ep.Cid = value.String
	}

	if value, ok := values[4].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field condition", values[4])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &ep.Condition); err != nil {
			return fmt.Errorf("unmarshal field condition: %v", err)
		}
	}
	values = values[5:]
	if len(values) == len(exitpoint.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field block_exit_points", value)
		} else if value.Valid {
			ep.block_exit_points = new(int)
			*ep.block_exit_points = int(value.Int64)
		}
	}
	return nil
}

// QueryNextEntryPoints queries the next_entry_points edge of the ExitPoint.
func (ep *ExitPoint) QueryNextEntryPoints() *EntryPointQuery {
	return (&ExitPointClient{config: ep.config}).QueryNextEntryPoints(ep)
}

// QueryParentBlock queries the parent_block edge of the ExitPoint.
func (ep *ExitPoint) QueryParentBlock() *BlockQuery {
	return (&ExitPointClient{config: ep.config}).QueryParentBlock(ep)
}

// Update returns a builder for updating this ExitPoint.
// Note that, you need to call ExitPoint.Unwrap() before calling this method, if this ExitPoint
// was returned from a transaction, and the transaction was committed or rolled back.
func (ep *ExitPoint) Update() *ExitPointUpdateOne {
	return (&ExitPointClient{config: ep.config}).UpdateOne(ep)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ep *ExitPoint) Unwrap() *ExitPoint {
	tx, ok := ep.config.driver.(*txDriver)
	if !ok {
		panic("ent: ExitPoint is not a transactional entity")
	}
	ep.config.driver = tx.drv
	return ep
}

// String implements the fmt.Stringer.
func (ep *ExitPoint) String() string {
	var builder strings.Builder
	builder.WriteString("ExitPoint(")
	builder.WriteString(fmt.Sprintf("id=%v", ep.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(ep.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(ep.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", role=")
	builder.WriteString(fmt.Sprintf("%v", ep.Role))
	if v := ep.Cid; v != nil {
		builder.WriteString(", cid=")
		builder.WriteString(*v)
	}
	builder.WriteString(", condition=")
	builder.WriteString(fmt.Sprintf("%v", ep.Condition))
	builder.WriteByte(')')
	return builder.String()
}

// ExitPoints is a parsable slice of ExitPoint.
type ExitPoints []*ExitPoint

func (ep ExitPoints) config(cfg config) {
	for _i := range ep {
		ep[_i].config = cfg
	}
}
