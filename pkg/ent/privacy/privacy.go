// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package privacy

import (
	"context"
	"fmt"

	"github.com/facebookincubator/symphony/pkg/ent"

	"github.com/facebook/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with an allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with an deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns an formatted wrapped Allow decision.
func Allowf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Allow)...)
}

// Denyf returns an formatted wrapped Deny decision.
func Denyf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Deny)...)
}

// Skipf returns an formatted wrapped Skip decision.
func Skipf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Skip)...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, ent.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	return f(ctx, q)
}

type (
	// MutationRule defines the interface deciding whether a
	// mutation is allowed and optionally modify it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
)

// MutationRuleFunc type is an adapter to allow the use of
// ordinary functions as mutation rules.
type MutationRuleFunc func(context.Context, ent.Mutation) error

// EvalMutation returns f(ctx, m).
func (f MutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	return f(ctx, m)
}

// Policy groups query and mutation policies.
type Policy struct {
	Query    QueryPolicy
	Mutation MutationPolicy
}

// EvalQuery forwards evaluation to query policy.
func (policy Policy) EvalQuery(ctx context.Context, q ent.Query) error {
	return policy.Query.EvalQuery(ctx, q)
}

// EvalMutation forwards evaluation to mutation policy.
func (policy Policy) EvalMutation(ctx context.Context, m ent.Mutation) error {
	return policy.Mutation.EvalMutation(ctx, m)
}

// QueryMutationRule is the interface that groups query and mutation rules.
type QueryMutationRule interface {
	QueryRule
	MutationRule
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return fixedDecision{Allow}
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return fixedDecision{Deny}
}

type fixedDecision struct {
	decision error
}

func (f fixedDecision) EvalQuery(context.Context, ent.Query) error {
	return f.decision
}

func (f fixedDecision) EvalMutation(context.Context, ent.Mutation) error {
	return f.decision
}

type contextDecision struct {
	eval func(context.Context) error
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return contextDecision{eval}
}

func (c contextDecision) EvalQuery(ctx context.Context, _ ent.Query) error {
	return c.eval(ctx)
}

func (c contextDecision) EvalMutation(ctx context.Context, _ ent.Mutation) error {
	return c.eval(ctx)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op ent.Op) MutationRule {
	return MutationRuleFunc(func(ctx context.Context, m ent.Mutation) error {
		if m.Op().Is(op) {
			return rule.EvalMutation(ctx, m)
		}
		return Skip
	})
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op ent.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m ent.Mutation) error {
		return Denyf("ent/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The ActivityQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ActivityQueryRuleFunc func(context.Context, *ent.ActivityQuery) error

// EvalQuery return f(ctx, q).
func (f ActivityQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ActivityQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ActivityQuery", q)
}

// The ActivityMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ActivityMutationRuleFunc func(context.Context, *ent.ActivityMutation) error

// EvalMutation calls f(ctx, m).
func (f ActivityMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ActivityMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ActivityMutation", m)
}

// The AlarmFilterQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AlarmFilterQueryRuleFunc func(context.Context, *ent.AlarmFilterQuery) error

// EvalQuery return f(ctx, q).
func (f AlarmFilterQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AlarmFilterQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AlarmFilterQuery", q)
}

// The AlarmFilterMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AlarmFilterMutationRuleFunc func(context.Context, *ent.AlarmFilterMutation) error

// EvalMutation calls f(ctx, m).
func (f AlarmFilterMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AlarmFilterMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AlarmFilterMutation", m)
}

// The AlarmStatusQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AlarmStatusQueryRuleFunc func(context.Context, *ent.AlarmStatusQuery) error

// EvalQuery return f(ctx, q).
func (f AlarmStatusQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AlarmStatusQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AlarmStatusQuery", q)
}

// The AlarmStatusMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AlarmStatusMutationRuleFunc func(context.Context, *ent.AlarmStatusMutation) error

// EvalMutation calls f(ctx, m).
func (f AlarmStatusMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AlarmStatusMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AlarmStatusMutation", m)
}

// The AppointmentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AppointmentQueryRuleFunc func(context.Context, *ent.AppointmentQuery) error

// EvalQuery return f(ctx, q).
func (f AppointmentQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AppointmentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AppointmentQuery", q)
}

// The AppointmentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AppointmentMutationRuleFunc func(context.Context, *ent.AppointmentMutation) error

// EvalMutation calls f(ctx, m).
func (f AppointmentMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AppointmentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AppointmentMutation", m)
}

// The BlockQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BlockQueryRuleFunc func(context.Context, *ent.BlockQuery) error

// EvalQuery return f(ctx, q).
func (f BlockQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BlockQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BlockQuery", q)
}

// The BlockMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BlockMutationRuleFunc func(context.Context, *ent.BlockMutation) error

// EvalMutation calls f(ctx, m).
func (f BlockMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BlockMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BlockMutation", m)
}

// The BlockInstanceQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BlockInstanceQueryRuleFunc func(context.Context, *ent.BlockInstanceQuery) error

// EvalQuery return f(ctx, q).
func (f BlockInstanceQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BlockInstanceQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BlockInstanceQuery", q)
}

// The BlockInstanceMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BlockInstanceMutationRuleFunc func(context.Context, *ent.BlockInstanceMutation) error

// EvalMutation calls f(ctx, m).
func (f BlockInstanceMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BlockInstanceMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BlockInstanceMutation", m)
}

// The CheckListCategoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CheckListCategoryQueryRuleFunc func(context.Context, *ent.CheckListCategoryQuery) error

// EvalQuery return f(ctx, q).
func (f CheckListCategoryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CheckListCategoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CheckListCategoryQuery", q)
}

// The CheckListCategoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CheckListCategoryMutationRuleFunc func(context.Context, *ent.CheckListCategoryMutation) error

// EvalMutation calls f(ctx, m).
func (f CheckListCategoryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CheckListCategoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CheckListCategoryMutation", m)
}

// The CheckListCategoryDefinitionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CheckListCategoryDefinitionQueryRuleFunc func(context.Context, *ent.CheckListCategoryDefinitionQuery) error

// EvalQuery return f(ctx, q).
func (f CheckListCategoryDefinitionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CheckListCategoryDefinitionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CheckListCategoryDefinitionQuery", q)
}

// The CheckListCategoryDefinitionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CheckListCategoryDefinitionMutationRuleFunc func(context.Context, *ent.CheckListCategoryDefinitionMutation) error

// EvalMutation calls f(ctx, m).
func (f CheckListCategoryDefinitionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CheckListCategoryDefinitionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CheckListCategoryDefinitionMutation", m)
}

// The CheckListItemQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CheckListItemQueryRuleFunc func(context.Context, *ent.CheckListItemQuery) error

// EvalQuery return f(ctx, q).
func (f CheckListItemQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CheckListItemQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CheckListItemQuery", q)
}

// The CheckListItemMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CheckListItemMutationRuleFunc func(context.Context, *ent.CheckListItemMutation) error

// EvalMutation calls f(ctx, m).
func (f CheckListItemMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CheckListItemMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CheckListItemMutation", m)
}

// The CheckListItemDefinitionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CheckListItemDefinitionQueryRuleFunc func(context.Context, *ent.CheckListItemDefinitionQuery) error

// EvalQuery return f(ctx, q).
func (f CheckListItemDefinitionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CheckListItemDefinitionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CheckListItemDefinitionQuery", q)
}

// The CheckListItemDefinitionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CheckListItemDefinitionMutationRuleFunc func(context.Context, *ent.CheckListItemDefinitionMutation) error

// EvalMutation calls f(ctx, m).
func (f CheckListItemDefinitionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CheckListItemDefinitionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CheckListItemDefinitionMutation", m)
}

// The CommentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CommentQueryRuleFunc func(context.Context, *ent.CommentQuery) error

// EvalQuery return f(ctx, q).
func (f CommentQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CommentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CommentQuery", q)
}

// The CommentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CommentMutationRuleFunc func(context.Context, *ent.CommentMutation) error

// EvalMutation calls f(ctx, m).
func (f CommentMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CommentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CommentMutation", m)
}

// The ComparatorQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ComparatorQueryRuleFunc func(context.Context, *ent.ComparatorQuery) error

// EvalQuery return f(ctx, q).
func (f ComparatorQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ComparatorQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ComparatorQuery", q)
}

// The ComparatorMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ComparatorMutationRuleFunc func(context.Context, *ent.ComparatorMutation) error

// EvalMutation calls f(ctx, m).
func (f ComparatorMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ComparatorMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ComparatorMutation", m)
}

// The CounterQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CounterQueryRuleFunc func(context.Context, *ent.CounterQuery) error

// EvalQuery return f(ctx, q).
func (f CounterQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CounterQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CounterQuery", q)
}

// The CounterMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CounterMutationRuleFunc func(context.Context, *ent.CounterMutation) error

// EvalMutation calls f(ctx, m).
func (f CounterMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CounterMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CounterMutation", m)
}

// The CounterFamilyQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CounterFamilyQueryRuleFunc func(context.Context, *ent.CounterFamilyQuery) error

// EvalQuery return f(ctx, q).
func (f CounterFamilyQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CounterFamilyQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CounterFamilyQuery", q)
}

// The CounterFamilyMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CounterFamilyMutationRuleFunc func(context.Context, *ent.CounterFamilyMutation) error

// EvalMutation calls f(ctx, m).
func (f CounterFamilyMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CounterFamilyMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CounterFamilyMutation", m)
}

// The CounterFormulaQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CounterFormulaQueryRuleFunc func(context.Context, *ent.CounterFormulaQuery) error

// EvalQuery return f(ctx, q).
func (f CounterFormulaQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CounterFormulaQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CounterFormulaQuery", q)
}

// The CounterFormulaMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CounterFormulaMutationRuleFunc func(context.Context, *ent.CounterFormulaMutation) error

// EvalMutation calls f(ctx, m).
func (f CounterFormulaMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CounterFormulaMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CounterFormulaMutation", m)
}

// The CustomerQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CustomerQueryRuleFunc func(context.Context, *ent.CustomerQuery) error

// EvalQuery return f(ctx, q).
func (f CustomerQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CustomerQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CustomerQuery", q)
}

// The CustomerMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CustomerMutationRuleFunc func(context.Context, *ent.CustomerMutation) error

// EvalMutation calls f(ctx, m).
func (f CustomerMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CustomerMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CustomerMutation", m)
}

// The DocumentCategoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DocumentCategoryQueryRuleFunc func(context.Context, *ent.DocumentCategoryQuery) error

// EvalQuery return f(ctx, q).
func (f DocumentCategoryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DocumentCategoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DocumentCategoryQuery", q)
}

// The DocumentCategoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DocumentCategoryMutationRuleFunc func(context.Context, *ent.DocumentCategoryMutation) error

// EvalMutation calls f(ctx, m).
func (f DocumentCategoryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DocumentCategoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DocumentCategoryMutation", m)
}

// The DomainQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DomainQueryRuleFunc func(context.Context, *ent.DomainQuery) error

// EvalQuery return f(ctx, q).
func (f DomainQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DomainQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DomainQuery", q)
}

// The DomainMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DomainMutationRuleFunc func(context.Context, *ent.DomainMutation) error

// EvalMutation calls f(ctx, m).
func (f DomainMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DomainMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DomainMutation", m)
}

// The EntryPointQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EntryPointQueryRuleFunc func(context.Context, *ent.EntryPointQuery) error

// EvalQuery return f(ctx, q).
func (f EntryPointQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EntryPointQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EntryPointQuery", q)
}

// The EntryPointMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EntryPointMutationRuleFunc func(context.Context, *ent.EntryPointMutation) error

// EvalMutation calls f(ctx, m).
func (f EntryPointMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EntryPointMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EntryPointMutation", m)
}

// The EquipmentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EquipmentQueryRuleFunc func(context.Context, *ent.EquipmentQuery) error

// EvalQuery return f(ctx, q).
func (f EquipmentQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EquipmentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EquipmentQuery", q)
}

// The EquipmentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EquipmentMutationRuleFunc func(context.Context, *ent.EquipmentMutation) error

// EvalMutation calls f(ctx, m).
func (f EquipmentMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EquipmentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EquipmentMutation", m)
}

// The EquipmentCategoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EquipmentCategoryQueryRuleFunc func(context.Context, *ent.EquipmentCategoryQuery) error

// EvalQuery return f(ctx, q).
func (f EquipmentCategoryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EquipmentCategoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EquipmentCategoryQuery", q)
}

// The EquipmentCategoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EquipmentCategoryMutationRuleFunc func(context.Context, *ent.EquipmentCategoryMutation) error

// EvalMutation calls f(ctx, m).
func (f EquipmentCategoryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EquipmentCategoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EquipmentCategoryMutation", m)
}

// The EquipmentPortQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EquipmentPortQueryRuleFunc func(context.Context, *ent.EquipmentPortQuery) error

// EvalQuery return f(ctx, q).
func (f EquipmentPortQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EquipmentPortQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EquipmentPortQuery", q)
}

// The EquipmentPortMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EquipmentPortMutationRuleFunc func(context.Context, *ent.EquipmentPortMutation) error

// EvalMutation calls f(ctx, m).
func (f EquipmentPortMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EquipmentPortMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EquipmentPortMutation", m)
}

// The EquipmentPortDefinitionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EquipmentPortDefinitionQueryRuleFunc func(context.Context, *ent.EquipmentPortDefinitionQuery) error

// EvalQuery return f(ctx, q).
func (f EquipmentPortDefinitionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EquipmentPortDefinitionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EquipmentPortDefinitionQuery", q)
}

// The EquipmentPortDefinitionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EquipmentPortDefinitionMutationRuleFunc func(context.Context, *ent.EquipmentPortDefinitionMutation) error

// EvalMutation calls f(ctx, m).
func (f EquipmentPortDefinitionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EquipmentPortDefinitionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EquipmentPortDefinitionMutation", m)
}

// The EquipmentPortTypeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EquipmentPortTypeQueryRuleFunc func(context.Context, *ent.EquipmentPortTypeQuery) error

// EvalQuery return f(ctx, q).
func (f EquipmentPortTypeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EquipmentPortTypeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EquipmentPortTypeQuery", q)
}

// The EquipmentPortTypeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EquipmentPortTypeMutationRuleFunc func(context.Context, *ent.EquipmentPortTypeMutation) error

// EvalMutation calls f(ctx, m).
func (f EquipmentPortTypeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EquipmentPortTypeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EquipmentPortTypeMutation", m)
}

// The EquipmentPositionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EquipmentPositionQueryRuleFunc func(context.Context, *ent.EquipmentPositionQuery) error

// EvalQuery return f(ctx, q).
func (f EquipmentPositionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EquipmentPositionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EquipmentPositionQuery", q)
}

// The EquipmentPositionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EquipmentPositionMutationRuleFunc func(context.Context, *ent.EquipmentPositionMutation) error

// EvalMutation calls f(ctx, m).
func (f EquipmentPositionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EquipmentPositionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EquipmentPositionMutation", m)
}

// The EquipmentPositionDefinitionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EquipmentPositionDefinitionQueryRuleFunc func(context.Context, *ent.EquipmentPositionDefinitionQuery) error

// EvalQuery return f(ctx, q).
func (f EquipmentPositionDefinitionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EquipmentPositionDefinitionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EquipmentPositionDefinitionQuery", q)
}

// The EquipmentPositionDefinitionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EquipmentPositionDefinitionMutationRuleFunc func(context.Context, *ent.EquipmentPositionDefinitionMutation) error

// EvalMutation calls f(ctx, m).
func (f EquipmentPositionDefinitionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EquipmentPositionDefinitionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EquipmentPositionDefinitionMutation", m)
}

// The EquipmentTypeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EquipmentTypeQueryRuleFunc func(context.Context, *ent.EquipmentTypeQuery) error

// EvalQuery return f(ctx, q).
func (f EquipmentTypeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EquipmentTypeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EquipmentTypeQuery", q)
}

// The EquipmentTypeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EquipmentTypeMutationRuleFunc func(context.Context, *ent.EquipmentTypeMutation) error

// EvalMutation calls f(ctx, m).
func (f EquipmentTypeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EquipmentTypeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EquipmentTypeMutation", m)
}

// The EventSeverityQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EventSeverityQueryRuleFunc func(context.Context, *ent.EventSeverityQuery) error

// EvalQuery return f(ctx, q).
func (f EventSeverityQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EventSeverityQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EventSeverityQuery", q)
}

// The EventSeverityMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EventSeverityMutationRuleFunc func(context.Context, *ent.EventSeverityMutation) error

// EvalMutation calls f(ctx, m).
func (f EventSeverityMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EventSeverityMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EventSeverityMutation", m)
}

// The ExitPointQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ExitPointQueryRuleFunc func(context.Context, *ent.ExitPointQuery) error

// EvalQuery return f(ctx, q).
func (f ExitPointQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ExitPointQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ExitPointQuery", q)
}

// The ExitPointMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ExitPointMutationRuleFunc func(context.Context, *ent.ExitPointMutation) error

// EvalMutation calls f(ctx, m).
func (f ExitPointMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ExitPointMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ExitPointMutation", m)
}

// The ExportTaskQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ExportTaskQueryRuleFunc func(context.Context, *ent.ExportTaskQuery) error

// EvalQuery return f(ctx, q).
func (f ExportTaskQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ExportTaskQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ExportTaskQuery", q)
}

// The ExportTaskMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ExportTaskMutationRuleFunc func(context.Context, *ent.ExportTaskMutation) error

// EvalMutation calls f(ctx, m).
func (f ExportTaskMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ExportTaskMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ExportTaskMutation", m)
}

// The FeatureQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FeatureQueryRuleFunc func(context.Context, *ent.FeatureQuery) error

// EvalQuery return f(ctx, q).
func (f FeatureQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FeatureQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.FeatureQuery", q)
}

// The FeatureMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FeatureMutationRuleFunc func(context.Context, *ent.FeatureMutation) error

// EvalMutation calls f(ctx, m).
func (f FeatureMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.FeatureMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.FeatureMutation", m)
}

// The FileQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FileQueryRuleFunc func(context.Context, *ent.FileQuery) error

// EvalQuery return f(ctx, q).
func (f FileQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FileQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.FileQuery", q)
}

// The FileMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FileMutationRuleFunc func(context.Context, *ent.FileMutation) error

// EvalMutation calls f(ctx, m).
func (f FileMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.FileMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.FileMutation", m)
}

// The FloorPlanQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FloorPlanQueryRuleFunc func(context.Context, *ent.FloorPlanQuery) error

// EvalQuery return f(ctx, q).
func (f FloorPlanQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FloorPlanQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.FloorPlanQuery", q)
}

// The FloorPlanMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FloorPlanMutationRuleFunc func(context.Context, *ent.FloorPlanMutation) error

// EvalMutation calls f(ctx, m).
func (f FloorPlanMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.FloorPlanMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.FloorPlanMutation", m)
}

// The FloorPlanReferencePointQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FloorPlanReferencePointQueryRuleFunc func(context.Context, *ent.FloorPlanReferencePointQuery) error

// EvalQuery return f(ctx, q).
func (f FloorPlanReferencePointQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FloorPlanReferencePointQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.FloorPlanReferencePointQuery", q)
}

// The FloorPlanReferencePointMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FloorPlanReferencePointMutationRuleFunc func(context.Context, *ent.FloorPlanReferencePointMutation) error

// EvalMutation calls f(ctx, m).
func (f FloorPlanReferencePointMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.FloorPlanReferencePointMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.FloorPlanReferencePointMutation", m)
}

// The FloorPlanScaleQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FloorPlanScaleQueryRuleFunc func(context.Context, *ent.FloorPlanScaleQuery) error

// EvalQuery return f(ctx, q).
func (f FloorPlanScaleQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FloorPlanScaleQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.FloorPlanScaleQuery", q)
}

// The FloorPlanScaleMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FloorPlanScaleMutationRuleFunc func(context.Context, *ent.FloorPlanScaleMutation) error

// EvalMutation calls f(ctx, m).
func (f FloorPlanScaleMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.FloorPlanScaleMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.FloorPlanScaleMutation", m)
}

// The FlowQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FlowQueryRuleFunc func(context.Context, *ent.FlowQuery) error

// EvalQuery return f(ctx, q).
func (f FlowQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FlowQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.FlowQuery", q)
}

// The FlowMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FlowMutationRuleFunc func(context.Context, *ent.FlowMutation) error

// EvalMutation calls f(ctx, m).
func (f FlowMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.FlowMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.FlowMutation", m)
}

// The FlowDraftQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FlowDraftQueryRuleFunc func(context.Context, *ent.FlowDraftQuery) error

// EvalQuery return f(ctx, q).
func (f FlowDraftQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FlowDraftQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.FlowDraftQuery", q)
}

// The FlowDraftMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FlowDraftMutationRuleFunc func(context.Context, *ent.FlowDraftMutation) error

// EvalMutation calls f(ctx, m).
func (f FlowDraftMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.FlowDraftMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.FlowDraftMutation", m)
}

// The FlowExecutionTemplateQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FlowExecutionTemplateQueryRuleFunc func(context.Context, *ent.FlowExecutionTemplateQuery) error

// EvalQuery return f(ctx, q).
func (f FlowExecutionTemplateQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FlowExecutionTemplateQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.FlowExecutionTemplateQuery", q)
}

// The FlowExecutionTemplateMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FlowExecutionTemplateMutationRuleFunc func(context.Context, *ent.FlowExecutionTemplateMutation) error

// EvalMutation calls f(ctx, m).
func (f FlowExecutionTemplateMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.FlowExecutionTemplateMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.FlowExecutionTemplateMutation", m)
}

// The FlowInstanceQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FlowInstanceQueryRuleFunc func(context.Context, *ent.FlowInstanceQuery) error

// EvalQuery return f(ctx, q).
func (f FlowInstanceQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FlowInstanceQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.FlowInstanceQuery", q)
}

// The FlowInstanceMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FlowInstanceMutationRuleFunc func(context.Context, *ent.FlowInstanceMutation) error

// EvalMutation calls f(ctx, m).
func (f FlowInstanceMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.FlowInstanceMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.FlowInstanceMutation", m)
}

// The FormulaQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FormulaQueryRuleFunc func(context.Context, *ent.FormulaQuery) error

// EvalQuery return f(ctx, q).
func (f FormulaQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FormulaQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.FormulaQuery", q)
}

// The FormulaMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FormulaMutationRuleFunc func(context.Context, *ent.FormulaMutation) error

// EvalMutation calls f(ctx, m).
func (f FormulaMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.FormulaMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.FormulaMutation", m)
}

// The HyperlinkQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type HyperlinkQueryRuleFunc func(context.Context, *ent.HyperlinkQuery) error

// EvalQuery return f(ctx, q).
func (f HyperlinkQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HyperlinkQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.HyperlinkQuery", q)
}

// The HyperlinkMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type HyperlinkMutationRuleFunc func(context.Context, *ent.HyperlinkMutation) error

// EvalMutation calls f(ctx, m).
func (f HyperlinkMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.HyperlinkMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.HyperlinkMutation", m)
}

// The KpiQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type KpiQueryRuleFunc func(context.Context, *ent.KpiQuery) error

// EvalQuery return f(ctx, q).
func (f KpiQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.KpiQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.KpiQuery", q)
}

// The KpiMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type KpiMutationRuleFunc func(context.Context, *ent.KpiMutation) error

// EvalMutation calls f(ctx, m).
func (f KpiMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.KpiMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.KpiMutation", m)
}

// The KpiCategoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type KpiCategoryQueryRuleFunc func(context.Context, *ent.KpiCategoryQuery) error

// EvalQuery return f(ctx, q).
func (f KpiCategoryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.KpiCategoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.KpiCategoryQuery", q)
}

// The KpiCategoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type KpiCategoryMutationRuleFunc func(context.Context, *ent.KpiCategoryMutation) error

// EvalMutation calls f(ctx, m).
func (f KpiCategoryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.KpiCategoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.KpiCategoryMutation", m)
}

// The KqiQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type KqiQueryRuleFunc func(context.Context, *ent.KqiQuery) error

// EvalQuery return f(ctx, q).
func (f KqiQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.KqiQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.KqiQuery", q)
}

// The KqiMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type KqiMutationRuleFunc func(context.Context, *ent.KqiMutation) error

// EvalMutation calls f(ctx, m).
func (f KqiMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.KqiMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.KqiMutation", m)
}

// The KqiCategoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type KqiCategoryQueryRuleFunc func(context.Context, *ent.KqiCategoryQuery) error

// EvalQuery return f(ctx, q).
func (f KqiCategoryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.KqiCategoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.KqiCategoryQuery", q)
}

// The KqiCategoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type KqiCategoryMutationRuleFunc func(context.Context, *ent.KqiCategoryMutation) error

// EvalMutation calls f(ctx, m).
func (f KqiCategoryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.KqiCategoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.KqiCategoryMutation", m)
}

// The KqiComparatorQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type KqiComparatorQueryRuleFunc func(context.Context, *ent.KqiComparatorQuery) error

// EvalQuery return f(ctx, q).
func (f KqiComparatorQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.KqiComparatorQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.KqiComparatorQuery", q)
}

// The KqiComparatorMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type KqiComparatorMutationRuleFunc func(context.Context, *ent.KqiComparatorMutation) error

// EvalMutation calls f(ctx, m).
func (f KqiComparatorMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.KqiComparatorMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.KqiComparatorMutation", m)
}

// The KqiPerspectiveQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type KqiPerspectiveQueryRuleFunc func(context.Context, *ent.KqiPerspectiveQuery) error

// EvalQuery return f(ctx, q).
func (f KqiPerspectiveQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.KqiPerspectiveQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.KqiPerspectiveQuery", q)
}

// The KqiPerspectiveMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type KqiPerspectiveMutationRuleFunc func(context.Context, *ent.KqiPerspectiveMutation) error

// EvalMutation calls f(ctx, m).
func (f KqiPerspectiveMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.KqiPerspectiveMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.KqiPerspectiveMutation", m)
}

// The KqiSourceQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type KqiSourceQueryRuleFunc func(context.Context, *ent.KqiSourceQuery) error

// EvalQuery return f(ctx, q).
func (f KqiSourceQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.KqiSourceQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.KqiSourceQuery", q)
}

// The KqiSourceMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type KqiSourceMutationRuleFunc func(context.Context, *ent.KqiSourceMutation) error

// EvalMutation calls f(ctx, m).
func (f KqiSourceMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.KqiSourceMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.KqiSourceMutation", m)
}

// The KqiTargetQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type KqiTargetQueryRuleFunc func(context.Context, *ent.KqiTargetQuery) error

// EvalQuery return f(ctx, q).
func (f KqiTargetQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.KqiTargetQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.KqiTargetQuery", q)
}

// The KqiTargetMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type KqiTargetMutationRuleFunc func(context.Context, *ent.KqiTargetMutation) error

// EvalMutation calls f(ctx, m).
func (f KqiTargetMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.KqiTargetMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.KqiTargetMutation", m)
}

// The KqiTemporalFrequencyQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type KqiTemporalFrequencyQueryRuleFunc func(context.Context, *ent.KqiTemporalFrequencyQuery) error

// EvalQuery return f(ctx, q).
func (f KqiTemporalFrequencyQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.KqiTemporalFrequencyQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.KqiTemporalFrequencyQuery", q)
}

// The KqiTemporalFrequencyMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type KqiTemporalFrequencyMutationRuleFunc func(context.Context, *ent.KqiTemporalFrequencyMutation) error

// EvalMutation calls f(ctx, m).
func (f KqiTemporalFrequencyMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.KqiTemporalFrequencyMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.KqiTemporalFrequencyMutation", m)
}

// The LinkQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type LinkQueryRuleFunc func(context.Context, *ent.LinkQuery) error

// EvalQuery return f(ctx, q).
func (f LinkQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.LinkQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.LinkQuery", q)
}

// The LinkMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type LinkMutationRuleFunc func(context.Context, *ent.LinkMutation) error

// EvalMutation calls f(ctx, m).
func (f LinkMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.LinkMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.LinkMutation", m)
}

// The LocationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type LocationQueryRuleFunc func(context.Context, *ent.LocationQuery) error

// EvalQuery return f(ctx, q).
func (f LocationQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.LocationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.LocationQuery", q)
}

// The LocationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type LocationMutationRuleFunc func(context.Context, *ent.LocationMutation) error

// EvalMutation calls f(ctx, m).
func (f LocationMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.LocationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.LocationMutation", m)
}

// The LocationTypeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type LocationTypeQueryRuleFunc func(context.Context, *ent.LocationTypeQuery) error

// EvalQuery return f(ctx, q).
func (f LocationTypeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.LocationTypeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.LocationTypeQuery", q)
}

// The LocationTypeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type LocationTypeMutationRuleFunc func(context.Context, *ent.LocationTypeMutation) error

// EvalMutation calls f(ctx, m).
func (f LocationTypeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.LocationTypeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.LocationTypeMutation", m)
}

// The NetworkTypeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type NetworkTypeQueryRuleFunc func(context.Context, *ent.NetworkTypeQuery) error

// EvalQuery return f(ctx, q).
func (f NetworkTypeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.NetworkTypeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.NetworkTypeQuery", q)
}

// The NetworkTypeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type NetworkTypeMutationRuleFunc func(context.Context, *ent.NetworkTypeMutation) error

// EvalMutation calls f(ctx, m).
func (f NetworkTypeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.NetworkTypeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.NetworkTypeMutation", m)
}

// The OrganizationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrganizationQueryRuleFunc func(context.Context, *ent.OrganizationQuery) error

// EvalQuery return f(ctx, q).
func (f OrganizationQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrganizationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OrganizationQuery", q)
}

// The OrganizationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrganizationMutationRuleFunc func(context.Context, *ent.OrganizationMutation) error

// EvalMutation calls f(ctx, m).
func (f OrganizationMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OrganizationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OrganizationMutation", m)
}

// The ParameterCatalogQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ParameterCatalogQueryRuleFunc func(context.Context, *ent.ParameterCatalogQuery) error

// EvalQuery return f(ctx, q).
func (f ParameterCatalogQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ParameterCatalogQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ParameterCatalogQuery", q)
}

// The ParameterCatalogMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ParameterCatalogMutationRuleFunc func(context.Context, *ent.ParameterCatalogMutation) error

// EvalMutation calls f(ctx, m).
func (f ParameterCatalogMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ParameterCatalogMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ParameterCatalogMutation", m)
}

// The PermissionsPolicyQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PermissionsPolicyQueryRuleFunc func(context.Context, *ent.PermissionsPolicyQuery) error

// EvalQuery return f(ctx, q).
func (f PermissionsPolicyQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PermissionsPolicyQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PermissionsPolicyQuery", q)
}

// The PermissionsPolicyMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PermissionsPolicyMutationRuleFunc func(context.Context, *ent.PermissionsPolicyMutation) error

// EvalMutation calls f(ctx, m).
func (f PermissionsPolicyMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PermissionsPolicyMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PermissionsPolicyMutation", m)
}

// The ProjectQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ProjectQueryRuleFunc func(context.Context, *ent.ProjectQuery) error

// EvalQuery return f(ctx, q).
func (f ProjectQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProjectQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ProjectQuery", q)
}

// The ProjectMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ProjectMutationRuleFunc func(context.Context, *ent.ProjectMutation) error

// EvalMutation calls f(ctx, m).
func (f ProjectMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ProjectMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ProjectMutation", m)
}

// The ProjectTemplateQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ProjectTemplateQueryRuleFunc func(context.Context, *ent.ProjectTemplateQuery) error

// EvalQuery return f(ctx, q).
func (f ProjectTemplateQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProjectTemplateQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ProjectTemplateQuery", q)
}

// The ProjectTemplateMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ProjectTemplateMutationRuleFunc func(context.Context, *ent.ProjectTemplateMutation) error

// EvalMutation calls f(ctx, m).
func (f ProjectTemplateMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ProjectTemplateMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ProjectTemplateMutation", m)
}

// The ProjectTypeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ProjectTypeQueryRuleFunc func(context.Context, *ent.ProjectTypeQuery) error

// EvalQuery return f(ctx, q).
func (f ProjectTypeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProjectTypeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ProjectTypeQuery", q)
}

// The ProjectTypeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ProjectTypeMutationRuleFunc func(context.Context, *ent.ProjectTypeMutation) error

// EvalMutation calls f(ctx, m).
func (f ProjectTypeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ProjectTypeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ProjectTypeMutation", m)
}

// The PropertyQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PropertyQueryRuleFunc func(context.Context, *ent.PropertyQuery) error

// EvalQuery return f(ctx, q).
func (f PropertyQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PropertyQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PropertyQuery", q)
}

// The PropertyMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PropertyMutationRuleFunc func(context.Context, *ent.PropertyMutation) error

// EvalMutation calls f(ctx, m).
func (f PropertyMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PropertyMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PropertyMutation", m)
}

// The PropertyCategoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PropertyCategoryQueryRuleFunc func(context.Context, *ent.PropertyCategoryQuery) error

// EvalQuery return f(ctx, q).
func (f PropertyCategoryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PropertyCategoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PropertyCategoryQuery", q)
}

// The PropertyCategoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PropertyCategoryMutationRuleFunc func(context.Context, *ent.PropertyCategoryMutation) error

// EvalMutation calls f(ctx, m).
func (f PropertyCategoryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PropertyCategoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PropertyCategoryMutation", m)
}

// The PropertyTypeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PropertyTypeQueryRuleFunc func(context.Context, *ent.PropertyTypeQuery) error

// EvalQuery return f(ctx, q).
func (f PropertyTypeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PropertyTypeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PropertyTypeQuery", q)
}

// The PropertyTypeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PropertyTypeMutationRuleFunc func(context.Context, *ent.PropertyTypeMutation) error

// EvalMutation calls f(ctx, m).
func (f PropertyTypeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PropertyTypeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PropertyTypeMutation", m)
}

// The RecommendationsQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RecommendationsQueryRuleFunc func(context.Context, *ent.RecommendationsQuery) error

// EvalQuery return f(ctx, q).
func (f RecommendationsQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RecommendationsQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RecommendationsQuery", q)
}

// The RecommendationsMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RecommendationsMutationRuleFunc func(context.Context, *ent.RecommendationsMutation) error

// EvalMutation calls f(ctx, m).
func (f RecommendationsMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RecommendationsMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RecommendationsMutation", m)
}

// The RecommendationsCategoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RecommendationsCategoryQueryRuleFunc func(context.Context, *ent.RecommendationsCategoryQuery) error

// EvalQuery return f(ctx, q).
func (f RecommendationsCategoryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RecommendationsCategoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RecommendationsCategoryQuery", q)
}

// The RecommendationsCategoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RecommendationsCategoryMutationRuleFunc func(context.Context, *ent.RecommendationsCategoryMutation) error

// EvalMutation calls f(ctx, m).
func (f RecommendationsCategoryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RecommendationsCategoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RecommendationsCategoryMutation", m)
}

// The RecommendationsSourcesQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RecommendationsSourcesQueryRuleFunc func(context.Context, *ent.RecommendationsSourcesQuery) error

// EvalQuery return f(ctx, q).
func (f RecommendationsSourcesQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RecommendationsSourcesQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RecommendationsSourcesQuery", q)
}

// The RecommendationsSourcesMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RecommendationsSourcesMutationRuleFunc func(context.Context, *ent.RecommendationsSourcesMutation) error

// EvalMutation calls f(ctx, m).
func (f RecommendationsSourcesMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RecommendationsSourcesMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RecommendationsSourcesMutation", m)
}

// The ReportFilterQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ReportFilterQueryRuleFunc func(context.Context, *ent.ReportFilterQuery) error

// EvalQuery return f(ctx, q).
func (f ReportFilterQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ReportFilterQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ReportFilterQuery", q)
}

// The ReportFilterMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ReportFilterMutationRuleFunc func(context.Context, *ent.ReportFilterMutation) error

// EvalMutation calls f(ctx, m).
func (f ReportFilterMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ReportFilterMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ReportFilterMutation", m)
}

// The RuleQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RuleQueryRuleFunc func(context.Context, *ent.RuleQuery) error

// EvalQuery return f(ctx, q).
func (f RuleQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RuleQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RuleQuery", q)
}

// The RuleMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RuleMutationRuleFunc func(context.Context, *ent.RuleMutation) error

// EvalMutation calls f(ctx, m).
func (f RuleMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RuleMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RuleMutation", m)
}

// The RuleLimitQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RuleLimitQueryRuleFunc func(context.Context, *ent.RuleLimitQuery) error

// EvalQuery return f(ctx, q).
func (f RuleLimitQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RuleLimitQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RuleLimitQuery", q)
}

// The RuleLimitMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RuleLimitMutationRuleFunc func(context.Context, *ent.RuleLimitMutation) error

// EvalMutation calls f(ctx, m).
func (f RuleLimitMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RuleLimitMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RuleLimitMutation", m)
}

// The RuleTypeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RuleTypeQueryRuleFunc func(context.Context, *ent.RuleTypeQuery) error

// EvalQuery return f(ctx, q).
func (f RuleTypeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RuleTypeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RuleTypeQuery", q)
}

// The RuleTypeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RuleTypeMutationRuleFunc func(context.Context, *ent.RuleTypeMutation) error

// EvalMutation calls f(ctx, m).
func (f RuleTypeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RuleTypeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RuleTypeMutation", m)
}

// The ServiceQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ServiceQueryRuleFunc func(context.Context, *ent.ServiceQuery) error

// EvalQuery return f(ctx, q).
func (f ServiceQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ServiceQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ServiceQuery", q)
}

// The ServiceMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ServiceMutationRuleFunc func(context.Context, *ent.ServiceMutation) error

// EvalMutation calls f(ctx, m).
func (f ServiceMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ServiceMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ServiceMutation", m)
}

// The ServiceEndpointQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ServiceEndpointQueryRuleFunc func(context.Context, *ent.ServiceEndpointQuery) error

// EvalQuery return f(ctx, q).
func (f ServiceEndpointQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ServiceEndpointQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ServiceEndpointQuery", q)
}

// The ServiceEndpointMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ServiceEndpointMutationRuleFunc func(context.Context, *ent.ServiceEndpointMutation) error

// EvalMutation calls f(ctx, m).
func (f ServiceEndpointMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ServiceEndpointMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ServiceEndpointMutation", m)
}

// The ServiceEndpointDefinitionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ServiceEndpointDefinitionQueryRuleFunc func(context.Context, *ent.ServiceEndpointDefinitionQuery) error

// EvalQuery return f(ctx, q).
func (f ServiceEndpointDefinitionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ServiceEndpointDefinitionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ServiceEndpointDefinitionQuery", q)
}

// The ServiceEndpointDefinitionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ServiceEndpointDefinitionMutationRuleFunc func(context.Context, *ent.ServiceEndpointDefinitionMutation) error

// EvalMutation calls f(ctx, m).
func (f ServiceEndpointDefinitionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ServiceEndpointDefinitionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ServiceEndpointDefinitionMutation", m)
}

// The ServiceTypeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ServiceTypeQueryRuleFunc func(context.Context, *ent.ServiceTypeQuery) error

// EvalQuery return f(ctx, q).
func (f ServiceTypeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ServiceTypeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ServiceTypeQuery", q)
}

// The ServiceTypeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ServiceTypeMutationRuleFunc func(context.Context, *ent.ServiceTypeMutation) error

// EvalMutation calls f(ctx, m).
func (f ServiceTypeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ServiceTypeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ServiceTypeMutation", m)
}

// The SurveyQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SurveyQueryRuleFunc func(context.Context, *ent.SurveyQuery) error

// EvalQuery return f(ctx, q).
func (f SurveyQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SurveyQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SurveyQuery", q)
}

// The SurveyMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SurveyMutationRuleFunc func(context.Context, *ent.SurveyMutation) error

// EvalMutation calls f(ctx, m).
func (f SurveyMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SurveyMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SurveyMutation", m)
}

// The SurveyCellScanQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SurveyCellScanQueryRuleFunc func(context.Context, *ent.SurveyCellScanQuery) error

// EvalQuery return f(ctx, q).
func (f SurveyCellScanQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SurveyCellScanQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SurveyCellScanQuery", q)
}

// The SurveyCellScanMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SurveyCellScanMutationRuleFunc func(context.Context, *ent.SurveyCellScanMutation) error

// EvalMutation calls f(ctx, m).
func (f SurveyCellScanMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SurveyCellScanMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SurveyCellScanMutation", m)
}

// The SurveyQuestionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SurveyQuestionQueryRuleFunc func(context.Context, *ent.SurveyQuestionQuery) error

// EvalQuery return f(ctx, q).
func (f SurveyQuestionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SurveyQuestionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SurveyQuestionQuery", q)
}

// The SurveyQuestionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SurveyQuestionMutationRuleFunc func(context.Context, *ent.SurveyQuestionMutation) error

// EvalMutation calls f(ctx, m).
func (f SurveyQuestionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SurveyQuestionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SurveyQuestionMutation", m)
}

// The SurveyTemplateCategoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SurveyTemplateCategoryQueryRuleFunc func(context.Context, *ent.SurveyTemplateCategoryQuery) error

// EvalQuery return f(ctx, q).
func (f SurveyTemplateCategoryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SurveyTemplateCategoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SurveyTemplateCategoryQuery", q)
}

// The SurveyTemplateCategoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SurveyTemplateCategoryMutationRuleFunc func(context.Context, *ent.SurveyTemplateCategoryMutation) error

// EvalMutation calls f(ctx, m).
func (f SurveyTemplateCategoryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SurveyTemplateCategoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SurveyTemplateCategoryMutation", m)
}

// The SurveyTemplateQuestionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SurveyTemplateQuestionQueryRuleFunc func(context.Context, *ent.SurveyTemplateQuestionQuery) error

// EvalQuery return f(ctx, q).
func (f SurveyTemplateQuestionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SurveyTemplateQuestionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SurveyTemplateQuestionQuery", q)
}

// The SurveyTemplateQuestionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SurveyTemplateQuestionMutationRuleFunc func(context.Context, *ent.SurveyTemplateQuestionMutation) error

// EvalMutation calls f(ctx, m).
func (f SurveyTemplateQuestionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SurveyTemplateQuestionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SurveyTemplateQuestionMutation", m)
}

// The SurveyWiFiScanQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SurveyWiFiScanQueryRuleFunc func(context.Context, *ent.SurveyWiFiScanQuery) error

// EvalQuery return f(ctx, q).
func (f SurveyWiFiScanQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SurveyWiFiScanQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SurveyWiFiScanQuery", q)
}

// The SurveyWiFiScanMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SurveyWiFiScanMutationRuleFunc func(context.Context, *ent.SurveyWiFiScanMutation) error

// EvalMutation calls f(ctx, m).
func (f SurveyWiFiScanMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SurveyWiFiScanMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SurveyWiFiScanMutation", m)
}

// The TechQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TechQueryRuleFunc func(context.Context, *ent.TechQuery) error

// EvalQuery return f(ctx, q).
func (f TechQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TechQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.TechQuery", q)
}

// The TechMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TechMutationRuleFunc func(context.Context, *ent.TechMutation) error

// EvalMutation calls f(ctx, m).
func (f TechMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.TechMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.TechMutation", m)
}

// The ThresholdQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ThresholdQueryRuleFunc func(context.Context, *ent.ThresholdQuery) error

// EvalQuery return f(ctx, q).
func (f ThresholdQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ThresholdQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ThresholdQuery", q)
}

// The ThresholdMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ThresholdMutationRuleFunc func(context.Context, *ent.ThresholdMutation) error

// EvalMutation calls f(ctx, m).
func (f ThresholdMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ThresholdMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ThresholdMutation", m)
}

// The UserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserQueryRuleFunc func(context.Context, *ent.UserQuery) error

// EvalQuery return f(ctx, q).
func (f UserQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserQuery", q)
}

// The UserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserMutationRuleFunc func(context.Context, *ent.UserMutation) error

// EvalMutation calls f(ctx, m).
func (f UserMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserMutation", m)
}

// The UsersGroupQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UsersGroupQueryRuleFunc func(context.Context, *ent.UsersGroupQuery) error

// EvalQuery return f(ctx, q).
func (f UsersGroupQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UsersGroupQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UsersGroupQuery", q)
}

// The UsersGroupMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UsersGroupMutationRuleFunc func(context.Context, *ent.UsersGroupMutation) error

// EvalMutation calls f(ctx, m).
func (f UsersGroupMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UsersGroupMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UsersGroupMutation", m)
}

// The VendorQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type VendorQueryRuleFunc func(context.Context, *ent.VendorQuery) error

// EvalQuery return f(ctx, q).
func (f VendorQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.VendorQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.VendorQuery", q)
}

// The VendorMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type VendorMutationRuleFunc func(context.Context, *ent.VendorMutation) error

// EvalMutation calls f(ctx, m).
func (f VendorMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.VendorMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.VendorMutation", m)
}

// The WorkOrderQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type WorkOrderQueryRuleFunc func(context.Context, *ent.WorkOrderQuery) error

// EvalQuery return f(ctx, q).
func (f WorkOrderQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.WorkOrderQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.WorkOrderQuery", q)
}

// The WorkOrderMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type WorkOrderMutationRuleFunc func(context.Context, *ent.WorkOrderMutation) error

// EvalMutation calls f(ctx, m).
func (f WorkOrderMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.WorkOrderMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.WorkOrderMutation", m)
}

// The WorkOrderDefinitionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type WorkOrderDefinitionQueryRuleFunc func(context.Context, *ent.WorkOrderDefinitionQuery) error

// EvalQuery return f(ctx, q).
func (f WorkOrderDefinitionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.WorkOrderDefinitionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.WorkOrderDefinitionQuery", q)
}

// The WorkOrderDefinitionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type WorkOrderDefinitionMutationRuleFunc func(context.Context, *ent.WorkOrderDefinitionMutation) error

// EvalMutation calls f(ctx, m).
func (f WorkOrderDefinitionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.WorkOrderDefinitionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.WorkOrderDefinitionMutation", m)
}

// The WorkOrderTemplateQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type WorkOrderTemplateQueryRuleFunc func(context.Context, *ent.WorkOrderTemplateQuery) error

// EvalQuery return f(ctx, q).
func (f WorkOrderTemplateQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.WorkOrderTemplateQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.WorkOrderTemplateQuery", q)
}

// The WorkOrderTemplateMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type WorkOrderTemplateMutationRuleFunc func(context.Context, *ent.WorkOrderTemplateMutation) error

// EvalMutation calls f(ctx, m).
func (f WorkOrderTemplateMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.WorkOrderTemplateMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.WorkOrderTemplateMutation", m)
}

// The WorkOrderTypeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type WorkOrderTypeQueryRuleFunc func(context.Context, *ent.WorkOrderTypeQuery) error

// EvalQuery return f(ctx, q).
func (f WorkOrderTypeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.WorkOrderTypeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.WorkOrderTypeQuery", q)
}

// The WorkOrderTypeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type WorkOrderTypeMutationRuleFunc func(context.Context, *ent.WorkOrderTypeMutation) error

// EvalMutation calls f(ctx, m).
func (f WorkOrderTypeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.WorkOrderTypeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.WorkOrderTypeMutation", m)
}

// The WorkerTypeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type WorkerTypeQueryRuleFunc func(context.Context, *ent.WorkerTypeQuery) error

// EvalQuery return f(ctx, q).
func (f WorkerTypeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.WorkerTypeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.WorkerTypeQuery", q)
}

// The WorkerTypeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type WorkerTypeMutationRuleFunc func(context.Context, *ent.WorkerTypeMutation) error

// EvalMutation calls f(ctx, m).
func (f WorkerTypeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.WorkerTypeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.WorkerTypeMutation", m)
}
