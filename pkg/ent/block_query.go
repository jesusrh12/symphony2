// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/block"
	"github.com/facebookincubator/symphony/pkg/ent/blockinstance"
	"github.com/facebookincubator/symphony/pkg/ent/entrypoint"
	"github.com/facebookincubator/symphony/pkg/ent/exitpoint"
	"github.com/facebookincubator/symphony/pkg/ent/flow"
	"github.com/facebookincubator/symphony/pkg/ent/flowdraft"
	"github.com/facebookincubator/symphony/pkg/ent/flowexecutiontemplate"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
)

// BlockQuery is the builder for querying Block entities.
type BlockQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.Block
	// eager-loading edges.
	withFlow         *FlowQuery
	withFlowTemplate *FlowExecutionTemplateQuery
	withFlowDraft    *FlowDraftQuery
	withSubFlow      *FlowQuery
	withSourceBlock  *BlockQuery
	withGotoBlock    *BlockQuery
	withInstances    *BlockInstanceQuery
	withEntryPoint   *EntryPointQuery
	withExitPoints   *ExitPointQuery
	withFKs          bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (bq *BlockQuery) Where(ps ...predicate.Block) *BlockQuery {
	bq.predicates = append(bq.predicates, ps...)
	return bq
}

// Limit adds a limit step to the query.
func (bq *BlockQuery) Limit(limit int) *BlockQuery {
	bq.limit = &limit
	return bq
}

// Offset adds an offset step to the query.
func (bq *BlockQuery) Offset(offset int) *BlockQuery {
	bq.offset = &offset
	return bq
}

// Order adds an order step to the query.
func (bq *BlockQuery) Order(o ...OrderFunc) *BlockQuery {
	bq.order = append(bq.order, o...)
	return bq
}

// QueryFlow chains the current query on the flow edge.
func (bq *BlockQuery) QueryFlow() *FlowQuery {
	query := &FlowQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(block.Table, block.FieldID, selector),
			sqlgraph.To(flow.Table, flow.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, block.FlowTable, block.FlowColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFlowTemplate chains the current query on the flow_template edge.
func (bq *BlockQuery) QueryFlowTemplate() *FlowExecutionTemplateQuery {
	query := &FlowExecutionTemplateQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(block.Table, block.FieldID, selector),
			sqlgraph.To(flowexecutiontemplate.Table, flowexecutiontemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, block.FlowTemplateTable, block.FlowTemplateColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFlowDraft chains the current query on the flow_draft edge.
func (bq *BlockQuery) QueryFlowDraft() *FlowDraftQuery {
	query := &FlowDraftQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(block.Table, block.FieldID, selector),
			sqlgraph.To(flowdraft.Table, flowdraft.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, block.FlowDraftTable, block.FlowDraftColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubFlow chains the current query on the sub_flow edge.
func (bq *BlockQuery) QuerySubFlow() *FlowQuery {
	query := &FlowQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(block.Table, block.FieldID, selector),
			sqlgraph.To(flow.Table, flow.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, block.SubFlowTable, block.SubFlowColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySourceBlock chains the current query on the source_block edge.
func (bq *BlockQuery) QuerySourceBlock() *BlockQuery {
	query := &BlockQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(block.Table, block.FieldID, selector),
			sqlgraph.To(block.Table, block.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, block.SourceBlockTable, block.SourceBlockColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGotoBlock chains the current query on the goto_block edge.
func (bq *BlockQuery) QueryGotoBlock() *BlockQuery {
	query := &BlockQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(block.Table, block.FieldID, selector),
			sqlgraph.To(block.Table, block.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, block.GotoBlockTable, block.GotoBlockColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInstances chains the current query on the instances edge.
func (bq *BlockQuery) QueryInstances() *BlockInstanceQuery {
	query := &BlockInstanceQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(block.Table, block.FieldID, selector),
			sqlgraph.To(blockinstance.Table, blockinstance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, block.InstancesTable, block.InstancesColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEntryPoint chains the current query on the entry_point edge.
func (bq *BlockQuery) QueryEntryPoint() *EntryPointQuery {
	query := &EntryPointQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(block.Table, block.FieldID, selector),
			sqlgraph.To(entrypoint.Table, entrypoint.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, block.EntryPointTable, block.EntryPointColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExitPoints chains the current query on the exit_points edge.
func (bq *BlockQuery) QueryExitPoints() *ExitPointQuery {
	query := &ExitPointQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(block.Table, block.FieldID, selector),
			sqlgraph.To(exitpoint.Table, exitpoint.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, block.ExitPointsTable, block.ExitPointsColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Block entity in the query. Returns *NotFoundError when no block was found.
func (bq *BlockQuery) First(ctx context.Context) (*Block, error) {
	nodes, err := bq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{block.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (bq *BlockQuery) FirstX(ctx context.Context) *Block {
	node, err := bq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Block id in the query. Returns *NotFoundError when no id was found.
func (bq *BlockQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = bq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{block.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (bq *BlockQuery) FirstIDX(ctx context.Context) int {
	id, err := bq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only Block entity in the query, returns an error if not exactly one entity was returned.
func (bq *BlockQuery) Only(ctx context.Context) (*Block, error) {
	nodes, err := bq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{block.Label}
	default:
		return nil, &NotSingularError{block.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (bq *BlockQuery) OnlyX(ctx context.Context) *Block {
	node, err := bq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only Block id in the query, returns an error if not exactly one id was returned.
func (bq *BlockQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = bq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{block.Label}
	default:
		err = &NotSingularError{block.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (bq *BlockQuery) OnlyIDX(ctx context.Context) int {
	id, err := bq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Blocks.
func (bq *BlockQuery) All(ctx context.Context) ([]*Block, error) {
	if err := bq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return bq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (bq *BlockQuery) AllX(ctx context.Context) []*Block {
	nodes, err := bq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Block ids.
func (bq *BlockQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := bq.Select(block.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (bq *BlockQuery) IDsX(ctx context.Context) []int {
	ids, err := bq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (bq *BlockQuery) Count(ctx context.Context) (int, error) {
	if err := bq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return bq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (bq *BlockQuery) CountX(ctx context.Context) int {
	count, err := bq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (bq *BlockQuery) Exist(ctx context.Context) (bool, error) {
	if err := bq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return bq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (bq *BlockQuery) ExistX(ctx context.Context) bool {
	exist, err := bq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (bq *BlockQuery) Clone() *BlockQuery {
	if bq == nil {
		return nil
	}
	return &BlockQuery{
		config:           bq.config,
		limit:            bq.limit,
		offset:           bq.offset,
		order:            append([]OrderFunc{}, bq.order...),
		unique:           append([]string{}, bq.unique...),
		predicates:       append([]predicate.Block{}, bq.predicates...),
		withFlow:         bq.withFlow.Clone(),
		withFlowTemplate: bq.withFlowTemplate.Clone(),
		withFlowDraft:    bq.withFlowDraft.Clone(),
		withSubFlow:      bq.withSubFlow.Clone(),
		withSourceBlock:  bq.withSourceBlock.Clone(),
		withGotoBlock:    bq.withGotoBlock.Clone(),
		withInstances:    bq.withInstances.Clone(),
		withEntryPoint:   bq.withEntryPoint.Clone(),
		withExitPoints:   bq.withExitPoints.Clone(),
		// clone intermediate query.
		sql:  bq.sql.Clone(),
		path: bq.path,
	}
}

//  WithFlow tells the query-builder to eager-loads the nodes that are connected to
// the "flow" edge. The optional arguments used to configure the query builder of the edge.
func (bq *BlockQuery) WithFlow(opts ...func(*FlowQuery)) *BlockQuery {
	query := &FlowQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withFlow = query
	return bq
}

//  WithFlowTemplate tells the query-builder to eager-loads the nodes that are connected to
// the "flow_template" edge. The optional arguments used to configure the query builder of the edge.
func (bq *BlockQuery) WithFlowTemplate(opts ...func(*FlowExecutionTemplateQuery)) *BlockQuery {
	query := &FlowExecutionTemplateQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withFlowTemplate = query
	return bq
}

//  WithFlowDraft tells the query-builder to eager-loads the nodes that are connected to
// the "flow_draft" edge. The optional arguments used to configure the query builder of the edge.
func (bq *BlockQuery) WithFlowDraft(opts ...func(*FlowDraftQuery)) *BlockQuery {
	query := &FlowDraftQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withFlowDraft = query
	return bq
}

//  WithSubFlow tells the query-builder to eager-loads the nodes that are connected to
// the "sub_flow" edge. The optional arguments used to configure the query builder of the edge.
func (bq *BlockQuery) WithSubFlow(opts ...func(*FlowQuery)) *BlockQuery {
	query := &FlowQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withSubFlow = query
	return bq
}

//  WithSourceBlock tells the query-builder to eager-loads the nodes that are connected to
// the "source_block" edge. The optional arguments used to configure the query builder of the edge.
func (bq *BlockQuery) WithSourceBlock(opts ...func(*BlockQuery)) *BlockQuery {
	query := &BlockQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withSourceBlock = query
	return bq
}

//  WithGotoBlock tells the query-builder to eager-loads the nodes that are connected to
// the "goto_block" edge. The optional arguments used to configure the query builder of the edge.
func (bq *BlockQuery) WithGotoBlock(opts ...func(*BlockQuery)) *BlockQuery {
	query := &BlockQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withGotoBlock = query
	return bq
}

//  WithInstances tells the query-builder to eager-loads the nodes that are connected to
// the "instances" edge. The optional arguments used to configure the query builder of the edge.
func (bq *BlockQuery) WithInstances(opts ...func(*BlockInstanceQuery)) *BlockQuery {
	query := &BlockInstanceQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withInstances = query
	return bq
}

//  WithEntryPoint tells the query-builder to eager-loads the nodes that are connected to
// the "entry_point" edge. The optional arguments used to configure the query builder of the edge.
func (bq *BlockQuery) WithEntryPoint(opts ...func(*EntryPointQuery)) *BlockQuery {
	query := &EntryPointQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withEntryPoint = query
	return bq
}

//  WithExitPoints tells the query-builder to eager-loads the nodes that are connected to
// the "exit_points" edge. The optional arguments used to configure the query builder of the edge.
func (bq *BlockQuery) WithExitPoints(opts ...func(*ExitPointQuery)) *BlockQuery {
	query := &ExitPointQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withExitPoints = query
	return bq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Block.Query().
//		GroupBy(block.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (bq *BlockQuery) GroupBy(field string, fields ...string) *BlockGroupBy {
	group := &BlockGroupBy{config: bq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return bq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.Block.Query().
//		Select(block.FieldCreateTime).
//		Scan(ctx, &v)
//
func (bq *BlockQuery) Select(field string, fields ...string) *BlockSelect {
	selector := &BlockSelect{config: bq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return bq.sqlQuery(), nil
	}
	return selector
}

func (bq *BlockQuery) prepareQuery(ctx context.Context) error {
	if bq.path != nil {
		prev, err := bq.path(ctx)
		if err != nil {
			return err
		}
		bq.sql = prev
	}
	if err := block.Policy.EvalQuery(ctx, bq); err != nil {
		return err
	}
	return nil
}

func (bq *BlockQuery) sqlAll(ctx context.Context) ([]*Block, error) {
	var (
		nodes       = []*Block{}
		withFKs     = bq.withFKs
		_spec       = bq.querySpec()
		loadedTypes = [9]bool{
			bq.withFlow != nil,
			bq.withFlowTemplate != nil,
			bq.withFlowDraft != nil,
			bq.withSubFlow != nil,
			bq.withSourceBlock != nil,
			bq.withGotoBlock != nil,
			bq.withInstances != nil,
			bq.withEntryPoint != nil,
			bq.withExitPoints != nil,
		}
	)
	if bq.withFlow != nil || bq.withFlowTemplate != nil || bq.withFlowDraft != nil || bq.withSubFlow != nil || bq.withGotoBlock != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, block.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &Block{config: bq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, bq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := bq.withFlow; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Block)
		for i := range nodes {
			if fk := nodes[i].flow_blocks; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(flow.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "flow_blocks" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Flow = n
			}
		}
	}

	if query := bq.withFlowTemplate; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Block)
		for i := range nodes {
			if fk := nodes[i].flow_execution_template_blocks; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(flowexecutiontemplate.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "flow_execution_template_blocks" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.FlowTemplate = n
			}
		}
	}

	if query := bq.withFlowDraft; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Block)
		for i := range nodes {
			if fk := nodes[i].flow_draft_blocks; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(flowdraft.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "flow_draft_blocks" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.FlowDraft = n
			}
		}
	}

	if query := bq.withSubFlow; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Block)
		for i := range nodes {
			if fk := nodes[i].block_sub_flow; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(flow.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "block_sub_flow" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.SubFlow = n
			}
		}
	}

	if query := bq.withSourceBlock; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Block)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.SourceBlock = []*Block{}
		}
		query.withFKs = true
		query.Where(predicate.Block(func(s *sql.Selector) {
			s.Where(sql.InValues(block.SourceBlockColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.block_goto_block
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "block_goto_block" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "block_goto_block" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.SourceBlock = append(node.Edges.SourceBlock, n)
		}
	}

	if query := bq.withGotoBlock; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Block)
		for i := range nodes {
			if fk := nodes[i].block_goto_block; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(block.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "block_goto_block" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.GotoBlock = n
			}
		}
	}

	if query := bq.withInstances; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Block)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Instances = []*BlockInstance{}
		}
		query.withFKs = true
		query.Where(predicate.BlockInstance(func(s *sql.Selector) {
			s.Where(sql.InValues(block.InstancesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.block_instance_block
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "block_instance_block" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "block_instance_block" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Instances = append(node.Edges.Instances, n)
		}
	}

	if query := bq.withEntryPoint; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Block)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.EntryPoint(func(s *sql.Selector) {
			s.Where(sql.InValues(block.EntryPointColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.block_entry_point
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "block_entry_point" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "block_entry_point" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.EntryPoint = n
		}
	}

	if query := bq.withExitPoints; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Block)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ExitPoints = []*ExitPoint{}
		}
		query.withFKs = true
		query.Where(predicate.ExitPoint(func(s *sql.Selector) {
			s.Where(sql.InValues(block.ExitPointsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.block_exit_points
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "block_exit_points" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "block_exit_points" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ExitPoints = append(node.Edges.ExitPoints, n)
		}
	}

	return nodes, nil
}

func (bq *BlockQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := bq.querySpec()
	return sqlgraph.CountNodes(ctx, bq.driver, _spec)
}

func (bq *BlockQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := bq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (bq *BlockQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   block.Table,
			Columns: block.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: block.FieldID,
			},
		},
		From:   bq.sql,
		Unique: true,
	}
	if ps := bq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := bq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := bq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := bq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, block.ValidColumn)
			}
		}
	}
	return _spec
}

func (bq *BlockQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(bq.driver.Dialect())
	t1 := builder.Table(block.Table)
	selector := builder.Select(t1.Columns(block.Columns...)...).From(t1)
	if bq.sql != nil {
		selector = bq.sql
		selector.Select(selector.Columns(block.Columns...)...)
	}
	for _, p := range bq.predicates {
		p(selector)
	}
	for _, p := range bq.order {
		p(selector, block.ValidColumn)
	}
	if offset := bq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := bq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// BlockGroupBy is the builder for group-by Block entities.
type BlockGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bgb *BlockGroupBy) Aggregate(fns ...AggregateFunc) *BlockGroupBy {
	bgb.fns = append(bgb.fns, fns...)
	return bgb
}

// Scan applies the group-by query and scan the result into the given value.
func (bgb *BlockGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := bgb.path(ctx)
	if err != nil {
		return err
	}
	bgb.sql = query
	return bgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (bgb *BlockGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := bgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (bgb *BlockGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(bgb.fields) > 1 {
		return nil, errors.New("ent: BlockGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := bgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (bgb *BlockGroupBy) StringsX(ctx context.Context) []string {
	v, err := bgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (bgb *BlockGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = bgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{block.Label}
	default:
		err = fmt.Errorf("ent: BlockGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (bgb *BlockGroupBy) StringX(ctx context.Context) string {
	v, err := bgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (bgb *BlockGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(bgb.fields) > 1 {
		return nil, errors.New("ent: BlockGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := bgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (bgb *BlockGroupBy) IntsX(ctx context.Context) []int {
	v, err := bgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (bgb *BlockGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = bgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{block.Label}
	default:
		err = fmt.Errorf("ent: BlockGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (bgb *BlockGroupBy) IntX(ctx context.Context) int {
	v, err := bgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (bgb *BlockGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(bgb.fields) > 1 {
		return nil, errors.New("ent: BlockGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := bgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (bgb *BlockGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := bgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (bgb *BlockGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = bgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{block.Label}
	default:
		err = fmt.Errorf("ent: BlockGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (bgb *BlockGroupBy) Float64X(ctx context.Context) float64 {
	v, err := bgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (bgb *BlockGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(bgb.fields) > 1 {
		return nil, errors.New("ent: BlockGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := bgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (bgb *BlockGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := bgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (bgb *BlockGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = bgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{block.Label}
	default:
		err = fmt.Errorf("ent: BlockGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (bgb *BlockGroupBy) BoolX(ctx context.Context) bool {
	v, err := bgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (bgb *BlockGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range bgb.fields {
		if !block.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := bgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (bgb *BlockGroupBy) sqlQuery() *sql.Selector {
	selector := bgb.sql
	columns := make([]string, 0, len(bgb.fields)+len(bgb.fns))
	columns = append(columns, bgb.fields...)
	for _, fn := range bgb.fns {
		columns = append(columns, fn(selector, block.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(bgb.fields...)
}

// BlockSelect is the builder for select fields of Block entities.
type BlockSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (bs *BlockSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := bs.path(ctx)
	if err != nil {
		return err
	}
	bs.sql = query
	return bs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (bs *BlockSelect) ScanX(ctx context.Context, v interface{}) {
	if err := bs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (bs *BlockSelect) Strings(ctx context.Context) ([]string, error) {
	if len(bs.fields) > 1 {
		return nil, errors.New("ent: BlockSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := bs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (bs *BlockSelect) StringsX(ctx context.Context) []string {
	v, err := bs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (bs *BlockSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = bs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{block.Label}
	default:
		err = fmt.Errorf("ent: BlockSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (bs *BlockSelect) StringX(ctx context.Context) string {
	v, err := bs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (bs *BlockSelect) Ints(ctx context.Context) ([]int, error) {
	if len(bs.fields) > 1 {
		return nil, errors.New("ent: BlockSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := bs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (bs *BlockSelect) IntsX(ctx context.Context) []int {
	v, err := bs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (bs *BlockSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = bs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{block.Label}
	default:
		err = fmt.Errorf("ent: BlockSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (bs *BlockSelect) IntX(ctx context.Context) int {
	v, err := bs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (bs *BlockSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(bs.fields) > 1 {
		return nil, errors.New("ent: BlockSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := bs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (bs *BlockSelect) Float64sX(ctx context.Context) []float64 {
	v, err := bs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (bs *BlockSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = bs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{block.Label}
	default:
		err = fmt.Errorf("ent: BlockSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (bs *BlockSelect) Float64X(ctx context.Context) float64 {
	v, err := bs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (bs *BlockSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(bs.fields) > 1 {
		return nil, errors.New("ent: BlockSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := bs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (bs *BlockSelect) BoolsX(ctx context.Context) []bool {
	v, err := bs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (bs *BlockSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = bs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{block.Label}
	default:
		err = fmt.Errorf("ent: BlockSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (bs *BlockSelect) BoolX(ctx context.Context) bool {
	v, err := bs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (bs *BlockSelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range bs.fields {
		if !block.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := bs.sqlQuery().Query()
	if err := bs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (bs *BlockSelect) sqlQuery() sql.Querier {
	selector := bs.sql
	selector.Select(selector.Columns(bs.fields...)...)
	return selector
}
