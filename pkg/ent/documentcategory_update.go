// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/documentcategory"
	"github.com/facebookincubator/symphony/pkg/ent/file"
	"github.com/facebookincubator/symphony/pkg/ent/hyperlink"
	"github.com/facebookincubator/symphony/pkg/ent/locationtype"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
)

// DocumentCategoryUpdate is the builder for updating DocumentCategory entities.
type DocumentCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *DocumentCategoryMutation
}

// Where adds a new predicate for the builder.
func (dcu *DocumentCategoryUpdate) Where(ps ...predicate.DocumentCategory) *DocumentCategoryUpdate {
	dcu.mutation.predicates = append(dcu.mutation.predicates, ps...)
	return dcu
}

// SetName sets the name field.
func (dcu *DocumentCategoryUpdate) SetName(s string) *DocumentCategoryUpdate {
	dcu.mutation.SetName(s)
	return dcu
}

// SetIndex sets the index field.
func (dcu *DocumentCategoryUpdate) SetIndex(i int) *DocumentCategoryUpdate {
	dcu.mutation.ResetIndex()
	dcu.mutation.SetIndex(i)
	return dcu
}

// AddIndex adds i to index.
func (dcu *DocumentCategoryUpdate) AddIndex(i int) *DocumentCategoryUpdate {
	dcu.mutation.AddIndex(i)
	return dcu
}

// SetLocationTypeID sets the location_type edge to LocationType by id.
func (dcu *DocumentCategoryUpdate) SetLocationTypeID(id int) *DocumentCategoryUpdate {
	dcu.mutation.SetLocationTypeID(id)
	return dcu
}

// SetNillableLocationTypeID sets the location_type edge to LocationType by id if the given value is not nil.
func (dcu *DocumentCategoryUpdate) SetNillableLocationTypeID(id *int) *DocumentCategoryUpdate {
	if id != nil {
		dcu = dcu.SetLocationTypeID(*id)
	}
	return dcu
}

// SetLocationType sets the location_type edge to LocationType.
func (dcu *DocumentCategoryUpdate) SetLocationType(l *LocationType) *DocumentCategoryUpdate {
	return dcu.SetLocationTypeID(l.ID)
}

// AddFileIDs adds the files edge to File by ids.
func (dcu *DocumentCategoryUpdate) AddFileIDs(ids ...int) *DocumentCategoryUpdate {
	dcu.mutation.AddFileIDs(ids...)
	return dcu
}

// AddFiles adds the files edges to File.
func (dcu *DocumentCategoryUpdate) AddFiles(f ...*File) *DocumentCategoryUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return dcu.AddFileIDs(ids...)
}

// AddHyperlinkIDs adds the hyperlinks edge to Hyperlink by ids.
func (dcu *DocumentCategoryUpdate) AddHyperlinkIDs(ids ...int) *DocumentCategoryUpdate {
	dcu.mutation.AddHyperlinkIDs(ids...)
	return dcu
}

// AddHyperlinks adds the hyperlinks edges to Hyperlink.
func (dcu *DocumentCategoryUpdate) AddHyperlinks(h ...*Hyperlink) *DocumentCategoryUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return dcu.AddHyperlinkIDs(ids...)
}

// Mutation returns the DocumentCategoryMutation object of the builder.
func (dcu *DocumentCategoryUpdate) Mutation() *DocumentCategoryMutation {
	return dcu.mutation
}

// ClearLocationType clears the "location_type" edge to type LocationType.
func (dcu *DocumentCategoryUpdate) ClearLocationType() *DocumentCategoryUpdate {
	dcu.mutation.ClearLocationType()
	return dcu
}

// ClearFiles clears all "files" edges to type File.
func (dcu *DocumentCategoryUpdate) ClearFiles() *DocumentCategoryUpdate {
	dcu.mutation.ClearFiles()
	return dcu
}

// RemoveFileIDs removes the files edge to File by ids.
func (dcu *DocumentCategoryUpdate) RemoveFileIDs(ids ...int) *DocumentCategoryUpdate {
	dcu.mutation.RemoveFileIDs(ids...)
	return dcu
}

// RemoveFiles removes files edges to File.
func (dcu *DocumentCategoryUpdate) RemoveFiles(f ...*File) *DocumentCategoryUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return dcu.RemoveFileIDs(ids...)
}

// ClearHyperlinks clears all "hyperlinks" edges to type Hyperlink.
func (dcu *DocumentCategoryUpdate) ClearHyperlinks() *DocumentCategoryUpdate {
	dcu.mutation.ClearHyperlinks()
	return dcu
}

// RemoveHyperlinkIDs removes the hyperlinks edge to Hyperlink by ids.
func (dcu *DocumentCategoryUpdate) RemoveHyperlinkIDs(ids ...int) *DocumentCategoryUpdate {
	dcu.mutation.RemoveHyperlinkIDs(ids...)
	return dcu
}

// RemoveHyperlinks removes hyperlinks edges to Hyperlink.
func (dcu *DocumentCategoryUpdate) RemoveHyperlinks(h ...*Hyperlink) *DocumentCategoryUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return dcu.RemoveHyperlinkIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dcu *DocumentCategoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	dcu.defaults()
	if len(dcu.hooks) == 0 {
		if err = dcu.check(); err != nil {
			return 0, err
		}
		affected, err = dcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DocumentCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dcu.check(); err != nil {
				return 0, err
			}
			dcu.mutation = mutation
			affected, err = dcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dcu.hooks) - 1; i >= 0; i-- {
			mut = dcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dcu *DocumentCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := dcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dcu *DocumentCategoryUpdate) Exec(ctx context.Context) error {
	_, err := dcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcu *DocumentCategoryUpdate) ExecX(ctx context.Context) {
	if err := dcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dcu *DocumentCategoryUpdate) defaults() {
	if _, ok := dcu.mutation.UpdateTime(); !ok {
		v := documentcategory.UpdateDefaultUpdateTime()
		dcu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dcu *DocumentCategoryUpdate) check() error {
	if v, ok := dcu.mutation.Name(); ok {
		if err := documentcategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (dcu *DocumentCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   documentcategory.Table,
			Columns: documentcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: documentcategory.FieldID,
			},
		},
	}
	if ps := dcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: documentcategory.FieldUpdateTime,
		})
	}
	if value, ok := dcu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: documentcategory.FieldName,
		})
	}
	if value, ok := dcu.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: documentcategory.FieldIndex,
		})
	}
	if value, ok := dcu.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: documentcategory.FieldIndex,
		})
	}
	if dcu.mutation.LocationTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   documentcategory.LocationTypeTable,
			Columns: []string{documentcategory.LocationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: locationtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.LocationTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   documentcategory.LocationTypeTable,
			Columns: []string{documentcategory.LocationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: locationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   documentcategory.FilesTable,
			Columns: []string{documentcategory.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.RemovedFilesIDs(); len(nodes) > 0 && !dcu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   documentcategory.FilesTable,
			Columns: []string{documentcategory.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   documentcategory.FilesTable,
			Columns: []string{documentcategory.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcu.mutation.HyperlinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   documentcategory.HyperlinksTable,
			Columns: []string{documentcategory.HyperlinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hyperlink.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.RemovedHyperlinksIDs(); len(nodes) > 0 && !dcu.mutation.HyperlinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   documentcategory.HyperlinksTable,
			Columns: []string{documentcategory.HyperlinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hyperlink.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.HyperlinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   documentcategory.HyperlinksTable,
			Columns: []string{documentcategory.HyperlinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hyperlink.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{documentcategory.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DocumentCategoryUpdateOne is the builder for updating a single DocumentCategory entity.
type DocumentCategoryUpdateOne struct {
	config
	hooks    []Hook
	mutation *DocumentCategoryMutation
}

// SetName sets the name field.
func (dcuo *DocumentCategoryUpdateOne) SetName(s string) *DocumentCategoryUpdateOne {
	dcuo.mutation.SetName(s)
	return dcuo
}

// SetIndex sets the index field.
func (dcuo *DocumentCategoryUpdateOne) SetIndex(i int) *DocumentCategoryUpdateOne {
	dcuo.mutation.ResetIndex()
	dcuo.mutation.SetIndex(i)
	return dcuo
}

// AddIndex adds i to index.
func (dcuo *DocumentCategoryUpdateOne) AddIndex(i int) *DocumentCategoryUpdateOne {
	dcuo.mutation.AddIndex(i)
	return dcuo
}

// SetLocationTypeID sets the location_type edge to LocationType by id.
func (dcuo *DocumentCategoryUpdateOne) SetLocationTypeID(id int) *DocumentCategoryUpdateOne {
	dcuo.mutation.SetLocationTypeID(id)
	return dcuo
}

// SetNillableLocationTypeID sets the location_type edge to LocationType by id if the given value is not nil.
func (dcuo *DocumentCategoryUpdateOne) SetNillableLocationTypeID(id *int) *DocumentCategoryUpdateOne {
	if id != nil {
		dcuo = dcuo.SetLocationTypeID(*id)
	}
	return dcuo
}

// SetLocationType sets the location_type edge to LocationType.
func (dcuo *DocumentCategoryUpdateOne) SetLocationType(l *LocationType) *DocumentCategoryUpdateOne {
	return dcuo.SetLocationTypeID(l.ID)
}

// AddFileIDs adds the files edge to File by ids.
func (dcuo *DocumentCategoryUpdateOne) AddFileIDs(ids ...int) *DocumentCategoryUpdateOne {
	dcuo.mutation.AddFileIDs(ids...)
	return dcuo
}

// AddFiles adds the files edges to File.
func (dcuo *DocumentCategoryUpdateOne) AddFiles(f ...*File) *DocumentCategoryUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return dcuo.AddFileIDs(ids...)
}

// AddHyperlinkIDs adds the hyperlinks edge to Hyperlink by ids.
func (dcuo *DocumentCategoryUpdateOne) AddHyperlinkIDs(ids ...int) *DocumentCategoryUpdateOne {
	dcuo.mutation.AddHyperlinkIDs(ids...)
	return dcuo
}

// AddHyperlinks adds the hyperlinks edges to Hyperlink.
func (dcuo *DocumentCategoryUpdateOne) AddHyperlinks(h ...*Hyperlink) *DocumentCategoryUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return dcuo.AddHyperlinkIDs(ids...)
}

// Mutation returns the DocumentCategoryMutation object of the builder.
func (dcuo *DocumentCategoryUpdateOne) Mutation() *DocumentCategoryMutation {
	return dcuo.mutation
}

// ClearLocationType clears the "location_type" edge to type LocationType.
func (dcuo *DocumentCategoryUpdateOne) ClearLocationType() *DocumentCategoryUpdateOne {
	dcuo.mutation.ClearLocationType()
	return dcuo
}

// ClearFiles clears all "files" edges to type File.
func (dcuo *DocumentCategoryUpdateOne) ClearFiles() *DocumentCategoryUpdateOne {
	dcuo.mutation.ClearFiles()
	return dcuo
}

// RemoveFileIDs removes the files edge to File by ids.
func (dcuo *DocumentCategoryUpdateOne) RemoveFileIDs(ids ...int) *DocumentCategoryUpdateOne {
	dcuo.mutation.RemoveFileIDs(ids...)
	return dcuo
}

// RemoveFiles removes files edges to File.
func (dcuo *DocumentCategoryUpdateOne) RemoveFiles(f ...*File) *DocumentCategoryUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return dcuo.RemoveFileIDs(ids...)
}

// ClearHyperlinks clears all "hyperlinks" edges to type Hyperlink.
func (dcuo *DocumentCategoryUpdateOne) ClearHyperlinks() *DocumentCategoryUpdateOne {
	dcuo.mutation.ClearHyperlinks()
	return dcuo
}

// RemoveHyperlinkIDs removes the hyperlinks edge to Hyperlink by ids.
func (dcuo *DocumentCategoryUpdateOne) RemoveHyperlinkIDs(ids ...int) *DocumentCategoryUpdateOne {
	dcuo.mutation.RemoveHyperlinkIDs(ids...)
	return dcuo
}

// RemoveHyperlinks removes hyperlinks edges to Hyperlink.
func (dcuo *DocumentCategoryUpdateOne) RemoveHyperlinks(h ...*Hyperlink) *DocumentCategoryUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return dcuo.RemoveHyperlinkIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (dcuo *DocumentCategoryUpdateOne) Save(ctx context.Context) (*DocumentCategory, error) {
	var (
		err  error
		node *DocumentCategory
	)
	dcuo.defaults()
	if len(dcuo.hooks) == 0 {
		if err = dcuo.check(); err != nil {
			return nil, err
		}
		node, err = dcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DocumentCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dcuo.check(); err != nil {
				return nil, err
			}
			dcuo.mutation = mutation
			node, err = dcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dcuo.hooks) - 1; i >= 0; i-- {
			mut = dcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dcuo *DocumentCategoryUpdateOne) SaveX(ctx context.Context) *DocumentCategory {
	node, err := dcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dcuo *DocumentCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := dcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcuo *DocumentCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := dcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dcuo *DocumentCategoryUpdateOne) defaults() {
	if _, ok := dcuo.mutation.UpdateTime(); !ok {
		v := documentcategory.UpdateDefaultUpdateTime()
		dcuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dcuo *DocumentCategoryUpdateOne) check() error {
	if v, ok := dcuo.mutation.Name(); ok {
		if err := documentcategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (dcuo *DocumentCategoryUpdateOne) sqlSave(ctx context.Context) (_node *DocumentCategory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   documentcategory.Table,
			Columns: documentcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: documentcategory.FieldID,
			},
		},
	}
	id, ok := dcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing DocumentCategory.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := dcuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: documentcategory.FieldUpdateTime,
		})
	}
	if value, ok := dcuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: documentcategory.FieldName,
		})
	}
	if value, ok := dcuo.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: documentcategory.FieldIndex,
		})
	}
	if value, ok := dcuo.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: documentcategory.FieldIndex,
		})
	}
	if dcuo.mutation.LocationTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   documentcategory.LocationTypeTable,
			Columns: []string{documentcategory.LocationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: locationtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.LocationTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   documentcategory.LocationTypeTable,
			Columns: []string{documentcategory.LocationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: locationtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   documentcategory.FilesTable,
			Columns: []string{documentcategory.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.RemovedFilesIDs(); len(nodes) > 0 && !dcuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   documentcategory.FilesTable,
			Columns: []string{documentcategory.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   documentcategory.FilesTable,
			Columns: []string{documentcategory.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dcuo.mutation.HyperlinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   documentcategory.HyperlinksTable,
			Columns: []string{documentcategory.HyperlinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hyperlink.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.RemovedHyperlinksIDs(); len(nodes) > 0 && !dcuo.mutation.HyperlinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   documentcategory.HyperlinksTable,
			Columns: []string{documentcategory.HyperlinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hyperlink.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.HyperlinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   documentcategory.HyperlinksTable,
			Columns: []string{documentcategory.HyperlinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hyperlink.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DocumentCategory{config: dcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, dcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{documentcategory.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
