// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/facebookincubator/symphony/pkg/ent/migrate"

	"github.com/facebookincubator/symphony/pkg/ent/activity"
	"github.com/facebookincubator/symphony/pkg/ent/alarmfilter"
	"github.com/facebookincubator/symphony/pkg/ent/alarmstatus"
	"github.com/facebookincubator/symphony/pkg/ent/appointment"
	"github.com/facebookincubator/symphony/pkg/ent/block"
	"github.com/facebookincubator/symphony/pkg/ent/blockinstance"
	"github.com/facebookincubator/symphony/pkg/ent/checklistcategory"
	"github.com/facebookincubator/symphony/pkg/ent/checklistcategorydefinition"
	"github.com/facebookincubator/symphony/pkg/ent/checklistitem"
	"github.com/facebookincubator/symphony/pkg/ent/checklistitemdefinition"
	"github.com/facebookincubator/symphony/pkg/ent/comment"
	"github.com/facebookincubator/symphony/pkg/ent/comparator"
	"github.com/facebookincubator/symphony/pkg/ent/counter"
	"github.com/facebookincubator/symphony/pkg/ent/counterfamily"
	"github.com/facebookincubator/symphony/pkg/ent/counterformula"
	"github.com/facebookincubator/symphony/pkg/ent/customer"
	"github.com/facebookincubator/symphony/pkg/ent/documentcategory"
	"github.com/facebookincubator/symphony/pkg/ent/domain"
	"github.com/facebookincubator/symphony/pkg/ent/entrypoint"
	"github.com/facebookincubator/symphony/pkg/ent/equipment"
	"github.com/facebookincubator/symphony/pkg/ent/equipmentcategory"
	"github.com/facebookincubator/symphony/pkg/ent/equipmentport"
	"github.com/facebookincubator/symphony/pkg/ent/equipmentportdefinition"
	"github.com/facebookincubator/symphony/pkg/ent/equipmentporttype"
	"github.com/facebookincubator/symphony/pkg/ent/equipmentposition"
	"github.com/facebookincubator/symphony/pkg/ent/equipmentpositiondefinition"
	"github.com/facebookincubator/symphony/pkg/ent/equipmenttype"
	"github.com/facebookincubator/symphony/pkg/ent/eventseverity"
	"github.com/facebookincubator/symphony/pkg/ent/exitpoint"
	"github.com/facebookincubator/symphony/pkg/ent/exporttask"
	"github.com/facebookincubator/symphony/pkg/ent/feature"
	"github.com/facebookincubator/symphony/pkg/ent/file"
	"github.com/facebookincubator/symphony/pkg/ent/floorplan"
	"github.com/facebookincubator/symphony/pkg/ent/floorplanreferencepoint"
	"github.com/facebookincubator/symphony/pkg/ent/floorplanscale"
	"github.com/facebookincubator/symphony/pkg/ent/flow"
	"github.com/facebookincubator/symphony/pkg/ent/flowdraft"
	"github.com/facebookincubator/symphony/pkg/ent/flowexecutiontemplate"
	"github.com/facebookincubator/symphony/pkg/ent/flowinstance"
	"github.com/facebookincubator/symphony/pkg/ent/formula"
	"github.com/facebookincubator/symphony/pkg/ent/hyperlink"
	"github.com/facebookincubator/symphony/pkg/ent/kpi"
	"github.com/facebookincubator/symphony/pkg/ent/kpicategory"
	"github.com/facebookincubator/symphony/pkg/ent/kqi"
	"github.com/facebookincubator/symphony/pkg/ent/kqicategory"
	"github.com/facebookincubator/symphony/pkg/ent/kqicomparator"
	"github.com/facebookincubator/symphony/pkg/ent/kqiperspective"
	"github.com/facebookincubator/symphony/pkg/ent/kqisource"
	"github.com/facebookincubator/symphony/pkg/ent/kqitarget"
	"github.com/facebookincubator/symphony/pkg/ent/kqitemporalfrequency"
	"github.com/facebookincubator/symphony/pkg/ent/link"
	"github.com/facebookincubator/symphony/pkg/ent/location"
	"github.com/facebookincubator/symphony/pkg/ent/locationtype"
	"github.com/facebookincubator/symphony/pkg/ent/networktype"
	"github.com/facebookincubator/symphony/pkg/ent/organization"
	"github.com/facebookincubator/symphony/pkg/ent/parametercatalog"
	"github.com/facebookincubator/symphony/pkg/ent/permissionspolicy"
	"github.com/facebookincubator/symphony/pkg/ent/project"
	"github.com/facebookincubator/symphony/pkg/ent/projecttemplate"
	"github.com/facebookincubator/symphony/pkg/ent/projecttype"
	"github.com/facebookincubator/symphony/pkg/ent/property"
	"github.com/facebookincubator/symphony/pkg/ent/propertycategory"
	"github.com/facebookincubator/symphony/pkg/ent/propertytype"
	"github.com/facebookincubator/symphony/pkg/ent/recommendations"
	"github.com/facebookincubator/symphony/pkg/ent/recommendationscategory"
	"github.com/facebookincubator/symphony/pkg/ent/recommendationssources"
	"github.com/facebookincubator/symphony/pkg/ent/reportfilter"
	"github.com/facebookincubator/symphony/pkg/ent/rule"
	"github.com/facebookincubator/symphony/pkg/ent/rulelimit"
	"github.com/facebookincubator/symphony/pkg/ent/ruletype"
	"github.com/facebookincubator/symphony/pkg/ent/service"
	"github.com/facebookincubator/symphony/pkg/ent/serviceendpoint"
	"github.com/facebookincubator/symphony/pkg/ent/serviceendpointdefinition"
	"github.com/facebookincubator/symphony/pkg/ent/servicetype"
	"github.com/facebookincubator/symphony/pkg/ent/survey"
	"github.com/facebookincubator/symphony/pkg/ent/surveycellscan"
	"github.com/facebookincubator/symphony/pkg/ent/surveyquestion"
	"github.com/facebookincubator/symphony/pkg/ent/surveytemplatecategory"
	"github.com/facebookincubator/symphony/pkg/ent/surveytemplatequestion"
	"github.com/facebookincubator/symphony/pkg/ent/surveywifiscan"
	"github.com/facebookincubator/symphony/pkg/ent/tech"
	"github.com/facebookincubator/symphony/pkg/ent/threshold"
	"github.com/facebookincubator/symphony/pkg/ent/user"
	"github.com/facebookincubator/symphony/pkg/ent/usersgroup"
	"github.com/facebookincubator/symphony/pkg/ent/vendor"
	"github.com/facebookincubator/symphony/pkg/ent/workertype"
	"github.com/facebookincubator/symphony/pkg/ent/workorder"
	"github.com/facebookincubator/symphony/pkg/ent/workorderdefinition"
	"github.com/facebookincubator/symphony/pkg/ent/workordertemplate"
	"github.com/facebookincubator/symphony/pkg/ent/workordertype"

	"github.com/facebook/ent/dialect"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Activity is the client for interacting with the Activity builders.
	Activity *ActivityClient
	// AlarmFilter is the client for interacting with the AlarmFilter builders.
	AlarmFilter *AlarmFilterClient
	// AlarmStatus is the client for interacting with the AlarmStatus builders.
	AlarmStatus *AlarmStatusClient
	// Appointment is the client for interacting with the Appointment builders.
	Appointment *AppointmentClient
	// Block is the client for interacting with the Block builders.
	Block *BlockClient
	// BlockInstance is the client for interacting with the BlockInstance builders.
	BlockInstance *BlockInstanceClient
	// CheckListCategory is the client for interacting with the CheckListCategory builders.
	CheckListCategory *CheckListCategoryClient
	// CheckListCategoryDefinition is the client for interacting with the CheckListCategoryDefinition builders.
	CheckListCategoryDefinition *CheckListCategoryDefinitionClient
	// CheckListItem is the client for interacting with the CheckListItem builders.
	CheckListItem *CheckListItemClient
	// CheckListItemDefinition is the client for interacting with the CheckListItemDefinition builders.
	CheckListItemDefinition *CheckListItemDefinitionClient
	// Comment is the client for interacting with the Comment builders.
	Comment *CommentClient
	// Comparator is the client for interacting with the Comparator builders.
	Comparator *ComparatorClient
	// Counter is the client for interacting with the Counter builders.
	Counter *CounterClient
	// CounterFamily is the client for interacting with the CounterFamily builders.
	CounterFamily *CounterFamilyClient
	// CounterFormula is the client for interacting with the CounterFormula builders.
	CounterFormula *CounterFormulaClient
	// Customer is the client for interacting with the Customer builders.
	Customer *CustomerClient
	// DocumentCategory is the client for interacting with the DocumentCategory builders.
	DocumentCategory *DocumentCategoryClient
	// Domain is the client for interacting with the Domain builders.
	Domain *DomainClient
	// EntryPoint is the client for interacting with the EntryPoint builders.
	EntryPoint *EntryPointClient
	// Equipment is the client for interacting with the Equipment builders.
	Equipment *EquipmentClient
	// EquipmentCategory is the client for interacting with the EquipmentCategory builders.
	EquipmentCategory *EquipmentCategoryClient
	// EquipmentPort is the client for interacting with the EquipmentPort builders.
	EquipmentPort *EquipmentPortClient
	// EquipmentPortDefinition is the client for interacting with the EquipmentPortDefinition builders.
	EquipmentPortDefinition *EquipmentPortDefinitionClient
	// EquipmentPortType is the client for interacting with the EquipmentPortType builders.
	EquipmentPortType *EquipmentPortTypeClient
	// EquipmentPosition is the client for interacting with the EquipmentPosition builders.
	EquipmentPosition *EquipmentPositionClient
	// EquipmentPositionDefinition is the client for interacting with the EquipmentPositionDefinition builders.
	EquipmentPositionDefinition *EquipmentPositionDefinitionClient
	// EquipmentType is the client for interacting with the EquipmentType builders.
	EquipmentType *EquipmentTypeClient
	// EventSeverity is the client for interacting with the EventSeverity builders.
	EventSeverity *EventSeverityClient
	// ExitPoint is the client for interacting with the ExitPoint builders.
	ExitPoint *ExitPointClient
	// ExportTask is the client for interacting with the ExportTask builders.
	ExportTask *ExportTaskClient
	// Feature is the client for interacting with the Feature builders.
	Feature *FeatureClient
	// File is the client for interacting with the File builders.
	File *FileClient
	// FloorPlan is the client for interacting with the FloorPlan builders.
	FloorPlan *FloorPlanClient
	// FloorPlanReferencePoint is the client for interacting with the FloorPlanReferencePoint builders.
	FloorPlanReferencePoint *FloorPlanReferencePointClient
	// FloorPlanScale is the client for interacting with the FloorPlanScale builders.
	FloorPlanScale *FloorPlanScaleClient
	// Flow is the client for interacting with the Flow builders.
	Flow *FlowClient
	// FlowDraft is the client for interacting with the FlowDraft builders.
	FlowDraft *FlowDraftClient
	// FlowExecutionTemplate is the client for interacting with the FlowExecutionTemplate builders.
	FlowExecutionTemplate *FlowExecutionTemplateClient
	// FlowInstance is the client for interacting with the FlowInstance builders.
	FlowInstance *FlowInstanceClient
	// Formula is the client for interacting with the Formula builders.
	Formula *FormulaClient
	// Hyperlink is the client for interacting with the Hyperlink builders.
	Hyperlink *HyperlinkClient
	// Kpi is the client for interacting with the Kpi builders.
	Kpi *KpiClient
	// KpiCategory is the client for interacting with the KpiCategory builders.
	KpiCategory *KpiCategoryClient
	// Kqi is the client for interacting with the Kqi builders.
	Kqi *KqiClient
	// KqiCategory is the client for interacting with the KqiCategory builders.
	KqiCategory *KqiCategoryClient
	// KqiComparator is the client for interacting with the KqiComparator builders.
	KqiComparator *KqiComparatorClient
	// KqiPerspective is the client for interacting with the KqiPerspective builders.
	KqiPerspective *KqiPerspectiveClient
	// KqiSource is the client for interacting with the KqiSource builders.
	KqiSource *KqiSourceClient
	// KqiTarget is the client for interacting with the KqiTarget builders.
	KqiTarget *KqiTargetClient
	// KqiTemporalFrequency is the client for interacting with the KqiTemporalFrequency builders.
	KqiTemporalFrequency *KqiTemporalFrequencyClient
	// Link is the client for interacting with the Link builders.
	Link *LinkClient
	// Location is the client for interacting with the Location builders.
	Location *LocationClient
	// LocationType is the client for interacting with the LocationType builders.
	LocationType *LocationTypeClient
	// NetworkType is the client for interacting with the NetworkType builders.
	NetworkType *NetworkTypeClient
	// Organization is the client for interacting with the Organization builders.
	Organization *OrganizationClient
	// ParameterCatalog is the client for interacting with the ParameterCatalog builders.
	ParameterCatalog *ParameterCatalogClient
	// PermissionsPolicy is the client for interacting with the PermissionsPolicy builders.
	PermissionsPolicy *PermissionsPolicyClient
	// Project is the client for interacting with the Project builders.
	Project *ProjectClient
	// ProjectTemplate is the client for interacting with the ProjectTemplate builders.
	ProjectTemplate *ProjectTemplateClient
	// ProjectType is the client for interacting with the ProjectType builders.
	ProjectType *ProjectTypeClient
	// Property is the client for interacting with the Property builders.
	Property *PropertyClient
	// PropertyCategory is the client for interacting with the PropertyCategory builders.
	PropertyCategory *PropertyCategoryClient
	// PropertyType is the client for interacting with the PropertyType builders.
	PropertyType *PropertyTypeClient
	// Recommendations is the client for interacting with the Recommendations builders.
	Recommendations *RecommendationsClient
	// RecommendationsCategory is the client for interacting with the RecommendationsCategory builders.
	RecommendationsCategory *RecommendationsCategoryClient
	// RecommendationsSources is the client for interacting with the RecommendationsSources builders.
	RecommendationsSources *RecommendationsSourcesClient
	// ReportFilter is the client for interacting with the ReportFilter builders.
	ReportFilter *ReportFilterClient
	// Rule is the client for interacting with the Rule builders.
	Rule *RuleClient
	// RuleLimit is the client for interacting with the RuleLimit builders.
	RuleLimit *RuleLimitClient
	// RuleType is the client for interacting with the RuleType builders.
	RuleType *RuleTypeClient
	// Service is the client for interacting with the Service builders.
	Service *ServiceClient
	// ServiceEndpoint is the client for interacting with the ServiceEndpoint builders.
	ServiceEndpoint *ServiceEndpointClient
	// ServiceEndpointDefinition is the client for interacting with the ServiceEndpointDefinition builders.
	ServiceEndpointDefinition *ServiceEndpointDefinitionClient
	// ServiceType is the client for interacting with the ServiceType builders.
	ServiceType *ServiceTypeClient
	// Survey is the client for interacting with the Survey builders.
	Survey *SurveyClient
	// SurveyCellScan is the client for interacting with the SurveyCellScan builders.
	SurveyCellScan *SurveyCellScanClient
	// SurveyQuestion is the client for interacting with the SurveyQuestion builders.
	SurveyQuestion *SurveyQuestionClient
	// SurveyTemplateCategory is the client for interacting with the SurveyTemplateCategory builders.
	SurveyTemplateCategory *SurveyTemplateCategoryClient
	// SurveyTemplateQuestion is the client for interacting with the SurveyTemplateQuestion builders.
	SurveyTemplateQuestion *SurveyTemplateQuestionClient
	// SurveyWiFiScan is the client for interacting with the SurveyWiFiScan builders.
	SurveyWiFiScan *SurveyWiFiScanClient
	// Tech is the client for interacting with the Tech builders.
	Tech *TechClient
	// Threshold is the client for interacting with the Threshold builders.
	Threshold *ThresholdClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UsersGroup is the client for interacting with the UsersGroup builders.
	UsersGroup *UsersGroupClient
	// Vendor is the client for interacting with the Vendor builders.
	Vendor *VendorClient
	// WorkOrder is the client for interacting with the WorkOrder builders.
	WorkOrder *WorkOrderClient
	// WorkOrderDefinition is the client for interacting with the WorkOrderDefinition builders.
	WorkOrderDefinition *WorkOrderDefinitionClient
	// WorkOrderTemplate is the client for interacting with the WorkOrderTemplate builders.
	WorkOrderTemplate *WorkOrderTemplateClient
	// WorkOrderType is the client for interacting with the WorkOrderType builders.
	WorkOrderType *WorkOrderTypeClient
	// WorkerType is the client for interacting with the WorkerType builders.
	WorkerType *WorkerTypeClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Activity = NewActivityClient(c.config)
	c.AlarmFilter = NewAlarmFilterClient(c.config)
	c.AlarmStatus = NewAlarmStatusClient(c.config)
	c.Appointment = NewAppointmentClient(c.config)
	c.Block = NewBlockClient(c.config)
	c.BlockInstance = NewBlockInstanceClient(c.config)
	c.CheckListCategory = NewCheckListCategoryClient(c.config)
	c.CheckListCategoryDefinition = NewCheckListCategoryDefinitionClient(c.config)
	c.CheckListItem = NewCheckListItemClient(c.config)
	c.CheckListItemDefinition = NewCheckListItemDefinitionClient(c.config)
	c.Comment = NewCommentClient(c.config)
	c.Comparator = NewComparatorClient(c.config)
	c.Counter = NewCounterClient(c.config)
	c.CounterFamily = NewCounterFamilyClient(c.config)
	c.CounterFormula = NewCounterFormulaClient(c.config)
	c.Customer = NewCustomerClient(c.config)
	c.DocumentCategory = NewDocumentCategoryClient(c.config)
	c.Domain = NewDomainClient(c.config)
	c.EntryPoint = NewEntryPointClient(c.config)
	c.Equipment = NewEquipmentClient(c.config)
	c.EquipmentCategory = NewEquipmentCategoryClient(c.config)
	c.EquipmentPort = NewEquipmentPortClient(c.config)
	c.EquipmentPortDefinition = NewEquipmentPortDefinitionClient(c.config)
	c.EquipmentPortType = NewEquipmentPortTypeClient(c.config)
	c.EquipmentPosition = NewEquipmentPositionClient(c.config)
	c.EquipmentPositionDefinition = NewEquipmentPositionDefinitionClient(c.config)
	c.EquipmentType = NewEquipmentTypeClient(c.config)
	c.EventSeverity = NewEventSeverityClient(c.config)
	c.ExitPoint = NewExitPointClient(c.config)
	c.ExportTask = NewExportTaskClient(c.config)
	c.Feature = NewFeatureClient(c.config)
	c.File = NewFileClient(c.config)
	c.FloorPlan = NewFloorPlanClient(c.config)
	c.FloorPlanReferencePoint = NewFloorPlanReferencePointClient(c.config)
	c.FloorPlanScale = NewFloorPlanScaleClient(c.config)
	c.Flow = NewFlowClient(c.config)
	c.FlowDraft = NewFlowDraftClient(c.config)
	c.FlowExecutionTemplate = NewFlowExecutionTemplateClient(c.config)
	c.FlowInstance = NewFlowInstanceClient(c.config)
	c.Formula = NewFormulaClient(c.config)
	c.Hyperlink = NewHyperlinkClient(c.config)
	c.Kpi = NewKpiClient(c.config)
	c.KpiCategory = NewKpiCategoryClient(c.config)
	c.Kqi = NewKqiClient(c.config)
	c.KqiCategory = NewKqiCategoryClient(c.config)
	c.KqiComparator = NewKqiComparatorClient(c.config)
	c.KqiPerspective = NewKqiPerspectiveClient(c.config)
	c.KqiSource = NewKqiSourceClient(c.config)
	c.KqiTarget = NewKqiTargetClient(c.config)
	c.KqiTemporalFrequency = NewKqiTemporalFrequencyClient(c.config)
	c.Link = NewLinkClient(c.config)
	c.Location = NewLocationClient(c.config)
	c.LocationType = NewLocationTypeClient(c.config)
	c.NetworkType = NewNetworkTypeClient(c.config)
	c.Organization = NewOrganizationClient(c.config)
	c.ParameterCatalog = NewParameterCatalogClient(c.config)
	c.PermissionsPolicy = NewPermissionsPolicyClient(c.config)
	c.Project = NewProjectClient(c.config)
	c.ProjectTemplate = NewProjectTemplateClient(c.config)
	c.ProjectType = NewProjectTypeClient(c.config)
	c.Property = NewPropertyClient(c.config)
	c.PropertyCategory = NewPropertyCategoryClient(c.config)
	c.PropertyType = NewPropertyTypeClient(c.config)
	c.Recommendations = NewRecommendationsClient(c.config)
	c.RecommendationsCategory = NewRecommendationsCategoryClient(c.config)
	c.RecommendationsSources = NewRecommendationsSourcesClient(c.config)
	c.ReportFilter = NewReportFilterClient(c.config)
	c.Rule = NewRuleClient(c.config)
	c.RuleLimit = NewRuleLimitClient(c.config)
	c.RuleType = NewRuleTypeClient(c.config)
	c.Service = NewServiceClient(c.config)
	c.ServiceEndpoint = NewServiceEndpointClient(c.config)
	c.ServiceEndpointDefinition = NewServiceEndpointDefinitionClient(c.config)
	c.ServiceType = NewServiceTypeClient(c.config)
	c.Survey = NewSurveyClient(c.config)
	c.SurveyCellScan = NewSurveyCellScanClient(c.config)
	c.SurveyQuestion = NewSurveyQuestionClient(c.config)
	c.SurveyTemplateCategory = NewSurveyTemplateCategoryClient(c.config)
	c.SurveyTemplateQuestion = NewSurveyTemplateQuestionClient(c.config)
	c.SurveyWiFiScan = NewSurveyWiFiScanClient(c.config)
	c.Tech = NewTechClient(c.config)
	c.Threshold = NewThresholdClient(c.config)
	c.User = NewUserClient(c.config)
	c.UsersGroup = NewUsersGroupClient(c.config)
	c.Vendor = NewVendorClient(c.config)
	c.WorkOrder = NewWorkOrderClient(c.config)
	c.WorkOrderDefinition = NewWorkOrderDefinitionClient(c.config)
	c.WorkOrderTemplate = NewWorkOrderTemplateClient(c.config)
	c.WorkOrderType = NewWorkOrderTypeClient(c.config)
	c.WorkerType = NewWorkerTypeClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:                         ctx,
		config:                      cfg,
		Activity:                    NewActivityClient(cfg),
		AlarmFilter:                 NewAlarmFilterClient(cfg),
		AlarmStatus:                 NewAlarmStatusClient(cfg),
		Appointment:                 NewAppointmentClient(cfg),
		Block:                       NewBlockClient(cfg),
		BlockInstance:               NewBlockInstanceClient(cfg),
		CheckListCategory:           NewCheckListCategoryClient(cfg),
		CheckListCategoryDefinition: NewCheckListCategoryDefinitionClient(cfg),
		CheckListItem:               NewCheckListItemClient(cfg),
		CheckListItemDefinition:     NewCheckListItemDefinitionClient(cfg),
		Comment:                     NewCommentClient(cfg),
		Comparator:                  NewComparatorClient(cfg),
		Counter:                     NewCounterClient(cfg),
		CounterFamily:               NewCounterFamilyClient(cfg),
		CounterFormula:              NewCounterFormulaClient(cfg),
		Customer:                    NewCustomerClient(cfg),
		DocumentCategory:            NewDocumentCategoryClient(cfg),
		Domain:                      NewDomainClient(cfg),
		EntryPoint:                  NewEntryPointClient(cfg),
		Equipment:                   NewEquipmentClient(cfg),
		EquipmentCategory:           NewEquipmentCategoryClient(cfg),
		EquipmentPort:               NewEquipmentPortClient(cfg),
		EquipmentPortDefinition:     NewEquipmentPortDefinitionClient(cfg),
		EquipmentPortType:           NewEquipmentPortTypeClient(cfg),
		EquipmentPosition:           NewEquipmentPositionClient(cfg),
		EquipmentPositionDefinition: NewEquipmentPositionDefinitionClient(cfg),
		EquipmentType:               NewEquipmentTypeClient(cfg),
		EventSeverity:               NewEventSeverityClient(cfg),
		ExitPoint:                   NewExitPointClient(cfg),
		ExportTask:                  NewExportTaskClient(cfg),
		Feature:                     NewFeatureClient(cfg),
		File:                        NewFileClient(cfg),
		FloorPlan:                   NewFloorPlanClient(cfg),
		FloorPlanReferencePoint:     NewFloorPlanReferencePointClient(cfg),
		FloorPlanScale:              NewFloorPlanScaleClient(cfg),
		Flow:                        NewFlowClient(cfg),
		FlowDraft:                   NewFlowDraftClient(cfg),
		FlowExecutionTemplate:       NewFlowExecutionTemplateClient(cfg),
		FlowInstance:                NewFlowInstanceClient(cfg),
		Formula:                     NewFormulaClient(cfg),
		Hyperlink:                   NewHyperlinkClient(cfg),
		Kpi:                         NewKpiClient(cfg),
		KpiCategory:                 NewKpiCategoryClient(cfg),
		Kqi:                         NewKqiClient(cfg),
		KqiCategory:                 NewKqiCategoryClient(cfg),
		KqiComparator:               NewKqiComparatorClient(cfg),
		KqiPerspective:              NewKqiPerspectiveClient(cfg),
		KqiSource:                   NewKqiSourceClient(cfg),
		KqiTarget:                   NewKqiTargetClient(cfg),
		KqiTemporalFrequency:        NewKqiTemporalFrequencyClient(cfg),
		Link:                        NewLinkClient(cfg),
		Location:                    NewLocationClient(cfg),
		LocationType:                NewLocationTypeClient(cfg),
		NetworkType:                 NewNetworkTypeClient(cfg),
		Organization:                NewOrganizationClient(cfg),
		ParameterCatalog:            NewParameterCatalogClient(cfg),
		PermissionsPolicy:           NewPermissionsPolicyClient(cfg),
		Project:                     NewProjectClient(cfg),
		ProjectTemplate:             NewProjectTemplateClient(cfg),
		ProjectType:                 NewProjectTypeClient(cfg),
		Property:                    NewPropertyClient(cfg),
		PropertyCategory:            NewPropertyCategoryClient(cfg),
		PropertyType:                NewPropertyTypeClient(cfg),
		Recommendations:             NewRecommendationsClient(cfg),
		RecommendationsCategory:     NewRecommendationsCategoryClient(cfg),
		RecommendationsSources:      NewRecommendationsSourcesClient(cfg),
		ReportFilter:                NewReportFilterClient(cfg),
		Rule:                        NewRuleClient(cfg),
		RuleLimit:                   NewRuleLimitClient(cfg),
		RuleType:                    NewRuleTypeClient(cfg),
		Service:                     NewServiceClient(cfg),
		ServiceEndpoint:             NewServiceEndpointClient(cfg),
		ServiceEndpointDefinition:   NewServiceEndpointDefinitionClient(cfg),
		ServiceType:                 NewServiceTypeClient(cfg),
		Survey:                      NewSurveyClient(cfg),
		SurveyCellScan:              NewSurveyCellScanClient(cfg),
		SurveyQuestion:              NewSurveyQuestionClient(cfg),
		SurveyTemplateCategory:      NewSurveyTemplateCategoryClient(cfg),
		SurveyTemplateQuestion:      NewSurveyTemplateQuestionClient(cfg),
		SurveyWiFiScan:              NewSurveyWiFiScanClient(cfg),
		Tech:                        NewTechClient(cfg),
		Threshold:                   NewThresholdClient(cfg),
		User:                        NewUserClient(cfg),
		UsersGroup:                  NewUsersGroupClient(cfg),
		Vendor:                      NewVendorClient(cfg),
		WorkOrder:                   NewWorkOrderClient(cfg),
		WorkOrderDefinition:         NewWorkOrderDefinitionClient(cfg),
		WorkOrderTemplate:           NewWorkOrderTemplateClient(cfg),
		WorkOrderType:               NewWorkOrderTypeClient(cfg),
		WorkerType:                  NewWorkerTypeClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:                      cfg,
		Activity:                    NewActivityClient(cfg),
		AlarmFilter:                 NewAlarmFilterClient(cfg),
		AlarmStatus:                 NewAlarmStatusClient(cfg),
		Appointment:                 NewAppointmentClient(cfg),
		Block:                       NewBlockClient(cfg),
		BlockInstance:               NewBlockInstanceClient(cfg),
		CheckListCategory:           NewCheckListCategoryClient(cfg),
		CheckListCategoryDefinition: NewCheckListCategoryDefinitionClient(cfg),
		CheckListItem:               NewCheckListItemClient(cfg),
		CheckListItemDefinition:     NewCheckListItemDefinitionClient(cfg),
		Comment:                     NewCommentClient(cfg),
		Comparator:                  NewComparatorClient(cfg),
		Counter:                     NewCounterClient(cfg),
		CounterFamily:               NewCounterFamilyClient(cfg),
		CounterFormula:              NewCounterFormulaClient(cfg),
		Customer:                    NewCustomerClient(cfg),
		DocumentCategory:            NewDocumentCategoryClient(cfg),
		Domain:                      NewDomainClient(cfg),
		EntryPoint:                  NewEntryPointClient(cfg),
		Equipment:                   NewEquipmentClient(cfg),
		EquipmentCategory:           NewEquipmentCategoryClient(cfg),
		EquipmentPort:               NewEquipmentPortClient(cfg),
		EquipmentPortDefinition:     NewEquipmentPortDefinitionClient(cfg),
		EquipmentPortType:           NewEquipmentPortTypeClient(cfg),
		EquipmentPosition:           NewEquipmentPositionClient(cfg),
		EquipmentPositionDefinition: NewEquipmentPositionDefinitionClient(cfg),
		EquipmentType:               NewEquipmentTypeClient(cfg),
		EventSeverity:               NewEventSeverityClient(cfg),
		ExitPoint:                   NewExitPointClient(cfg),
		ExportTask:                  NewExportTaskClient(cfg),
		Feature:                     NewFeatureClient(cfg),
		File:                        NewFileClient(cfg),
		FloorPlan:                   NewFloorPlanClient(cfg),
		FloorPlanReferencePoint:     NewFloorPlanReferencePointClient(cfg),
		FloorPlanScale:              NewFloorPlanScaleClient(cfg),
		Flow:                        NewFlowClient(cfg),
		FlowDraft:                   NewFlowDraftClient(cfg),
		FlowExecutionTemplate:       NewFlowExecutionTemplateClient(cfg),
		FlowInstance:                NewFlowInstanceClient(cfg),
		Formula:                     NewFormulaClient(cfg),
		Hyperlink:                   NewHyperlinkClient(cfg),
		Kpi:                         NewKpiClient(cfg),
		KpiCategory:                 NewKpiCategoryClient(cfg),
		Kqi:                         NewKqiClient(cfg),
		KqiCategory:                 NewKqiCategoryClient(cfg),
		KqiComparator:               NewKqiComparatorClient(cfg),
		KqiPerspective:              NewKqiPerspectiveClient(cfg),
		KqiSource:                   NewKqiSourceClient(cfg),
		KqiTarget:                   NewKqiTargetClient(cfg),
		KqiTemporalFrequency:        NewKqiTemporalFrequencyClient(cfg),
		Link:                        NewLinkClient(cfg),
		Location:                    NewLocationClient(cfg),
		LocationType:                NewLocationTypeClient(cfg),
		NetworkType:                 NewNetworkTypeClient(cfg),
		Organization:                NewOrganizationClient(cfg),
		ParameterCatalog:            NewParameterCatalogClient(cfg),
		PermissionsPolicy:           NewPermissionsPolicyClient(cfg),
		Project:                     NewProjectClient(cfg),
		ProjectTemplate:             NewProjectTemplateClient(cfg),
		ProjectType:                 NewProjectTypeClient(cfg),
		Property:                    NewPropertyClient(cfg),
		PropertyCategory:            NewPropertyCategoryClient(cfg),
		PropertyType:                NewPropertyTypeClient(cfg),
		Recommendations:             NewRecommendationsClient(cfg),
		RecommendationsCategory:     NewRecommendationsCategoryClient(cfg),
		RecommendationsSources:      NewRecommendationsSourcesClient(cfg),
		ReportFilter:                NewReportFilterClient(cfg),
		Rule:                        NewRuleClient(cfg),
		RuleLimit:                   NewRuleLimitClient(cfg),
		RuleType:                    NewRuleTypeClient(cfg),
		Service:                     NewServiceClient(cfg),
		ServiceEndpoint:             NewServiceEndpointClient(cfg),
		ServiceEndpointDefinition:   NewServiceEndpointDefinitionClient(cfg),
		ServiceType:                 NewServiceTypeClient(cfg),
		Survey:                      NewSurveyClient(cfg),
		SurveyCellScan:              NewSurveyCellScanClient(cfg),
		SurveyQuestion:              NewSurveyQuestionClient(cfg),
		SurveyTemplateCategory:      NewSurveyTemplateCategoryClient(cfg),
		SurveyTemplateQuestion:      NewSurveyTemplateQuestionClient(cfg),
		SurveyWiFiScan:              NewSurveyWiFiScanClient(cfg),
		Tech:                        NewTechClient(cfg),
		Threshold:                   NewThresholdClient(cfg),
		User:                        NewUserClient(cfg),
		UsersGroup:                  NewUsersGroupClient(cfg),
		Vendor:                      NewVendorClient(cfg),
		WorkOrder:                   NewWorkOrderClient(cfg),
		WorkOrderDefinition:         NewWorkOrderDefinitionClient(cfg),
		WorkOrderTemplate:           NewWorkOrderTemplateClient(cfg),
		WorkOrderType:               NewWorkOrderTypeClient(cfg),
		WorkerType:                  NewWorkerTypeClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Activity.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Activity.Use(hooks...)
	c.AlarmFilter.Use(hooks...)
	c.AlarmStatus.Use(hooks...)
	c.Appointment.Use(hooks...)
	c.Block.Use(hooks...)
	c.BlockInstance.Use(hooks...)
	c.CheckListCategory.Use(hooks...)
	c.CheckListCategoryDefinition.Use(hooks...)
	c.CheckListItem.Use(hooks...)
	c.CheckListItemDefinition.Use(hooks...)
	c.Comment.Use(hooks...)
	c.Comparator.Use(hooks...)
	c.Counter.Use(hooks...)
	c.CounterFamily.Use(hooks...)
	c.CounterFormula.Use(hooks...)
	c.Customer.Use(hooks...)
	c.DocumentCategory.Use(hooks...)
	c.Domain.Use(hooks...)
	c.EntryPoint.Use(hooks...)
	c.Equipment.Use(hooks...)
	c.EquipmentCategory.Use(hooks...)
	c.EquipmentPort.Use(hooks...)
	c.EquipmentPortDefinition.Use(hooks...)
	c.EquipmentPortType.Use(hooks...)
	c.EquipmentPosition.Use(hooks...)
	c.EquipmentPositionDefinition.Use(hooks...)
	c.EquipmentType.Use(hooks...)
	c.EventSeverity.Use(hooks...)
	c.ExitPoint.Use(hooks...)
	c.ExportTask.Use(hooks...)
	c.Feature.Use(hooks...)
	c.File.Use(hooks...)
	c.FloorPlan.Use(hooks...)
	c.FloorPlanReferencePoint.Use(hooks...)
	c.FloorPlanScale.Use(hooks...)
	c.Flow.Use(hooks...)
	c.FlowDraft.Use(hooks...)
	c.FlowExecutionTemplate.Use(hooks...)
	c.FlowInstance.Use(hooks...)
	c.Formula.Use(hooks...)
	c.Hyperlink.Use(hooks...)
	c.Kpi.Use(hooks...)
	c.KpiCategory.Use(hooks...)
	c.Kqi.Use(hooks...)
	c.KqiCategory.Use(hooks...)
	c.KqiComparator.Use(hooks...)
	c.KqiPerspective.Use(hooks...)
	c.KqiSource.Use(hooks...)
	c.KqiTarget.Use(hooks...)
	c.KqiTemporalFrequency.Use(hooks...)
	c.Link.Use(hooks...)
	c.Location.Use(hooks...)
	c.LocationType.Use(hooks...)
	c.NetworkType.Use(hooks...)
	c.Organization.Use(hooks...)
	c.ParameterCatalog.Use(hooks...)
	c.PermissionsPolicy.Use(hooks...)
	c.Project.Use(hooks...)
	c.ProjectTemplate.Use(hooks...)
	c.ProjectType.Use(hooks...)
	c.Property.Use(hooks...)
	c.PropertyCategory.Use(hooks...)
	c.PropertyType.Use(hooks...)
	c.Recommendations.Use(hooks...)
	c.RecommendationsCategory.Use(hooks...)
	c.RecommendationsSources.Use(hooks...)
	c.ReportFilter.Use(hooks...)
	c.Rule.Use(hooks...)
	c.RuleLimit.Use(hooks...)
	c.RuleType.Use(hooks...)
	c.Service.Use(hooks...)
	c.ServiceEndpoint.Use(hooks...)
	c.ServiceEndpointDefinition.Use(hooks...)
	c.ServiceType.Use(hooks...)
	c.Survey.Use(hooks...)
	c.SurveyCellScan.Use(hooks...)
	c.SurveyQuestion.Use(hooks...)
	c.SurveyTemplateCategory.Use(hooks...)
	c.SurveyTemplateQuestion.Use(hooks...)
	c.SurveyWiFiScan.Use(hooks...)
	c.Tech.Use(hooks...)
	c.Threshold.Use(hooks...)
	c.User.Use(hooks...)
	c.UsersGroup.Use(hooks...)
	c.Vendor.Use(hooks...)
	c.WorkOrder.Use(hooks...)
	c.WorkOrderDefinition.Use(hooks...)
	c.WorkOrderTemplate.Use(hooks...)
	c.WorkOrderType.Use(hooks...)
	c.WorkerType.Use(hooks...)
}

// ActivityClient is a client for the Activity schema.
type ActivityClient struct {
	config
}

// NewActivityClient returns a client for the Activity from the given config.
func NewActivityClient(c config) *ActivityClient {
	return &ActivityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `activity.Hooks(f(g(h())))`.
func (c *ActivityClient) Use(hooks ...Hook) {
	c.hooks.Activity = append(c.hooks.Activity, hooks...)
}

// Create returns a create builder for Activity.
func (c *ActivityClient) Create() *ActivityCreate {
	mutation := newActivityMutation(c.config, OpCreate)
	return &ActivityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Activity entities.
func (c *ActivityClient) CreateBulk(builders ...*ActivityCreate) *ActivityCreateBulk {
	return &ActivityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Activity.
func (c *ActivityClient) Update() *ActivityUpdate {
	mutation := newActivityMutation(c.config, OpUpdate)
	return &ActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActivityClient) UpdateOne(a *Activity) *ActivityUpdateOne {
	mutation := newActivityMutation(c.config, OpUpdateOne, withActivity(a))
	return &ActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ActivityClient) UpdateOneID(id int) *ActivityUpdateOne {
	mutation := newActivityMutation(c.config, OpUpdateOne, withActivityID(id))
	return &ActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Activity.
func (c *ActivityClient) Delete() *ActivityDelete {
	mutation := newActivityMutation(c.config, OpDelete)
	return &ActivityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ActivityClient) DeleteOne(a *Activity) *ActivityDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ActivityClient) DeleteOneID(id int) *ActivityDeleteOne {
	builder := c.Delete().Where(activity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ActivityDeleteOne{builder}
}

// Query returns a query builder for Activity.
func (c *ActivityClient) Query() *ActivityQuery {
	return &ActivityQuery{config: c.config}
}

// Get returns a Activity entity by its id.
func (c *ActivityClient) Get(ctx context.Context, id int) (*Activity, error) {
	return c.Query().Where(activity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActivityClient) GetX(ctx context.Context, id int) *Activity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAuthor queries the author edge of a Activity.
func (c *ActivityClient) QueryAuthor(a *Activity) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activity.Table, activity.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, activity.AuthorTable, activity.AuthorColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkOrder queries the work_order edge of a Activity.
func (c *ActivityClient) QueryWorkOrder(a *Activity) *WorkOrderQuery {
	query := &WorkOrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activity.Table, activity.FieldID, id),
			sqlgraph.To(workorder.Table, workorder.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, activity.WorkOrderTable, activity.WorkOrderColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ActivityClient) Hooks() []Hook {
	hooks := c.hooks.Activity
	return append(hooks[:len(hooks):len(hooks)], activity.Hooks[:]...)
}

// AlarmFilterClient is a client for the AlarmFilter schema.
type AlarmFilterClient struct {
	config
}

// NewAlarmFilterClient returns a client for the AlarmFilter from the given config.
func NewAlarmFilterClient(c config) *AlarmFilterClient {
	return &AlarmFilterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `alarmfilter.Hooks(f(g(h())))`.
func (c *AlarmFilterClient) Use(hooks ...Hook) {
	c.hooks.AlarmFilter = append(c.hooks.AlarmFilter, hooks...)
}

// Create returns a create builder for AlarmFilter.
func (c *AlarmFilterClient) Create() *AlarmFilterCreate {
	mutation := newAlarmFilterMutation(c.config, OpCreate)
	return &AlarmFilterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AlarmFilter entities.
func (c *AlarmFilterClient) CreateBulk(builders ...*AlarmFilterCreate) *AlarmFilterCreateBulk {
	return &AlarmFilterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AlarmFilter.
func (c *AlarmFilterClient) Update() *AlarmFilterUpdate {
	mutation := newAlarmFilterMutation(c.config, OpUpdate)
	return &AlarmFilterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AlarmFilterClient) UpdateOne(af *AlarmFilter) *AlarmFilterUpdateOne {
	mutation := newAlarmFilterMutation(c.config, OpUpdateOne, withAlarmFilter(af))
	return &AlarmFilterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AlarmFilterClient) UpdateOneID(id int) *AlarmFilterUpdateOne {
	mutation := newAlarmFilterMutation(c.config, OpUpdateOne, withAlarmFilterID(id))
	return &AlarmFilterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AlarmFilter.
func (c *AlarmFilterClient) Delete() *AlarmFilterDelete {
	mutation := newAlarmFilterMutation(c.config, OpDelete)
	return &AlarmFilterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AlarmFilterClient) DeleteOne(af *AlarmFilter) *AlarmFilterDeleteOne {
	return c.DeleteOneID(af.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AlarmFilterClient) DeleteOneID(id int) *AlarmFilterDeleteOne {
	builder := c.Delete().Where(alarmfilter.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AlarmFilterDeleteOne{builder}
}

// Query returns a query builder for AlarmFilter.
func (c *AlarmFilterClient) Query() *AlarmFilterQuery {
	return &AlarmFilterQuery{config: c.config}
}

// Get returns a AlarmFilter entity by its id.
func (c *AlarmFilterClient) Get(ctx context.Context, id int) (*AlarmFilter, error) {
	return c.Query().Where(alarmfilter.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AlarmFilterClient) GetX(ctx context.Context, id int) *AlarmFilter {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAlarmStatusFk queries the alarmStatusFk edge of a AlarmFilter.
func (c *AlarmFilterClient) QueryAlarmStatusFk(af *AlarmFilter) *AlarmStatusQuery {
	query := &AlarmStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := af.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(alarmfilter.Table, alarmfilter.FieldID, id),
			sqlgraph.To(alarmstatus.Table, alarmstatus.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, alarmfilter.AlarmStatusFkTable, alarmfilter.AlarmStatusFkColumn),
		)
		fromV = sqlgraph.Neighbors(af.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AlarmFilterClient) Hooks() []Hook {
	hooks := c.hooks.AlarmFilter
	return append(hooks[:len(hooks):len(hooks)], alarmfilter.Hooks[:]...)
}

// AlarmStatusClient is a client for the AlarmStatus schema.
type AlarmStatusClient struct {
	config
}

// NewAlarmStatusClient returns a client for the AlarmStatus from the given config.
func NewAlarmStatusClient(c config) *AlarmStatusClient {
	return &AlarmStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `alarmstatus.Hooks(f(g(h())))`.
func (c *AlarmStatusClient) Use(hooks ...Hook) {
	c.hooks.AlarmStatus = append(c.hooks.AlarmStatus, hooks...)
}

// Create returns a create builder for AlarmStatus.
func (c *AlarmStatusClient) Create() *AlarmStatusCreate {
	mutation := newAlarmStatusMutation(c.config, OpCreate)
	return &AlarmStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AlarmStatus entities.
func (c *AlarmStatusClient) CreateBulk(builders ...*AlarmStatusCreate) *AlarmStatusCreateBulk {
	return &AlarmStatusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AlarmStatus.
func (c *AlarmStatusClient) Update() *AlarmStatusUpdate {
	mutation := newAlarmStatusMutation(c.config, OpUpdate)
	return &AlarmStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AlarmStatusClient) UpdateOne(as *AlarmStatus) *AlarmStatusUpdateOne {
	mutation := newAlarmStatusMutation(c.config, OpUpdateOne, withAlarmStatus(as))
	return &AlarmStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AlarmStatusClient) UpdateOneID(id int) *AlarmStatusUpdateOne {
	mutation := newAlarmStatusMutation(c.config, OpUpdateOne, withAlarmStatusID(id))
	return &AlarmStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AlarmStatus.
func (c *AlarmStatusClient) Delete() *AlarmStatusDelete {
	mutation := newAlarmStatusMutation(c.config, OpDelete)
	return &AlarmStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AlarmStatusClient) DeleteOne(as *AlarmStatus) *AlarmStatusDeleteOne {
	return c.DeleteOneID(as.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AlarmStatusClient) DeleteOneID(id int) *AlarmStatusDeleteOne {
	builder := c.Delete().Where(alarmstatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AlarmStatusDeleteOne{builder}
}

// Query returns a query builder for AlarmStatus.
func (c *AlarmStatusClient) Query() *AlarmStatusQuery {
	return &AlarmStatusQuery{config: c.config}
}

// Get returns a AlarmStatus entity by its id.
func (c *AlarmStatusClient) Get(ctx context.Context, id int) (*AlarmStatus, error) {
	return c.Query().Where(alarmstatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AlarmStatusClient) GetX(ctx context.Context, id int) *AlarmStatus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAlarmStatusFk queries the alarmStatusFk edge of a AlarmStatus.
func (c *AlarmStatusClient) QueryAlarmStatusFk(as *AlarmStatus) *AlarmFilterQuery {
	query := &AlarmFilterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(alarmstatus.Table, alarmstatus.FieldID, id),
			sqlgraph.To(alarmfilter.Table, alarmfilter.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, alarmstatus.AlarmStatusFkTable, alarmstatus.AlarmStatusFkColumn),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AlarmStatusClient) Hooks() []Hook {
	hooks := c.hooks.AlarmStatus
	return append(hooks[:len(hooks):len(hooks)], alarmstatus.Hooks[:]...)
}

// AppointmentClient is a client for the Appointment schema.
type AppointmentClient struct {
	config
}

// NewAppointmentClient returns a client for the Appointment from the given config.
func NewAppointmentClient(c config) *AppointmentClient {
	return &AppointmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appointment.Hooks(f(g(h())))`.
func (c *AppointmentClient) Use(hooks ...Hook) {
	c.hooks.Appointment = append(c.hooks.Appointment, hooks...)
}

// Create returns a create builder for Appointment.
func (c *AppointmentClient) Create() *AppointmentCreate {
	mutation := newAppointmentMutation(c.config, OpCreate)
	return &AppointmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Appointment entities.
func (c *AppointmentClient) CreateBulk(builders ...*AppointmentCreate) *AppointmentCreateBulk {
	return &AppointmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Appointment.
func (c *AppointmentClient) Update() *AppointmentUpdate {
	mutation := newAppointmentMutation(c.config, OpUpdate)
	return &AppointmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppointmentClient) UpdateOne(a *Appointment) *AppointmentUpdateOne {
	mutation := newAppointmentMutation(c.config, OpUpdateOne, withAppointment(a))
	return &AppointmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppointmentClient) UpdateOneID(id int) *AppointmentUpdateOne {
	mutation := newAppointmentMutation(c.config, OpUpdateOne, withAppointmentID(id))
	return &AppointmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Appointment.
func (c *AppointmentClient) Delete() *AppointmentDelete {
	mutation := newAppointmentMutation(c.config, OpDelete)
	return &AppointmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AppointmentClient) DeleteOne(a *Appointment) *AppointmentDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AppointmentClient) DeleteOneID(id int) *AppointmentDeleteOne {
	builder := c.Delete().Where(appointment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppointmentDeleteOne{builder}
}

// Query returns a query builder for Appointment.
func (c *AppointmentClient) Query() *AppointmentQuery {
	return &AppointmentQuery{config: c.config}
}

// Get returns a Appointment entity by its id.
func (c *AppointmentClient) Get(ctx context.Context, id int) (*Appointment, error) {
	return c.Query().Where(appointment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppointmentClient) GetX(ctx context.Context, id int) *Appointment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkorder queries the workorder edge of a Appointment.
func (c *AppointmentClient) QueryWorkorder(a *Appointment) *WorkOrderQuery {
	query := &WorkOrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appointment.Table, appointment.FieldID, id),
			sqlgraph.To(workorder.Table, workorder.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appointment.WorkorderTable, appointment.WorkorderColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssignee queries the assignee edge of a Appointment.
func (c *AppointmentClient) QueryAssignee(a *Appointment) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appointment.Table, appointment.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appointment.AssigneeTable, appointment.AssigneeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AppointmentClient) Hooks() []Hook {
	hooks := c.hooks.Appointment
	return append(hooks[:len(hooks):len(hooks)], appointment.Hooks[:]...)
}

// BlockClient is a client for the Block schema.
type BlockClient struct {
	config
}

// NewBlockClient returns a client for the Block from the given config.
func NewBlockClient(c config) *BlockClient {
	return &BlockClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `block.Hooks(f(g(h())))`.
func (c *BlockClient) Use(hooks ...Hook) {
	c.hooks.Block = append(c.hooks.Block, hooks...)
}

// Create returns a create builder for Block.
func (c *BlockClient) Create() *BlockCreate {
	mutation := newBlockMutation(c.config, OpCreate)
	return &BlockCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Block entities.
func (c *BlockClient) CreateBulk(builders ...*BlockCreate) *BlockCreateBulk {
	return &BlockCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Block.
func (c *BlockClient) Update() *BlockUpdate {
	mutation := newBlockMutation(c.config, OpUpdate)
	return &BlockUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BlockClient) UpdateOne(b *Block) *BlockUpdateOne {
	mutation := newBlockMutation(c.config, OpUpdateOne, withBlock(b))
	return &BlockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BlockClient) UpdateOneID(id int) *BlockUpdateOne {
	mutation := newBlockMutation(c.config, OpUpdateOne, withBlockID(id))
	return &BlockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Block.
func (c *BlockClient) Delete() *BlockDelete {
	mutation := newBlockMutation(c.config, OpDelete)
	return &BlockDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BlockClient) DeleteOne(b *Block) *BlockDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BlockClient) DeleteOneID(id int) *BlockDeleteOne {
	builder := c.Delete().Where(block.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BlockDeleteOne{builder}
}

// Query returns a query builder for Block.
func (c *BlockClient) Query() *BlockQuery {
	return &BlockQuery{config: c.config}
}

// Get returns a Block entity by its id.
func (c *BlockClient) Get(ctx context.Context, id int) (*Block, error) {
	return c.Query().Where(block.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BlockClient) GetX(ctx context.Context, id int) *Block {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFlow queries the flow edge of a Block.
func (c *BlockClient) QueryFlow(b *Block) *FlowQuery {
	query := &FlowQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(block.Table, block.FieldID, id),
			sqlgraph.To(flow.Table, flow.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, block.FlowTable, block.FlowColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFlowTemplate queries the flow_template edge of a Block.
func (c *BlockClient) QueryFlowTemplate(b *Block) *FlowExecutionTemplateQuery {
	query := &FlowExecutionTemplateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(block.Table, block.FieldID, id),
			sqlgraph.To(flowexecutiontemplate.Table, flowexecutiontemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, block.FlowTemplateTable, block.FlowTemplateColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFlowDraft queries the flow_draft edge of a Block.
func (c *BlockClient) QueryFlowDraft(b *Block) *FlowDraftQuery {
	query := &FlowDraftQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(block.Table, block.FieldID, id),
			sqlgraph.To(flowdraft.Table, flowdraft.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, block.FlowDraftTable, block.FlowDraftColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubFlow queries the sub_flow edge of a Block.
func (c *BlockClient) QuerySubFlow(b *Block) *FlowQuery {
	query := &FlowQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(block.Table, block.FieldID, id),
			sqlgraph.To(flow.Table, flow.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, block.SubFlowTable, block.SubFlowColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySourceBlock queries the source_block edge of a Block.
func (c *BlockClient) QuerySourceBlock(b *Block) *BlockQuery {
	query := &BlockQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(block.Table, block.FieldID, id),
			sqlgraph.To(block.Table, block.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, block.SourceBlockTable, block.SourceBlockColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGotoBlock queries the goto_block edge of a Block.
func (c *BlockClient) QueryGotoBlock(b *Block) *BlockQuery {
	query := &BlockQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(block.Table, block.FieldID, id),
			sqlgraph.To(block.Table, block.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, block.GotoBlockTable, block.GotoBlockColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInstances queries the instances edge of a Block.
func (c *BlockClient) QueryInstances(b *Block) *BlockInstanceQuery {
	query := &BlockInstanceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(block.Table, block.FieldID, id),
			sqlgraph.To(blockinstance.Table, blockinstance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, block.InstancesTable, block.InstancesColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEntryPoint queries the entry_point edge of a Block.
func (c *BlockClient) QueryEntryPoint(b *Block) *EntryPointQuery {
	query := &EntryPointQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(block.Table, block.FieldID, id),
			sqlgraph.To(entrypoint.Table, entrypoint.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, block.EntryPointTable, block.EntryPointColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExitPoints queries the exit_points edge of a Block.
func (c *BlockClient) QueryExitPoints(b *Block) *ExitPointQuery {
	query := &ExitPointQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(block.Table, block.FieldID, id),
			sqlgraph.To(exitpoint.Table, exitpoint.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, block.ExitPointsTable, block.ExitPointsColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BlockClient) Hooks() []Hook {
	hooks := c.hooks.Block
	return append(hooks[:len(hooks):len(hooks)], block.Hooks[:]...)
}

// BlockInstanceClient is a client for the BlockInstance schema.
type BlockInstanceClient struct {
	config
}

// NewBlockInstanceClient returns a client for the BlockInstance from the given config.
func NewBlockInstanceClient(c config) *BlockInstanceClient {
	return &BlockInstanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `blockinstance.Hooks(f(g(h())))`.
func (c *BlockInstanceClient) Use(hooks ...Hook) {
	c.hooks.BlockInstance = append(c.hooks.BlockInstance, hooks...)
}

// Create returns a create builder for BlockInstance.
func (c *BlockInstanceClient) Create() *BlockInstanceCreate {
	mutation := newBlockInstanceMutation(c.config, OpCreate)
	return &BlockInstanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BlockInstance entities.
func (c *BlockInstanceClient) CreateBulk(builders ...*BlockInstanceCreate) *BlockInstanceCreateBulk {
	return &BlockInstanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BlockInstance.
func (c *BlockInstanceClient) Update() *BlockInstanceUpdate {
	mutation := newBlockInstanceMutation(c.config, OpUpdate)
	return &BlockInstanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BlockInstanceClient) UpdateOne(bi *BlockInstance) *BlockInstanceUpdateOne {
	mutation := newBlockInstanceMutation(c.config, OpUpdateOne, withBlockInstance(bi))
	return &BlockInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BlockInstanceClient) UpdateOneID(id int) *BlockInstanceUpdateOne {
	mutation := newBlockInstanceMutation(c.config, OpUpdateOne, withBlockInstanceID(id))
	return &BlockInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BlockInstance.
func (c *BlockInstanceClient) Delete() *BlockInstanceDelete {
	mutation := newBlockInstanceMutation(c.config, OpDelete)
	return &BlockInstanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BlockInstanceClient) DeleteOne(bi *BlockInstance) *BlockInstanceDeleteOne {
	return c.DeleteOneID(bi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BlockInstanceClient) DeleteOneID(id int) *BlockInstanceDeleteOne {
	builder := c.Delete().Where(blockinstance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BlockInstanceDeleteOne{builder}
}

// Query returns a query builder for BlockInstance.
func (c *BlockInstanceClient) Query() *BlockInstanceQuery {
	return &BlockInstanceQuery{config: c.config}
}

// Get returns a BlockInstance entity by its id.
func (c *BlockInstanceClient) Get(ctx context.Context, id int) (*BlockInstance, error) {
	return c.Query().Where(blockinstance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BlockInstanceClient) GetX(ctx context.Context, id int) *BlockInstance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFlowInstance queries the flow_instance edge of a BlockInstance.
func (c *BlockInstanceClient) QueryFlowInstance(bi *BlockInstance) *FlowInstanceQuery {
	query := &FlowInstanceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := bi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blockinstance.Table, blockinstance.FieldID, id),
			sqlgraph.To(flowinstance.Table, flowinstance.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, blockinstance.FlowInstanceTable, blockinstance.FlowInstanceColumn),
		)
		fromV = sqlgraph.Neighbors(bi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBlock queries the block edge of a BlockInstance.
func (c *BlockInstanceClient) QueryBlock(bi *BlockInstance) *BlockQuery {
	query := &BlockQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := bi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blockinstance.Table, blockinstance.FieldID, id),
			sqlgraph.To(block.Table, block.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, blockinstance.BlockTable, blockinstance.BlockColumn),
		)
		fromV = sqlgraph.Neighbors(bi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubflowInstance queries the subflow_instance edge of a BlockInstance.
func (c *BlockInstanceClient) QuerySubflowInstance(bi *BlockInstance) *FlowInstanceQuery {
	query := &FlowInstanceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := bi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(blockinstance.Table, blockinstance.FieldID, id),
			sqlgraph.To(flowinstance.Table, flowinstance.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, blockinstance.SubflowInstanceTable, blockinstance.SubflowInstanceColumn),
		)
		fromV = sqlgraph.Neighbors(bi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BlockInstanceClient) Hooks() []Hook {
	hooks := c.hooks.BlockInstance
	return append(hooks[:len(hooks):len(hooks)], blockinstance.Hooks[:]...)
}

// CheckListCategoryClient is a client for the CheckListCategory schema.
type CheckListCategoryClient struct {
	config
}

// NewCheckListCategoryClient returns a client for the CheckListCategory from the given config.
func NewCheckListCategoryClient(c config) *CheckListCategoryClient {
	return &CheckListCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `checklistcategory.Hooks(f(g(h())))`.
func (c *CheckListCategoryClient) Use(hooks ...Hook) {
	c.hooks.CheckListCategory = append(c.hooks.CheckListCategory, hooks...)
}

// Create returns a create builder for CheckListCategory.
func (c *CheckListCategoryClient) Create() *CheckListCategoryCreate {
	mutation := newCheckListCategoryMutation(c.config, OpCreate)
	return &CheckListCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CheckListCategory entities.
func (c *CheckListCategoryClient) CreateBulk(builders ...*CheckListCategoryCreate) *CheckListCategoryCreateBulk {
	return &CheckListCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CheckListCategory.
func (c *CheckListCategoryClient) Update() *CheckListCategoryUpdate {
	mutation := newCheckListCategoryMutation(c.config, OpUpdate)
	return &CheckListCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CheckListCategoryClient) UpdateOne(clc *CheckListCategory) *CheckListCategoryUpdateOne {
	mutation := newCheckListCategoryMutation(c.config, OpUpdateOne, withCheckListCategory(clc))
	return &CheckListCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CheckListCategoryClient) UpdateOneID(id int) *CheckListCategoryUpdateOne {
	mutation := newCheckListCategoryMutation(c.config, OpUpdateOne, withCheckListCategoryID(id))
	return &CheckListCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CheckListCategory.
func (c *CheckListCategoryClient) Delete() *CheckListCategoryDelete {
	mutation := newCheckListCategoryMutation(c.config, OpDelete)
	return &CheckListCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CheckListCategoryClient) DeleteOne(clc *CheckListCategory) *CheckListCategoryDeleteOne {
	return c.DeleteOneID(clc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CheckListCategoryClient) DeleteOneID(id int) *CheckListCategoryDeleteOne {
	builder := c.Delete().Where(checklistcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CheckListCategoryDeleteOne{builder}
}

// Query returns a query builder for CheckListCategory.
func (c *CheckListCategoryClient) Query() *CheckListCategoryQuery {
	return &CheckListCategoryQuery{config: c.config}
}

// Get returns a CheckListCategory entity by its id.
func (c *CheckListCategoryClient) Get(ctx context.Context, id int) (*CheckListCategory, error) {
	return c.Query().Where(checklistcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CheckListCategoryClient) GetX(ctx context.Context, id int) *CheckListCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCheckListItems queries the check_list_items edge of a CheckListCategory.
func (c *CheckListCategoryClient) QueryCheckListItems(clc *CheckListCategory) *CheckListItemQuery {
	query := &CheckListItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := clc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checklistcategory.Table, checklistcategory.FieldID, id),
			sqlgraph.To(checklistitem.Table, checklistitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, checklistcategory.CheckListItemsTable, checklistcategory.CheckListItemsColumn),
		)
		fromV = sqlgraph.Neighbors(clc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkOrder queries the work_order edge of a CheckListCategory.
func (c *CheckListCategoryClient) QueryWorkOrder(clc *CheckListCategory) *WorkOrderQuery {
	query := &WorkOrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := clc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checklistcategory.Table, checklistcategory.FieldID, id),
			sqlgraph.To(workorder.Table, workorder.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, checklistcategory.WorkOrderTable, checklistcategory.WorkOrderColumn),
		)
		fromV = sqlgraph.Neighbors(clc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CheckListCategoryClient) Hooks() []Hook {
	hooks := c.hooks.CheckListCategory
	return append(hooks[:len(hooks):len(hooks)], checklistcategory.Hooks[:]...)
}

// CheckListCategoryDefinitionClient is a client for the CheckListCategoryDefinition schema.
type CheckListCategoryDefinitionClient struct {
	config
}

// NewCheckListCategoryDefinitionClient returns a client for the CheckListCategoryDefinition from the given config.
func NewCheckListCategoryDefinitionClient(c config) *CheckListCategoryDefinitionClient {
	return &CheckListCategoryDefinitionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `checklistcategorydefinition.Hooks(f(g(h())))`.
func (c *CheckListCategoryDefinitionClient) Use(hooks ...Hook) {
	c.hooks.CheckListCategoryDefinition = append(c.hooks.CheckListCategoryDefinition, hooks...)
}

// Create returns a create builder for CheckListCategoryDefinition.
func (c *CheckListCategoryDefinitionClient) Create() *CheckListCategoryDefinitionCreate {
	mutation := newCheckListCategoryDefinitionMutation(c.config, OpCreate)
	return &CheckListCategoryDefinitionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CheckListCategoryDefinition entities.
func (c *CheckListCategoryDefinitionClient) CreateBulk(builders ...*CheckListCategoryDefinitionCreate) *CheckListCategoryDefinitionCreateBulk {
	return &CheckListCategoryDefinitionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CheckListCategoryDefinition.
func (c *CheckListCategoryDefinitionClient) Update() *CheckListCategoryDefinitionUpdate {
	mutation := newCheckListCategoryDefinitionMutation(c.config, OpUpdate)
	return &CheckListCategoryDefinitionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CheckListCategoryDefinitionClient) UpdateOne(clcd *CheckListCategoryDefinition) *CheckListCategoryDefinitionUpdateOne {
	mutation := newCheckListCategoryDefinitionMutation(c.config, OpUpdateOne, withCheckListCategoryDefinition(clcd))
	return &CheckListCategoryDefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CheckListCategoryDefinitionClient) UpdateOneID(id int) *CheckListCategoryDefinitionUpdateOne {
	mutation := newCheckListCategoryDefinitionMutation(c.config, OpUpdateOne, withCheckListCategoryDefinitionID(id))
	return &CheckListCategoryDefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CheckListCategoryDefinition.
func (c *CheckListCategoryDefinitionClient) Delete() *CheckListCategoryDefinitionDelete {
	mutation := newCheckListCategoryDefinitionMutation(c.config, OpDelete)
	return &CheckListCategoryDefinitionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CheckListCategoryDefinitionClient) DeleteOne(clcd *CheckListCategoryDefinition) *CheckListCategoryDefinitionDeleteOne {
	return c.DeleteOneID(clcd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CheckListCategoryDefinitionClient) DeleteOneID(id int) *CheckListCategoryDefinitionDeleteOne {
	builder := c.Delete().Where(checklistcategorydefinition.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CheckListCategoryDefinitionDeleteOne{builder}
}

// Query returns a query builder for CheckListCategoryDefinition.
func (c *CheckListCategoryDefinitionClient) Query() *CheckListCategoryDefinitionQuery {
	return &CheckListCategoryDefinitionQuery{config: c.config}
}

// Get returns a CheckListCategoryDefinition entity by its id.
func (c *CheckListCategoryDefinitionClient) Get(ctx context.Context, id int) (*CheckListCategoryDefinition, error) {
	return c.Query().Where(checklistcategorydefinition.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CheckListCategoryDefinitionClient) GetX(ctx context.Context, id int) *CheckListCategoryDefinition {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCheckListItemDefinitions queries the check_list_item_definitions edge of a CheckListCategoryDefinition.
func (c *CheckListCategoryDefinitionClient) QueryCheckListItemDefinitions(clcd *CheckListCategoryDefinition) *CheckListItemDefinitionQuery {
	query := &CheckListItemDefinitionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := clcd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checklistcategorydefinition.Table, checklistcategorydefinition.FieldID, id),
			sqlgraph.To(checklistitemdefinition.Table, checklistitemdefinition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, checklistcategorydefinition.CheckListItemDefinitionsTable, checklistcategorydefinition.CheckListItemDefinitionsColumn),
		)
		fromV = sqlgraph.Neighbors(clcd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkOrderType queries the work_order_type edge of a CheckListCategoryDefinition.
func (c *CheckListCategoryDefinitionClient) QueryWorkOrderType(clcd *CheckListCategoryDefinition) *WorkOrderTypeQuery {
	query := &WorkOrderTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := clcd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checklistcategorydefinition.Table, checklistcategorydefinition.FieldID, id),
			sqlgraph.To(workordertype.Table, workordertype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, checklistcategorydefinition.WorkOrderTypeTable, checklistcategorydefinition.WorkOrderTypeColumn),
		)
		fromV = sqlgraph.Neighbors(clcd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkOrderTemplate queries the work_order_template edge of a CheckListCategoryDefinition.
func (c *CheckListCategoryDefinitionClient) QueryWorkOrderTemplate(clcd *CheckListCategoryDefinition) *WorkOrderTemplateQuery {
	query := &WorkOrderTemplateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := clcd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checklistcategorydefinition.Table, checklistcategorydefinition.FieldID, id),
			sqlgraph.To(workordertemplate.Table, workordertemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, checklistcategorydefinition.WorkOrderTemplateTable, checklistcategorydefinition.WorkOrderTemplateColumn),
		)
		fromV = sqlgraph.Neighbors(clcd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CheckListCategoryDefinitionClient) Hooks() []Hook {
	hooks := c.hooks.CheckListCategoryDefinition
	return append(hooks[:len(hooks):len(hooks)], checklistcategorydefinition.Hooks[:]...)
}

// CheckListItemClient is a client for the CheckListItem schema.
type CheckListItemClient struct {
	config
}

// NewCheckListItemClient returns a client for the CheckListItem from the given config.
func NewCheckListItemClient(c config) *CheckListItemClient {
	return &CheckListItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `checklistitem.Hooks(f(g(h())))`.
func (c *CheckListItemClient) Use(hooks ...Hook) {
	c.hooks.CheckListItem = append(c.hooks.CheckListItem, hooks...)
}

// Create returns a create builder for CheckListItem.
func (c *CheckListItemClient) Create() *CheckListItemCreate {
	mutation := newCheckListItemMutation(c.config, OpCreate)
	return &CheckListItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CheckListItem entities.
func (c *CheckListItemClient) CreateBulk(builders ...*CheckListItemCreate) *CheckListItemCreateBulk {
	return &CheckListItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CheckListItem.
func (c *CheckListItemClient) Update() *CheckListItemUpdate {
	mutation := newCheckListItemMutation(c.config, OpUpdate)
	return &CheckListItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CheckListItemClient) UpdateOne(cli *CheckListItem) *CheckListItemUpdateOne {
	mutation := newCheckListItemMutation(c.config, OpUpdateOne, withCheckListItem(cli))
	return &CheckListItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CheckListItemClient) UpdateOneID(id int) *CheckListItemUpdateOne {
	mutation := newCheckListItemMutation(c.config, OpUpdateOne, withCheckListItemID(id))
	return &CheckListItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CheckListItem.
func (c *CheckListItemClient) Delete() *CheckListItemDelete {
	mutation := newCheckListItemMutation(c.config, OpDelete)
	return &CheckListItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CheckListItemClient) DeleteOne(cli *CheckListItem) *CheckListItemDeleteOne {
	return c.DeleteOneID(cli.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CheckListItemClient) DeleteOneID(id int) *CheckListItemDeleteOne {
	builder := c.Delete().Where(checklistitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CheckListItemDeleteOne{builder}
}

// Query returns a query builder for CheckListItem.
func (c *CheckListItemClient) Query() *CheckListItemQuery {
	return &CheckListItemQuery{config: c.config}
}

// Get returns a CheckListItem entity by its id.
func (c *CheckListItemClient) Get(ctx context.Context, id int) (*CheckListItem, error) {
	return c.Query().Where(checklistitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CheckListItemClient) GetX(ctx context.Context, id int) *CheckListItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFiles queries the files edge of a CheckListItem.
func (c *CheckListItemClient) QueryFiles(cli *CheckListItem) *FileQuery {
	query := &FileQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cli.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checklistitem.Table, checklistitem.FieldID, id),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, checklistitem.FilesTable, checklistitem.FilesColumn),
		)
		fromV = sqlgraph.Neighbors(cli.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWifiScan queries the wifi_scan edge of a CheckListItem.
func (c *CheckListItemClient) QueryWifiScan(cli *CheckListItem) *SurveyWiFiScanQuery {
	query := &SurveyWiFiScanQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cli.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checklistitem.Table, checklistitem.FieldID, id),
			sqlgraph.To(surveywifiscan.Table, surveywifiscan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, checklistitem.WifiScanTable, checklistitem.WifiScanColumn),
		)
		fromV = sqlgraph.Neighbors(cli.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCellScan queries the cell_scan edge of a CheckListItem.
func (c *CheckListItemClient) QueryCellScan(cli *CheckListItem) *SurveyCellScanQuery {
	query := &SurveyCellScanQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cli.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checklistitem.Table, checklistitem.FieldID, id),
			sqlgraph.To(surveycellscan.Table, surveycellscan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, checklistitem.CellScanTable, checklistitem.CellScanColumn),
		)
		fromV = sqlgraph.Neighbors(cli.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCheckListCategory queries the check_list_category edge of a CheckListItem.
func (c *CheckListItemClient) QueryCheckListCategory(cli *CheckListItem) *CheckListCategoryQuery {
	query := &CheckListCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cli.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checklistitem.Table, checklistitem.FieldID, id),
			sqlgraph.To(checklistcategory.Table, checklistcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, checklistitem.CheckListCategoryTable, checklistitem.CheckListCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(cli.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CheckListItemClient) Hooks() []Hook {
	hooks := c.hooks.CheckListItem
	return append(hooks[:len(hooks):len(hooks)], checklistitem.Hooks[:]...)
}

// CheckListItemDefinitionClient is a client for the CheckListItemDefinition schema.
type CheckListItemDefinitionClient struct {
	config
}

// NewCheckListItemDefinitionClient returns a client for the CheckListItemDefinition from the given config.
func NewCheckListItemDefinitionClient(c config) *CheckListItemDefinitionClient {
	return &CheckListItemDefinitionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `checklistitemdefinition.Hooks(f(g(h())))`.
func (c *CheckListItemDefinitionClient) Use(hooks ...Hook) {
	c.hooks.CheckListItemDefinition = append(c.hooks.CheckListItemDefinition, hooks...)
}

// Create returns a create builder for CheckListItemDefinition.
func (c *CheckListItemDefinitionClient) Create() *CheckListItemDefinitionCreate {
	mutation := newCheckListItemDefinitionMutation(c.config, OpCreate)
	return &CheckListItemDefinitionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CheckListItemDefinition entities.
func (c *CheckListItemDefinitionClient) CreateBulk(builders ...*CheckListItemDefinitionCreate) *CheckListItemDefinitionCreateBulk {
	return &CheckListItemDefinitionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CheckListItemDefinition.
func (c *CheckListItemDefinitionClient) Update() *CheckListItemDefinitionUpdate {
	mutation := newCheckListItemDefinitionMutation(c.config, OpUpdate)
	return &CheckListItemDefinitionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CheckListItemDefinitionClient) UpdateOne(clid *CheckListItemDefinition) *CheckListItemDefinitionUpdateOne {
	mutation := newCheckListItemDefinitionMutation(c.config, OpUpdateOne, withCheckListItemDefinition(clid))
	return &CheckListItemDefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CheckListItemDefinitionClient) UpdateOneID(id int) *CheckListItemDefinitionUpdateOne {
	mutation := newCheckListItemDefinitionMutation(c.config, OpUpdateOne, withCheckListItemDefinitionID(id))
	return &CheckListItemDefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CheckListItemDefinition.
func (c *CheckListItemDefinitionClient) Delete() *CheckListItemDefinitionDelete {
	mutation := newCheckListItemDefinitionMutation(c.config, OpDelete)
	return &CheckListItemDefinitionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CheckListItemDefinitionClient) DeleteOne(clid *CheckListItemDefinition) *CheckListItemDefinitionDeleteOne {
	return c.DeleteOneID(clid.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CheckListItemDefinitionClient) DeleteOneID(id int) *CheckListItemDefinitionDeleteOne {
	builder := c.Delete().Where(checklistitemdefinition.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CheckListItemDefinitionDeleteOne{builder}
}

// Query returns a query builder for CheckListItemDefinition.
func (c *CheckListItemDefinitionClient) Query() *CheckListItemDefinitionQuery {
	return &CheckListItemDefinitionQuery{config: c.config}
}

// Get returns a CheckListItemDefinition entity by its id.
func (c *CheckListItemDefinitionClient) Get(ctx context.Context, id int) (*CheckListItemDefinition, error) {
	return c.Query().Where(checklistitemdefinition.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CheckListItemDefinitionClient) GetX(ctx context.Context, id int) *CheckListItemDefinition {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCheckListCategoryDefinition queries the check_list_category_definition edge of a CheckListItemDefinition.
func (c *CheckListItemDefinitionClient) QueryCheckListCategoryDefinition(clid *CheckListItemDefinition) *CheckListCategoryDefinitionQuery {
	query := &CheckListCategoryDefinitionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := clid.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checklistitemdefinition.Table, checklistitemdefinition.FieldID, id),
			sqlgraph.To(checklistcategorydefinition.Table, checklistcategorydefinition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, checklistitemdefinition.CheckListCategoryDefinitionTable, checklistitemdefinition.CheckListCategoryDefinitionColumn),
		)
		fromV = sqlgraph.Neighbors(clid.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CheckListItemDefinitionClient) Hooks() []Hook {
	hooks := c.hooks.CheckListItemDefinition
	return append(hooks[:len(hooks):len(hooks)], checklistitemdefinition.Hooks[:]...)
}

// CommentClient is a client for the Comment schema.
type CommentClient struct {
	config
}

// NewCommentClient returns a client for the Comment from the given config.
func NewCommentClient(c config) *CommentClient {
	return &CommentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `comment.Hooks(f(g(h())))`.
func (c *CommentClient) Use(hooks ...Hook) {
	c.hooks.Comment = append(c.hooks.Comment, hooks...)
}

// Create returns a create builder for Comment.
func (c *CommentClient) Create() *CommentCreate {
	mutation := newCommentMutation(c.config, OpCreate)
	return &CommentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Comment entities.
func (c *CommentClient) CreateBulk(builders ...*CommentCreate) *CommentCreateBulk {
	return &CommentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Comment.
func (c *CommentClient) Update() *CommentUpdate {
	mutation := newCommentMutation(c.config, OpUpdate)
	return &CommentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommentClient) UpdateOne(co *Comment) *CommentUpdateOne {
	mutation := newCommentMutation(c.config, OpUpdateOne, withComment(co))
	return &CommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommentClient) UpdateOneID(id int) *CommentUpdateOne {
	mutation := newCommentMutation(c.config, OpUpdateOne, withCommentID(id))
	return &CommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Comment.
func (c *CommentClient) Delete() *CommentDelete {
	mutation := newCommentMutation(c.config, OpDelete)
	return &CommentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CommentClient) DeleteOne(co *Comment) *CommentDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CommentClient) DeleteOneID(id int) *CommentDeleteOne {
	builder := c.Delete().Where(comment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommentDeleteOne{builder}
}

// Query returns a query builder for Comment.
func (c *CommentClient) Query() *CommentQuery {
	return &CommentQuery{config: c.config}
}

// Get returns a Comment entity by its id.
func (c *CommentClient) Get(ctx context.Context, id int) (*Comment, error) {
	return c.Query().Where(comment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommentClient) GetX(ctx context.Context, id int) *Comment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAuthor queries the author edge of a Comment.
func (c *CommentClient) QueryAuthor(co *Comment) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(comment.Table, comment.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, comment.AuthorTable, comment.AuthorColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkOrder queries the work_order edge of a Comment.
func (c *CommentClient) QueryWorkOrder(co *Comment) *WorkOrderQuery {
	query := &WorkOrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(comment.Table, comment.FieldID, id),
			sqlgraph.To(workorder.Table, workorder.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, comment.WorkOrderTable, comment.WorkOrderColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProject queries the project edge of a Comment.
func (c *CommentClient) QueryProject(co *Comment) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(comment.Table, comment.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, comment.ProjectTable, comment.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CommentClient) Hooks() []Hook {
	hooks := c.hooks.Comment
	return append(hooks[:len(hooks):len(hooks)], comment.Hooks[:]...)
}

// ComparatorClient is a client for the Comparator schema.
type ComparatorClient struct {
	config
}

// NewComparatorClient returns a client for the Comparator from the given config.
func NewComparatorClient(c config) *ComparatorClient {
	return &ComparatorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `comparator.Hooks(f(g(h())))`.
func (c *ComparatorClient) Use(hooks ...Hook) {
	c.hooks.Comparator = append(c.hooks.Comparator, hooks...)
}

// Create returns a create builder for Comparator.
func (c *ComparatorClient) Create() *ComparatorCreate {
	mutation := newComparatorMutation(c.config, OpCreate)
	return &ComparatorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Comparator entities.
func (c *ComparatorClient) CreateBulk(builders ...*ComparatorCreate) *ComparatorCreateBulk {
	return &ComparatorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Comparator.
func (c *ComparatorClient) Update() *ComparatorUpdate {
	mutation := newComparatorMutation(c.config, OpUpdate)
	return &ComparatorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ComparatorClient) UpdateOne(co *Comparator) *ComparatorUpdateOne {
	mutation := newComparatorMutation(c.config, OpUpdateOne, withComparator(co))
	return &ComparatorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ComparatorClient) UpdateOneID(id int) *ComparatorUpdateOne {
	mutation := newComparatorMutation(c.config, OpUpdateOne, withComparatorID(id))
	return &ComparatorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Comparator.
func (c *ComparatorClient) Delete() *ComparatorDelete {
	mutation := newComparatorMutation(c.config, OpDelete)
	return &ComparatorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ComparatorClient) DeleteOne(co *Comparator) *ComparatorDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ComparatorClient) DeleteOneID(id int) *ComparatorDeleteOne {
	builder := c.Delete().Where(comparator.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ComparatorDeleteOne{builder}
}

// Query returns a query builder for Comparator.
func (c *ComparatorClient) Query() *ComparatorQuery {
	return &ComparatorQuery{config: c.config}
}

// Get returns a Comparator entity by its id.
func (c *ComparatorClient) Get(ctx context.Context, id int) (*Comparator, error) {
	return c.Query().Where(comparator.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ComparatorClient) GetX(ctx context.Context, id int) *Comparator {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryComparatorrulelimit queries the comparatorrulelimit edge of a Comparator.
func (c *ComparatorClient) QueryComparatorrulelimit(co *Comparator) *RuleLimitQuery {
	query := &RuleLimitQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(comparator.Table, comparator.FieldID, id),
			sqlgraph.To(rulelimit.Table, rulelimit.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, comparator.ComparatorrulelimitTable, comparator.ComparatorrulelimitColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryComparatorkqitargetfk queries the comparatorkqitargetfk edge of a Comparator.
func (c *ComparatorClient) QueryComparatorkqitargetfk(co *Comparator) *KqiComparatorQuery {
	query := &KqiComparatorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(comparator.Table, comparator.FieldID, id),
			sqlgraph.To(kqicomparator.Table, kqicomparator.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, comparator.ComparatorkqitargetfkTable, comparator.ComparatorkqitargetfkColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ComparatorClient) Hooks() []Hook {
	hooks := c.hooks.Comparator
	return append(hooks[:len(hooks):len(hooks)], comparator.Hooks[:]...)
}

// CounterClient is a client for the Counter schema.
type CounterClient struct {
	config
}

// NewCounterClient returns a client for the Counter from the given config.
func NewCounterClient(c config) *CounterClient {
	return &CounterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `counter.Hooks(f(g(h())))`.
func (c *CounterClient) Use(hooks ...Hook) {
	c.hooks.Counter = append(c.hooks.Counter, hooks...)
}

// Create returns a create builder for Counter.
func (c *CounterClient) Create() *CounterCreate {
	mutation := newCounterMutation(c.config, OpCreate)
	return &CounterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Counter entities.
func (c *CounterClient) CreateBulk(builders ...*CounterCreate) *CounterCreateBulk {
	return &CounterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Counter.
func (c *CounterClient) Update() *CounterUpdate {
	mutation := newCounterMutation(c.config, OpUpdate)
	return &CounterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CounterClient) UpdateOne(co *Counter) *CounterUpdateOne {
	mutation := newCounterMutation(c.config, OpUpdateOne, withCounter(co))
	return &CounterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CounterClient) UpdateOneID(id int) *CounterUpdateOne {
	mutation := newCounterMutation(c.config, OpUpdateOne, withCounterID(id))
	return &CounterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Counter.
func (c *CounterClient) Delete() *CounterDelete {
	mutation := newCounterMutation(c.config, OpDelete)
	return &CounterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CounterClient) DeleteOne(co *Counter) *CounterDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CounterClient) DeleteOneID(id int) *CounterDeleteOne {
	builder := c.Delete().Where(counter.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CounterDeleteOne{builder}
}

// Query returns a query builder for Counter.
func (c *CounterClient) Query() *CounterQuery {
	return &CounterQuery{config: c.config}
}

// Get returns a Counter entity by its id.
func (c *CounterClient) Get(ctx context.Context, id int) (*Counter, error) {
	return c.Query().Where(counter.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CounterClient) GetX(ctx context.Context, id int) *Counter {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCounterfamily queries the counterfamily edge of a Counter.
func (c *CounterClient) QueryCounterfamily(co *Counter) *CounterFamilyQuery {
	query := &CounterFamilyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(counter.Table, counter.FieldID, id),
			sqlgraph.To(counterfamily.Table, counterfamily.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, counter.CounterfamilyTable, counter.CounterfamilyColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVendor queries the vendor edge of a Counter.
func (c *CounterClient) QueryVendor(co *Counter) *VendorQuery {
	query := &VendorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(counter.Table, counter.FieldID, id),
			sqlgraph.To(vendor.Table, vendor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, counter.VendorTable, counter.VendorColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCounterFk queries the counter_fk edge of a Counter.
func (c *CounterClient) QueryCounterFk(co *Counter) *CounterFormulaQuery {
	query := &CounterFormulaQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(counter.Table, counter.FieldID, id),
			sqlgraph.To(counterformula.Table, counterformula.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, counter.CounterFkTable, counter.CounterFkColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CounterClient) Hooks() []Hook {
	hooks := c.hooks.Counter
	return append(hooks[:len(hooks):len(hooks)], counter.Hooks[:]...)
}

// CounterFamilyClient is a client for the CounterFamily schema.
type CounterFamilyClient struct {
	config
}

// NewCounterFamilyClient returns a client for the CounterFamily from the given config.
func NewCounterFamilyClient(c config) *CounterFamilyClient {
	return &CounterFamilyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `counterfamily.Hooks(f(g(h())))`.
func (c *CounterFamilyClient) Use(hooks ...Hook) {
	c.hooks.CounterFamily = append(c.hooks.CounterFamily, hooks...)
}

// Create returns a create builder for CounterFamily.
func (c *CounterFamilyClient) Create() *CounterFamilyCreate {
	mutation := newCounterFamilyMutation(c.config, OpCreate)
	return &CounterFamilyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CounterFamily entities.
func (c *CounterFamilyClient) CreateBulk(builders ...*CounterFamilyCreate) *CounterFamilyCreateBulk {
	return &CounterFamilyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CounterFamily.
func (c *CounterFamilyClient) Update() *CounterFamilyUpdate {
	mutation := newCounterFamilyMutation(c.config, OpUpdate)
	return &CounterFamilyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CounterFamilyClient) UpdateOne(cf *CounterFamily) *CounterFamilyUpdateOne {
	mutation := newCounterFamilyMutation(c.config, OpUpdateOne, withCounterFamily(cf))
	return &CounterFamilyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CounterFamilyClient) UpdateOneID(id int) *CounterFamilyUpdateOne {
	mutation := newCounterFamilyMutation(c.config, OpUpdateOne, withCounterFamilyID(id))
	return &CounterFamilyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CounterFamily.
func (c *CounterFamilyClient) Delete() *CounterFamilyDelete {
	mutation := newCounterFamilyMutation(c.config, OpDelete)
	return &CounterFamilyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CounterFamilyClient) DeleteOne(cf *CounterFamily) *CounterFamilyDeleteOne {
	return c.DeleteOneID(cf.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CounterFamilyClient) DeleteOneID(id int) *CounterFamilyDeleteOne {
	builder := c.Delete().Where(counterfamily.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CounterFamilyDeleteOne{builder}
}

// Query returns a query builder for CounterFamily.
func (c *CounterFamilyClient) Query() *CounterFamilyQuery {
	return &CounterFamilyQuery{config: c.config}
}

// Get returns a CounterFamily entity by its id.
func (c *CounterFamilyClient) Get(ctx context.Context, id int) (*CounterFamily, error) {
	return c.Query().Where(counterfamily.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CounterFamilyClient) GetX(ctx context.Context, id int) *CounterFamily {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCounterfamily queries the counterfamily edge of a CounterFamily.
func (c *CounterFamilyClient) QueryCounterfamily(cf *CounterFamily) *CounterQuery {
	query := &CounterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(counterfamily.Table, counterfamily.FieldID, id),
			sqlgraph.To(counter.Table, counter.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, counterfamily.CounterfamilyTable, counterfamily.CounterfamilyColumn),
		)
		fromV = sqlgraph.Neighbors(cf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CounterFamilyClient) Hooks() []Hook {
	hooks := c.hooks.CounterFamily
	return append(hooks[:len(hooks):len(hooks)], counterfamily.Hooks[:]...)
}

// CounterFormulaClient is a client for the CounterFormula schema.
type CounterFormulaClient struct {
	config
}

// NewCounterFormulaClient returns a client for the CounterFormula from the given config.
func NewCounterFormulaClient(c config) *CounterFormulaClient {
	return &CounterFormulaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `counterformula.Hooks(f(g(h())))`.
func (c *CounterFormulaClient) Use(hooks ...Hook) {
	c.hooks.CounterFormula = append(c.hooks.CounterFormula, hooks...)
}

// Create returns a create builder for CounterFormula.
func (c *CounterFormulaClient) Create() *CounterFormulaCreate {
	mutation := newCounterFormulaMutation(c.config, OpCreate)
	return &CounterFormulaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CounterFormula entities.
func (c *CounterFormulaClient) CreateBulk(builders ...*CounterFormulaCreate) *CounterFormulaCreateBulk {
	return &CounterFormulaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CounterFormula.
func (c *CounterFormulaClient) Update() *CounterFormulaUpdate {
	mutation := newCounterFormulaMutation(c.config, OpUpdate)
	return &CounterFormulaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CounterFormulaClient) UpdateOne(cf *CounterFormula) *CounterFormulaUpdateOne {
	mutation := newCounterFormulaMutation(c.config, OpUpdateOne, withCounterFormula(cf))
	return &CounterFormulaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CounterFormulaClient) UpdateOneID(id int) *CounterFormulaUpdateOne {
	mutation := newCounterFormulaMutation(c.config, OpUpdateOne, withCounterFormulaID(id))
	return &CounterFormulaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CounterFormula.
func (c *CounterFormulaClient) Delete() *CounterFormulaDelete {
	mutation := newCounterFormulaMutation(c.config, OpDelete)
	return &CounterFormulaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CounterFormulaClient) DeleteOne(cf *CounterFormula) *CounterFormulaDeleteOne {
	return c.DeleteOneID(cf.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CounterFormulaClient) DeleteOneID(id int) *CounterFormulaDeleteOne {
	builder := c.Delete().Where(counterformula.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CounterFormulaDeleteOne{builder}
}

// Query returns a query builder for CounterFormula.
func (c *CounterFormulaClient) Query() *CounterFormulaQuery {
	return &CounterFormulaQuery{config: c.config}
}

// Get returns a CounterFormula entity by its id.
func (c *CounterFormulaClient) Get(ctx context.Context, id int) (*CounterFormula, error) {
	return c.Query().Where(counterformula.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CounterFormulaClient) GetX(ctx context.Context, id int) *CounterFormula {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFormula queries the formula edge of a CounterFormula.
func (c *CounterFormulaClient) QueryFormula(cf *CounterFormula) *FormulaQuery {
	query := &FormulaQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(counterformula.Table, counterformula.FieldID, id),
			sqlgraph.To(formula.Table, formula.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, counterformula.FormulaTable, counterformula.FormulaColumn),
		)
		fromV = sqlgraph.Neighbors(cf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCounter queries the counter edge of a CounterFormula.
func (c *CounterFormulaClient) QueryCounter(cf *CounterFormula) *CounterQuery {
	query := &CounterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(counterformula.Table, counterformula.FieldID, id),
			sqlgraph.To(counter.Table, counter.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, counterformula.CounterTable, counterformula.CounterColumn),
		)
		fromV = sqlgraph.Neighbors(cf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CounterFormulaClient) Hooks() []Hook {
	hooks := c.hooks.CounterFormula
	return append(hooks[:len(hooks):len(hooks)], counterformula.Hooks[:]...)
}

// CustomerClient is a client for the Customer schema.
type CustomerClient struct {
	config
}

// NewCustomerClient returns a client for the Customer from the given config.
func NewCustomerClient(c config) *CustomerClient {
	return &CustomerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `customer.Hooks(f(g(h())))`.
func (c *CustomerClient) Use(hooks ...Hook) {
	c.hooks.Customer = append(c.hooks.Customer, hooks...)
}

// Create returns a create builder for Customer.
func (c *CustomerClient) Create() *CustomerCreate {
	mutation := newCustomerMutation(c.config, OpCreate)
	return &CustomerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Customer entities.
func (c *CustomerClient) CreateBulk(builders ...*CustomerCreate) *CustomerCreateBulk {
	return &CustomerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Customer.
func (c *CustomerClient) Update() *CustomerUpdate {
	mutation := newCustomerMutation(c.config, OpUpdate)
	return &CustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CustomerClient) UpdateOne(cu *Customer) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomer(cu))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CustomerClient) UpdateOneID(id int) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomerID(id))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Customer.
func (c *CustomerClient) Delete() *CustomerDelete {
	mutation := newCustomerMutation(c.config, OpDelete)
	return &CustomerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CustomerClient) DeleteOne(cu *Customer) *CustomerDeleteOne {
	return c.DeleteOneID(cu.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CustomerClient) DeleteOneID(id int) *CustomerDeleteOne {
	builder := c.Delete().Where(customer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CustomerDeleteOne{builder}
}

// Query returns a query builder for Customer.
func (c *CustomerClient) Query() *CustomerQuery {
	return &CustomerQuery{config: c.config}
}

// Get returns a Customer entity by its id.
func (c *CustomerClient) Get(ctx context.Context, id int) (*Customer, error) {
	return c.Query().Where(customer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CustomerClient) GetX(ctx context.Context, id int) *Customer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryServices queries the services edge of a Customer.
func (c *CustomerClient) QueryServices(cu *Customer) *ServiceQuery {
	query := &ServiceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customer.Table, customer.FieldID, id),
			sqlgraph.To(service.Table, service.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, customer.ServicesTable, customer.ServicesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CustomerClient) Hooks() []Hook {
	hooks := c.hooks.Customer
	return append(hooks[:len(hooks):len(hooks)], customer.Hooks[:]...)
}

// DocumentCategoryClient is a client for the DocumentCategory schema.
type DocumentCategoryClient struct {
	config
}

// NewDocumentCategoryClient returns a client for the DocumentCategory from the given config.
func NewDocumentCategoryClient(c config) *DocumentCategoryClient {
	return &DocumentCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `documentcategory.Hooks(f(g(h())))`.
func (c *DocumentCategoryClient) Use(hooks ...Hook) {
	c.hooks.DocumentCategory = append(c.hooks.DocumentCategory, hooks...)
}

// Create returns a create builder for DocumentCategory.
func (c *DocumentCategoryClient) Create() *DocumentCategoryCreate {
	mutation := newDocumentCategoryMutation(c.config, OpCreate)
	return &DocumentCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DocumentCategory entities.
func (c *DocumentCategoryClient) CreateBulk(builders ...*DocumentCategoryCreate) *DocumentCategoryCreateBulk {
	return &DocumentCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DocumentCategory.
func (c *DocumentCategoryClient) Update() *DocumentCategoryUpdate {
	mutation := newDocumentCategoryMutation(c.config, OpUpdate)
	return &DocumentCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DocumentCategoryClient) UpdateOne(dc *DocumentCategory) *DocumentCategoryUpdateOne {
	mutation := newDocumentCategoryMutation(c.config, OpUpdateOne, withDocumentCategory(dc))
	return &DocumentCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DocumentCategoryClient) UpdateOneID(id int) *DocumentCategoryUpdateOne {
	mutation := newDocumentCategoryMutation(c.config, OpUpdateOne, withDocumentCategoryID(id))
	return &DocumentCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DocumentCategory.
func (c *DocumentCategoryClient) Delete() *DocumentCategoryDelete {
	mutation := newDocumentCategoryMutation(c.config, OpDelete)
	return &DocumentCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DocumentCategoryClient) DeleteOne(dc *DocumentCategory) *DocumentCategoryDeleteOne {
	return c.DeleteOneID(dc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DocumentCategoryClient) DeleteOneID(id int) *DocumentCategoryDeleteOne {
	builder := c.Delete().Where(documentcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DocumentCategoryDeleteOne{builder}
}

// Query returns a query builder for DocumentCategory.
func (c *DocumentCategoryClient) Query() *DocumentCategoryQuery {
	return &DocumentCategoryQuery{config: c.config}
}

// Get returns a DocumentCategory entity by its id.
func (c *DocumentCategoryClient) Get(ctx context.Context, id int) (*DocumentCategory, error) {
	return c.Query().Where(documentcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DocumentCategoryClient) GetX(ctx context.Context, id int) *DocumentCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLocationType queries the location_type edge of a DocumentCategory.
func (c *DocumentCategoryClient) QueryLocationType(dc *DocumentCategory) *LocationTypeQuery {
	query := &LocationTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(documentcategory.Table, documentcategory.FieldID, id),
			sqlgraph.To(locationtype.Table, locationtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, documentcategory.LocationTypeTable, documentcategory.LocationTypeColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFiles queries the files edge of a DocumentCategory.
func (c *DocumentCategoryClient) QueryFiles(dc *DocumentCategory) *FileQuery {
	query := &FileQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(documentcategory.Table, documentcategory.FieldID, id),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, documentcategory.FilesTable, documentcategory.FilesColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHyperlinks queries the hyperlinks edge of a DocumentCategory.
func (c *DocumentCategoryClient) QueryHyperlinks(dc *DocumentCategory) *HyperlinkQuery {
	query := &HyperlinkQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := dc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(documentcategory.Table, documentcategory.FieldID, id),
			sqlgraph.To(hyperlink.Table, hyperlink.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, documentcategory.HyperlinksTable, documentcategory.HyperlinksColumn),
		)
		fromV = sqlgraph.Neighbors(dc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DocumentCategoryClient) Hooks() []Hook {
	hooks := c.hooks.DocumentCategory
	return append(hooks[:len(hooks):len(hooks)], documentcategory.Hooks[:]...)
}

// DomainClient is a client for the Domain schema.
type DomainClient struct {
	config
}

// NewDomainClient returns a client for the Domain from the given config.
func NewDomainClient(c config) *DomainClient {
	return &DomainClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `domain.Hooks(f(g(h())))`.
func (c *DomainClient) Use(hooks ...Hook) {
	c.hooks.Domain = append(c.hooks.Domain, hooks...)
}

// Create returns a create builder for Domain.
func (c *DomainClient) Create() *DomainCreate {
	mutation := newDomainMutation(c.config, OpCreate)
	return &DomainCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Domain entities.
func (c *DomainClient) CreateBulk(builders ...*DomainCreate) *DomainCreateBulk {
	return &DomainCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Domain.
func (c *DomainClient) Update() *DomainUpdate {
	mutation := newDomainMutation(c.config, OpUpdate)
	return &DomainUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DomainClient) UpdateOne(d *Domain) *DomainUpdateOne {
	mutation := newDomainMutation(c.config, OpUpdateOne, withDomain(d))
	return &DomainUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DomainClient) UpdateOneID(id int) *DomainUpdateOne {
	mutation := newDomainMutation(c.config, OpUpdateOne, withDomainID(id))
	return &DomainUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Domain.
func (c *DomainClient) Delete() *DomainDelete {
	mutation := newDomainMutation(c.config, OpDelete)
	return &DomainDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DomainClient) DeleteOne(d *Domain) *DomainDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DomainClient) DeleteOneID(id int) *DomainDeleteOne {
	builder := c.Delete().Where(domain.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DomainDeleteOne{builder}
}

// Query returns a query builder for Domain.
func (c *DomainClient) Query() *DomainQuery {
	return &DomainQuery{config: c.config}
}

// Get returns a Domain entity by its id.
func (c *DomainClient) Get(ctx context.Context, id int) (*Domain, error) {
	return c.Query().Where(domain.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DomainClient) GetX(ctx context.Context, id int) *Domain {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTechdomain queries the techdomain edge of a Domain.
func (c *DomainClient) QueryTechdomain(d *Domain) *TechQuery {
	query := &TechQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(domain.Table, domain.FieldID, id),
			sqlgraph.To(tech.Table, tech.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, domain.TechdomainTable, domain.TechdomainColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryKpidomain queries the kpidomain edge of a Domain.
func (c *DomainClient) QueryKpidomain(d *Domain) *KpiQuery {
	query := &KpiQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(domain.Table, domain.FieldID, id),
			sqlgraph.To(kpi.Table, kpi.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, domain.KpidomainTable, domain.KpidomainColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DomainClient) Hooks() []Hook {
	hooks := c.hooks.Domain
	return append(hooks[:len(hooks):len(hooks)], domain.Hooks[:]...)
}

// EntryPointClient is a client for the EntryPoint schema.
type EntryPointClient struct {
	config
}

// NewEntryPointClient returns a client for the EntryPoint from the given config.
func NewEntryPointClient(c config) *EntryPointClient {
	return &EntryPointClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `entrypoint.Hooks(f(g(h())))`.
func (c *EntryPointClient) Use(hooks ...Hook) {
	c.hooks.EntryPoint = append(c.hooks.EntryPoint, hooks...)
}

// Create returns a create builder for EntryPoint.
func (c *EntryPointClient) Create() *EntryPointCreate {
	mutation := newEntryPointMutation(c.config, OpCreate)
	return &EntryPointCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EntryPoint entities.
func (c *EntryPointClient) CreateBulk(builders ...*EntryPointCreate) *EntryPointCreateBulk {
	return &EntryPointCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EntryPoint.
func (c *EntryPointClient) Update() *EntryPointUpdate {
	mutation := newEntryPointMutation(c.config, OpUpdate)
	return &EntryPointUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EntryPointClient) UpdateOne(ep *EntryPoint) *EntryPointUpdateOne {
	mutation := newEntryPointMutation(c.config, OpUpdateOne, withEntryPoint(ep))
	return &EntryPointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EntryPointClient) UpdateOneID(id int) *EntryPointUpdateOne {
	mutation := newEntryPointMutation(c.config, OpUpdateOne, withEntryPointID(id))
	return &EntryPointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EntryPoint.
func (c *EntryPointClient) Delete() *EntryPointDelete {
	mutation := newEntryPointMutation(c.config, OpDelete)
	return &EntryPointDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EntryPointClient) DeleteOne(ep *EntryPoint) *EntryPointDeleteOne {
	return c.DeleteOneID(ep.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EntryPointClient) DeleteOneID(id int) *EntryPointDeleteOne {
	builder := c.Delete().Where(entrypoint.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EntryPointDeleteOne{builder}
}

// Query returns a query builder for EntryPoint.
func (c *EntryPointClient) Query() *EntryPointQuery {
	return &EntryPointQuery{config: c.config}
}

// Get returns a EntryPoint entity by its id.
func (c *EntryPointClient) Get(ctx context.Context, id int) (*EntryPoint, error) {
	return c.Query().Where(entrypoint.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EntryPointClient) GetX(ctx context.Context, id int) *EntryPoint {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPrevExitPoints queries the prev_exit_points edge of a EntryPoint.
func (c *EntryPointClient) QueryPrevExitPoints(ep *EntryPoint) *ExitPointQuery {
	query := &ExitPointQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entrypoint.Table, entrypoint.FieldID, id),
			sqlgraph.To(exitpoint.Table, exitpoint.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, entrypoint.PrevExitPointsTable, entrypoint.PrevExitPointsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParentBlock queries the parent_block edge of a EntryPoint.
func (c *EntryPointClient) QueryParentBlock(ep *EntryPoint) *BlockQuery {
	query := &BlockQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entrypoint.Table, entrypoint.FieldID, id),
			sqlgraph.To(block.Table, block.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, entrypoint.ParentBlockTable, entrypoint.ParentBlockColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EntryPointClient) Hooks() []Hook {
	hooks := c.hooks.EntryPoint
	return append(hooks[:len(hooks):len(hooks)], entrypoint.Hooks[:]...)
}

// EquipmentClient is a client for the Equipment schema.
type EquipmentClient struct {
	config
}

// NewEquipmentClient returns a client for the Equipment from the given config.
func NewEquipmentClient(c config) *EquipmentClient {
	return &EquipmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `equipment.Hooks(f(g(h())))`.
func (c *EquipmentClient) Use(hooks ...Hook) {
	c.hooks.Equipment = append(c.hooks.Equipment, hooks...)
}

// Create returns a create builder for Equipment.
func (c *EquipmentClient) Create() *EquipmentCreate {
	mutation := newEquipmentMutation(c.config, OpCreate)
	return &EquipmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Equipment entities.
func (c *EquipmentClient) CreateBulk(builders ...*EquipmentCreate) *EquipmentCreateBulk {
	return &EquipmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Equipment.
func (c *EquipmentClient) Update() *EquipmentUpdate {
	mutation := newEquipmentMutation(c.config, OpUpdate)
	return &EquipmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EquipmentClient) UpdateOne(e *Equipment) *EquipmentUpdateOne {
	mutation := newEquipmentMutation(c.config, OpUpdateOne, withEquipment(e))
	return &EquipmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EquipmentClient) UpdateOneID(id int) *EquipmentUpdateOne {
	mutation := newEquipmentMutation(c.config, OpUpdateOne, withEquipmentID(id))
	return &EquipmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Equipment.
func (c *EquipmentClient) Delete() *EquipmentDelete {
	mutation := newEquipmentMutation(c.config, OpDelete)
	return &EquipmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EquipmentClient) DeleteOne(e *Equipment) *EquipmentDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EquipmentClient) DeleteOneID(id int) *EquipmentDeleteOne {
	builder := c.Delete().Where(equipment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EquipmentDeleteOne{builder}
}

// Query returns a query builder for Equipment.
func (c *EquipmentClient) Query() *EquipmentQuery {
	return &EquipmentQuery{config: c.config}
}

// Get returns a Equipment entity by its id.
func (c *EquipmentClient) Get(ctx context.Context, id int) (*Equipment, error) {
	return c.Query().Where(equipment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EquipmentClient) GetX(ctx context.Context, id int) *Equipment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryType queries the type edge of a Equipment.
func (c *EquipmentClient) QueryType(e *Equipment) *EquipmentTypeQuery {
	query := &EquipmentTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(equipmenttype.Table, equipmenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, equipment.TypeTable, equipment.TypeColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLocation queries the location edge of a Equipment.
func (c *EquipmentClient) QueryLocation(e *Equipment) *LocationQuery {
	query := &LocationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, equipment.LocationTable, equipment.LocationColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParentPosition queries the parent_position edge of a Equipment.
func (c *EquipmentClient) QueryParentPosition(e *Equipment) *EquipmentPositionQuery {
	query := &EquipmentPositionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(equipmentposition.Table, equipmentposition.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, equipment.ParentPositionTable, equipment.ParentPositionColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPositions queries the positions edge of a Equipment.
func (c *EquipmentClient) QueryPositions(e *Equipment) *EquipmentPositionQuery {
	query := &EquipmentPositionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(equipmentposition.Table, equipmentposition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, equipment.PositionsTable, equipment.PositionsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPorts queries the ports edge of a Equipment.
func (c *EquipmentClient) QueryPorts(e *Equipment) *EquipmentPortQuery {
	query := &EquipmentPortQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(equipmentport.Table, equipmentport.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, equipment.PortsTable, equipment.PortsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkOrder queries the work_order edge of a Equipment.
func (c *EquipmentClient) QueryWorkOrder(e *Equipment) *WorkOrderQuery {
	query := &WorkOrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(workorder.Table, workorder.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, equipment.WorkOrderTable, equipment.WorkOrderColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProperties queries the properties edge of a Equipment.
func (c *EquipmentClient) QueryProperties(e *Equipment) *PropertyQuery {
	query := &PropertyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(property.Table, property.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, equipment.PropertiesTable, equipment.PropertiesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFiles queries the files edge of a Equipment.
func (c *EquipmentClient) QueryFiles(e *Equipment) *FileQuery {
	query := &FileQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, equipment.FilesTable, equipment.FilesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHyperlinks queries the hyperlinks edge of a Equipment.
func (c *EquipmentClient) QueryHyperlinks(e *Equipment) *HyperlinkQuery {
	query := &HyperlinkQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(hyperlink.Table, hyperlink.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, equipment.HyperlinksTable, equipment.HyperlinksColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEndpoints queries the endpoints edge of a Equipment.
func (c *EquipmentClient) QueryEndpoints(e *Equipment) *ServiceEndpointQuery {
	query := &ServiceEndpointQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipment.Table, equipment.FieldID, id),
			sqlgraph.To(serviceendpoint.Table, serviceendpoint.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, equipment.EndpointsTable, equipment.EndpointsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EquipmentClient) Hooks() []Hook {
	hooks := c.hooks.Equipment
	return append(hooks[:len(hooks):len(hooks)], equipment.Hooks[:]...)
}

// EquipmentCategoryClient is a client for the EquipmentCategory schema.
type EquipmentCategoryClient struct {
	config
}

// NewEquipmentCategoryClient returns a client for the EquipmentCategory from the given config.
func NewEquipmentCategoryClient(c config) *EquipmentCategoryClient {
	return &EquipmentCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `equipmentcategory.Hooks(f(g(h())))`.
func (c *EquipmentCategoryClient) Use(hooks ...Hook) {
	c.hooks.EquipmentCategory = append(c.hooks.EquipmentCategory, hooks...)
}

// Create returns a create builder for EquipmentCategory.
func (c *EquipmentCategoryClient) Create() *EquipmentCategoryCreate {
	mutation := newEquipmentCategoryMutation(c.config, OpCreate)
	return &EquipmentCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EquipmentCategory entities.
func (c *EquipmentCategoryClient) CreateBulk(builders ...*EquipmentCategoryCreate) *EquipmentCategoryCreateBulk {
	return &EquipmentCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EquipmentCategory.
func (c *EquipmentCategoryClient) Update() *EquipmentCategoryUpdate {
	mutation := newEquipmentCategoryMutation(c.config, OpUpdate)
	return &EquipmentCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EquipmentCategoryClient) UpdateOne(ec *EquipmentCategory) *EquipmentCategoryUpdateOne {
	mutation := newEquipmentCategoryMutation(c.config, OpUpdateOne, withEquipmentCategory(ec))
	return &EquipmentCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EquipmentCategoryClient) UpdateOneID(id int) *EquipmentCategoryUpdateOne {
	mutation := newEquipmentCategoryMutation(c.config, OpUpdateOne, withEquipmentCategoryID(id))
	return &EquipmentCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EquipmentCategory.
func (c *EquipmentCategoryClient) Delete() *EquipmentCategoryDelete {
	mutation := newEquipmentCategoryMutation(c.config, OpDelete)
	return &EquipmentCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EquipmentCategoryClient) DeleteOne(ec *EquipmentCategory) *EquipmentCategoryDeleteOne {
	return c.DeleteOneID(ec.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EquipmentCategoryClient) DeleteOneID(id int) *EquipmentCategoryDeleteOne {
	builder := c.Delete().Where(equipmentcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EquipmentCategoryDeleteOne{builder}
}

// Query returns a query builder for EquipmentCategory.
func (c *EquipmentCategoryClient) Query() *EquipmentCategoryQuery {
	return &EquipmentCategoryQuery{config: c.config}
}

// Get returns a EquipmentCategory entity by its id.
func (c *EquipmentCategoryClient) Get(ctx context.Context, id int) (*EquipmentCategory, error) {
	return c.Query().Where(equipmentcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EquipmentCategoryClient) GetX(ctx context.Context, id int) *EquipmentCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTypes queries the types edge of a EquipmentCategory.
func (c *EquipmentCategoryClient) QueryTypes(ec *EquipmentCategory) *EquipmentTypeQuery {
	query := &EquipmentTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentcategory.Table, equipmentcategory.FieldID, id),
			sqlgraph.To(equipmenttype.Table, equipmenttype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, equipmentcategory.TypesTable, equipmentcategory.TypesColumn),
		)
		fromV = sqlgraph.Neighbors(ec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EquipmentCategoryClient) Hooks() []Hook {
	hooks := c.hooks.EquipmentCategory
	return append(hooks[:len(hooks):len(hooks)], equipmentcategory.Hooks[:]...)
}

// EquipmentPortClient is a client for the EquipmentPort schema.
type EquipmentPortClient struct {
	config
}

// NewEquipmentPortClient returns a client for the EquipmentPort from the given config.
func NewEquipmentPortClient(c config) *EquipmentPortClient {
	return &EquipmentPortClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `equipmentport.Hooks(f(g(h())))`.
func (c *EquipmentPortClient) Use(hooks ...Hook) {
	c.hooks.EquipmentPort = append(c.hooks.EquipmentPort, hooks...)
}

// Create returns a create builder for EquipmentPort.
func (c *EquipmentPortClient) Create() *EquipmentPortCreate {
	mutation := newEquipmentPortMutation(c.config, OpCreate)
	return &EquipmentPortCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EquipmentPort entities.
func (c *EquipmentPortClient) CreateBulk(builders ...*EquipmentPortCreate) *EquipmentPortCreateBulk {
	return &EquipmentPortCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EquipmentPort.
func (c *EquipmentPortClient) Update() *EquipmentPortUpdate {
	mutation := newEquipmentPortMutation(c.config, OpUpdate)
	return &EquipmentPortUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EquipmentPortClient) UpdateOne(ep *EquipmentPort) *EquipmentPortUpdateOne {
	mutation := newEquipmentPortMutation(c.config, OpUpdateOne, withEquipmentPort(ep))
	return &EquipmentPortUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EquipmentPortClient) UpdateOneID(id int) *EquipmentPortUpdateOne {
	mutation := newEquipmentPortMutation(c.config, OpUpdateOne, withEquipmentPortID(id))
	return &EquipmentPortUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EquipmentPort.
func (c *EquipmentPortClient) Delete() *EquipmentPortDelete {
	mutation := newEquipmentPortMutation(c.config, OpDelete)
	return &EquipmentPortDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EquipmentPortClient) DeleteOne(ep *EquipmentPort) *EquipmentPortDeleteOne {
	return c.DeleteOneID(ep.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EquipmentPortClient) DeleteOneID(id int) *EquipmentPortDeleteOne {
	builder := c.Delete().Where(equipmentport.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EquipmentPortDeleteOne{builder}
}

// Query returns a query builder for EquipmentPort.
func (c *EquipmentPortClient) Query() *EquipmentPortQuery {
	return &EquipmentPortQuery{config: c.config}
}

// Get returns a EquipmentPort entity by its id.
func (c *EquipmentPortClient) Get(ctx context.Context, id int) (*EquipmentPort, error) {
	return c.Query().Where(equipmentport.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EquipmentPortClient) GetX(ctx context.Context, id int) *EquipmentPort {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDefinition queries the definition edge of a EquipmentPort.
func (c *EquipmentPortClient) QueryDefinition(ep *EquipmentPort) *EquipmentPortDefinitionQuery {
	query := &EquipmentPortDefinitionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentport.Table, equipmentport.FieldID, id),
			sqlgraph.To(equipmentportdefinition.Table, equipmentportdefinition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, equipmentport.DefinitionTable, equipmentport.DefinitionColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a EquipmentPort.
func (c *EquipmentPortClient) QueryParent(ep *EquipmentPort) *EquipmentQuery {
	query := &EquipmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentport.Table, equipmentport.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, equipmentport.ParentTable, equipmentport.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLink queries the link edge of a EquipmentPort.
func (c *EquipmentPortClient) QueryLink(ep *EquipmentPort) *LinkQuery {
	query := &LinkQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentport.Table, equipmentport.FieldID, id),
			sqlgraph.To(link.Table, link.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, equipmentport.LinkTable, equipmentport.LinkColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProperties queries the properties edge of a EquipmentPort.
func (c *EquipmentPortClient) QueryProperties(ep *EquipmentPort) *PropertyQuery {
	query := &PropertyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentport.Table, equipmentport.FieldID, id),
			sqlgraph.To(property.Table, property.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, equipmentport.PropertiesTable, equipmentport.PropertiesColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEndpoints queries the endpoints edge of a EquipmentPort.
func (c *EquipmentPortClient) QueryEndpoints(ep *EquipmentPort) *ServiceEndpointQuery {
	query := &ServiceEndpointQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentport.Table, equipmentport.FieldID, id),
			sqlgraph.To(serviceendpoint.Table, serviceendpoint.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, equipmentport.EndpointsTable, equipmentport.EndpointsColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryService queries the service edge of a EquipmentPort.
func (c *EquipmentPortClient) QueryService(ep *EquipmentPort) *ServiceQuery {
	query := &ServiceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentport.Table, equipmentport.FieldID, id),
			sqlgraph.To(service.Table, service.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, equipmentport.ServiceTable, equipmentport.ServicePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EquipmentPortClient) Hooks() []Hook {
	hooks := c.hooks.EquipmentPort
	return append(hooks[:len(hooks):len(hooks)], equipmentport.Hooks[:]...)
}

// EquipmentPortDefinitionClient is a client for the EquipmentPortDefinition schema.
type EquipmentPortDefinitionClient struct {
	config
}

// NewEquipmentPortDefinitionClient returns a client for the EquipmentPortDefinition from the given config.
func NewEquipmentPortDefinitionClient(c config) *EquipmentPortDefinitionClient {
	return &EquipmentPortDefinitionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `equipmentportdefinition.Hooks(f(g(h())))`.
func (c *EquipmentPortDefinitionClient) Use(hooks ...Hook) {
	c.hooks.EquipmentPortDefinition = append(c.hooks.EquipmentPortDefinition, hooks...)
}

// Create returns a create builder for EquipmentPortDefinition.
func (c *EquipmentPortDefinitionClient) Create() *EquipmentPortDefinitionCreate {
	mutation := newEquipmentPortDefinitionMutation(c.config, OpCreate)
	return &EquipmentPortDefinitionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EquipmentPortDefinition entities.
func (c *EquipmentPortDefinitionClient) CreateBulk(builders ...*EquipmentPortDefinitionCreate) *EquipmentPortDefinitionCreateBulk {
	return &EquipmentPortDefinitionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EquipmentPortDefinition.
func (c *EquipmentPortDefinitionClient) Update() *EquipmentPortDefinitionUpdate {
	mutation := newEquipmentPortDefinitionMutation(c.config, OpUpdate)
	return &EquipmentPortDefinitionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EquipmentPortDefinitionClient) UpdateOne(epd *EquipmentPortDefinition) *EquipmentPortDefinitionUpdateOne {
	mutation := newEquipmentPortDefinitionMutation(c.config, OpUpdateOne, withEquipmentPortDefinition(epd))
	return &EquipmentPortDefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EquipmentPortDefinitionClient) UpdateOneID(id int) *EquipmentPortDefinitionUpdateOne {
	mutation := newEquipmentPortDefinitionMutation(c.config, OpUpdateOne, withEquipmentPortDefinitionID(id))
	return &EquipmentPortDefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EquipmentPortDefinition.
func (c *EquipmentPortDefinitionClient) Delete() *EquipmentPortDefinitionDelete {
	mutation := newEquipmentPortDefinitionMutation(c.config, OpDelete)
	return &EquipmentPortDefinitionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EquipmentPortDefinitionClient) DeleteOne(epd *EquipmentPortDefinition) *EquipmentPortDefinitionDeleteOne {
	return c.DeleteOneID(epd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EquipmentPortDefinitionClient) DeleteOneID(id int) *EquipmentPortDefinitionDeleteOne {
	builder := c.Delete().Where(equipmentportdefinition.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EquipmentPortDefinitionDeleteOne{builder}
}

// Query returns a query builder for EquipmentPortDefinition.
func (c *EquipmentPortDefinitionClient) Query() *EquipmentPortDefinitionQuery {
	return &EquipmentPortDefinitionQuery{config: c.config}
}

// Get returns a EquipmentPortDefinition entity by its id.
func (c *EquipmentPortDefinitionClient) Get(ctx context.Context, id int) (*EquipmentPortDefinition, error) {
	return c.Query().Where(equipmentportdefinition.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EquipmentPortDefinitionClient) GetX(ctx context.Context, id int) *EquipmentPortDefinition {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEquipmentPortType queries the equipment_port_type edge of a EquipmentPortDefinition.
func (c *EquipmentPortDefinitionClient) QueryEquipmentPortType(epd *EquipmentPortDefinition) *EquipmentPortTypeQuery {
	query := &EquipmentPortTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := epd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentportdefinition.Table, equipmentportdefinition.FieldID, id),
			sqlgraph.To(equipmentporttype.Table, equipmentporttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, equipmentportdefinition.EquipmentPortTypeTable, equipmentportdefinition.EquipmentPortTypeColumn),
		)
		fromV = sqlgraph.Neighbors(epd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPorts queries the ports edge of a EquipmentPortDefinition.
func (c *EquipmentPortDefinitionClient) QueryPorts(epd *EquipmentPortDefinition) *EquipmentPortQuery {
	query := &EquipmentPortQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := epd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentportdefinition.Table, equipmentportdefinition.FieldID, id),
			sqlgraph.To(equipmentport.Table, equipmentport.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, equipmentportdefinition.PortsTable, equipmentportdefinition.PortsColumn),
		)
		fromV = sqlgraph.Neighbors(epd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipmentType queries the equipment_type edge of a EquipmentPortDefinition.
func (c *EquipmentPortDefinitionClient) QueryEquipmentType(epd *EquipmentPortDefinition) *EquipmentTypeQuery {
	query := &EquipmentTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := epd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentportdefinition.Table, equipmentportdefinition.FieldID, id),
			sqlgraph.To(equipmenttype.Table, equipmenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, equipmentportdefinition.EquipmentTypeTable, equipmentportdefinition.EquipmentTypeColumn),
		)
		fromV = sqlgraph.Neighbors(epd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConnectedPorts queries the connected_ports edge of a EquipmentPortDefinition.
func (c *EquipmentPortDefinitionClient) QueryConnectedPorts(epd *EquipmentPortDefinition) *EquipmentPortDefinitionQuery {
	query := &EquipmentPortDefinitionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := epd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentportdefinition.Table, equipmentportdefinition.FieldID, id),
			sqlgraph.To(equipmentportdefinition.Table, equipmentportdefinition.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, equipmentportdefinition.ConnectedPortsTable, equipmentportdefinition.ConnectedPortsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(epd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EquipmentPortDefinitionClient) Hooks() []Hook {
	hooks := c.hooks.EquipmentPortDefinition
	return append(hooks[:len(hooks):len(hooks)], equipmentportdefinition.Hooks[:]...)
}

// EquipmentPortTypeClient is a client for the EquipmentPortType schema.
type EquipmentPortTypeClient struct {
	config
}

// NewEquipmentPortTypeClient returns a client for the EquipmentPortType from the given config.
func NewEquipmentPortTypeClient(c config) *EquipmentPortTypeClient {
	return &EquipmentPortTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `equipmentporttype.Hooks(f(g(h())))`.
func (c *EquipmentPortTypeClient) Use(hooks ...Hook) {
	c.hooks.EquipmentPortType = append(c.hooks.EquipmentPortType, hooks...)
}

// Create returns a create builder for EquipmentPortType.
func (c *EquipmentPortTypeClient) Create() *EquipmentPortTypeCreate {
	mutation := newEquipmentPortTypeMutation(c.config, OpCreate)
	return &EquipmentPortTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EquipmentPortType entities.
func (c *EquipmentPortTypeClient) CreateBulk(builders ...*EquipmentPortTypeCreate) *EquipmentPortTypeCreateBulk {
	return &EquipmentPortTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EquipmentPortType.
func (c *EquipmentPortTypeClient) Update() *EquipmentPortTypeUpdate {
	mutation := newEquipmentPortTypeMutation(c.config, OpUpdate)
	return &EquipmentPortTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EquipmentPortTypeClient) UpdateOne(ept *EquipmentPortType) *EquipmentPortTypeUpdateOne {
	mutation := newEquipmentPortTypeMutation(c.config, OpUpdateOne, withEquipmentPortType(ept))
	return &EquipmentPortTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EquipmentPortTypeClient) UpdateOneID(id int) *EquipmentPortTypeUpdateOne {
	mutation := newEquipmentPortTypeMutation(c.config, OpUpdateOne, withEquipmentPortTypeID(id))
	return &EquipmentPortTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EquipmentPortType.
func (c *EquipmentPortTypeClient) Delete() *EquipmentPortTypeDelete {
	mutation := newEquipmentPortTypeMutation(c.config, OpDelete)
	return &EquipmentPortTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EquipmentPortTypeClient) DeleteOne(ept *EquipmentPortType) *EquipmentPortTypeDeleteOne {
	return c.DeleteOneID(ept.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EquipmentPortTypeClient) DeleteOneID(id int) *EquipmentPortTypeDeleteOne {
	builder := c.Delete().Where(equipmentporttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EquipmentPortTypeDeleteOne{builder}
}

// Query returns a query builder for EquipmentPortType.
func (c *EquipmentPortTypeClient) Query() *EquipmentPortTypeQuery {
	return &EquipmentPortTypeQuery{config: c.config}
}

// Get returns a EquipmentPortType entity by its id.
func (c *EquipmentPortTypeClient) Get(ctx context.Context, id int) (*EquipmentPortType, error) {
	return c.Query().Where(equipmentporttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EquipmentPortTypeClient) GetX(ctx context.Context, id int) *EquipmentPortType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPropertyTypes queries the property_types edge of a EquipmentPortType.
func (c *EquipmentPortTypeClient) QueryPropertyTypes(ept *EquipmentPortType) *PropertyTypeQuery {
	query := &PropertyTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ept.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentporttype.Table, equipmentporttype.FieldID, id),
			sqlgraph.To(propertytype.Table, propertytype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, equipmentporttype.PropertyTypesTable, equipmentporttype.PropertyTypesColumn),
		)
		fromV = sqlgraph.Neighbors(ept.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLinkPropertyTypes queries the link_property_types edge of a EquipmentPortType.
func (c *EquipmentPortTypeClient) QueryLinkPropertyTypes(ept *EquipmentPortType) *PropertyTypeQuery {
	query := &PropertyTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ept.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentporttype.Table, equipmentporttype.FieldID, id),
			sqlgraph.To(propertytype.Table, propertytype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, equipmentporttype.LinkPropertyTypesTable, equipmentporttype.LinkPropertyTypesColumn),
		)
		fromV = sqlgraph.Neighbors(ept.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPortDefinitions queries the port_definitions edge of a EquipmentPortType.
func (c *EquipmentPortTypeClient) QueryPortDefinitions(ept *EquipmentPortType) *EquipmentPortDefinitionQuery {
	query := &EquipmentPortDefinitionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ept.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentporttype.Table, equipmentporttype.FieldID, id),
			sqlgraph.To(equipmentportdefinition.Table, equipmentportdefinition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, equipmentporttype.PortDefinitionsTable, equipmentporttype.PortDefinitionsColumn),
		)
		fromV = sqlgraph.Neighbors(ept.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EquipmentPortTypeClient) Hooks() []Hook {
	hooks := c.hooks.EquipmentPortType
	return append(hooks[:len(hooks):len(hooks)], equipmentporttype.Hooks[:]...)
}

// EquipmentPositionClient is a client for the EquipmentPosition schema.
type EquipmentPositionClient struct {
	config
}

// NewEquipmentPositionClient returns a client for the EquipmentPosition from the given config.
func NewEquipmentPositionClient(c config) *EquipmentPositionClient {
	return &EquipmentPositionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `equipmentposition.Hooks(f(g(h())))`.
func (c *EquipmentPositionClient) Use(hooks ...Hook) {
	c.hooks.EquipmentPosition = append(c.hooks.EquipmentPosition, hooks...)
}

// Create returns a create builder for EquipmentPosition.
func (c *EquipmentPositionClient) Create() *EquipmentPositionCreate {
	mutation := newEquipmentPositionMutation(c.config, OpCreate)
	return &EquipmentPositionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EquipmentPosition entities.
func (c *EquipmentPositionClient) CreateBulk(builders ...*EquipmentPositionCreate) *EquipmentPositionCreateBulk {
	return &EquipmentPositionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EquipmentPosition.
func (c *EquipmentPositionClient) Update() *EquipmentPositionUpdate {
	mutation := newEquipmentPositionMutation(c.config, OpUpdate)
	return &EquipmentPositionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EquipmentPositionClient) UpdateOne(ep *EquipmentPosition) *EquipmentPositionUpdateOne {
	mutation := newEquipmentPositionMutation(c.config, OpUpdateOne, withEquipmentPosition(ep))
	return &EquipmentPositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EquipmentPositionClient) UpdateOneID(id int) *EquipmentPositionUpdateOne {
	mutation := newEquipmentPositionMutation(c.config, OpUpdateOne, withEquipmentPositionID(id))
	return &EquipmentPositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EquipmentPosition.
func (c *EquipmentPositionClient) Delete() *EquipmentPositionDelete {
	mutation := newEquipmentPositionMutation(c.config, OpDelete)
	return &EquipmentPositionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EquipmentPositionClient) DeleteOne(ep *EquipmentPosition) *EquipmentPositionDeleteOne {
	return c.DeleteOneID(ep.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EquipmentPositionClient) DeleteOneID(id int) *EquipmentPositionDeleteOne {
	builder := c.Delete().Where(equipmentposition.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EquipmentPositionDeleteOne{builder}
}

// Query returns a query builder for EquipmentPosition.
func (c *EquipmentPositionClient) Query() *EquipmentPositionQuery {
	return &EquipmentPositionQuery{config: c.config}
}

// Get returns a EquipmentPosition entity by its id.
func (c *EquipmentPositionClient) Get(ctx context.Context, id int) (*EquipmentPosition, error) {
	return c.Query().Where(equipmentposition.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EquipmentPositionClient) GetX(ctx context.Context, id int) *EquipmentPosition {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDefinition queries the definition edge of a EquipmentPosition.
func (c *EquipmentPositionClient) QueryDefinition(ep *EquipmentPosition) *EquipmentPositionDefinitionQuery {
	query := &EquipmentPositionDefinitionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentposition.Table, equipmentposition.FieldID, id),
			sqlgraph.To(equipmentpositiondefinition.Table, equipmentpositiondefinition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, equipmentposition.DefinitionTable, equipmentposition.DefinitionColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a EquipmentPosition.
func (c *EquipmentPositionClient) QueryParent(ep *EquipmentPosition) *EquipmentQuery {
	query := &EquipmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentposition.Table, equipmentposition.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, equipmentposition.ParentTable, equipmentposition.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAttachment queries the attachment edge of a EquipmentPosition.
func (c *EquipmentPositionClient) QueryAttachment(ep *EquipmentPosition) *EquipmentQuery {
	query := &EquipmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentposition.Table, equipmentposition.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, equipmentposition.AttachmentTable, equipmentposition.AttachmentColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EquipmentPositionClient) Hooks() []Hook {
	hooks := c.hooks.EquipmentPosition
	return append(hooks[:len(hooks):len(hooks)], equipmentposition.Hooks[:]...)
}

// EquipmentPositionDefinitionClient is a client for the EquipmentPositionDefinition schema.
type EquipmentPositionDefinitionClient struct {
	config
}

// NewEquipmentPositionDefinitionClient returns a client for the EquipmentPositionDefinition from the given config.
func NewEquipmentPositionDefinitionClient(c config) *EquipmentPositionDefinitionClient {
	return &EquipmentPositionDefinitionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `equipmentpositiondefinition.Hooks(f(g(h())))`.
func (c *EquipmentPositionDefinitionClient) Use(hooks ...Hook) {
	c.hooks.EquipmentPositionDefinition = append(c.hooks.EquipmentPositionDefinition, hooks...)
}

// Create returns a create builder for EquipmentPositionDefinition.
func (c *EquipmentPositionDefinitionClient) Create() *EquipmentPositionDefinitionCreate {
	mutation := newEquipmentPositionDefinitionMutation(c.config, OpCreate)
	return &EquipmentPositionDefinitionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EquipmentPositionDefinition entities.
func (c *EquipmentPositionDefinitionClient) CreateBulk(builders ...*EquipmentPositionDefinitionCreate) *EquipmentPositionDefinitionCreateBulk {
	return &EquipmentPositionDefinitionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EquipmentPositionDefinition.
func (c *EquipmentPositionDefinitionClient) Update() *EquipmentPositionDefinitionUpdate {
	mutation := newEquipmentPositionDefinitionMutation(c.config, OpUpdate)
	return &EquipmentPositionDefinitionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EquipmentPositionDefinitionClient) UpdateOne(epd *EquipmentPositionDefinition) *EquipmentPositionDefinitionUpdateOne {
	mutation := newEquipmentPositionDefinitionMutation(c.config, OpUpdateOne, withEquipmentPositionDefinition(epd))
	return &EquipmentPositionDefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EquipmentPositionDefinitionClient) UpdateOneID(id int) *EquipmentPositionDefinitionUpdateOne {
	mutation := newEquipmentPositionDefinitionMutation(c.config, OpUpdateOne, withEquipmentPositionDefinitionID(id))
	return &EquipmentPositionDefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EquipmentPositionDefinition.
func (c *EquipmentPositionDefinitionClient) Delete() *EquipmentPositionDefinitionDelete {
	mutation := newEquipmentPositionDefinitionMutation(c.config, OpDelete)
	return &EquipmentPositionDefinitionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EquipmentPositionDefinitionClient) DeleteOne(epd *EquipmentPositionDefinition) *EquipmentPositionDefinitionDeleteOne {
	return c.DeleteOneID(epd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EquipmentPositionDefinitionClient) DeleteOneID(id int) *EquipmentPositionDefinitionDeleteOne {
	builder := c.Delete().Where(equipmentpositiondefinition.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EquipmentPositionDefinitionDeleteOne{builder}
}

// Query returns a query builder for EquipmentPositionDefinition.
func (c *EquipmentPositionDefinitionClient) Query() *EquipmentPositionDefinitionQuery {
	return &EquipmentPositionDefinitionQuery{config: c.config}
}

// Get returns a EquipmentPositionDefinition entity by its id.
func (c *EquipmentPositionDefinitionClient) Get(ctx context.Context, id int) (*EquipmentPositionDefinition, error) {
	return c.Query().Where(equipmentpositiondefinition.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EquipmentPositionDefinitionClient) GetX(ctx context.Context, id int) *EquipmentPositionDefinition {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPositions queries the positions edge of a EquipmentPositionDefinition.
func (c *EquipmentPositionDefinitionClient) QueryPositions(epd *EquipmentPositionDefinition) *EquipmentPositionQuery {
	query := &EquipmentPositionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := epd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentpositiondefinition.Table, equipmentpositiondefinition.FieldID, id),
			sqlgraph.To(equipmentposition.Table, equipmentposition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, equipmentpositiondefinition.PositionsTable, equipmentpositiondefinition.PositionsColumn),
		)
		fromV = sqlgraph.Neighbors(epd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipmentType queries the equipment_type edge of a EquipmentPositionDefinition.
func (c *EquipmentPositionDefinitionClient) QueryEquipmentType(epd *EquipmentPositionDefinition) *EquipmentTypeQuery {
	query := &EquipmentTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := epd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmentpositiondefinition.Table, equipmentpositiondefinition.FieldID, id),
			sqlgraph.To(equipmenttype.Table, equipmenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, equipmentpositiondefinition.EquipmentTypeTable, equipmentpositiondefinition.EquipmentTypeColumn),
		)
		fromV = sqlgraph.Neighbors(epd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EquipmentPositionDefinitionClient) Hooks() []Hook {
	hooks := c.hooks.EquipmentPositionDefinition
	return append(hooks[:len(hooks):len(hooks)], equipmentpositiondefinition.Hooks[:]...)
}

// EquipmentTypeClient is a client for the EquipmentType schema.
type EquipmentTypeClient struct {
	config
}

// NewEquipmentTypeClient returns a client for the EquipmentType from the given config.
func NewEquipmentTypeClient(c config) *EquipmentTypeClient {
	return &EquipmentTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `equipmenttype.Hooks(f(g(h())))`.
func (c *EquipmentTypeClient) Use(hooks ...Hook) {
	c.hooks.EquipmentType = append(c.hooks.EquipmentType, hooks...)
}

// Create returns a create builder for EquipmentType.
func (c *EquipmentTypeClient) Create() *EquipmentTypeCreate {
	mutation := newEquipmentTypeMutation(c.config, OpCreate)
	return &EquipmentTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EquipmentType entities.
func (c *EquipmentTypeClient) CreateBulk(builders ...*EquipmentTypeCreate) *EquipmentTypeCreateBulk {
	return &EquipmentTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EquipmentType.
func (c *EquipmentTypeClient) Update() *EquipmentTypeUpdate {
	mutation := newEquipmentTypeMutation(c.config, OpUpdate)
	return &EquipmentTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EquipmentTypeClient) UpdateOne(et *EquipmentType) *EquipmentTypeUpdateOne {
	mutation := newEquipmentTypeMutation(c.config, OpUpdateOne, withEquipmentType(et))
	return &EquipmentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EquipmentTypeClient) UpdateOneID(id int) *EquipmentTypeUpdateOne {
	mutation := newEquipmentTypeMutation(c.config, OpUpdateOne, withEquipmentTypeID(id))
	return &EquipmentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EquipmentType.
func (c *EquipmentTypeClient) Delete() *EquipmentTypeDelete {
	mutation := newEquipmentTypeMutation(c.config, OpDelete)
	return &EquipmentTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EquipmentTypeClient) DeleteOne(et *EquipmentType) *EquipmentTypeDeleteOne {
	return c.DeleteOneID(et.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EquipmentTypeClient) DeleteOneID(id int) *EquipmentTypeDeleteOne {
	builder := c.Delete().Where(equipmenttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EquipmentTypeDeleteOne{builder}
}

// Query returns a query builder for EquipmentType.
func (c *EquipmentTypeClient) Query() *EquipmentTypeQuery {
	return &EquipmentTypeQuery{config: c.config}
}

// Get returns a EquipmentType entity by its id.
func (c *EquipmentTypeClient) Get(ctx context.Context, id int) (*EquipmentType, error) {
	return c.Query().Where(equipmenttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EquipmentTypeClient) GetX(ctx context.Context, id int) *EquipmentType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPortDefinitions queries the port_definitions edge of a EquipmentType.
func (c *EquipmentTypeClient) QueryPortDefinitions(et *EquipmentType) *EquipmentPortDefinitionQuery {
	query := &EquipmentPortDefinitionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmenttype.Table, equipmenttype.FieldID, id),
			sqlgraph.To(equipmentportdefinition.Table, equipmentportdefinition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, equipmenttype.PortDefinitionsTable, equipmenttype.PortDefinitionsColumn),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPositionDefinitions queries the position_definitions edge of a EquipmentType.
func (c *EquipmentTypeClient) QueryPositionDefinitions(et *EquipmentType) *EquipmentPositionDefinitionQuery {
	query := &EquipmentPositionDefinitionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmenttype.Table, equipmenttype.FieldID, id),
			sqlgraph.To(equipmentpositiondefinition.Table, equipmentpositiondefinition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, equipmenttype.PositionDefinitionsTable, equipmenttype.PositionDefinitionsColumn),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPropertyTypes queries the property_types edge of a EquipmentType.
func (c *EquipmentTypeClient) QueryPropertyTypes(et *EquipmentType) *PropertyTypeQuery {
	query := &PropertyTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmenttype.Table, equipmenttype.FieldID, id),
			sqlgraph.To(propertytype.Table, propertytype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, equipmenttype.PropertyTypesTable, equipmenttype.PropertyTypesColumn),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipment queries the equipment edge of a EquipmentType.
func (c *EquipmentTypeClient) QueryEquipment(et *EquipmentType) *EquipmentQuery {
	query := &EquipmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmenttype.Table, equipmenttype.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, equipmenttype.EquipmentTable, equipmenttype.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCategory queries the category edge of a EquipmentType.
func (c *EquipmentTypeClient) QueryCategory(et *EquipmentType) *EquipmentCategoryQuery {
	query := &EquipmentCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmenttype.Table, equipmenttype.FieldID, id),
			sqlgraph.To(equipmentcategory.Table, equipmentcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, equipmenttype.CategoryTable, equipmenttype.CategoryColumn),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryServiceEndpointDefinitions queries the service_endpoint_definitions edge of a EquipmentType.
func (c *EquipmentTypeClient) QueryServiceEndpointDefinitions(et *EquipmentType) *ServiceEndpointDefinitionQuery {
	query := &ServiceEndpointDefinitionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(equipmenttype.Table, equipmenttype.FieldID, id),
			sqlgraph.To(serviceendpointdefinition.Table, serviceendpointdefinition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, equipmenttype.ServiceEndpointDefinitionsTable, equipmenttype.ServiceEndpointDefinitionsColumn),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EquipmentTypeClient) Hooks() []Hook {
	hooks := c.hooks.EquipmentType
	return append(hooks[:len(hooks):len(hooks)], equipmenttype.Hooks[:]...)
}

// EventSeverityClient is a client for the EventSeverity schema.
type EventSeverityClient struct {
	config
}

// NewEventSeverityClient returns a client for the EventSeverity from the given config.
func NewEventSeverityClient(c config) *EventSeverityClient {
	return &EventSeverityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `eventseverity.Hooks(f(g(h())))`.
func (c *EventSeverityClient) Use(hooks ...Hook) {
	c.hooks.EventSeverity = append(c.hooks.EventSeverity, hooks...)
}

// Create returns a create builder for EventSeverity.
func (c *EventSeverityClient) Create() *EventSeverityCreate {
	mutation := newEventSeverityMutation(c.config, OpCreate)
	return &EventSeverityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EventSeverity entities.
func (c *EventSeverityClient) CreateBulk(builders ...*EventSeverityCreate) *EventSeverityCreateBulk {
	return &EventSeverityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EventSeverity.
func (c *EventSeverityClient) Update() *EventSeverityUpdate {
	mutation := newEventSeverityMutation(c.config, OpUpdate)
	return &EventSeverityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EventSeverityClient) UpdateOne(es *EventSeverity) *EventSeverityUpdateOne {
	mutation := newEventSeverityMutation(c.config, OpUpdateOne, withEventSeverity(es))
	return &EventSeverityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EventSeverityClient) UpdateOneID(id int) *EventSeverityUpdateOne {
	mutation := newEventSeverityMutation(c.config, OpUpdateOne, withEventSeverityID(id))
	return &EventSeverityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EventSeverity.
func (c *EventSeverityClient) Delete() *EventSeverityDelete {
	mutation := newEventSeverityMutation(c.config, OpDelete)
	return &EventSeverityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EventSeverityClient) DeleteOne(es *EventSeverity) *EventSeverityDeleteOne {
	return c.DeleteOneID(es.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EventSeverityClient) DeleteOneID(id int) *EventSeverityDeleteOne {
	builder := c.Delete().Where(eventseverity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EventSeverityDeleteOne{builder}
}

// Query returns a query builder for EventSeverity.
func (c *EventSeverityClient) Query() *EventSeverityQuery {
	return &EventSeverityQuery{config: c.config}
}

// Get returns a EventSeverity entity by its id.
func (c *EventSeverityClient) Get(ctx context.Context, id int) (*EventSeverity, error) {
	return c.Query().Where(eventseverity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EventSeverityClient) GetX(ctx context.Context, id int) *EventSeverity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEventseverityrule queries the eventseverityrule edge of a EventSeverity.
func (c *EventSeverityClient) QueryEventseverityrule(es *EventSeverity) *RuleQuery {
	query := &RuleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := es.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(eventseverity.Table, eventseverity.FieldID, id),
			sqlgraph.To(rule.Table, rule.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, eventseverity.EventseverityruleTable, eventseverity.EventseverityruleColumn),
		)
		fromV = sqlgraph.Neighbors(es.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EventSeverityClient) Hooks() []Hook {
	hooks := c.hooks.EventSeverity
	return append(hooks[:len(hooks):len(hooks)], eventseverity.Hooks[:]...)
}

// ExitPointClient is a client for the ExitPoint schema.
type ExitPointClient struct {
	config
}

// NewExitPointClient returns a client for the ExitPoint from the given config.
func NewExitPointClient(c config) *ExitPointClient {
	return &ExitPointClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `exitpoint.Hooks(f(g(h())))`.
func (c *ExitPointClient) Use(hooks ...Hook) {
	c.hooks.ExitPoint = append(c.hooks.ExitPoint, hooks...)
}

// Create returns a create builder for ExitPoint.
func (c *ExitPointClient) Create() *ExitPointCreate {
	mutation := newExitPointMutation(c.config, OpCreate)
	return &ExitPointCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExitPoint entities.
func (c *ExitPointClient) CreateBulk(builders ...*ExitPointCreate) *ExitPointCreateBulk {
	return &ExitPointCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExitPoint.
func (c *ExitPointClient) Update() *ExitPointUpdate {
	mutation := newExitPointMutation(c.config, OpUpdate)
	return &ExitPointUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExitPointClient) UpdateOne(ep *ExitPoint) *ExitPointUpdateOne {
	mutation := newExitPointMutation(c.config, OpUpdateOne, withExitPoint(ep))
	return &ExitPointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExitPointClient) UpdateOneID(id int) *ExitPointUpdateOne {
	mutation := newExitPointMutation(c.config, OpUpdateOne, withExitPointID(id))
	return &ExitPointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExitPoint.
func (c *ExitPointClient) Delete() *ExitPointDelete {
	mutation := newExitPointMutation(c.config, OpDelete)
	return &ExitPointDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ExitPointClient) DeleteOne(ep *ExitPoint) *ExitPointDeleteOne {
	return c.DeleteOneID(ep.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ExitPointClient) DeleteOneID(id int) *ExitPointDeleteOne {
	builder := c.Delete().Where(exitpoint.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExitPointDeleteOne{builder}
}

// Query returns a query builder for ExitPoint.
func (c *ExitPointClient) Query() *ExitPointQuery {
	return &ExitPointQuery{config: c.config}
}

// Get returns a ExitPoint entity by its id.
func (c *ExitPointClient) Get(ctx context.Context, id int) (*ExitPoint, error) {
	return c.Query().Where(exitpoint.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExitPointClient) GetX(ctx context.Context, id int) *ExitPoint {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNextEntryPoints queries the next_entry_points edge of a ExitPoint.
func (c *ExitPointClient) QueryNextEntryPoints(ep *ExitPoint) *EntryPointQuery {
	query := &EntryPointQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exitpoint.Table, exitpoint.FieldID, id),
			sqlgraph.To(entrypoint.Table, entrypoint.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, exitpoint.NextEntryPointsTable, exitpoint.NextEntryPointsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParentBlock queries the parent_block edge of a ExitPoint.
func (c *ExitPointClient) QueryParentBlock(ep *ExitPoint) *BlockQuery {
	query := &BlockQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exitpoint.Table, exitpoint.FieldID, id),
			sqlgraph.To(block.Table, block.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exitpoint.ParentBlockTable, exitpoint.ParentBlockColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExitPointClient) Hooks() []Hook {
	hooks := c.hooks.ExitPoint
	return append(hooks[:len(hooks):len(hooks)], exitpoint.Hooks[:]...)
}

// ExportTaskClient is a client for the ExportTask schema.
type ExportTaskClient struct {
	config
}

// NewExportTaskClient returns a client for the ExportTask from the given config.
func NewExportTaskClient(c config) *ExportTaskClient {
	return &ExportTaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `exporttask.Hooks(f(g(h())))`.
func (c *ExportTaskClient) Use(hooks ...Hook) {
	c.hooks.ExportTask = append(c.hooks.ExportTask, hooks...)
}

// Create returns a create builder for ExportTask.
func (c *ExportTaskClient) Create() *ExportTaskCreate {
	mutation := newExportTaskMutation(c.config, OpCreate)
	return &ExportTaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExportTask entities.
func (c *ExportTaskClient) CreateBulk(builders ...*ExportTaskCreate) *ExportTaskCreateBulk {
	return &ExportTaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExportTask.
func (c *ExportTaskClient) Update() *ExportTaskUpdate {
	mutation := newExportTaskMutation(c.config, OpUpdate)
	return &ExportTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExportTaskClient) UpdateOne(et *ExportTask) *ExportTaskUpdateOne {
	mutation := newExportTaskMutation(c.config, OpUpdateOne, withExportTask(et))
	return &ExportTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExportTaskClient) UpdateOneID(id int) *ExportTaskUpdateOne {
	mutation := newExportTaskMutation(c.config, OpUpdateOne, withExportTaskID(id))
	return &ExportTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExportTask.
func (c *ExportTaskClient) Delete() *ExportTaskDelete {
	mutation := newExportTaskMutation(c.config, OpDelete)
	return &ExportTaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ExportTaskClient) DeleteOne(et *ExportTask) *ExportTaskDeleteOne {
	return c.DeleteOneID(et.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ExportTaskClient) DeleteOneID(id int) *ExportTaskDeleteOne {
	builder := c.Delete().Where(exporttask.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExportTaskDeleteOne{builder}
}

// Query returns a query builder for ExportTask.
func (c *ExportTaskClient) Query() *ExportTaskQuery {
	return &ExportTaskQuery{config: c.config}
}

// Get returns a ExportTask entity by its id.
func (c *ExportTaskClient) Get(ctx context.Context, id int) (*ExportTask, error) {
	return c.Query().Where(exporttask.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExportTaskClient) GetX(ctx context.Context, id int) *ExportTask {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ExportTaskClient) Hooks() []Hook {
	hooks := c.hooks.ExportTask
	return append(hooks[:len(hooks):len(hooks)], exporttask.Hooks[:]...)
}

// FeatureClient is a client for the Feature schema.
type FeatureClient struct {
	config
}

// NewFeatureClient returns a client for the Feature from the given config.
func NewFeatureClient(c config) *FeatureClient {
	return &FeatureClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feature.Hooks(f(g(h())))`.
func (c *FeatureClient) Use(hooks ...Hook) {
	c.hooks.Feature = append(c.hooks.Feature, hooks...)
}

// Create returns a create builder for Feature.
func (c *FeatureClient) Create() *FeatureCreate {
	mutation := newFeatureMutation(c.config, OpCreate)
	return &FeatureCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Feature entities.
func (c *FeatureClient) CreateBulk(builders ...*FeatureCreate) *FeatureCreateBulk {
	return &FeatureCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Feature.
func (c *FeatureClient) Update() *FeatureUpdate {
	mutation := newFeatureMutation(c.config, OpUpdate)
	return &FeatureUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeatureClient) UpdateOne(f *Feature) *FeatureUpdateOne {
	mutation := newFeatureMutation(c.config, OpUpdateOne, withFeature(f))
	return &FeatureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeatureClient) UpdateOneID(id int) *FeatureUpdateOne {
	mutation := newFeatureMutation(c.config, OpUpdateOne, withFeatureID(id))
	return &FeatureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Feature.
func (c *FeatureClient) Delete() *FeatureDelete {
	mutation := newFeatureMutation(c.config, OpDelete)
	return &FeatureDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FeatureClient) DeleteOne(f *Feature) *FeatureDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FeatureClient) DeleteOneID(id int) *FeatureDeleteOne {
	builder := c.Delete().Where(feature.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeatureDeleteOne{builder}
}

// Query returns a query builder for Feature.
func (c *FeatureClient) Query() *FeatureQuery {
	return &FeatureQuery{config: c.config}
}

// Get returns a Feature entity by its id.
func (c *FeatureClient) Get(ctx context.Context, id int) (*Feature, error) {
	return c.Query().Where(feature.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeatureClient) GetX(ctx context.Context, id int) *Feature {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Feature.
func (c *FeatureClient) QueryUsers(f *Feature) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feature.Table, feature.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, feature.UsersTable, feature.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroups queries the groups edge of a Feature.
func (c *FeatureClient) QueryGroups(f *Feature) *UsersGroupQuery {
	query := &UsersGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feature.Table, feature.FieldID, id),
			sqlgraph.To(usersgroup.Table, usersgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, feature.GroupsTable, feature.GroupsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FeatureClient) Hooks() []Hook {
	hooks := c.hooks.Feature
	return append(hooks[:len(hooks):len(hooks)], feature.Hooks[:]...)
}

// FileClient is a client for the File schema.
type FileClient struct {
	config
}

// NewFileClient returns a client for the File from the given config.
func NewFileClient(c config) *FileClient {
	return &FileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `file.Hooks(f(g(h())))`.
func (c *FileClient) Use(hooks ...Hook) {
	c.hooks.File = append(c.hooks.File, hooks...)
}

// Create returns a create builder for File.
func (c *FileClient) Create() *FileCreate {
	mutation := newFileMutation(c.config, OpCreate)
	return &FileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of File entities.
func (c *FileClient) CreateBulk(builders ...*FileCreate) *FileCreateBulk {
	return &FileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for File.
func (c *FileClient) Update() *FileUpdate {
	mutation := newFileMutation(c.config, OpUpdate)
	return &FileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FileClient) UpdateOne(f *File) *FileUpdateOne {
	mutation := newFileMutation(c.config, OpUpdateOne, withFile(f))
	return &FileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FileClient) UpdateOneID(id int) *FileUpdateOne {
	mutation := newFileMutation(c.config, OpUpdateOne, withFileID(id))
	return &FileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for File.
func (c *FileClient) Delete() *FileDelete {
	mutation := newFileMutation(c.config, OpDelete)
	return &FileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FileClient) DeleteOne(f *File) *FileDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FileClient) DeleteOneID(id int) *FileDeleteOne {
	builder := c.Delete().Where(file.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FileDeleteOne{builder}
}

// Query returns a query builder for File.
func (c *FileClient) Query() *FileQuery {
	return &FileQuery{config: c.config}
}

// Get returns a File entity by its id.
func (c *FileClient) Get(ctx context.Context, id int) (*File, error) {
	return c.Query().Where(file.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FileClient) GetX(ctx context.Context, id int) *File {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLocation queries the location edge of a File.
func (c *FileClient) QueryLocation(f *File) *LocationQuery {
	query := &LocationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, file.LocationTable, file.LocationColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipment queries the equipment edge of a File.
func (c *FileClient) QueryEquipment(f *File) *EquipmentQuery {
	query := &EquipmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, file.EquipmentTable, file.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a File.
func (c *FileClient) QueryUser(f *File) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, file.UserTable, file.UserColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkOrder queries the work_order edge of a File.
func (c *FileClient) QueryWorkOrder(f *File) *WorkOrderQuery {
	query := &WorkOrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, id),
			sqlgraph.To(workorder.Table, workorder.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, file.WorkOrderTable, file.WorkOrderColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChecklistItem queries the checklist_item edge of a File.
func (c *FileClient) QueryChecklistItem(f *File) *CheckListItemQuery {
	query := &CheckListItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, id),
			sqlgraph.To(checklistitem.Table, checklistitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, file.ChecklistItemTable, file.ChecklistItemColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySurvey queries the survey edge of a File.
func (c *FileClient) QuerySurvey(f *File) *SurveyQuery {
	query := &SurveyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, id),
			sqlgraph.To(survey.Table, survey.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, file.SurveyTable, file.SurveyColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFloorPlan queries the floor_plan edge of a File.
func (c *FileClient) QueryFloorPlan(f *File) *FloorPlanQuery {
	query := &FloorPlanQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, id),
			sqlgraph.To(floorplan.Table, floorplan.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, file.FloorPlanTable, file.FloorPlanColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPhotoSurveyQuestion queries the photo_survey_question edge of a File.
func (c *FileClient) QueryPhotoSurveyQuestion(f *File) *SurveyQuestionQuery {
	query := &SurveyQuestionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, id),
			sqlgraph.To(surveyquestion.Table, surveyquestion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, file.PhotoSurveyQuestionTable, file.PhotoSurveyQuestionColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySurveyQuestion queries the survey_question edge of a File.
func (c *FileClient) QuerySurveyQuestion(f *File) *SurveyQuestionQuery {
	query := &SurveyQuestionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, id),
			sqlgraph.To(surveyquestion.Table, surveyquestion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, file.SurveyQuestionTable, file.SurveyQuestionColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDocumentCategory queries the document_category edge of a File.
func (c *FileClient) QueryDocumentCategory(f *File) *DocumentCategoryQuery {
	query := &DocumentCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, id),
			sqlgraph.To(documentcategory.Table, documentcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, file.DocumentCategoryTable, file.DocumentCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FileClient) Hooks() []Hook {
	hooks := c.hooks.File
	return append(hooks[:len(hooks):len(hooks)], file.Hooks[:]...)
}

// FloorPlanClient is a client for the FloorPlan schema.
type FloorPlanClient struct {
	config
}

// NewFloorPlanClient returns a client for the FloorPlan from the given config.
func NewFloorPlanClient(c config) *FloorPlanClient {
	return &FloorPlanClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `floorplan.Hooks(f(g(h())))`.
func (c *FloorPlanClient) Use(hooks ...Hook) {
	c.hooks.FloorPlan = append(c.hooks.FloorPlan, hooks...)
}

// Create returns a create builder for FloorPlan.
func (c *FloorPlanClient) Create() *FloorPlanCreate {
	mutation := newFloorPlanMutation(c.config, OpCreate)
	return &FloorPlanCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FloorPlan entities.
func (c *FloorPlanClient) CreateBulk(builders ...*FloorPlanCreate) *FloorPlanCreateBulk {
	return &FloorPlanCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FloorPlan.
func (c *FloorPlanClient) Update() *FloorPlanUpdate {
	mutation := newFloorPlanMutation(c.config, OpUpdate)
	return &FloorPlanUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FloorPlanClient) UpdateOne(fp *FloorPlan) *FloorPlanUpdateOne {
	mutation := newFloorPlanMutation(c.config, OpUpdateOne, withFloorPlan(fp))
	return &FloorPlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FloorPlanClient) UpdateOneID(id int) *FloorPlanUpdateOne {
	mutation := newFloorPlanMutation(c.config, OpUpdateOne, withFloorPlanID(id))
	return &FloorPlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FloorPlan.
func (c *FloorPlanClient) Delete() *FloorPlanDelete {
	mutation := newFloorPlanMutation(c.config, OpDelete)
	return &FloorPlanDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FloorPlanClient) DeleteOne(fp *FloorPlan) *FloorPlanDeleteOne {
	return c.DeleteOneID(fp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FloorPlanClient) DeleteOneID(id int) *FloorPlanDeleteOne {
	builder := c.Delete().Where(floorplan.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FloorPlanDeleteOne{builder}
}

// Query returns a query builder for FloorPlan.
func (c *FloorPlanClient) Query() *FloorPlanQuery {
	return &FloorPlanQuery{config: c.config}
}

// Get returns a FloorPlan entity by its id.
func (c *FloorPlanClient) Get(ctx context.Context, id int) (*FloorPlan, error) {
	return c.Query().Where(floorplan.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FloorPlanClient) GetX(ctx context.Context, id int) *FloorPlan {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLocation queries the location edge of a FloorPlan.
func (c *FloorPlanClient) QueryLocation(fp *FloorPlan) *LocationQuery {
	query := &LocationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(floorplan.Table, floorplan.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, floorplan.LocationTable, floorplan.LocationColumn),
		)
		fromV = sqlgraph.Neighbors(fp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReferencePoint queries the reference_point edge of a FloorPlan.
func (c *FloorPlanClient) QueryReferencePoint(fp *FloorPlan) *FloorPlanReferencePointQuery {
	query := &FloorPlanReferencePointQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(floorplan.Table, floorplan.FieldID, id),
			sqlgraph.To(floorplanreferencepoint.Table, floorplanreferencepoint.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, floorplan.ReferencePointTable, floorplan.ReferencePointColumn),
		)
		fromV = sqlgraph.Neighbors(fp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryScale queries the scale edge of a FloorPlan.
func (c *FloorPlanClient) QueryScale(fp *FloorPlan) *FloorPlanScaleQuery {
	query := &FloorPlanScaleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(floorplan.Table, floorplan.FieldID, id),
			sqlgraph.To(floorplanscale.Table, floorplanscale.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, floorplan.ScaleTable, floorplan.ScaleColumn),
		)
		fromV = sqlgraph.Neighbors(fp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryImage queries the image edge of a FloorPlan.
func (c *FloorPlanClient) QueryImage(fp *FloorPlan) *FileQuery {
	query := &FileQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(floorplan.Table, floorplan.FieldID, id),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, floorplan.ImageTable, floorplan.ImageColumn),
		)
		fromV = sqlgraph.Neighbors(fp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FloorPlanClient) Hooks() []Hook {
	hooks := c.hooks.FloorPlan
	return append(hooks[:len(hooks):len(hooks)], floorplan.Hooks[:]...)
}

// FloorPlanReferencePointClient is a client for the FloorPlanReferencePoint schema.
type FloorPlanReferencePointClient struct {
	config
}

// NewFloorPlanReferencePointClient returns a client for the FloorPlanReferencePoint from the given config.
func NewFloorPlanReferencePointClient(c config) *FloorPlanReferencePointClient {
	return &FloorPlanReferencePointClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `floorplanreferencepoint.Hooks(f(g(h())))`.
func (c *FloorPlanReferencePointClient) Use(hooks ...Hook) {
	c.hooks.FloorPlanReferencePoint = append(c.hooks.FloorPlanReferencePoint, hooks...)
}

// Create returns a create builder for FloorPlanReferencePoint.
func (c *FloorPlanReferencePointClient) Create() *FloorPlanReferencePointCreate {
	mutation := newFloorPlanReferencePointMutation(c.config, OpCreate)
	return &FloorPlanReferencePointCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FloorPlanReferencePoint entities.
func (c *FloorPlanReferencePointClient) CreateBulk(builders ...*FloorPlanReferencePointCreate) *FloorPlanReferencePointCreateBulk {
	return &FloorPlanReferencePointCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FloorPlanReferencePoint.
func (c *FloorPlanReferencePointClient) Update() *FloorPlanReferencePointUpdate {
	mutation := newFloorPlanReferencePointMutation(c.config, OpUpdate)
	return &FloorPlanReferencePointUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FloorPlanReferencePointClient) UpdateOne(fprp *FloorPlanReferencePoint) *FloorPlanReferencePointUpdateOne {
	mutation := newFloorPlanReferencePointMutation(c.config, OpUpdateOne, withFloorPlanReferencePoint(fprp))
	return &FloorPlanReferencePointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FloorPlanReferencePointClient) UpdateOneID(id int) *FloorPlanReferencePointUpdateOne {
	mutation := newFloorPlanReferencePointMutation(c.config, OpUpdateOne, withFloorPlanReferencePointID(id))
	return &FloorPlanReferencePointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FloorPlanReferencePoint.
func (c *FloorPlanReferencePointClient) Delete() *FloorPlanReferencePointDelete {
	mutation := newFloorPlanReferencePointMutation(c.config, OpDelete)
	return &FloorPlanReferencePointDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FloorPlanReferencePointClient) DeleteOne(fprp *FloorPlanReferencePoint) *FloorPlanReferencePointDeleteOne {
	return c.DeleteOneID(fprp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FloorPlanReferencePointClient) DeleteOneID(id int) *FloorPlanReferencePointDeleteOne {
	builder := c.Delete().Where(floorplanreferencepoint.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FloorPlanReferencePointDeleteOne{builder}
}

// Query returns a query builder for FloorPlanReferencePoint.
func (c *FloorPlanReferencePointClient) Query() *FloorPlanReferencePointQuery {
	return &FloorPlanReferencePointQuery{config: c.config}
}

// Get returns a FloorPlanReferencePoint entity by its id.
func (c *FloorPlanReferencePointClient) Get(ctx context.Context, id int) (*FloorPlanReferencePoint, error) {
	return c.Query().Where(floorplanreferencepoint.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FloorPlanReferencePointClient) GetX(ctx context.Context, id int) *FloorPlanReferencePoint {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FloorPlanReferencePointClient) Hooks() []Hook {
	hooks := c.hooks.FloorPlanReferencePoint
	return append(hooks[:len(hooks):len(hooks)], floorplanreferencepoint.Hooks[:]...)
}

// FloorPlanScaleClient is a client for the FloorPlanScale schema.
type FloorPlanScaleClient struct {
	config
}

// NewFloorPlanScaleClient returns a client for the FloorPlanScale from the given config.
func NewFloorPlanScaleClient(c config) *FloorPlanScaleClient {
	return &FloorPlanScaleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `floorplanscale.Hooks(f(g(h())))`.
func (c *FloorPlanScaleClient) Use(hooks ...Hook) {
	c.hooks.FloorPlanScale = append(c.hooks.FloorPlanScale, hooks...)
}

// Create returns a create builder for FloorPlanScale.
func (c *FloorPlanScaleClient) Create() *FloorPlanScaleCreate {
	mutation := newFloorPlanScaleMutation(c.config, OpCreate)
	return &FloorPlanScaleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FloorPlanScale entities.
func (c *FloorPlanScaleClient) CreateBulk(builders ...*FloorPlanScaleCreate) *FloorPlanScaleCreateBulk {
	return &FloorPlanScaleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FloorPlanScale.
func (c *FloorPlanScaleClient) Update() *FloorPlanScaleUpdate {
	mutation := newFloorPlanScaleMutation(c.config, OpUpdate)
	return &FloorPlanScaleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FloorPlanScaleClient) UpdateOne(fps *FloorPlanScale) *FloorPlanScaleUpdateOne {
	mutation := newFloorPlanScaleMutation(c.config, OpUpdateOne, withFloorPlanScale(fps))
	return &FloorPlanScaleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FloorPlanScaleClient) UpdateOneID(id int) *FloorPlanScaleUpdateOne {
	mutation := newFloorPlanScaleMutation(c.config, OpUpdateOne, withFloorPlanScaleID(id))
	return &FloorPlanScaleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FloorPlanScale.
func (c *FloorPlanScaleClient) Delete() *FloorPlanScaleDelete {
	mutation := newFloorPlanScaleMutation(c.config, OpDelete)
	return &FloorPlanScaleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FloorPlanScaleClient) DeleteOne(fps *FloorPlanScale) *FloorPlanScaleDeleteOne {
	return c.DeleteOneID(fps.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FloorPlanScaleClient) DeleteOneID(id int) *FloorPlanScaleDeleteOne {
	builder := c.Delete().Where(floorplanscale.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FloorPlanScaleDeleteOne{builder}
}

// Query returns a query builder for FloorPlanScale.
func (c *FloorPlanScaleClient) Query() *FloorPlanScaleQuery {
	return &FloorPlanScaleQuery{config: c.config}
}

// Get returns a FloorPlanScale entity by its id.
func (c *FloorPlanScaleClient) Get(ctx context.Context, id int) (*FloorPlanScale, error) {
	return c.Query().Where(floorplanscale.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FloorPlanScaleClient) GetX(ctx context.Context, id int) *FloorPlanScale {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FloorPlanScaleClient) Hooks() []Hook {
	hooks := c.hooks.FloorPlanScale
	return append(hooks[:len(hooks):len(hooks)], floorplanscale.Hooks[:]...)
}

// FlowClient is a client for the Flow schema.
type FlowClient struct {
	config
}

// NewFlowClient returns a client for the Flow from the given config.
func NewFlowClient(c config) *FlowClient {
	return &FlowClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `flow.Hooks(f(g(h())))`.
func (c *FlowClient) Use(hooks ...Hook) {
	c.hooks.Flow = append(c.hooks.Flow, hooks...)
}

// Create returns a create builder for Flow.
func (c *FlowClient) Create() *FlowCreate {
	mutation := newFlowMutation(c.config, OpCreate)
	return &FlowCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Flow entities.
func (c *FlowClient) CreateBulk(builders ...*FlowCreate) *FlowCreateBulk {
	return &FlowCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Flow.
func (c *FlowClient) Update() *FlowUpdate {
	mutation := newFlowMutation(c.config, OpUpdate)
	return &FlowUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FlowClient) UpdateOne(f *Flow) *FlowUpdateOne {
	mutation := newFlowMutation(c.config, OpUpdateOne, withFlow(f))
	return &FlowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FlowClient) UpdateOneID(id int) *FlowUpdateOne {
	mutation := newFlowMutation(c.config, OpUpdateOne, withFlowID(id))
	return &FlowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Flow.
func (c *FlowClient) Delete() *FlowDelete {
	mutation := newFlowMutation(c.config, OpDelete)
	return &FlowDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FlowClient) DeleteOne(f *Flow) *FlowDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FlowClient) DeleteOneID(id int) *FlowDeleteOne {
	builder := c.Delete().Where(flow.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FlowDeleteOne{builder}
}

// Query returns a query builder for Flow.
func (c *FlowClient) Query() *FlowQuery {
	return &FlowQuery{config: c.config}
}

// Get returns a Flow entity by its id.
func (c *FlowClient) Get(ctx context.Context, id int) (*Flow, error) {
	return c.Query().Where(flow.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FlowClient) GetX(ctx context.Context, id int) *Flow {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBlocks queries the blocks edge of a Flow.
func (c *FlowClient) QueryBlocks(f *Flow) *BlockQuery {
	query := &BlockQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(flow.Table, flow.FieldID, id),
			sqlgraph.To(block.Table, block.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, flow.BlocksTable, flow.BlocksColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDraft queries the draft edge of a Flow.
func (c *FlowClient) QueryDraft(f *Flow) *FlowDraftQuery {
	query := &FlowDraftQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(flow.Table, flow.FieldID, id),
			sqlgraph.To(flowdraft.Table, flowdraft.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, flow.DraftTable, flow.DraftColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FlowClient) Hooks() []Hook {
	hooks := c.hooks.Flow
	return append(hooks[:len(hooks):len(hooks)], flow.Hooks[:]...)
}

// FlowDraftClient is a client for the FlowDraft schema.
type FlowDraftClient struct {
	config
}

// NewFlowDraftClient returns a client for the FlowDraft from the given config.
func NewFlowDraftClient(c config) *FlowDraftClient {
	return &FlowDraftClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `flowdraft.Hooks(f(g(h())))`.
func (c *FlowDraftClient) Use(hooks ...Hook) {
	c.hooks.FlowDraft = append(c.hooks.FlowDraft, hooks...)
}

// Create returns a create builder for FlowDraft.
func (c *FlowDraftClient) Create() *FlowDraftCreate {
	mutation := newFlowDraftMutation(c.config, OpCreate)
	return &FlowDraftCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FlowDraft entities.
func (c *FlowDraftClient) CreateBulk(builders ...*FlowDraftCreate) *FlowDraftCreateBulk {
	return &FlowDraftCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FlowDraft.
func (c *FlowDraftClient) Update() *FlowDraftUpdate {
	mutation := newFlowDraftMutation(c.config, OpUpdate)
	return &FlowDraftUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FlowDraftClient) UpdateOne(fd *FlowDraft) *FlowDraftUpdateOne {
	mutation := newFlowDraftMutation(c.config, OpUpdateOne, withFlowDraft(fd))
	return &FlowDraftUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FlowDraftClient) UpdateOneID(id int) *FlowDraftUpdateOne {
	mutation := newFlowDraftMutation(c.config, OpUpdateOne, withFlowDraftID(id))
	return &FlowDraftUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FlowDraft.
func (c *FlowDraftClient) Delete() *FlowDraftDelete {
	mutation := newFlowDraftMutation(c.config, OpDelete)
	return &FlowDraftDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FlowDraftClient) DeleteOne(fd *FlowDraft) *FlowDraftDeleteOne {
	return c.DeleteOneID(fd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FlowDraftClient) DeleteOneID(id int) *FlowDraftDeleteOne {
	builder := c.Delete().Where(flowdraft.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FlowDraftDeleteOne{builder}
}

// Query returns a query builder for FlowDraft.
func (c *FlowDraftClient) Query() *FlowDraftQuery {
	return &FlowDraftQuery{config: c.config}
}

// Get returns a FlowDraft entity by its id.
func (c *FlowDraftClient) Get(ctx context.Context, id int) (*FlowDraft, error) {
	return c.Query().Where(flowdraft.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FlowDraftClient) GetX(ctx context.Context, id int) *FlowDraft {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBlocks queries the blocks edge of a FlowDraft.
func (c *FlowDraftClient) QueryBlocks(fd *FlowDraft) *BlockQuery {
	query := &BlockQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(flowdraft.Table, flowdraft.FieldID, id),
			sqlgraph.To(block.Table, block.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, flowdraft.BlocksTable, flowdraft.BlocksColumn),
		)
		fromV = sqlgraph.Neighbors(fd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFlow queries the flow edge of a FlowDraft.
func (c *FlowDraftClient) QueryFlow(fd *FlowDraft) *FlowQuery {
	query := &FlowQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(flowdraft.Table, flowdraft.FieldID, id),
			sqlgraph.To(flow.Table, flow.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, flowdraft.FlowTable, flowdraft.FlowColumn),
		)
		fromV = sqlgraph.Neighbors(fd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FlowDraftClient) Hooks() []Hook {
	hooks := c.hooks.FlowDraft
	return append(hooks[:len(hooks):len(hooks)], flowdraft.Hooks[:]...)
}

// FlowExecutionTemplateClient is a client for the FlowExecutionTemplate schema.
type FlowExecutionTemplateClient struct {
	config
}

// NewFlowExecutionTemplateClient returns a client for the FlowExecutionTemplate from the given config.
func NewFlowExecutionTemplateClient(c config) *FlowExecutionTemplateClient {
	return &FlowExecutionTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `flowexecutiontemplate.Hooks(f(g(h())))`.
func (c *FlowExecutionTemplateClient) Use(hooks ...Hook) {
	c.hooks.FlowExecutionTemplate = append(c.hooks.FlowExecutionTemplate, hooks...)
}

// Create returns a create builder for FlowExecutionTemplate.
func (c *FlowExecutionTemplateClient) Create() *FlowExecutionTemplateCreate {
	mutation := newFlowExecutionTemplateMutation(c.config, OpCreate)
	return &FlowExecutionTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FlowExecutionTemplate entities.
func (c *FlowExecutionTemplateClient) CreateBulk(builders ...*FlowExecutionTemplateCreate) *FlowExecutionTemplateCreateBulk {
	return &FlowExecutionTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FlowExecutionTemplate.
func (c *FlowExecutionTemplateClient) Update() *FlowExecutionTemplateUpdate {
	mutation := newFlowExecutionTemplateMutation(c.config, OpUpdate)
	return &FlowExecutionTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FlowExecutionTemplateClient) UpdateOne(fet *FlowExecutionTemplate) *FlowExecutionTemplateUpdateOne {
	mutation := newFlowExecutionTemplateMutation(c.config, OpUpdateOne, withFlowExecutionTemplate(fet))
	return &FlowExecutionTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FlowExecutionTemplateClient) UpdateOneID(id int) *FlowExecutionTemplateUpdateOne {
	mutation := newFlowExecutionTemplateMutation(c.config, OpUpdateOne, withFlowExecutionTemplateID(id))
	return &FlowExecutionTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FlowExecutionTemplate.
func (c *FlowExecutionTemplateClient) Delete() *FlowExecutionTemplateDelete {
	mutation := newFlowExecutionTemplateMutation(c.config, OpDelete)
	return &FlowExecutionTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FlowExecutionTemplateClient) DeleteOne(fet *FlowExecutionTemplate) *FlowExecutionTemplateDeleteOne {
	return c.DeleteOneID(fet.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FlowExecutionTemplateClient) DeleteOneID(id int) *FlowExecutionTemplateDeleteOne {
	builder := c.Delete().Where(flowexecutiontemplate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FlowExecutionTemplateDeleteOne{builder}
}

// Query returns a query builder for FlowExecutionTemplate.
func (c *FlowExecutionTemplateClient) Query() *FlowExecutionTemplateQuery {
	return &FlowExecutionTemplateQuery{config: c.config}
}

// Get returns a FlowExecutionTemplate entity by its id.
func (c *FlowExecutionTemplateClient) Get(ctx context.Context, id int) (*FlowExecutionTemplate, error) {
	return c.Query().Where(flowexecutiontemplate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FlowExecutionTemplateClient) GetX(ctx context.Context, id int) *FlowExecutionTemplate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBlocks queries the blocks edge of a FlowExecutionTemplate.
func (c *FlowExecutionTemplateClient) QueryBlocks(fet *FlowExecutionTemplate) *BlockQuery {
	query := &BlockQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fet.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(flowexecutiontemplate.Table, flowexecutiontemplate.FieldID, id),
			sqlgraph.To(block.Table, block.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, flowexecutiontemplate.BlocksTable, flowexecutiontemplate.BlocksColumn),
		)
		fromV = sqlgraph.Neighbors(fet.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FlowExecutionTemplateClient) Hooks() []Hook {
	hooks := c.hooks.FlowExecutionTemplate
	return append(hooks[:len(hooks):len(hooks)], flowexecutiontemplate.Hooks[:]...)
}

// FlowInstanceClient is a client for the FlowInstance schema.
type FlowInstanceClient struct {
	config
}

// NewFlowInstanceClient returns a client for the FlowInstance from the given config.
func NewFlowInstanceClient(c config) *FlowInstanceClient {
	return &FlowInstanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `flowinstance.Hooks(f(g(h())))`.
func (c *FlowInstanceClient) Use(hooks ...Hook) {
	c.hooks.FlowInstance = append(c.hooks.FlowInstance, hooks...)
}

// Create returns a create builder for FlowInstance.
func (c *FlowInstanceClient) Create() *FlowInstanceCreate {
	mutation := newFlowInstanceMutation(c.config, OpCreate)
	return &FlowInstanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FlowInstance entities.
func (c *FlowInstanceClient) CreateBulk(builders ...*FlowInstanceCreate) *FlowInstanceCreateBulk {
	return &FlowInstanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FlowInstance.
func (c *FlowInstanceClient) Update() *FlowInstanceUpdate {
	mutation := newFlowInstanceMutation(c.config, OpUpdate)
	return &FlowInstanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FlowInstanceClient) UpdateOne(fi *FlowInstance) *FlowInstanceUpdateOne {
	mutation := newFlowInstanceMutation(c.config, OpUpdateOne, withFlowInstance(fi))
	return &FlowInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FlowInstanceClient) UpdateOneID(id int) *FlowInstanceUpdateOne {
	mutation := newFlowInstanceMutation(c.config, OpUpdateOne, withFlowInstanceID(id))
	return &FlowInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FlowInstance.
func (c *FlowInstanceClient) Delete() *FlowInstanceDelete {
	mutation := newFlowInstanceMutation(c.config, OpDelete)
	return &FlowInstanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FlowInstanceClient) DeleteOne(fi *FlowInstance) *FlowInstanceDeleteOne {
	return c.DeleteOneID(fi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FlowInstanceClient) DeleteOneID(id int) *FlowInstanceDeleteOne {
	builder := c.Delete().Where(flowinstance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FlowInstanceDeleteOne{builder}
}

// Query returns a query builder for FlowInstance.
func (c *FlowInstanceClient) Query() *FlowInstanceQuery {
	return &FlowInstanceQuery{config: c.config}
}

// Get returns a FlowInstance entity by its id.
func (c *FlowInstanceClient) Get(ctx context.Context, id int) (*FlowInstance, error) {
	return c.Query().Where(flowinstance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FlowInstanceClient) GetX(ctx context.Context, id int) *FlowInstance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFlow queries the flow edge of a FlowInstance.
func (c *FlowInstanceClient) QueryFlow(fi *FlowInstance) *FlowQuery {
	query := &FlowQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(flowinstance.Table, flowinstance.FieldID, id),
			sqlgraph.To(flow.Table, flow.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, flowinstance.FlowTable, flowinstance.FlowColumn),
		)
		fromV = sqlgraph.Neighbors(fi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTemplate queries the template edge of a FlowInstance.
func (c *FlowInstanceClient) QueryTemplate(fi *FlowInstance) *FlowExecutionTemplateQuery {
	query := &FlowExecutionTemplateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(flowinstance.Table, flowinstance.FieldID, id),
			sqlgraph.To(flowexecutiontemplate.Table, flowexecutiontemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, flowinstance.TemplateTable, flowinstance.TemplateColumn),
		)
		fromV = sqlgraph.Neighbors(fi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBlocks queries the blocks edge of a FlowInstance.
func (c *FlowInstanceClient) QueryBlocks(fi *FlowInstance) *BlockInstanceQuery {
	query := &BlockInstanceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(flowinstance.Table, flowinstance.FieldID, id),
			sqlgraph.To(blockinstance.Table, blockinstance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, flowinstance.BlocksTable, flowinstance.BlocksColumn),
		)
		fromV = sqlgraph.Neighbors(fi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParentSubflowBlock queries the parent_subflow_block edge of a FlowInstance.
func (c *FlowInstanceClient) QueryParentSubflowBlock(fi *FlowInstance) *BlockInstanceQuery {
	query := &BlockInstanceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(flowinstance.Table, flowinstance.FieldID, id),
			sqlgraph.To(blockinstance.Table, blockinstance.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, flowinstance.ParentSubflowBlockTable, flowinstance.ParentSubflowBlockColumn),
		)
		fromV = sqlgraph.Neighbors(fi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FlowInstanceClient) Hooks() []Hook {
	hooks := c.hooks.FlowInstance
	return append(hooks[:len(hooks):len(hooks)], flowinstance.Hooks[:]...)
}

// FormulaClient is a client for the Formula schema.
type FormulaClient struct {
	config
}

// NewFormulaClient returns a client for the Formula from the given config.
func NewFormulaClient(c config) *FormulaClient {
	return &FormulaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `formula.Hooks(f(g(h())))`.
func (c *FormulaClient) Use(hooks ...Hook) {
	c.hooks.Formula = append(c.hooks.Formula, hooks...)
}

// Create returns a create builder for Formula.
func (c *FormulaClient) Create() *FormulaCreate {
	mutation := newFormulaMutation(c.config, OpCreate)
	return &FormulaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Formula entities.
func (c *FormulaClient) CreateBulk(builders ...*FormulaCreate) *FormulaCreateBulk {
	return &FormulaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Formula.
func (c *FormulaClient) Update() *FormulaUpdate {
	mutation := newFormulaMutation(c.config, OpUpdate)
	return &FormulaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FormulaClient) UpdateOne(f *Formula) *FormulaUpdateOne {
	mutation := newFormulaMutation(c.config, OpUpdateOne, withFormula(f))
	return &FormulaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FormulaClient) UpdateOneID(id int) *FormulaUpdateOne {
	mutation := newFormulaMutation(c.config, OpUpdateOne, withFormulaID(id))
	return &FormulaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Formula.
func (c *FormulaClient) Delete() *FormulaDelete {
	mutation := newFormulaMutation(c.config, OpDelete)
	return &FormulaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FormulaClient) DeleteOne(f *Formula) *FormulaDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FormulaClient) DeleteOneID(id int) *FormulaDeleteOne {
	builder := c.Delete().Where(formula.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FormulaDeleteOne{builder}
}

// Query returns a query builder for Formula.
func (c *FormulaClient) Query() *FormulaQuery {
	return &FormulaQuery{config: c.config}
}

// Get returns a Formula entity by its id.
func (c *FormulaClient) Get(ctx context.Context, id int) (*Formula, error) {
	return c.Query().Where(formula.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FormulaClient) GetX(ctx context.Context, id int) *Formula {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNetworkType queries the networkType edge of a Formula.
func (c *FormulaClient) QueryNetworkType(f *Formula) *NetworkTypeQuery {
	query := &NetworkTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(formula.Table, formula.FieldID, id),
			sqlgraph.To(networktype.Table, networktype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, formula.NetworkTypeTable, formula.NetworkTypeColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTech queries the tech edge of a Formula.
func (c *FormulaClient) QueryTech(f *Formula) *TechQuery {
	query := &TechQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(formula.Table, formula.FieldID, id),
			sqlgraph.To(tech.Table, tech.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, formula.TechTable, formula.TechColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryKpi queries the kpi edge of a Formula.
func (c *FormulaClient) QueryKpi(f *Formula) *KpiQuery {
	query := &KpiQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(formula.Table, formula.FieldID, id),
			sqlgraph.To(kpi.Table, kpi.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, formula.KpiTable, formula.KpiColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCounterformula queries the counterformula edge of a Formula.
func (c *FormulaClient) QueryCounterformula(f *Formula) *CounterFormulaQuery {
	query := &CounterFormulaQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(formula.Table, formula.FieldID, id),
			sqlgraph.To(counterformula.Table, counterformula.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, formula.CounterformulaTable, formula.CounterformulaColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FormulaClient) Hooks() []Hook {
	hooks := c.hooks.Formula
	return append(hooks[:len(hooks):len(hooks)], formula.Hooks[:]...)
}

// HyperlinkClient is a client for the Hyperlink schema.
type HyperlinkClient struct {
	config
}

// NewHyperlinkClient returns a client for the Hyperlink from the given config.
func NewHyperlinkClient(c config) *HyperlinkClient {
	return &HyperlinkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hyperlink.Hooks(f(g(h())))`.
func (c *HyperlinkClient) Use(hooks ...Hook) {
	c.hooks.Hyperlink = append(c.hooks.Hyperlink, hooks...)
}

// Create returns a create builder for Hyperlink.
func (c *HyperlinkClient) Create() *HyperlinkCreate {
	mutation := newHyperlinkMutation(c.config, OpCreate)
	return &HyperlinkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Hyperlink entities.
func (c *HyperlinkClient) CreateBulk(builders ...*HyperlinkCreate) *HyperlinkCreateBulk {
	return &HyperlinkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Hyperlink.
func (c *HyperlinkClient) Update() *HyperlinkUpdate {
	mutation := newHyperlinkMutation(c.config, OpUpdate)
	return &HyperlinkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HyperlinkClient) UpdateOne(h *Hyperlink) *HyperlinkUpdateOne {
	mutation := newHyperlinkMutation(c.config, OpUpdateOne, withHyperlink(h))
	return &HyperlinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HyperlinkClient) UpdateOneID(id int) *HyperlinkUpdateOne {
	mutation := newHyperlinkMutation(c.config, OpUpdateOne, withHyperlinkID(id))
	return &HyperlinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Hyperlink.
func (c *HyperlinkClient) Delete() *HyperlinkDelete {
	mutation := newHyperlinkMutation(c.config, OpDelete)
	return &HyperlinkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *HyperlinkClient) DeleteOne(h *Hyperlink) *HyperlinkDeleteOne {
	return c.DeleteOneID(h.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *HyperlinkClient) DeleteOneID(id int) *HyperlinkDeleteOne {
	builder := c.Delete().Where(hyperlink.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HyperlinkDeleteOne{builder}
}

// Query returns a query builder for Hyperlink.
func (c *HyperlinkClient) Query() *HyperlinkQuery {
	return &HyperlinkQuery{config: c.config}
}

// Get returns a Hyperlink entity by its id.
func (c *HyperlinkClient) Get(ctx context.Context, id int) (*Hyperlink, error) {
	return c.Query().Where(hyperlink.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HyperlinkClient) GetX(ctx context.Context, id int) *Hyperlink {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEquipment queries the equipment edge of a Hyperlink.
func (c *HyperlinkClient) QueryEquipment(h *Hyperlink) *EquipmentQuery {
	query := &EquipmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hyperlink.Table, hyperlink.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hyperlink.EquipmentTable, hyperlink.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLocation queries the location edge of a Hyperlink.
func (c *HyperlinkClient) QueryLocation(h *Hyperlink) *LocationQuery {
	query := &LocationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hyperlink.Table, hyperlink.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hyperlink.LocationTable, hyperlink.LocationColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkOrder queries the work_order edge of a Hyperlink.
func (c *HyperlinkClient) QueryWorkOrder(h *Hyperlink) *WorkOrderQuery {
	query := &WorkOrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hyperlink.Table, hyperlink.FieldID, id),
			sqlgraph.To(workorder.Table, workorder.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hyperlink.WorkOrderTable, hyperlink.WorkOrderColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDocumentCategory queries the document_category edge of a Hyperlink.
func (c *HyperlinkClient) QueryDocumentCategory(h *Hyperlink) *DocumentCategoryQuery {
	query := &DocumentCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hyperlink.Table, hyperlink.FieldID, id),
			sqlgraph.To(documentcategory.Table, documentcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hyperlink.DocumentCategoryTable, hyperlink.DocumentCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HyperlinkClient) Hooks() []Hook {
	hooks := c.hooks.Hyperlink
	return append(hooks[:len(hooks):len(hooks)], hyperlink.Hooks[:]...)
}

// KpiClient is a client for the Kpi schema.
type KpiClient struct {
	config
}

// NewKpiClient returns a client for the Kpi from the given config.
func NewKpiClient(c config) *KpiClient {
	return &KpiClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `kpi.Hooks(f(g(h())))`.
func (c *KpiClient) Use(hooks ...Hook) {
	c.hooks.Kpi = append(c.hooks.Kpi, hooks...)
}

// Create returns a create builder for Kpi.
func (c *KpiClient) Create() *KpiCreate {
	mutation := newKpiMutation(c.config, OpCreate)
	return &KpiCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Kpi entities.
func (c *KpiClient) CreateBulk(builders ...*KpiCreate) *KpiCreateBulk {
	return &KpiCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Kpi.
func (c *KpiClient) Update() *KpiUpdate {
	mutation := newKpiMutation(c.config, OpUpdate)
	return &KpiUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KpiClient) UpdateOne(k *Kpi) *KpiUpdateOne {
	mutation := newKpiMutation(c.config, OpUpdateOne, withKpi(k))
	return &KpiUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KpiClient) UpdateOneID(id int) *KpiUpdateOne {
	mutation := newKpiMutation(c.config, OpUpdateOne, withKpiID(id))
	return &KpiUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Kpi.
func (c *KpiClient) Delete() *KpiDelete {
	mutation := newKpiMutation(c.config, OpDelete)
	return &KpiDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *KpiClient) DeleteOne(k *Kpi) *KpiDeleteOne {
	return c.DeleteOneID(k.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *KpiClient) DeleteOneID(id int) *KpiDeleteOne {
	builder := c.Delete().Where(kpi.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KpiDeleteOne{builder}
}

// Query returns a query builder for Kpi.
func (c *KpiClient) Query() *KpiQuery {
	return &KpiQuery{config: c.config}
}

// Get returns a Kpi entity by its id.
func (c *KpiClient) Get(ctx context.Context, id int) (*Kpi, error) {
	return c.Query().Where(kpi.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KpiClient) GetX(ctx context.Context, id int) *Kpi {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDomain queries the domain edge of a Kpi.
func (c *KpiClient) QueryDomain(k *Kpi) *DomainQuery {
	query := &DomainQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := k.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kpi.Table, kpi.FieldID, id),
			sqlgraph.To(domain.Table, domain.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kpi.DomainTable, kpi.DomainColumn),
		)
		fromV = sqlgraph.Neighbors(k.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryKpiCategory queries the KpiCategory edge of a Kpi.
func (c *KpiClient) QueryKpiCategory(k *Kpi) *KpiCategoryQuery {
	query := &KpiCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := k.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kpi.Table, kpi.FieldID, id),
			sqlgraph.To(kpicategory.Table, kpicategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kpi.KpiCategoryTable, kpi.KpiCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(k.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFormulakpi queries the formulakpi edge of a Kpi.
func (c *KpiClient) QueryFormulakpi(k *Kpi) *FormulaQuery {
	query := &FormulaQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := k.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kpi.Table, kpi.FieldID, id),
			sqlgraph.To(formula.Table, formula.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kpi.FormulakpiTable, kpi.FormulakpiColumn),
		)
		fromV = sqlgraph.Neighbors(k.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryThresholdkpi queries the thresholdkpi edge of a Kpi.
func (c *KpiClient) QueryThresholdkpi(k *Kpi) *ThresholdQuery {
	query := &ThresholdQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := k.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kpi.Table, kpi.FieldID, id),
			sqlgraph.To(threshold.Table, threshold.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, kpi.ThresholdkpiTable, kpi.ThresholdkpiColumn),
		)
		fromV = sqlgraph.Neighbors(k.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *KpiClient) Hooks() []Hook {
	hooks := c.hooks.Kpi
	return append(hooks[:len(hooks):len(hooks)], kpi.Hooks[:]...)
}

// KpiCategoryClient is a client for the KpiCategory schema.
type KpiCategoryClient struct {
	config
}

// NewKpiCategoryClient returns a client for the KpiCategory from the given config.
func NewKpiCategoryClient(c config) *KpiCategoryClient {
	return &KpiCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `kpicategory.Hooks(f(g(h())))`.
func (c *KpiCategoryClient) Use(hooks ...Hook) {
	c.hooks.KpiCategory = append(c.hooks.KpiCategory, hooks...)
}

// Create returns a create builder for KpiCategory.
func (c *KpiCategoryClient) Create() *KpiCategoryCreate {
	mutation := newKpiCategoryMutation(c.config, OpCreate)
	return &KpiCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of KpiCategory entities.
func (c *KpiCategoryClient) CreateBulk(builders ...*KpiCategoryCreate) *KpiCategoryCreateBulk {
	return &KpiCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for KpiCategory.
func (c *KpiCategoryClient) Update() *KpiCategoryUpdate {
	mutation := newKpiCategoryMutation(c.config, OpUpdate)
	return &KpiCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KpiCategoryClient) UpdateOne(kc *KpiCategory) *KpiCategoryUpdateOne {
	mutation := newKpiCategoryMutation(c.config, OpUpdateOne, withKpiCategory(kc))
	return &KpiCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KpiCategoryClient) UpdateOneID(id int) *KpiCategoryUpdateOne {
	mutation := newKpiCategoryMutation(c.config, OpUpdateOne, withKpiCategoryID(id))
	return &KpiCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for KpiCategory.
func (c *KpiCategoryClient) Delete() *KpiCategoryDelete {
	mutation := newKpiCategoryMutation(c.config, OpDelete)
	return &KpiCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *KpiCategoryClient) DeleteOne(kc *KpiCategory) *KpiCategoryDeleteOne {
	return c.DeleteOneID(kc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *KpiCategoryClient) DeleteOneID(id int) *KpiCategoryDeleteOne {
	builder := c.Delete().Where(kpicategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KpiCategoryDeleteOne{builder}
}

// Query returns a query builder for KpiCategory.
func (c *KpiCategoryClient) Query() *KpiCategoryQuery {
	return &KpiCategoryQuery{config: c.config}
}

// Get returns a KpiCategory entity by its id.
func (c *KpiCategoryClient) Get(ctx context.Context, id int) (*KpiCategory, error) {
	return c.Query().Where(kpicategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KpiCategoryClient) GetX(ctx context.Context, id int) *KpiCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryKpicategory queries the kpicategory edge of a KpiCategory.
func (c *KpiCategoryClient) QueryKpicategory(kc *KpiCategory) *KpiQuery {
	query := &KpiQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kpicategory.Table, kpicategory.FieldID, id),
			sqlgraph.To(kpi.Table, kpi.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kpicategory.KpicategoryTable, kpicategory.KpicategoryColumn),
		)
		fromV = sqlgraph.Neighbors(kc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *KpiCategoryClient) Hooks() []Hook {
	hooks := c.hooks.KpiCategory
	return append(hooks[:len(hooks):len(hooks)], kpicategory.Hooks[:]...)
}

// KqiClient is a client for the Kqi schema.
type KqiClient struct {
	config
}

// NewKqiClient returns a client for the Kqi from the given config.
func NewKqiClient(c config) *KqiClient {
	return &KqiClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `kqi.Hooks(f(g(h())))`.
func (c *KqiClient) Use(hooks ...Hook) {
	c.hooks.Kqi = append(c.hooks.Kqi, hooks...)
}

// Create returns a create builder for Kqi.
func (c *KqiClient) Create() *KqiCreate {
	mutation := newKqiMutation(c.config, OpCreate)
	return &KqiCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Kqi entities.
func (c *KqiClient) CreateBulk(builders ...*KqiCreate) *KqiCreateBulk {
	return &KqiCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Kqi.
func (c *KqiClient) Update() *KqiUpdate {
	mutation := newKqiMutation(c.config, OpUpdate)
	return &KqiUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KqiClient) UpdateOne(k *Kqi) *KqiUpdateOne {
	mutation := newKqiMutation(c.config, OpUpdateOne, withKqi(k))
	return &KqiUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KqiClient) UpdateOneID(id int) *KqiUpdateOne {
	mutation := newKqiMutation(c.config, OpUpdateOne, withKqiID(id))
	return &KqiUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Kqi.
func (c *KqiClient) Delete() *KqiDelete {
	mutation := newKqiMutation(c.config, OpDelete)
	return &KqiDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *KqiClient) DeleteOne(k *Kqi) *KqiDeleteOne {
	return c.DeleteOneID(k.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *KqiClient) DeleteOneID(id int) *KqiDeleteOne {
	builder := c.Delete().Where(kqi.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KqiDeleteOne{builder}
}

// Query returns a query builder for Kqi.
func (c *KqiClient) Query() *KqiQuery {
	return &KqiQuery{config: c.config}
}

// Get returns a Kqi entity by its id.
func (c *KqiClient) Get(ctx context.Context, id int) (*Kqi, error) {
	return c.Query().Where(kqi.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KqiClient) GetX(ctx context.Context, id int) *Kqi {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryKqiCategoryFk queries the kqiCategoryFk edge of a Kqi.
func (c *KqiClient) QueryKqiCategoryFk(k *Kqi) *KqiCategoryQuery {
	query := &KqiCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := k.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kqi.Table, kqi.FieldID, id),
			sqlgraph.To(kqicategory.Table, kqicategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kqi.KqiCategoryFkTable, kqi.KqiCategoryFkColumn),
		)
		fromV = sqlgraph.Neighbors(k.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryKqiPerspectiveFk queries the kqiPerspectiveFk edge of a Kqi.
func (c *KqiClient) QueryKqiPerspectiveFk(k *Kqi) *KqiPerspectiveQuery {
	query := &KqiPerspectiveQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := k.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kqi.Table, kqi.FieldID, id),
			sqlgraph.To(kqiperspective.Table, kqiperspective.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kqi.KqiPerspectiveFkTable, kqi.KqiPerspectiveFkColumn),
		)
		fromV = sqlgraph.Neighbors(k.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryKqiSourceFk queries the kqiSourceFk edge of a Kqi.
func (c *KqiClient) QueryKqiSourceFk(k *Kqi) *KqiSourceQuery {
	query := &KqiSourceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := k.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kqi.Table, kqi.FieldID, id),
			sqlgraph.To(kqisource.Table, kqisource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kqi.KqiSourceFkTable, kqi.KqiSourceFkColumn),
		)
		fromV = sqlgraph.Neighbors(k.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryKqiTemporalFrequencyFk queries the kqiTemporalFrequencyFk edge of a Kqi.
func (c *KqiClient) QueryKqiTemporalFrequencyFk(k *Kqi) *KqiTemporalFrequencyQuery {
	query := &KqiTemporalFrequencyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := k.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kqi.Table, kqi.FieldID, id),
			sqlgraph.To(kqitemporalfrequency.Table, kqitemporalfrequency.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kqi.KqiTemporalFrequencyFkTable, kqi.KqiTemporalFrequencyFkColumn),
		)
		fromV = sqlgraph.Neighbors(k.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryKqiTargetFk queries the kqiTargetFk edge of a Kqi.
func (c *KqiClient) QueryKqiTargetFk(k *Kqi) *KqiTargetQuery {
	query := &KqiTargetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := k.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kqi.Table, kqi.FieldID, id),
			sqlgraph.To(kqitarget.Table, kqitarget.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kqi.KqiTargetFkTable, kqi.KqiTargetFkColumn),
		)
		fromV = sqlgraph.Neighbors(k.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *KqiClient) Hooks() []Hook {
	hooks := c.hooks.Kqi
	return append(hooks[:len(hooks):len(hooks)], kqi.Hooks[:]...)
}

// KqiCategoryClient is a client for the KqiCategory schema.
type KqiCategoryClient struct {
	config
}

// NewKqiCategoryClient returns a client for the KqiCategory from the given config.
func NewKqiCategoryClient(c config) *KqiCategoryClient {
	return &KqiCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `kqicategory.Hooks(f(g(h())))`.
func (c *KqiCategoryClient) Use(hooks ...Hook) {
	c.hooks.KqiCategory = append(c.hooks.KqiCategory, hooks...)
}

// Create returns a create builder for KqiCategory.
func (c *KqiCategoryClient) Create() *KqiCategoryCreate {
	mutation := newKqiCategoryMutation(c.config, OpCreate)
	return &KqiCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of KqiCategory entities.
func (c *KqiCategoryClient) CreateBulk(builders ...*KqiCategoryCreate) *KqiCategoryCreateBulk {
	return &KqiCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for KqiCategory.
func (c *KqiCategoryClient) Update() *KqiCategoryUpdate {
	mutation := newKqiCategoryMutation(c.config, OpUpdate)
	return &KqiCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KqiCategoryClient) UpdateOne(kc *KqiCategory) *KqiCategoryUpdateOne {
	mutation := newKqiCategoryMutation(c.config, OpUpdateOne, withKqiCategory(kc))
	return &KqiCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KqiCategoryClient) UpdateOneID(id int) *KqiCategoryUpdateOne {
	mutation := newKqiCategoryMutation(c.config, OpUpdateOne, withKqiCategoryID(id))
	return &KqiCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for KqiCategory.
func (c *KqiCategoryClient) Delete() *KqiCategoryDelete {
	mutation := newKqiCategoryMutation(c.config, OpDelete)
	return &KqiCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *KqiCategoryClient) DeleteOne(kc *KqiCategory) *KqiCategoryDeleteOne {
	return c.DeleteOneID(kc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *KqiCategoryClient) DeleteOneID(id int) *KqiCategoryDeleteOne {
	builder := c.Delete().Where(kqicategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KqiCategoryDeleteOne{builder}
}

// Query returns a query builder for KqiCategory.
func (c *KqiCategoryClient) Query() *KqiCategoryQuery {
	return &KqiCategoryQuery{config: c.config}
}

// Get returns a KqiCategory entity by its id.
func (c *KqiCategoryClient) Get(ctx context.Context, id int) (*KqiCategory, error) {
	return c.Query().Where(kqicategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KqiCategoryClient) GetX(ctx context.Context, id int) *KqiCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryKqiCategoryFk queries the kqiCategoryFk edge of a KqiCategory.
func (c *KqiCategoryClient) QueryKqiCategoryFk(kc *KqiCategory) *KqiQuery {
	query := &KqiQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kqicategory.Table, kqicategory.FieldID, id),
			sqlgraph.To(kqi.Table, kqi.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kqicategory.KqiCategoryFkTable, kqicategory.KqiCategoryFkColumn),
		)
		fromV = sqlgraph.Neighbors(kc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *KqiCategoryClient) Hooks() []Hook {
	hooks := c.hooks.KqiCategory
	return append(hooks[:len(hooks):len(hooks)], kqicategory.Hooks[:]...)
}

// KqiComparatorClient is a client for the KqiComparator schema.
type KqiComparatorClient struct {
	config
}

// NewKqiComparatorClient returns a client for the KqiComparator from the given config.
func NewKqiComparatorClient(c config) *KqiComparatorClient {
	return &KqiComparatorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `kqicomparator.Hooks(f(g(h())))`.
func (c *KqiComparatorClient) Use(hooks ...Hook) {
	c.hooks.KqiComparator = append(c.hooks.KqiComparator, hooks...)
}

// Create returns a create builder for KqiComparator.
func (c *KqiComparatorClient) Create() *KqiComparatorCreate {
	mutation := newKqiComparatorMutation(c.config, OpCreate)
	return &KqiComparatorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of KqiComparator entities.
func (c *KqiComparatorClient) CreateBulk(builders ...*KqiComparatorCreate) *KqiComparatorCreateBulk {
	return &KqiComparatorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for KqiComparator.
func (c *KqiComparatorClient) Update() *KqiComparatorUpdate {
	mutation := newKqiComparatorMutation(c.config, OpUpdate)
	return &KqiComparatorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KqiComparatorClient) UpdateOne(kc *KqiComparator) *KqiComparatorUpdateOne {
	mutation := newKqiComparatorMutation(c.config, OpUpdateOne, withKqiComparator(kc))
	return &KqiComparatorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KqiComparatorClient) UpdateOneID(id int) *KqiComparatorUpdateOne {
	mutation := newKqiComparatorMutation(c.config, OpUpdateOne, withKqiComparatorID(id))
	return &KqiComparatorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for KqiComparator.
func (c *KqiComparatorClient) Delete() *KqiComparatorDelete {
	mutation := newKqiComparatorMutation(c.config, OpDelete)
	return &KqiComparatorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *KqiComparatorClient) DeleteOne(kc *KqiComparator) *KqiComparatorDeleteOne {
	return c.DeleteOneID(kc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *KqiComparatorClient) DeleteOneID(id int) *KqiComparatorDeleteOne {
	builder := c.Delete().Where(kqicomparator.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KqiComparatorDeleteOne{builder}
}

// Query returns a query builder for KqiComparator.
func (c *KqiComparatorClient) Query() *KqiComparatorQuery {
	return &KqiComparatorQuery{config: c.config}
}

// Get returns a KqiComparator entity by its id.
func (c *KqiComparatorClient) Get(ctx context.Context, id int) (*KqiComparator, error) {
	return c.Query().Where(kqicomparator.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KqiComparatorClient) GetX(ctx context.Context, id int) *KqiComparator {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryComparatorkqitargetfk queries the comparatorkqitargetfk edge of a KqiComparator.
func (c *KqiComparatorClient) QueryComparatorkqitargetfk(kc *KqiComparator) *ComparatorQuery {
	query := &ComparatorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kqicomparator.Table, kqicomparator.FieldID, id),
			sqlgraph.To(comparator.Table, comparator.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kqicomparator.ComparatorkqitargetfkTable, kqicomparator.ComparatorkqitargetfkColumn),
		)
		fromV = sqlgraph.Neighbors(kc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryKqitargetcomparatorfk queries the kqitargetcomparatorfk edge of a KqiComparator.
func (c *KqiComparatorClient) QueryKqitargetcomparatorfk(kc *KqiComparator) *KqiTargetQuery {
	query := &KqiTargetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kqicomparator.Table, kqicomparator.FieldID, id),
			sqlgraph.To(kqitarget.Table, kqitarget.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kqicomparator.KqitargetcomparatorfkTable, kqicomparator.KqitargetcomparatorfkColumn),
		)
		fromV = sqlgraph.Neighbors(kc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *KqiComparatorClient) Hooks() []Hook {
	hooks := c.hooks.KqiComparator
	return append(hooks[:len(hooks):len(hooks)], kqicomparator.Hooks[:]...)
}

// KqiPerspectiveClient is a client for the KqiPerspective schema.
type KqiPerspectiveClient struct {
	config
}

// NewKqiPerspectiveClient returns a client for the KqiPerspective from the given config.
func NewKqiPerspectiveClient(c config) *KqiPerspectiveClient {
	return &KqiPerspectiveClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `kqiperspective.Hooks(f(g(h())))`.
func (c *KqiPerspectiveClient) Use(hooks ...Hook) {
	c.hooks.KqiPerspective = append(c.hooks.KqiPerspective, hooks...)
}

// Create returns a create builder for KqiPerspective.
func (c *KqiPerspectiveClient) Create() *KqiPerspectiveCreate {
	mutation := newKqiPerspectiveMutation(c.config, OpCreate)
	return &KqiPerspectiveCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of KqiPerspective entities.
func (c *KqiPerspectiveClient) CreateBulk(builders ...*KqiPerspectiveCreate) *KqiPerspectiveCreateBulk {
	return &KqiPerspectiveCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for KqiPerspective.
func (c *KqiPerspectiveClient) Update() *KqiPerspectiveUpdate {
	mutation := newKqiPerspectiveMutation(c.config, OpUpdate)
	return &KqiPerspectiveUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KqiPerspectiveClient) UpdateOne(kp *KqiPerspective) *KqiPerspectiveUpdateOne {
	mutation := newKqiPerspectiveMutation(c.config, OpUpdateOne, withKqiPerspective(kp))
	return &KqiPerspectiveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KqiPerspectiveClient) UpdateOneID(id int) *KqiPerspectiveUpdateOne {
	mutation := newKqiPerspectiveMutation(c.config, OpUpdateOne, withKqiPerspectiveID(id))
	return &KqiPerspectiveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for KqiPerspective.
func (c *KqiPerspectiveClient) Delete() *KqiPerspectiveDelete {
	mutation := newKqiPerspectiveMutation(c.config, OpDelete)
	return &KqiPerspectiveDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *KqiPerspectiveClient) DeleteOne(kp *KqiPerspective) *KqiPerspectiveDeleteOne {
	return c.DeleteOneID(kp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *KqiPerspectiveClient) DeleteOneID(id int) *KqiPerspectiveDeleteOne {
	builder := c.Delete().Where(kqiperspective.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KqiPerspectiveDeleteOne{builder}
}

// Query returns a query builder for KqiPerspective.
func (c *KqiPerspectiveClient) Query() *KqiPerspectiveQuery {
	return &KqiPerspectiveQuery{config: c.config}
}

// Get returns a KqiPerspective entity by its id.
func (c *KqiPerspectiveClient) Get(ctx context.Context, id int) (*KqiPerspective, error) {
	return c.Query().Where(kqiperspective.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KqiPerspectiveClient) GetX(ctx context.Context, id int) *KqiPerspective {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryKqiPerspectiveFk queries the kqiPerspectiveFk edge of a KqiPerspective.
func (c *KqiPerspectiveClient) QueryKqiPerspectiveFk(kp *KqiPerspective) *KqiQuery {
	query := &KqiQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kqiperspective.Table, kqiperspective.FieldID, id),
			sqlgraph.To(kqi.Table, kqi.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kqiperspective.KqiPerspectiveFkTable, kqiperspective.KqiPerspectiveFkColumn),
		)
		fromV = sqlgraph.Neighbors(kp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *KqiPerspectiveClient) Hooks() []Hook {
	hooks := c.hooks.KqiPerspective
	return append(hooks[:len(hooks):len(hooks)], kqiperspective.Hooks[:]...)
}

// KqiSourceClient is a client for the KqiSource schema.
type KqiSourceClient struct {
	config
}

// NewKqiSourceClient returns a client for the KqiSource from the given config.
func NewKqiSourceClient(c config) *KqiSourceClient {
	return &KqiSourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `kqisource.Hooks(f(g(h())))`.
func (c *KqiSourceClient) Use(hooks ...Hook) {
	c.hooks.KqiSource = append(c.hooks.KqiSource, hooks...)
}

// Create returns a create builder for KqiSource.
func (c *KqiSourceClient) Create() *KqiSourceCreate {
	mutation := newKqiSourceMutation(c.config, OpCreate)
	return &KqiSourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of KqiSource entities.
func (c *KqiSourceClient) CreateBulk(builders ...*KqiSourceCreate) *KqiSourceCreateBulk {
	return &KqiSourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for KqiSource.
func (c *KqiSourceClient) Update() *KqiSourceUpdate {
	mutation := newKqiSourceMutation(c.config, OpUpdate)
	return &KqiSourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KqiSourceClient) UpdateOne(ks *KqiSource) *KqiSourceUpdateOne {
	mutation := newKqiSourceMutation(c.config, OpUpdateOne, withKqiSource(ks))
	return &KqiSourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KqiSourceClient) UpdateOneID(id int) *KqiSourceUpdateOne {
	mutation := newKqiSourceMutation(c.config, OpUpdateOne, withKqiSourceID(id))
	return &KqiSourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for KqiSource.
func (c *KqiSourceClient) Delete() *KqiSourceDelete {
	mutation := newKqiSourceMutation(c.config, OpDelete)
	return &KqiSourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *KqiSourceClient) DeleteOne(ks *KqiSource) *KqiSourceDeleteOne {
	return c.DeleteOneID(ks.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *KqiSourceClient) DeleteOneID(id int) *KqiSourceDeleteOne {
	builder := c.Delete().Where(kqisource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KqiSourceDeleteOne{builder}
}

// Query returns a query builder for KqiSource.
func (c *KqiSourceClient) Query() *KqiSourceQuery {
	return &KqiSourceQuery{config: c.config}
}

// Get returns a KqiSource entity by its id.
func (c *KqiSourceClient) Get(ctx context.Context, id int) (*KqiSource, error) {
	return c.Query().Where(kqisource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KqiSourceClient) GetX(ctx context.Context, id int) *KqiSource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryKqiSourceFk queries the kqiSourceFk edge of a KqiSource.
func (c *KqiSourceClient) QueryKqiSourceFk(ks *KqiSource) *KqiQuery {
	query := &KqiQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ks.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kqisource.Table, kqisource.FieldID, id),
			sqlgraph.To(kqi.Table, kqi.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kqisource.KqiSourceFkTable, kqisource.KqiSourceFkColumn),
		)
		fromV = sqlgraph.Neighbors(ks.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *KqiSourceClient) Hooks() []Hook {
	hooks := c.hooks.KqiSource
	return append(hooks[:len(hooks):len(hooks)], kqisource.Hooks[:]...)
}

// KqiTargetClient is a client for the KqiTarget schema.
type KqiTargetClient struct {
	config
}

// NewKqiTargetClient returns a client for the KqiTarget from the given config.
func NewKqiTargetClient(c config) *KqiTargetClient {
	return &KqiTargetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `kqitarget.Hooks(f(g(h())))`.
func (c *KqiTargetClient) Use(hooks ...Hook) {
	c.hooks.KqiTarget = append(c.hooks.KqiTarget, hooks...)
}

// Create returns a create builder for KqiTarget.
func (c *KqiTargetClient) Create() *KqiTargetCreate {
	mutation := newKqiTargetMutation(c.config, OpCreate)
	return &KqiTargetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of KqiTarget entities.
func (c *KqiTargetClient) CreateBulk(builders ...*KqiTargetCreate) *KqiTargetCreateBulk {
	return &KqiTargetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for KqiTarget.
func (c *KqiTargetClient) Update() *KqiTargetUpdate {
	mutation := newKqiTargetMutation(c.config, OpUpdate)
	return &KqiTargetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KqiTargetClient) UpdateOne(kt *KqiTarget) *KqiTargetUpdateOne {
	mutation := newKqiTargetMutation(c.config, OpUpdateOne, withKqiTarget(kt))
	return &KqiTargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KqiTargetClient) UpdateOneID(id int) *KqiTargetUpdateOne {
	mutation := newKqiTargetMutation(c.config, OpUpdateOne, withKqiTargetID(id))
	return &KqiTargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for KqiTarget.
func (c *KqiTargetClient) Delete() *KqiTargetDelete {
	mutation := newKqiTargetMutation(c.config, OpDelete)
	return &KqiTargetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *KqiTargetClient) DeleteOne(kt *KqiTarget) *KqiTargetDeleteOne {
	return c.DeleteOneID(kt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *KqiTargetClient) DeleteOneID(id int) *KqiTargetDeleteOne {
	builder := c.Delete().Where(kqitarget.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KqiTargetDeleteOne{builder}
}

// Query returns a query builder for KqiTarget.
func (c *KqiTargetClient) Query() *KqiTargetQuery {
	return &KqiTargetQuery{config: c.config}
}

// Get returns a KqiTarget entity by its id.
func (c *KqiTargetClient) Get(ctx context.Context, id int) (*KqiTarget, error) {
	return c.Query().Where(kqitarget.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KqiTargetClient) GetX(ctx context.Context, id int) *KqiTarget {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryKqiTargetFk queries the kqiTargetFk edge of a KqiTarget.
func (c *KqiTargetClient) QueryKqiTargetFk(kt *KqiTarget) *KqiQuery {
	query := &KqiQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kqitarget.Table, kqitarget.FieldID, id),
			sqlgraph.To(kqi.Table, kqi.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kqitarget.KqiTargetFkTable, kqitarget.KqiTargetFkColumn),
		)
		fromV = sqlgraph.Neighbors(kt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryKqitargetcomparatorfk queries the kqitargetcomparatorfk edge of a KqiTarget.
func (c *KqiTargetClient) QueryKqitargetcomparatorfk(kt *KqiTarget) *KqiComparatorQuery {
	query := &KqiComparatorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := kt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kqitarget.Table, kqitarget.FieldID, id),
			sqlgraph.To(kqicomparator.Table, kqicomparator.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kqitarget.KqitargetcomparatorfkTable, kqitarget.KqitargetcomparatorfkColumn),
		)
		fromV = sqlgraph.Neighbors(kt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *KqiTargetClient) Hooks() []Hook {
	hooks := c.hooks.KqiTarget
	return append(hooks[:len(hooks):len(hooks)], kqitarget.Hooks[:]...)
}

// KqiTemporalFrequencyClient is a client for the KqiTemporalFrequency schema.
type KqiTemporalFrequencyClient struct {
	config
}

// NewKqiTemporalFrequencyClient returns a client for the KqiTemporalFrequency from the given config.
func NewKqiTemporalFrequencyClient(c config) *KqiTemporalFrequencyClient {
	return &KqiTemporalFrequencyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `kqitemporalfrequency.Hooks(f(g(h())))`.
func (c *KqiTemporalFrequencyClient) Use(hooks ...Hook) {
	c.hooks.KqiTemporalFrequency = append(c.hooks.KqiTemporalFrequency, hooks...)
}

// Create returns a create builder for KqiTemporalFrequency.
func (c *KqiTemporalFrequencyClient) Create() *KqiTemporalFrequencyCreate {
	mutation := newKqiTemporalFrequencyMutation(c.config, OpCreate)
	return &KqiTemporalFrequencyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of KqiTemporalFrequency entities.
func (c *KqiTemporalFrequencyClient) CreateBulk(builders ...*KqiTemporalFrequencyCreate) *KqiTemporalFrequencyCreateBulk {
	return &KqiTemporalFrequencyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for KqiTemporalFrequency.
func (c *KqiTemporalFrequencyClient) Update() *KqiTemporalFrequencyUpdate {
	mutation := newKqiTemporalFrequencyMutation(c.config, OpUpdate)
	return &KqiTemporalFrequencyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KqiTemporalFrequencyClient) UpdateOne(ktf *KqiTemporalFrequency) *KqiTemporalFrequencyUpdateOne {
	mutation := newKqiTemporalFrequencyMutation(c.config, OpUpdateOne, withKqiTemporalFrequency(ktf))
	return &KqiTemporalFrequencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KqiTemporalFrequencyClient) UpdateOneID(id int) *KqiTemporalFrequencyUpdateOne {
	mutation := newKqiTemporalFrequencyMutation(c.config, OpUpdateOne, withKqiTemporalFrequencyID(id))
	return &KqiTemporalFrequencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for KqiTemporalFrequency.
func (c *KqiTemporalFrequencyClient) Delete() *KqiTemporalFrequencyDelete {
	mutation := newKqiTemporalFrequencyMutation(c.config, OpDelete)
	return &KqiTemporalFrequencyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *KqiTemporalFrequencyClient) DeleteOne(ktf *KqiTemporalFrequency) *KqiTemporalFrequencyDeleteOne {
	return c.DeleteOneID(ktf.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *KqiTemporalFrequencyClient) DeleteOneID(id int) *KqiTemporalFrequencyDeleteOne {
	builder := c.Delete().Where(kqitemporalfrequency.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KqiTemporalFrequencyDeleteOne{builder}
}

// Query returns a query builder for KqiTemporalFrequency.
func (c *KqiTemporalFrequencyClient) Query() *KqiTemporalFrequencyQuery {
	return &KqiTemporalFrequencyQuery{config: c.config}
}

// Get returns a KqiTemporalFrequency entity by its id.
func (c *KqiTemporalFrequencyClient) Get(ctx context.Context, id int) (*KqiTemporalFrequency, error) {
	return c.Query().Where(kqitemporalfrequency.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KqiTemporalFrequencyClient) GetX(ctx context.Context, id int) *KqiTemporalFrequency {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryKqiTemporalFrequencyFk queries the kqiTemporalFrequencyFk edge of a KqiTemporalFrequency.
func (c *KqiTemporalFrequencyClient) QueryKqiTemporalFrequencyFk(ktf *KqiTemporalFrequency) *KqiQuery {
	query := &KqiQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ktf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kqitemporalfrequency.Table, kqitemporalfrequency.FieldID, id),
			sqlgraph.To(kqi.Table, kqi.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kqitemporalfrequency.KqiTemporalFrequencyFkTable, kqitemporalfrequency.KqiTemporalFrequencyFkColumn),
		)
		fromV = sqlgraph.Neighbors(ktf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *KqiTemporalFrequencyClient) Hooks() []Hook {
	hooks := c.hooks.KqiTemporalFrequency
	return append(hooks[:len(hooks):len(hooks)], kqitemporalfrequency.Hooks[:]...)
}

// LinkClient is a client for the Link schema.
type LinkClient struct {
	config
}

// NewLinkClient returns a client for the Link from the given config.
func NewLinkClient(c config) *LinkClient {
	return &LinkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `link.Hooks(f(g(h())))`.
func (c *LinkClient) Use(hooks ...Hook) {
	c.hooks.Link = append(c.hooks.Link, hooks...)
}

// Create returns a create builder for Link.
func (c *LinkClient) Create() *LinkCreate {
	mutation := newLinkMutation(c.config, OpCreate)
	return &LinkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Link entities.
func (c *LinkClient) CreateBulk(builders ...*LinkCreate) *LinkCreateBulk {
	return &LinkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Link.
func (c *LinkClient) Update() *LinkUpdate {
	mutation := newLinkMutation(c.config, OpUpdate)
	return &LinkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LinkClient) UpdateOne(l *Link) *LinkUpdateOne {
	mutation := newLinkMutation(c.config, OpUpdateOne, withLink(l))
	return &LinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LinkClient) UpdateOneID(id int) *LinkUpdateOne {
	mutation := newLinkMutation(c.config, OpUpdateOne, withLinkID(id))
	return &LinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Link.
func (c *LinkClient) Delete() *LinkDelete {
	mutation := newLinkMutation(c.config, OpDelete)
	return &LinkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LinkClient) DeleteOne(l *Link) *LinkDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LinkClient) DeleteOneID(id int) *LinkDeleteOne {
	builder := c.Delete().Where(link.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LinkDeleteOne{builder}
}

// Query returns a query builder for Link.
func (c *LinkClient) Query() *LinkQuery {
	return &LinkQuery{config: c.config}
}

// Get returns a Link entity by its id.
func (c *LinkClient) Get(ctx context.Context, id int) (*Link, error) {
	return c.Query().Where(link.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LinkClient) GetX(ctx context.Context, id int) *Link {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPorts queries the ports edge of a Link.
func (c *LinkClient) QueryPorts(l *Link) *EquipmentPortQuery {
	query := &EquipmentPortQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(link.Table, link.FieldID, id),
			sqlgraph.To(equipmentport.Table, equipmentport.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, link.PortsTable, link.PortsColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkOrder queries the work_order edge of a Link.
func (c *LinkClient) QueryWorkOrder(l *Link) *WorkOrderQuery {
	query := &WorkOrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(link.Table, link.FieldID, id),
			sqlgraph.To(workorder.Table, workorder.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, link.WorkOrderTable, link.WorkOrderColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProperties queries the properties edge of a Link.
func (c *LinkClient) QueryProperties(l *Link) *PropertyQuery {
	query := &PropertyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(link.Table, link.FieldID, id),
			sqlgraph.To(property.Table, property.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, link.PropertiesTable, link.PropertiesColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryService queries the service edge of a Link.
func (c *LinkClient) QueryService(l *Link) *ServiceQuery {
	query := &ServiceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(link.Table, link.FieldID, id),
			sqlgraph.To(service.Table, service.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, link.ServiceTable, link.ServicePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LinkClient) Hooks() []Hook {
	hooks := c.hooks.Link
	return append(hooks[:len(hooks):len(hooks)], link.Hooks[:]...)
}

// LocationClient is a client for the Location schema.
type LocationClient struct {
	config
}

// NewLocationClient returns a client for the Location from the given config.
func NewLocationClient(c config) *LocationClient {
	return &LocationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `location.Hooks(f(g(h())))`.
func (c *LocationClient) Use(hooks ...Hook) {
	c.hooks.Location = append(c.hooks.Location, hooks...)
}

// Create returns a create builder for Location.
func (c *LocationClient) Create() *LocationCreate {
	mutation := newLocationMutation(c.config, OpCreate)
	return &LocationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Location entities.
func (c *LocationClient) CreateBulk(builders ...*LocationCreate) *LocationCreateBulk {
	return &LocationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Location.
func (c *LocationClient) Update() *LocationUpdate {
	mutation := newLocationMutation(c.config, OpUpdate)
	return &LocationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LocationClient) UpdateOne(l *Location) *LocationUpdateOne {
	mutation := newLocationMutation(c.config, OpUpdateOne, withLocation(l))
	return &LocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LocationClient) UpdateOneID(id int) *LocationUpdateOne {
	mutation := newLocationMutation(c.config, OpUpdateOne, withLocationID(id))
	return &LocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Location.
func (c *LocationClient) Delete() *LocationDelete {
	mutation := newLocationMutation(c.config, OpDelete)
	return &LocationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LocationClient) DeleteOne(l *Location) *LocationDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LocationClient) DeleteOneID(id int) *LocationDeleteOne {
	builder := c.Delete().Where(location.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LocationDeleteOne{builder}
}

// Query returns a query builder for Location.
func (c *LocationClient) Query() *LocationQuery {
	return &LocationQuery{config: c.config}
}

// Get returns a Location entity by its id.
func (c *LocationClient) Get(ctx context.Context, id int) (*Location, error) {
	return c.Query().Where(location.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LocationClient) GetX(ctx context.Context, id int) *Location {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryType queries the type edge of a Location.
func (c *LocationClient) QueryType(l *Location) *LocationTypeQuery {
	query := &LocationTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, id),
			sqlgraph.To(locationtype.Table, locationtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, location.TypeTable, location.TypeColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a Location.
func (c *LocationClient) QueryParent(l *Location) *LocationQuery {
	query := &LocationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, location.ParentTable, location.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a Location.
func (c *LocationClient) QueryChildren(l *Location) *LocationQuery {
	query := &LocationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, location.ChildrenTable, location.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFiles queries the files edge of a Location.
func (c *LocationClient) QueryFiles(l *Location) *FileQuery {
	query := &FileQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, id),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, location.FilesTable, location.FilesColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHyperlinks queries the hyperlinks edge of a Location.
func (c *LocationClient) QueryHyperlinks(l *Location) *HyperlinkQuery {
	query := &HyperlinkQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, id),
			sqlgraph.To(hyperlink.Table, hyperlink.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, location.HyperlinksTable, location.HyperlinksColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipment queries the equipment edge of a Location.
func (c *LocationClient) QueryEquipment(l *Location) *EquipmentQuery {
	query := &EquipmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, location.EquipmentTable, location.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProperties queries the properties edge of a Location.
func (c *LocationClient) QueryProperties(l *Location) *PropertyQuery {
	query := &PropertyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, id),
			sqlgraph.To(property.Table, property.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, location.PropertiesTable, location.PropertiesColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySurvey queries the survey edge of a Location.
func (c *LocationClient) QuerySurvey(l *Location) *SurveyQuery {
	query := &SurveyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, id),
			sqlgraph.To(survey.Table, survey.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, location.SurveyTable, location.SurveyColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWifiScan queries the wifi_scan edge of a Location.
func (c *LocationClient) QueryWifiScan(l *Location) *SurveyWiFiScanQuery {
	query := &SurveyWiFiScanQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, id),
			sqlgraph.To(surveywifiscan.Table, surveywifiscan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, location.WifiScanTable, location.WifiScanColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCellScan queries the cell_scan edge of a Location.
func (c *LocationClient) QueryCellScan(l *Location) *SurveyCellScanQuery {
	query := &SurveyCellScanQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, id),
			sqlgraph.To(surveycellscan.Table, surveycellscan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, location.CellScanTable, location.CellScanColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkOrders queries the work_orders edge of a Location.
func (c *LocationClient) QueryWorkOrders(l *Location) *WorkOrderQuery {
	query := &WorkOrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, id),
			sqlgraph.To(workorder.Table, workorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, location.WorkOrdersTable, location.WorkOrdersColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFloorPlans queries the floor_plans edge of a Location.
func (c *LocationClient) QueryFloorPlans(l *Location) *FloorPlanQuery {
	query := &FloorPlanQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, id),
			sqlgraph.To(floorplan.Table, floorplan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, location.FloorPlansTable, location.FloorPlansColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LocationClient) Hooks() []Hook {
	hooks := c.hooks.Location
	return append(hooks[:len(hooks):len(hooks)], location.Hooks[:]...)
}

// LocationTypeClient is a client for the LocationType schema.
type LocationTypeClient struct {
	config
}

// NewLocationTypeClient returns a client for the LocationType from the given config.
func NewLocationTypeClient(c config) *LocationTypeClient {
	return &LocationTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `locationtype.Hooks(f(g(h())))`.
func (c *LocationTypeClient) Use(hooks ...Hook) {
	c.hooks.LocationType = append(c.hooks.LocationType, hooks...)
}

// Create returns a create builder for LocationType.
func (c *LocationTypeClient) Create() *LocationTypeCreate {
	mutation := newLocationTypeMutation(c.config, OpCreate)
	return &LocationTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LocationType entities.
func (c *LocationTypeClient) CreateBulk(builders ...*LocationTypeCreate) *LocationTypeCreateBulk {
	return &LocationTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LocationType.
func (c *LocationTypeClient) Update() *LocationTypeUpdate {
	mutation := newLocationTypeMutation(c.config, OpUpdate)
	return &LocationTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LocationTypeClient) UpdateOne(lt *LocationType) *LocationTypeUpdateOne {
	mutation := newLocationTypeMutation(c.config, OpUpdateOne, withLocationType(lt))
	return &LocationTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LocationTypeClient) UpdateOneID(id int) *LocationTypeUpdateOne {
	mutation := newLocationTypeMutation(c.config, OpUpdateOne, withLocationTypeID(id))
	return &LocationTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LocationType.
func (c *LocationTypeClient) Delete() *LocationTypeDelete {
	mutation := newLocationTypeMutation(c.config, OpDelete)
	return &LocationTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LocationTypeClient) DeleteOne(lt *LocationType) *LocationTypeDeleteOne {
	return c.DeleteOneID(lt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LocationTypeClient) DeleteOneID(id int) *LocationTypeDeleteOne {
	builder := c.Delete().Where(locationtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LocationTypeDeleteOne{builder}
}

// Query returns a query builder for LocationType.
func (c *LocationTypeClient) Query() *LocationTypeQuery {
	return &LocationTypeQuery{config: c.config}
}

// Get returns a LocationType entity by its id.
func (c *LocationTypeClient) Get(ctx context.Context, id int) (*LocationType, error) {
	return c.Query().Where(locationtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LocationTypeClient) GetX(ctx context.Context, id int) *LocationType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLocations queries the locations edge of a LocationType.
func (c *LocationTypeClient) QueryLocations(lt *LocationType) *LocationQuery {
	query := &LocationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := lt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(locationtype.Table, locationtype.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, locationtype.LocationsTable, locationtype.LocationsColumn),
		)
		fromV = sqlgraph.Neighbors(lt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPropertyTypes queries the property_types edge of a LocationType.
func (c *LocationTypeClient) QueryPropertyTypes(lt *LocationType) *PropertyTypeQuery {
	query := &PropertyTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := lt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(locationtype.Table, locationtype.FieldID, id),
			sqlgraph.To(propertytype.Table, propertytype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, locationtype.PropertyTypesTable, locationtype.PropertyTypesColumn),
		)
		fromV = sqlgraph.Neighbors(lt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySurveyTemplateCategories queries the survey_template_categories edge of a LocationType.
func (c *LocationTypeClient) QuerySurveyTemplateCategories(lt *LocationType) *SurveyTemplateCategoryQuery {
	query := &SurveyTemplateCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := lt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(locationtype.Table, locationtype.FieldID, id),
			sqlgraph.To(surveytemplatecategory.Table, surveytemplatecategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, locationtype.SurveyTemplateCategoriesTable, locationtype.SurveyTemplateCategoriesColumn),
		)
		fromV = sqlgraph.Neighbors(lt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDocumentCategory queries the document_category edge of a LocationType.
func (c *LocationTypeClient) QueryDocumentCategory(lt *LocationType) *DocumentCategoryQuery {
	query := &DocumentCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := lt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(locationtype.Table, locationtype.FieldID, id),
			sqlgraph.To(documentcategory.Table, documentcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, locationtype.DocumentCategoryTable, locationtype.DocumentCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(lt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LocationTypeClient) Hooks() []Hook {
	hooks := c.hooks.LocationType
	return append(hooks[:len(hooks):len(hooks)], locationtype.Hooks[:]...)
}

// NetworkTypeClient is a client for the NetworkType schema.
type NetworkTypeClient struct {
	config
}

// NewNetworkTypeClient returns a client for the NetworkType from the given config.
func NewNetworkTypeClient(c config) *NetworkTypeClient {
	return &NetworkTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `networktype.Hooks(f(g(h())))`.
func (c *NetworkTypeClient) Use(hooks ...Hook) {
	c.hooks.NetworkType = append(c.hooks.NetworkType, hooks...)
}

// Create returns a create builder for NetworkType.
func (c *NetworkTypeClient) Create() *NetworkTypeCreate {
	mutation := newNetworkTypeMutation(c.config, OpCreate)
	return &NetworkTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NetworkType entities.
func (c *NetworkTypeClient) CreateBulk(builders ...*NetworkTypeCreate) *NetworkTypeCreateBulk {
	return &NetworkTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NetworkType.
func (c *NetworkTypeClient) Update() *NetworkTypeUpdate {
	mutation := newNetworkTypeMutation(c.config, OpUpdate)
	return &NetworkTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NetworkTypeClient) UpdateOne(nt *NetworkType) *NetworkTypeUpdateOne {
	mutation := newNetworkTypeMutation(c.config, OpUpdateOne, withNetworkType(nt))
	return &NetworkTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NetworkTypeClient) UpdateOneID(id int) *NetworkTypeUpdateOne {
	mutation := newNetworkTypeMutation(c.config, OpUpdateOne, withNetworkTypeID(id))
	return &NetworkTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NetworkType.
func (c *NetworkTypeClient) Delete() *NetworkTypeDelete {
	mutation := newNetworkTypeMutation(c.config, OpDelete)
	return &NetworkTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NetworkTypeClient) DeleteOne(nt *NetworkType) *NetworkTypeDeleteOne {
	return c.DeleteOneID(nt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NetworkTypeClient) DeleteOneID(id int) *NetworkTypeDeleteOne {
	builder := c.Delete().Where(networktype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NetworkTypeDeleteOne{builder}
}

// Query returns a query builder for NetworkType.
func (c *NetworkTypeClient) Query() *NetworkTypeQuery {
	return &NetworkTypeQuery{config: c.config}
}

// Get returns a NetworkType entity by its id.
func (c *NetworkTypeClient) Get(ctx context.Context, id int) (*NetworkType, error) {
	return c.Query().Where(networktype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NetworkTypeClient) GetX(ctx context.Context, id int) *NetworkType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFormulaNetworkTypeFK queries the formulaNetworkType_FK edge of a NetworkType.
func (c *NetworkTypeClient) QueryFormulaNetworkTypeFK(nt *NetworkType) *FormulaQuery {
	query := &FormulaQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := nt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(networktype.Table, networktype.FieldID, id),
			sqlgraph.To(formula.Table, formula.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, networktype.FormulaNetworkTypeFKTable, networktype.FormulaNetworkTypeFKColumn),
		)
		fromV = sqlgraph.Neighbors(nt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NetworkTypeClient) Hooks() []Hook {
	hooks := c.hooks.NetworkType
	return append(hooks[:len(hooks):len(hooks)], networktype.Hooks[:]...)
}

// OrganizationClient is a client for the Organization schema.
type OrganizationClient struct {
	config
}

// NewOrganizationClient returns a client for the Organization from the given config.
func NewOrganizationClient(c config) *OrganizationClient {
	return &OrganizationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organization.Hooks(f(g(h())))`.
func (c *OrganizationClient) Use(hooks ...Hook) {
	c.hooks.Organization = append(c.hooks.Organization, hooks...)
}

// Create returns a create builder for Organization.
func (c *OrganizationClient) Create() *OrganizationCreate {
	mutation := newOrganizationMutation(c.config, OpCreate)
	return &OrganizationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Organization entities.
func (c *OrganizationClient) CreateBulk(builders ...*OrganizationCreate) *OrganizationCreateBulk {
	return &OrganizationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Organization.
func (c *OrganizationClient) Update() *OrganizationUpdate {
	mutation := newOrganizationMutation(c.config, OpUpdate)
	return &OrganizationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationClient) UpdateOne(o *Organization) *OrganizationUpdateOne {
	mutation := newOrganizationMutation(c.config, OpUpdateOne, withOrganization(o))
	return &OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationClient) UpdateOneID(id int) *OrganizationUpdateOne {
	mutation := newOrganizationMutation(c.config, OpUpdateOne, withOrganizationID(id))
	return &OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Organization.
func (c *OrganizationClient) Delete() *OrganizationDelete {
	mutation := newOrganizationMutation(c.config, OpDelete)
	return &OrganizationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrganizationClient) DeleteOne(o *Organization) *OrganizationDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrganizationClient) DeleteOneID(id int) *OrganizationDeleteOne {
	builder := c.Delete().Where(organization.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationDeleteOne{builder}
}

// Query returns a query builder for Organization.
func (c *OrganizationClient) Query() *OrganizationQuery {
	return &OrganizationQuery{config: c.config}
}

// Get returns a Organization entity by its id.
func (c *OrganizationClient) Get(ctx context.Context, id int) (*Organization, error) {
	return c.Query().Where(organization.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationClient) GetX(ctx context.Context, id int) *Organization {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserFk queries the user_fk edge of a Organization.
func (c *OrganizationClient) QueryUserFk(o *Organization) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.UserFkTable, organization.UserFkColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkOrderFk queries the work_order_fk edge of a Organization.
func (c *OrganizationClient) QueryWorkOrderFk(o *Organization) *WorkOrderQuery {
	query := &WorkOrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(workorder.Table, workorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.WorkOrderFkTable, organization.WorkOrderFkColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPolicies queries the policies edge of a Organization.
func (c *OrganizationClient) QueryPolicies(o *Organization) *PermissionsPolicyQuery {
	query := &PermissionsPolicyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(permissionspolicy.Table, permissionspolicy.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, organization.PoliciesTable, organization.PoliciesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrganizationClient) Hooks() []Hook {
	hooks := c.hooks.Organization
	return append(hooks[:len(hooks):len(hooks)], organization.Hooks[:]...)
}

// ParameterCatalogClient is a client for the ParameterCatalog schema.
type ParameterCatalogClient struct {
	config
}

// NewParameterCatalogClient returns a client for the ParameterCatalog from the given config.
func NewParameterCatalogClient(c config) *ParameterCatalogClient {
	return &ParameterCatalogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `parametercatalog.Hooks(f(g(h())))`.
func (c *ParameterCatalogClient) Use(hooks ...Hook) {
	c.hooks.ParameterCatalog = append(c.hooks.ParameterCatalog, hooks...)
}

// Create returns a create builder for ParameterCatalog.
func (c *ParameterCatalogClient) Create() *ParameterCatalogCreate {
	mutation := newParameterCatalogMutation(c.config, OpCreate)
	return &ParameterCatalogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ParameterCatalog entities.
func (c *ParameterCatalogClient) CreateBulk(builders ...*ParameterCatalogCreate) *ParameterCatalogCreateBulk {
	return &ParameterCatalogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ParameterCatalog.
func (c *ParameterCatalogClient) Update() *ParameterCatalogUpdate {
	mutation := newParameterCatalogMutation(c.config, OpUpdate)
	return &ParameterCatalogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ParameterCatalogClient) UpdateOne(pc *ParameterCatalog) *ParameterCatalogUpdateOne {
	mutation := newParameterCatalogMutation(c.config, OpUpdateOne, withParameterCatalog(pc))
	return &ParameterCatalogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ParameterCatalogClient) UpdateOneID(id int) *ParameterCatalogUpdateOne {
	mutation := newParameterCatalogMutation(c.config, OpUpdateOne, withParameterCatalogID(id))
	return &ParameterCatalogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ParameterCatalog.
func (c *ParameterCatalogClient) Delete() *ParameterCatalogDelete {
	mutation := newParameterCatalogMutation(c.config, OpDelete)
	return &ParameterCatalogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ParameterCatalogClient) DeleteOne(pc *ParameterCatalog) *ParameterCatalogDeleteOne {
	return c.DeleteOneID(pc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ParameterCatalogClient) DeleteOneID(id int) *ParameterCatalogDeleteOne {
	builder := c.Delete().Where(parametercatalog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ParameterCatalogDeleteOne{builder}
}

// Query returns a query builder for ParameterCatalog.
func (c *ParameterCatalogClient) Query() *ParameterCatalogQuery {
	return &ParameterCatalogQuery{config: c.config}
}

// Get returns a ParameterCatalog entity by its id.
func (c *ParameterCatalogClient) Get(ctx context.Context, id int) (*ParameterCatalog, error) {
	return c.Query().Where(parametercatalog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ParameterCatalogClient) GetX(ctx context.Context, id int) *ParameterCatalog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPropertyCategories queries the property_categories edge of a ParameterCatalog.
func (c *ParameterCatalogClient) QueryPropertyCategories(pc *ParameterCatalog) *PropertyCategoryQuery {
	query := &PropertyCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(parametercatalog.Table, parametercatalog.FieldID, id),
			sqlgraph.To(propertycategory.Table, propertycategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, parametercatalog.PropertyCategoriesTable, parametercatalog.PropertyCategoriesColumn),
		)
		fromV = sqlgraph.Neighbors(pc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ParameterCatalogClient) Hooks() []Hook {
	hooks := c.hooks.ParameterCatalog
	return append(hooks[:len(hooks):len(hooks)], parametercatalog.Hooks[:]...)
}

// PermissionsPolicyClient is a client for the PermissionsPolicy schema.
type PermissionsPolicyClient struct {
	config
}

// NewPermissionsPolicyClient returns a client for the PermissionsPolicy from the given config.
func NewPermissionsPolicyClient(c config) *PermissionsPolicyClient {
	return &PermissionsPolicyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `permissionspolicy.Hooks(f(g(h())))`.
func (c *PermissionsPolicyClient) Use(hooks ...Hook) {
	c.hooks.PermissionsPolicy = append(c.hooks.PermissionsPolicy, hooks...)
}

// Create returns a create builder for PermissionsPolicy.
func (c *PermissionsPolicyClient) Create() *PermissionsPolicyCreate {
	mutation := newPermissionsPolicyMutation(c.config, OpCreate)
	return &PermissionsPolicyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PermissionsPolicy entities.
func (c *PermissionsPolicyClient) CreateBulk(builders ...*PermissionsPolicyCreate) *PermissionsPolicyCreateBulk {
	return &PermissionsPolicyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PermissionsPolicy.
func (c *PermissionsPolicyClient) Update() *PermissionsPolicyUpdate {
	mutation := newPermissionsPolicyMutation(c.config, OpUpdate)
	return &PermissionsPolicyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PermissionsPolicyClient) UpdateOne(pp *PermissionsPolicy) *PermissionsPolicyUpdateOne {
	mutation := newPermissionsPolicyMutation(c.config, OpUpdateOne, withPermissionsPolicy(pp))
	return &PermissionsPolicyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PermissionsPolicyClient) UpdateOneID(id int) *PermissionsPolicyUpdateOne {
	mutation := newPermissionsPolicyMutation(c.config, OpUpdateOne, withPermissionsPolicyID(id))
	return &PermissionsPolicyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PermissionsPolicy.
func (c *PermissionsPolicyClient) Delete() *PermissionsPolicyDelete {
	mutation := newPermissionsPolicyMutation(c.config, OpDelete)
	return &PermissionsPolicyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PermissionsPolicyClient) DeleteOne(pp *PermissionsPolicy) *PermissionsPolicyDeleteOne {
	return c.DeleteOneID(pp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PermissionsPolicyClient) DeleteOneID(id int) *PermissionsPolicyDeleteOne {
	builder := c.Delete().Where(permissionspolicy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PermissionsPolicyDeleteOne{builder}
}

// Query returns a query builder for PermissionsPolicy.
func (c *PermissionsPolicyClient) Query() *PermissionsPolicyQuery {
	return &PermissionsPolicyQuery{config: c.config}
}

// Get returns a PermissionsPolicy entity by its id.
func (c *PermissionsPolicyClient) Get(ctx context.Context, id int) (*PermissionsPolicy, error) {
	return c.Query().Where(permissionspolicy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PermissionsPolicyClient) GetX(ctx context.Context, id int) *PermissionsPolicy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGroups queries the groups edge of a PermissionsPolicy.
func (c *PermissionsPolicyClient) QueryGroups(pp *PermissionsPolicy) *UsersGroupQuery {
	query := &UsersGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permissionspolicy.Table, permissionspolicy.FieldID, id),
			sqlgraph.To(usersgroup.Table, usersgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, permissionspolicy.GroupsTable, permissionspolicy.GroupsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a PermissionsPolicy.
func (c *PermissionsPolicyClient) QueryOrganization(pp *PermissionsPolicy) *OrganizationQuery {
	query := &OrganizationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permissionspolicy.Table, permissionspolicy.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, permissionspolicy.OrganizationTable, permissionspolicy.OrganizationPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PermissionsPolicyClient) Hooks() []Hook {
	hooks := c.hooks.PermissionsPolicy
	return append(hooks[:len(hooks):len(hooks)], permissionspolicy.Hooks[:]...)
}

// ProjectClient is a client for the Project schema.
type ProjectClient struct {
	config
}

// NewProjectClient returns a client for the Project from the given config.
func NewProjectClient(c config) *ProjectClient {
	return &ProjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `project.Hooks(f(g(h())))`.
func (c *ProjectClient) Use(hooks ...Hook) {
	c.hooks.Project = append(c.hooks.Project, hooks...)
}

// Create returns a create builder for Project.
func (c *ProjectClient) Create() *ProjectCreate {
	mutation := newProjectMutation(c.config, OpCreate)
	return &ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Project entities.
func (c *ProjectClient) CreateBulk(builders ...*ProjectCreate) *ProjectCreateBulk {
	return &ProjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Project.
func (c *ProjectClient) Update() *ProjectUpdate {
	mutation := newProjectMutation(c.config, OpUpdate)
	return &ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectClient) UpdateOne(pr *Project) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProject(pr))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectClient) UpdateOneID(id int) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProjectID(id))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Project.
func (c *ProjectClient) Delete() *ProjectDelete {
	mutation := newProjectMutation(c.config, OpDelete)
	return &ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProjectClient) DeleteOne(pr *Project) *ProjectDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProjectClient) DeleteOneID(id int) *ProjectDeleteOne {
	builder := c.Delete().Where(project.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectDeleteOne{builder}
}

// Query returns a query builder for Project.
func (c *ProjectClient) Query() *ProjectQuery {
	return &ProjectQuery{config: c.config}
}

// Get returns a Project entity by its id.
func (c *ProjectClient) Get(ctx context.Context, id int) (*Project, error) {
	return c.Query().Where(project.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectClient) GetX(ctx context.Context, id int) *Project {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryType queries the type edge of a Project.
func (c *ProjectClient) QueryType(pr *Project) *ProjectTypeQuery {
	query := &ProjectTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(projecttype.Table, projecttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, project.TypeTable, project.TypeColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTemplate queries the template edge of a Project.
func (c *ProjectClient) QueryTemplate(pr *Project) *ProjectTemplateQuery {
	query := &ProjectTemplateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(projecttemplate.Table, projecttemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, project.TemplateTable, project.TemplateColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLocation queries the location edge of a Project.
func (c *ProjectClient) QueryLocation(pr *Project) *LocationQuery {
	query := &LocationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, project.LocationTable, project.LocationColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryComments queries the comments edge of a Project.
func (c *ProjectClient) QueryComments(pr *Project) *CommentQuery {
	query := &CommentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(comment.Table, comment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.CommentsTable, project.CommentsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkOrders queries the work_orders edge of a Project.
func (c *ProjectClient) QueryWorkOrders(pr *Project) *WorkOrderQuery {
	query := &WorkOrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(workorder.Table, workorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.WorkOrdersTable, project.WorkOrdersColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProperties queries the properties edge of a Project.
func (c *ProjectClient) QueryProperties(pr *Project) *PropertyQuery {
	query := &PropertyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(property.Table, property.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.PropertiesTable, project.PropertiesColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreator queries the creator edge of a Project.
func (c *ProjectClient) QueryCreator(pr *Project) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, project.CreatorTable, project.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectClient) Hooks() []Hook {
	hooks := c.hooks.Project
	return append(hooks[:len(hooks):len(hooks)], project.Hooks[:]...)
}

// ProjectTemplateClient is a client for the ProjectTemplate schema.
type ProjectTemplateClient struct {
	config
}

// NewProjectTemplateClient returns a client for the ProjectTemplate from the given config.
func NewProjectTemplateClient(c config) *ProjectTemplateClient {
	return &ProjectTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projecttemplate.Hooks(f(g(h())))`.
func (c *ProjectTemplateClient) Use(hooks ...Hook) {
	c.hooks.ProjectTemplate = append(c.hooks.ProjectTemplate, hooks...)
}

// Create returns a create builder for ProjectTemplate.
func (c *ProjectTemplateClient) Create() *ProjectTemplateCreate {
	mutation := newProjectTemplateMutation(c.config, OpCreate)
	return &ProjectTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectTemplate entities.
func (c *ProjectTemplateClient) CreateBulk(builders ...*ProjectTemplateCreate) *ProjectTemplateCreateBulk {
	return &ProjectTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectTemplate.
func (c *ProjectTemplateClient) Update() *ProjectTemplateUpdate {
	mutation := newProjectTemplateMutation(c.config, OpUpdate)
	return &ProjectTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectTemplateClient) UpdateOne(pt *ProjectTemplate) *ProjectTemplateUpdateOne {
	mutation := newProjectTemplateMutation(c.config, OpUpdateOne, withProjectTemplate(pt))
	return &ProjectTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectTemplateClient) UpdateOneID(id int) *ProjectTemplateUpdateOne {
	mutation := newProjectTemplateMutation(c.config, OpUpdateOne, withProjectTemplateID(id))
	return &ProjectTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectTemplate.
func (c *ProjectTemplateClient) Delete() *ProjectTemplateDelete {
	mutation := newProjectTemplateMutation(c.config, OpDelete)
	return &ProjectTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProjectTemplateClient) DeleteOne(pt *ProjectTemplate) *ProjectTemplateDeleteOne {
	return c.DeleteOneID(pt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProjectTemplateClient) DeleteOneID(id int) *ProjectTemplateDeleteOne {
	builder := c.Delete().Where(projecttemplate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectTemplateDeleteOne{builder}
}

// Query returns a query builder for ProjectTemplate.
func (c *ProjectTemplateClient) Query() *ProjectTemplateQuery {
	return &ProjectTemplateQuery{config: c.config}
}

// Get returns a ProjectTemplate entity by its id.
func (c *ProjectTemplateClient) Get(ctx context.Context, id int) (*ProjectTemplate, error) {
	return c.Query().Where(projecttemplate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectTemplateClient) GetX(ctx context.Context, id int) *ProjectTemplate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProperties queries the properties edge of a ProjectTemplate.
func (c *ProjectTemplateClient) QueryProperties(pt *ProjectTemplate) *PropertyTypeQuery {
	query := &PropertyTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projecttemplate.Table, projecttemplate.FieldID, id),
			sqlgraph.To(propertytype.Table, propertytype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, projecttemplate.PropertiesTable, projecttemplate.PropertiesColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkOrders queries the work_orders edge of a ProjectTemplate.
func (c *ProjectTemplateClient) QueryWorkOrders(pt *ProjectTemplate) *WorkOrderDefinitionQuery {
	query := &WorkOrderDefinitionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projecttemplate.Table, projecttemplate.FieldID, id),
			sqlgraph.To(workorderdefinition.Table, workorderdefinition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, projecttemplate.WorkOrdersTable, projecttemplate.WorkOrdersColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryType queries the type edge of a ProjectTemplate.
func (c *ProjectTemplateClient) QueryType(pt *ProjectTemplate) *ProjectTypeQuery {
	query := &ProjectTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projecttemplate.Table, projecttemplate.FieldID, id),
			sqlgraph.To(projecttype.Table, projecttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, projecttemplate.TypeTable, projecttemplate.TypeColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectTemplateClient) Hooks() []Hook {
	hooks := c.hooks.ProjectTemplate
	return append(hooks[:len(hooks):len(hooks)], projecttemplate.Hooks[:]...)
}

// ProjectTypeClient is a client for the ProjectType schema.
type ProjectTypeClient struct {
	config
}

// NewProjectTypeClient returns a client for the ProjectType from the given config.
func NewProjectTypeClient(c config) *ProjectTypeClient {
	return &ProjectTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projecttype.Hooks(f(g(h())))`.
func (c *ProjectTypeClient) Use(hooks ...Hook) {
	c.hooks.ProjectType = append(c.hooks.ProjectType, hooks...)
}

// Create returns a create builder for ProjectType.
func (c *ProjectTypeClient) Create() *ProjectTypeCreate {
	mutation := newProjectTypeMutation(c.config, OpCreate)
	return &ProjectTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectType entities.
func (c *ProjectTypeClient) CreateBulk(builders ...*ProjectTypeCreate) *ProjectTypeCreateBulk {
	return &ProjectTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectType.
func (c *ProjectTypeClient) Update() *ProjectTypeUpdate {
	mutation := newProjectTypeMutation(c.config, OpUpdate)
	return &ProjectTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectTypeClient) UpdateOne(pt *ProjectType) *ProjectTypeUpdateOne {
	mutation := newProjectTypeMutation(c.config, OpUpdateOne, withProjectType(pt))
	return &ProjectTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectTypeClient) UpdateOneID(id int) *ProjectTypeUpdateOne {
	mutation := newProjectTypeMutation(c.config, OpUpdateOne, withProjectTypeID(id))
	return &ProjectTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectType.
func (c *ProjectTypeClient) Delete() *ProjectTypeDelete {
	mutation := newProjectTypeMutation(c.config, OpDelete)
	return &ProjectTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProjectTypeClient) DeleteOne(pt *ProjectType) *ProjectTypeDeleteOne {
	return c.DeleteOneID(pt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProjectTypeClient) DeleteOneID(id int) *ProjectTypeDeleteOne {
	builder := c.Delete().Where(projecttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectTypeDeleteOne{builder}
}

// Query returns a query builder for ProjectType.
func (c *ProjectTypeClient) Query() *ProjectTypeQuery {
	return &ProjectTypeQuery{config: c.config}
}

// Get returns a ProjectType entity by its id.
func (c *ProjectTypeClient) Get(ctx context.Context, id int) (*ProjectType, error) {
	return c.Query().Where(projecttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectTypeClient) GetX(ctx context.Context, id int) *ProjectType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProperties queries the properties edge of a ProjectType.
func (c *ProjectTypeClient) QueryProperties(pt *ProjectType) *PropertyTypeQuery {
	query := &PropertyTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projecttype.Table, projecttype.FieldID, id),
			sqlgraph.To(propertytype.Table, propertytype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, projecttype.PropertiesTable, projecttype.PropertiesColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkOrders queries the work_orders edge of a ProjectType.
func (c *ProjectTypeClient) QueryWorkOrders(pt *ProjectType) *WorkOrderDefinitionQuery {
	query := &WorkOrderDefinitionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projecttype.Table, projecttype.FieldID, id),
			sqlgraph.To(workorderdefinition.Table, workorderdefinition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, projecttype.WorkOrdersTable, projecttype.WorkOrdersColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjects queries the projects edge of a ProjectType.
func (c *ProjectTypeClient) QueryProjects(pt *ProjectType) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projecttype.Table, projecttype.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, projecttype.ProjectsTable, projecttype.ProjectsColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectTypeClient) Hooks() []Hook {
	hooks := c.hooks.ProjectType
	return append(hooks[:len(hooks):len(hooks)], projecttype.Hooks[:]...)
}

// PropertyClient is a client for the Property schema.
type PropertyClient struct {
	config
}

// NewPropertyClient returns a client for the Property from the given config.
func NewPropertyClient(c config) *PropertyClient {
	return &PropertyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `property.Hooks(f(g(h())))`.
func (c *PropertyClient) Use(hooks ...Hook) {
	c.hooks.Property = append(c.hooks.Property, hooks...)
}

// Create returns a create builder for Property.
func (c *PropertyClient) Create() *PropertyCreate {
	mutation := newPropertyMutation(c.config, OpCreate)
	return &PropertyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Property entities.
func (c *PropertyClient) CreateBulk(builders ...*PropertyCreate) *PropertyCreateBulk {
	return &PropertyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Property.
func (c *PropertyClient) Update() *PropertyUpdate {
	mutation := newPropertyMutation(c.config, OpUpdate)
	return &PropertyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PropertyClient) UpdateOne(pr *Property) *PropertyUpdateOne {
	mutation := newPropertyMutation(c.config, OpUpdateOne, withProperty(pr))
	return &PropertyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PropertyClient) UpdateOneID(id int) *PropertyUpdateOne {
	mutation := newPropertyMutation(c.config, OpUpdateOne, withPropertyID(id))
	return &PropertyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Property.
func (c *PropertyClient) Delete() *PropertyDelete {
	mutation := newPropertyMutation(c.config, OpDelete)
	return &PropertyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PropertyClient) DeleteOne(pr *Property) *PropertyDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PropertyClient) DeleteOneID(id int) *PropertyDeleteOne {
	builder := c.Delete().Where(property.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PropertyDeleteOne{builder}
}

// Query returns a query builder for Property.
func (c *PropertyClient) Query() *PropertyQuery {
	return &PropertyQuery{config: c.config}
}

// Get returns a Property entity by its id.
func (c *PropertyClient) Get(ctx context.Context, id int) (*Property, error) {
	return c.Query().Where(property.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PropertyClient) GetX(ctx context.Context, id int) *Property {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryType queries the type edge of a Property.
func (c *PropertyClient) QueryType(pr *Property) *PropertyTypeQuery {
	query := &PropertyTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(property.Table, property.FieldID, id),
			sqlgraph.To(propertytype.Table, propertytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, property.TypeTable, property.TypeColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLocation queries the location edge of a Property.
func (c *PropertyClient) QueryLocation(pr *Property) *LocationQuery {
	query := &LocationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(property.Table, property.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, property.LocationTable, property.LocationColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipment queries the equipment edge of a Property.
func (c *PropertyClient) QueryEquipment(pr *Property) *EquipmentQuery {
	query := &EquipmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(property.Table, property.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, property.EquipmentTable, property.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryService queries the service edge of a Property.
func (c *PropertyClient) QueryService(pr *Property) *ServiceQuery {
	query := &ServiceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(property.Table, property.FieldID, id),
			sqlgraph.To(service.Table, service.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, property.ServiceTable, property.ServiceColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipmentPort queries the equipment_port edge of a Property.
func (c *PropertyClient) QueryEquipmentPort(pr *Property) *EquipmentPortQuery {
	query := &EquipmentPortQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(property.Table, property.FieldID, id),
			sqlgraph.To(equipmentport.Table, equipmentport.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, property.EquipmentPortTable, property.EquipmentPortColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLink queries the link edge of a Property.
func (c *PropertyClient) QueryLink(pr *Property) *LinkQuery {
	query := &LinkQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(property.Table, property.FieldID, id),
			sqlgraph.To(link.Table, link.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, property.LinkTable, property.LinkColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkOrder queries the work_order edge of a Property.
func (c *PropertyClient) QueryWorkOrder(pr *Property) *WorkOrderQuery {
	query := &WorkOrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(property.Table, property.FieldID, id),
			sqlgraph.To(workorder.Table, workorder.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, property.WorkOrderTable, property.WorkOrderColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProject queries the project edge of a Property.
func (c *PropertyClient) QueryProject(pr *Property) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(property.Table, property.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, property.ProjectTable, property.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipmentValue queries the equipment_value edge of a Property.
func (c *PropertyClient) QueryEquipmentValue(pr *Property) *EquipmentQuery {
	query := &EquipmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(property.Table, property.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, property.EquipmentValueTable, property.EquipmentValueColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLocationValue queries the location_value edge of a Property.
func (c *PropertyClient) QueryLocationValue(pr *Property) *LocationQuery {
	query := &LocationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(property.Table, property.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, property.LocationValueTable, property.LocationValueColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryServiceValue queries the service_value edge of a Property.
func (c *PropertyClient) QueryServiceValue(pr *Property) *ServiceQuery {
	query := &ServiceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(property.Table, property.FieldID, id),
			sqlgraph.To(service.Table, service.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, property.ServiceValueTable, property.ServiceValueColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkOrderValue queries the work_order_value edge of a Property.
func (c *PropertyClient) QueryWorkOrderValue(pr *Property) *WorkOrderQuery {
	query := &WorkOrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(property.Table, property.FieldID, id),
			sqlgraph.To(workorder.Table, workorder.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, property.WorkOrderValueTable, property.WorkOrderValueColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserValue queries the user_value edge of a Property.
func (c *PropertyClient) QueryUserValue(pr *Property) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(property.Table, property.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, property.UserValueTable, property.UserValueColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectValue queries the project_value edge of a Property.
func (c *PropertyClient) QueryProjectValue(pr *Property) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(property.Table, property.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, property.ProjectValueTable, property.ProjectValueColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PropertyClient) Hooks() []Hook {
	hooks := c.hooks.Property
	return append(hooks[:len(hooks):len(hooks)], property.Hooks[:]...)
}

// PropertyCategoryClient is a client for the PropertyCategory schema.
type PropertyCategoryClient struct {
	config
}

// NewPropertyCategoryClient returns a client for the PropertyCategory from the given config.
func NewPropertyCategoryClient(c config) *PropertyCategoryClient {
	return &PropertyCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `propertycategory.Hooks(f(g(h())))`.
func (c *PropertyCategoryClient) Use(hooks ...Hook) {
	c.hooks.PropertyCategory = append(c.hooks.PropertyCategory, hooks...)
}

// Create returns a create builder for PropertyCategory.
func (c *PropertyCategoryClient) Create() *PropertyCategoryCreate {
	mutation := newPropertyCategoryMutation(c.config, OpCreate)
	return &PropertyCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PropertyCategory entities.
func (c *PropertyCategoryClient) CreateBulk(builders ...*PropertyCategoryCreate) *PropertyCategoryCreateBulk {
	return &PropertyCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PropertyCategory.
func (c *PropertyCategoryClient) Update() *PropertyCategoryUpdate {
	mutation := newPropertyCategoryMutation(c.config, OpUpdate)
	return &PropertyCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PropertyCategoryClient) UpdateOne(pc *PropertyCategory) *PropertyCategoryUpdateOne {
	mutation := newPropertyCategoryMutation(c.config, OpUpdateOne, withPropertyCategory(pc))
	return &PropertyCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PropertyCategoryClient) UpdateOneID(id int) *PropertyCategoryUpdateOne {
	mutation := newPropertyCategoryMutation(c.config, OpUpdateOne, withPropertyCategoryID(id))
	return &PropertyCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PropertyCategory.
func (c *PropertyCategoryClient) Delete() *PropertyCategoryDelete {
	mutation := newPropertyCategoryMutation(c.config, OpDelete)
	return &PropertyCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PropertyCategoryClient) DeleteOne(pc *PropertyCategory) *PropertyCategoryDeleteOne {
	return c.DeleteOneID(pc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PropertyCategoryClient) DeleteOneID(id int) *PropertyCategoryDeleteOne {
	builder := c.Delete().Where(propertycategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PropertyCategoryDeleteOne{builder}
}

// Query returns a query builder for PropertyCategory.
func (c *PropertyCategoryClient) Query() *PropertyCategoryQuery {
	return &PropertyCategoryQuery{config: c.config}
}

// Get returns a PropertyCategory entity by its id.
func (c *PropertyCategoryClient) Get(ctx context.Context, id int) (*PropertyCategory, error) {
	return c.Query().Where(propertycategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PropertyCategoryClient) GetX(ctx context.Context, id int) *PropertyCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPropertiesType queries the properties_type edge of a PropertyCategory.
func (c *PropertyCategoryClient) QueryPropertiesType(pc *PropertyCategory) *PropertyTypeQuery {
	query := &PropertyTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(propertycategory.Table, propertycategory.FieldID, id),
			sqlgraph.To(propertytype.Table, propertytype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, propertycategory.PropertiesTypeTable, propertycategory.PropertiesTypeColumn),
		)
		fromV = sqlgraph.Neighbors(pc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParameterCatalog queries the parameter_catalog edge of a PropertyCategory.
func (c *PropertyCategoryClient) QueryParameterCatalog(pc *PropertyCategory) *ParameterCatalogQuery {
	query := &ParameterCatalogQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(propertycategory.Table, propertycategory.FieldID, id),
			sqlgraph.To(parametercatalog.Table, parametercatalog.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, propertycategory.ParameterCatalogTable, propertycategory.ParameterCatalogColumn),
		)
		fromV = sqlgraph.Neighbors(pc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PropertyCategoryClient) Hooks() []Hook {
	hooks := c.hooks.PropertyCategory
	return append(hooks[:len(hooks):len(hooks)], propertycategory.Hooks[:]...)
}

// PropertyTypeClient is a client for the PropertyType schema.
type PropertyTypeClient struct {
	config
}

// NewPropertyTypeClient returns a client for the PropertyType from the given config.
func NewPropertyTypeClient(c config) *PropertyTypeClient {
	return &PropertyTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `propertytype.Hooks(f(g(h())))`.
func (c *PropertyTypeClient) Use(hooks ...Hook) {
	c.hooks.PropertyType = append(c.hooks.PropertyType, hooks...)
}

// Create returns a create builder for PropertyType.
func (c *PropertyTypeClient) Create() *PropertyTypeCreate {
	mutation := newPropertyTypeMutation(c.config, OpCreate)
	return &PropertyTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PropertyType entities.
func (c *PropertyTypeClient) CreateBulk(builders ...*PropertyTypeCreate) *PropertyTypeCreateBulk {
	return &PropertyTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PropertyType.
func (c *PropertyTypeClient) Update() *PropertyTypeUpdate {
	mutation := newPropertyTypeMutation(c.config, OpUpdate)
	return &PropertyTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PropertyTypeClient) UpdateOne(pt *PropertyType) *PropertyTypeUpdateOne {
	mutation := newPropertyTypeMutation(c.config, OpUpdateOne, withPropertyType(pt))
	return &PropertyTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PropertyTypeClient) UpdateOneID(id int) *PropertyTypeUpdateOne {
	mutation := newPropertyTypeMutation(c.config, OpUpdateOne, withPropertyTypeID(id))
	return &PropertyTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PropertyType.
func (c *PropertyTypeClient) Delete() *PropertyTypeDelete {
	mutation := newPropertyTypeMutation(c.config, OpDelete)
	return &PropertyTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PropertyTypeClient) DeleteOne(pt *PropertyType) *PropertyTypeDeleteOne {
	return c.DeleteOneID(pt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PropertyTypeClient) DeleteOneID(id int) *PropertyTypeDeleteOne {
	builder := c.Delete().Where(propertytype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PropertyTypeDeleteOne{builder}
}

// Query returns a query builder for PropertyType.
func (c *PropertyTypeClient) Query() *PropertyTypeQuery {
	return &PropertyTypeQuery{config: c.config}
}

// Get returns a PropertyType entity by its id.
func (c *PropertyTypeClient) Get(ctx context.Context, id int) (*PropertyType, error) {
	return c.Query().Where(propertytype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PropertyTypeClient) GetX(ctx context.Context, id int) *PropertyType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProperties queries the properties edge of a PropertyType.
func (c *PropertyTypeClient) QueryProperties(pt *PropertyType) *PropertyQuery {
	query := &PropertyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(propertytype.Table, propertytype.FieldID, id),
			sqlgraph.To(property.Table, property.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, propertytype.PropertiesTable, propertytype.PropertiesColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLocationType queries the location_type edge of a PropertyType.
func (c *PropertyTypeClient) QueryLocationType(pt *PropertyType) *LocationTypeQuery {
	query := &LocationTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(propertytype.Table, propertytype.FieldID, id),
			sqlgraph.To(locationtype.Table, locationtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, propertytype.LocationTypeTable, propertytype.LocationTypeColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipmentPortType queries the equipment_port_type edge of a PropertyType.
func (c *PropertyTypeClient) QueryEquipmentPortType(pt *PropertyType) *EquipmentPortTypeQuery {
	query := &EquipmentPortTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(propertytype.Table, propertytype.FieldID, id),
			sqlgraph.To(equipmentporttype.Table, equipmentporttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, propertytype.EquipmentPortTypeTable, propertytype.EquipmentPortTypeColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLinkEquipmentPortType queries the link_equipment_port_type edge of a PropertyType.
func (c *PropertyTypeClient) QueryLinkEquipmentPortType(pt *PropertyType) *EquipmentPortTypeQuery {
	query := &EquipmentPortTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(propertytype.Table, propertytype.FieldID, id),
			sqlgraph.To(equipmentporttype.Table, equipmentporttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, propertytype.LinkEquipmentPortTypeTable, propertytype.LinkEquipmentPortTypeColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipmentType queries the equipment_type edge of a PropertyType.
func (c *PropertyTypeClient) QueryEquipmentType(pt *PropertyType) *EquipmentTypeQuery {
	query := &EquipmentTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(propertytype.Table, propertytype.FieldID, id),
			sqlgraph.To(equipmenttype.Table, equipmenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, propertytype.EquipmentTypeTable, propertytype.EquipmentTypeColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryServiceType queries the service_type edge of a PropertyType.
func (c *PropertyTypeClient) QueryServiceType(pt *PropertyType) *ServiceTypeQuery {
	query := &ServiceTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(propertytype.Table, propertytype.FieldID, id),
			sqlgraph.To(servicetype.Table, servicetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, propertytype.ServiceTypeTable, propertytype.ServiceTypeColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkOrderType queries the work_order_type edge of a PropertyType.
func (c *PropertyTypeClient) QueryWorkOrderType(pt *PropertyType) *WorkOrderTypeQuery {
	query := &WorkOrderTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(propertytype.Table, propertytype.FieldID, id),
			sqlgraph.To(workordertype.Table, workordertype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, propertytype.WorkOrderTypeTable, propertytype.WorkOrderTypeColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkOrderTemplate queries the work_order_template edge of a PropertyType.
func (c *PropertyTypeClient) QueryWorkOrderTemplate(pt *PropertyType) *WorkOrderTemplateQuery {
	query := &WorkOrderTemplateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(propertytype.Table, propertytype.FieldID, id),
			sqlgraph.To(workordertemplate.Table, workordertemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, propertytype.WorkOrderTemplateTable, propertytype.WorkOrderTemplateColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectType queries the project_type edge of a PropertyType.
func (c *PropertyTypeClient) QueryProjectType(pt *PropertyType) *ProjectTypeQuery {
	query := &ProjectTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(propertytype.Table, propertytype.FieldID, id),
			sqlgraph.To(projecttype.Table, projecttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, propertytype.ProjectTypeTable, propertytype.ProjectTypeColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectTemplate queries the project_template edge of a PropertyType.
func (c *PropertyTypeClient) QueryProjectTemplate(pt *PropertyType) *ProjectTemplateQuery {
	query := &ProjectTemplateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(propertytype.Table, propertytype.FieldID, id),
			sqlgraph.To(projecttemplate.Table, projecttemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, propertytype.ProjectTemplateTable, propertytype.ProjectTemplateColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkerType queries the worker_type edge of a PropertyType.
func (c *PropertyTypeClient) QueryWorkerType(pt *PropertyType) *WorkerTypeQuery {
	query := &WorkerTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(propertytype.Table, propertytype.FieldID, id),
			sqlgraph.To(workertype.Table, workertype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, propertytype.WorkerTypeTable, propertytype.WorkerTypeColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPropertyCategory queries the property_category edge of a PropertyType.
func (c *PropertyTypeClient) QueryPropertyCategory(pt *PropertyType) *PropertyCategoryQuery {
	query := &PropertyCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(propertytype.Table, propertytype.FieldID, id),
			sqlgraph.To(propertycategory.Table, propertycategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, propertytype.PropertyCategoryTable, propertytype.PropertyCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PropertyTypeClient) Hooks() []Hook {
	hooks := c.hooks.PropertyType
	return append(hooks[:len(hooks):len(hooks)], propertytype.Hooks[:]...)
}

// RecommendationsClient is a client for the Recommendations schema.
type RecommendationsClient struct {
	config
}

// NewRecommendationsClient returns a client for the Recommendations from the given config.
func NewRecommendationsClient(c config) *RecommendationsClient {
	return &RecommendationsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `recommendations.Hooks(f(g(h())))`.
func (c *RecommendationsClient) Use(hooks ...Hook) {
	c.hooks.Recommendations = append(c.hooks.Recommendations, hooks...)
}

// Create returns a create builder for Recommendations.
func (c *RecommendationsClient) Create() *RecommendationsCreate {
	mutation := newRecommendationsMutation(c.config, OpCreate)
	return &RecommendationsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Recommendations entities.
func (c *RecommendationsClient) CreateBulk(builders ...*RecommendationsCreate) *RecommendationsCreateBulk {
	return &RecommendationsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Recommendations.
func (c *RecommendationsClient) Update() *RecommendationsUpdate {
	mutation := newRecommendationsMutation(c.config, OpUpdate)
	return &RecommendationsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RecommendationsClient) UpdateOne(r *Recommendations) *RecommendationsUpdateOne {
	mutation := newRecommendationsMutation(c.config, OpUpdateOne, withRecommendations(r))
	return &RecommendationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RecommendationsClient) UpdateOneID(id int) *RecommendationsUpdateOne {
	mutation := newRecommendationsMutation(c.config, OpUpdateOne, withRecommendationsID(id))
	return &RecommendationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Recommendations.
func (c *RecommendationsClient) Delete() *RecommendationsDelete {
	mutation := newRecommendationsMutation(c.config, OpDelete)
	return &RecommendationsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RecommendationsClient) DeleteOne(r *Recommendations) *RecommendationsDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RecommendationsClient) DeleteOneID(id int) *RecommendationsDeleteOne {
	builder := c.Delete().Where(recommendations.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RecommendationsDeleteOne{builder}
}

// Query returns a query builder for Recommendations.
func (c *RecommendationsClient) Query() *RecommendationsQuery {
	return &RecommendationsQuery{config: c.config}
}

// Get returns a Recommendations entity by its id.
func (c *RecommendationsClient) Get(ctx context.Context, id int) (*Recommendations, error) {
	return c.Query().Where(recommendations.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RecommendationsClient) GetX(ctx context.Context, id int) *Recommendations {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRecomendationSources queries the recomendation_sources edge of a Recommendations.
func (c *RecommendationsClient) QueryRecomendationSources(r *Recommendations) *RecommendationsSourcesQuery {
	query := &RecommendationsSourcesQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recommendations.Table, recommendations.FieldID, id),
			sqlgraph.To(recommendationssources.Table, recommendationssources.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recommendations.RecomendationSourcesTable, recommendations.RecomendationSourcesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRecomendationCategory queries the recomendation_category edge of a Recommendations.
func (c *RecommendationsClient) QueryRecomendationCategory(r *Recommendations) *RecommendationsCategoryQuery {
	query := &RecommendationsCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recommendations.Table, recommendations.FieldID, id),
			sqlgraph.To(recommendationscategory.Table, recommendationscategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recommendations.RecomendationCategoryTable, recommendations.RecomendationCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserCreate queries the UserCreate edge of a Recommendations.
func (c *RecommendationsClient) QueryUserCreate(r *Recommendations) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recommendations.Table, recommendations.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recommendations.UserCreateTable, recommendations.UserCreateColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserApprobed queries the UserApprobed edge of a Recommendations.
func (c *RecommendationsClient) QueryUserApprobed(r *Recommendations) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recommendations.Table, recommendations.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recommendations.UserApprobedTable, recommendations.UserApprobedColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVendorsRecomendations queries the vendors_recomendations edge of a Recommendations.
func (c *RecommendationsClient) QueryVendorsRecomendations(r *Recommendations) *VendorQuery {
	query := &VendorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recommendations.Table, recommendations.FieldID, id),
			sqlgraph.To(vendor.Table, vendor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recommendations.VendorsRecomendationsTable, recommendations.VendorsRecomendationsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RecommendationsClient) Hooks() []Hook {
	hooks := c.hooks.Recommendations
	return append(hooks[:len(hooks):len(hooks)], recommendations.Hooks[:]...)
}

// RecommendationsCategoryClient is a client for the RecommendationsCategory schema.
type RecommendationsCategoryClient struct {
	config
}

// NewRecommendationsCategoryClient returns a client for the RecommendationsCategory from the given config.
func NewRecommendationsCategoryClient(c config) *RecommendationsCategoryClient {
	return &RecommendationsCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `recommendationscategory.Hooks(f(g(h())))`.
func (c *RecommendationsCategoryClient) Use(hooks ...Hook) {
	c.hooks.RecommendationsCategory = append(c.hooks.RecommendationsCategory, hooks...)
}

// Create returns a create builder for RecommendationsCategory.
func (c *RecommendationsCategoryClient) Create() *RecommendationsCategoryCreate {
	mutation := newRecommendationsCategoryMutation(c.config, OpCreate)
	return &RecommendationsCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RecommendationsCategory entities.
func (c *RecommendationsCategoryClient) CreateBulk(builders ...*RecommendationsCategoryCreate) *RecommendationsCategoryCreateBulk {
	return &RecommendationsCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RecommendationsCategory.
func (c *RecommendationsCategoryClient) Update() *RecommendationsCategoryUpdate {
	mutation := newRecommendationsCategoryMutation(c.config, OpUpdate)
	return &RecommendationsCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RecommendationsCategoryClient) UpdateOne(rc *RecommendationsCategory) *RecommendationsCategoryUpdateOne {
	mutation := newRecommendationsCategoryMutation(c.config, OpUpdateOne, withRecommendationsCategory(rc))
	return &RecommendationsCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RecommendationsCategoryClient) UpdateOneID(id int) *RecommendationsCategoryUpdateOne {
	mutation := newRecommendationsCategoryMutation(c.config, OpUpdateOne, withRecommendationsCategoryID(id))
	return &RecommendationsCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RecommendationsCategory.
func (c *RecommendationsCategoryClient) Delete() *RecommendationsCategoryDelete {
	mutation := newRecommendationsCategoryMutation(c.config, OpDelete)
	return &RecommendationsCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RecommendationsCategoryClient) DeleteOne(rc *RecommendationsCategory) *RecommendationsCategoryDeleteOne {
	return c.DeleteOneID(rc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RecommendationsCategoryClient) DeleteOneID(id int) *RecommendationsCategoryDeleteOne {
	builder := c.Delete().Where(recommendationscategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RecommendationsCategoryDeleteOne{builder}
}

// Query returns a query builder for RecommendationsCategory.
func (c *RecommendationsCategoryClient) Query() *RecommendationsCategoryQuery {
	return &RecommendationsCategoryQuery{config: c.config}
}

// Get returns a RecommendationsCategory entity by its id.
func (c *RecommendationsCategoryClient) Get(ctx context.Context, id int) (*RecommendationsCategory, error) {
	return c.Query().Where(recommendationscategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RecommendationsCategoryClient) GetX(ctx context.Context, id int) *RecommendationsCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRecommendations queries the recommendations edge of a RecommendationsCategory.
func (c *RecommendationsCategoryClient) QueryRecommendations(rc *RecommendationsCategory) *RecommendationsQuery {
	query := &RecommendationsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recommendationscategory.Table, recommendationscategory.FieldID, id),
			sqlgraph.To(recommendations.Table, recommendations.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, recommendationscategory.RecommendationsTable, recommendationscategory.RecommendationsColumn),
		)
		fromV = sqlgraph.Neighbors(rc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RecommendationsCategoryClient) Hooks() []Hook {
	hooks := c.hooks.RecommendationsCategory
	return append(hooks[:len(hooks):len(hooks)], recommendationscategory.Hooks[:]...)
}

// RecommendationsSourcesClient is a client for the RecommendationsSources schema.
type RecommendationsSourcesClient struct {
	config
}

// NewRecommendationsSourcesClient returns a client for the RecommendationsSources from the given config.
func NewRecommendationsSourcesClient(c config) *RecommendationsSourcesClient {
	return &RecommendationsSourcesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `recommendationssources.Hooks(f(g(h())))`.
func (c *RecommendationsSourcesClient) Use(hooks ...Hook) {
	c.hooks.RecommendationsSources = append(c.hooks.RecommendationsSources, hooks...)
}

// Create returns a create builder for RecommendationsSources.
func (c *RecommendationsSourcesClient) Create() *RecommendationsSourcesCreate {
	mutation := newRecommendationsSourcesMutation(c.config, OpCreate)
	return &RecommendationsSourcesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RecommendationsSources entities.
func (c *RecommendationsSourcesClient) CreateBulk(builders ...*RecommendationsSourcesCreate) *RecommendationsSourcesCreateBulk {
	return &RecommendationsSourcesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RecommendationsSources.
func (c *RecommendationsSourcesClient) Update() *RecommendationsSourcesUpdate {
	mutation := newRecommendationsSourcesMutation(c.config, OpUpdate)
	return &RecommendationsSourcesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RecommendationsSourcesClient) UpdateOne(rs *RecommendationsSources) *RecommendationsSourcesUpdateOne {
	mutation := newRecommendationsSourcesMutation(c.config, OpUpdateOne, withRecommendationsSources(rs))
	return &RecommendationsSourcesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RecommendationsSourcesClient) UpdateOneID(id int) *RecommendationsSourcesUpdateOne {
	mutation := newRecommendationsSourcesMutation(c.config, OpUpdateOne, withRecommendationsSourcesID(id))
	return &RecommendationsSourcesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RecommendationsSources.
func (c *RecommendationsSourcesClient) Delete() *RecommendationsSourcesDelete {
	mutation := newRecommendationsSourcesMutation(c.config, OpDelete)
	return &RecommendationsSourcesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RecommendationsSourcesClient) DeleteOne(rs *RecommendationsSources) *RecommendationsSourcesDeleteOne {
	return c.DeleteOneID(rs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RecommendationsSourcesClient) DeleteOneID(id int) *RecommendationsSourcesDeleteOne {
	builder := c.Delete().Where(recommendationssources.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RecommendationsSourcesDeleteOne{builder}
}

// Query returns a query builder for RecommendationsSources.
func (c *RecommendationsSourcesClient) Query() *RecommendationsSourcesQuery {
	return &RecommendationsSourcesQuery{config: c.config}
}

// Get returns a RecommendationsSources entity by its id.
func (c *RecommendationsSourcesClient) Get(ctx context.Context, id int) (*RecommendationsSources, error) {
	return c.Query().Where(recommendationssources.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RecommendationsSourcesClient) GetX(ctx context.Context, id int) *RecommendationsSources {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRecommendations queries the recommendations edge of a RecommendationsSources.
func (c *RecommendationsSourcesClient) QueryRecommendations(rs *RecommendationsSources) *RecommendationsQuery {
	query := &RecommendationsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recommendationssources.Table, recommendationssources.FieldID, id),
			sqlgraph.To(recommendations.Table, recommendations.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, recommendationssources.RecommendationsTable, recommendationssources.RecommendationsColumn),
		)
		fromV = sqlgraph.Neighbors(rs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RecommendationsSourcesClient) Hooks() []Hook {
	hooks := c.hooks.RecommendationsSources
	return append(hooks[:len(hooks):len(hooks)], recommendationssources.Hooks[:]...)
}

// ReportFilterClient is a client for the ReportFilter schema.
type ReportFilterClient struct {
	config
}

// NewReportFilterClient returns a client for the ReportFilter from the given config.
func NewReportFilterClient(c config) *ReportFilterClient {
	return &ReportFilterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `reportfilter.Hooks(f(g(h())))`.
func (c *ReportFilterClient) Use(hooks ...Hook) {
	c.hooks.ReportFilter = append(c.hooks.ReportFilter, hooks...)
}

// Create returns a create builder for ReportFilter.
func (c *ReportFilterClient) Create() *ReportFilterCreate {
	mutation := newReportFilterMutation(c.config, OpCreate)
	return &ReportFilterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ReportFilter entities.
func (c *ReportFilterClient) CreateBulk(builders ...*ReportFilterCreate) *ReportFilterCreateBulk {
	return &ReportFilterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ReportFilter.
func (c *ReportFilterClient) Update() *ReportFilterUpdate {
	mutation := newReportFilterMutation(c.config, OpUpdate)
	return &ReportFilterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReportFilterClient) UpdateOne(rf *ReportFilter) *ReportFilterUpdateOne {
	mutation := newReportFilterMutation(c.config, OpUpdateOne, withReportFilter(rf))
	return &ReportFilterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReportFilterClient) UpdateOneID(id int) *ReportFilterUpdateOne {
	mutation := newReportFilterMutation(c.config, OpUpdateOne, withReportFilterID(id))
	return &ReportFilterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ReportFilter.
func (c *ReportFilterClient) Delete() *ReportFilterDelete {
	mutation := newReportFilterMutation(c.config, OpDelete)
	return &ReportFilterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ReportFilterClient) DeleteOne(rf *ReportFilter) *ReportFilterDeleteOne {
	return c.DeleteOneID(rf.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ReportFilterClient) DeleteOneID(id int) *ReportFilterDeleteOne {
	builder := c.Delete().Where(reportfilter.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReportFilterDeleteOne{builder}
}

// Query returns a query builder for ReportFilter.
func (c *ReportFilterClient) Query() *ReportFilterQuery {
	return &ReportFilterQuery{config: c.config}
}

// Get returns a ReportFilter entity by its id.
func (c *ReportFilterClient) Get(ctx context.Context, id int) (*ReportFilter, error) {
	return c.Query().Where(reportfilter.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReportFilterClient) GetX(ctx context.Context, id int) *ReportFilter {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ReportFilterClient) Hooks() []Hook {
	hooks := c.hooks.ReportFilter
	return append(hooks[:len(hooks):len(hooks)], reportfilter.Hooks[:]...)
}

// RuleClient is a client for the Rule schema.
type RuleClient struct {
	config
}

// NewRuleClient returns a client for the Rule from the given config.
func NewRuleClient(c config) *RuleClient {
	return &RuleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rule.Hooks(f(g(h())))`.
func (c *RuleClient) Use(hooks ...Hook) {
	c.hooks.Rule = append(c.hooks.Rule, hooks...)
}

// Create returns a create builder for Rule.
func (c *RuleClient) Create() *RuleCreate {
	mutation := newRuleMutation(c.config, OpCreate)
	return &RuleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Rule entities.
func (c *RuleClient) CreateBulk(builders ...*RuleCreate) *RuleCreateBulk {
	return &RuleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Rule.
func (c *RuleClient) Update() *RuleUpdate {
	mutation := newRuleMutation(c.config, OpUpdate)
	return &RuleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RuleClient) UpdateOne(r *Rule) *RuleUpdateOne {
	mutation := newRuleMutation(c.config, OpUpdateOne, withRule(r))
	return &RuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RuleClient) UpdateOneID(id int) *RuleUpdateOne {
	mutation := newRuleMutation(c.config, OpUpdateOne, withRuleID(id))
	return &RuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Rule.
func (c *RuleClient) Delete() *RuleDelete {
	mutation := newRuleMutation(c.config, OpDelete)
	return &RuleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RuleClient) DeleteOne(r *Rule) *RuleDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RuleClient) DeleteOneID(id int) *RuleDeleteOne {
	builder := c.Delete().Where(rule.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RuleDeleteOne{builder}
}

// Query returns a query builder for Rule.
func (c *RuleClient) Query() *RuleQuery {
	return &RuleQuery{config: c.config}
}

// Get returns a Rule entity by its id.
func (c *RuleClient) Get(ctx context.Context, id int) (*Rule, error) {
	return c.Query().Where(rule.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RuleClient) GetX(ctx context.Context, id int) *Rule {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRuletype queries the ruletype edge of a Rule.
func (c *RuleClient) QueryRuletype(r *Rule) *RuleTypeQuery {
	query := &RuleTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rule.Table, rule.FieldID, id),
			sqlgraph.To(ruletype.Table, ruletype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rule.RuletypeTable, rule.RuletypeColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEventseverity queries the eventseverity edge of a Rule.
func (c *RuleClient) QueryEventseverity(r *Rule) *EventSeverityQuery {
	query := &EventSeverityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rule.Table, rule.FieldID, id),
			sqlgraph.To(eventseverity.Table, eventseverity.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rule.EventseverityTable, rule.EventseverityColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryThreshold queries the threshold edge of a Rule.
func (c *RuleClient) QueryThreshold(r *Rule) *ThresholdQuery {
	query := &ThresholdQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rule.Table, rule.FieldID, id),
			sqlgraph.To(threshold.Table, threshold.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rule.ThresholdTable, rule.ThresholdColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRulelimitrule queries the rulelimitrule edge of a Rule.
func (c *RuleClient) QueryRulelimitrule(r *Rule) *RuleLimitQuery {
	query := &RuleLimitQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rule.Table, rule.FieldID, id),
			sqlgraph.To(rulelimit.Table, rulelimit.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rule.RulelimitruleTable, rule.RulelimitruleColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RuleClient) Hooks() []Hook {
	hooks := c.hooks.Rule
	return append(hooks[:len(hooks):len(hooks)], rule.Hooks[:]...)
}

// RuleLimitClient is a client for the RuleLimit schema.
type RuleLimitClient struct {
	config
}

// NewRuleLimitClient returns a client for the RuleLimit from the given config.
func NewRuleLimitClient(c config) *RuleLimitClient {
	return &RuleLimitClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rulelimit.Hooks(f(g(h())))`.
func (c *RuleLimitClient) Use(hooks ...Hook) {
	c.hooks.RuleLimit = append(c.hooks.RuleLimit, hooks...)
}

// Create returns a create builder for RuleLimit.
func (c *RuleLimitClient) Create() *RuleLimitCreate {
	mutation := newRuleLimitMutation(c.config, OpCreate)
	return &RuleLimitCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RuleLimit entities.
func (c *RuleLimitClient) CreateBulk(builders ...*RuleLimitCreate) *RuleLimitCreateBulk {
	return &RuleLimitCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RuleLimit.
func (c *RuleLimitClient) Update() *RuleLimitUpdate {
	mutation := newRuleLimitMutation(c.config, OpUpdate)
	return &RuleLimitUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RuleLimitClient) UpdateOne(rl *RuleLimit) *RuleLimitUpdateOne {
	mutation := newRuleLimitMutation(c.config, OpUpdateOne, withRuleLimit(rl))
	return &RuleLimitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RuleLimitClient) UpdateOneID(id int) *RuleLimitUpdateOne {
	mutation := newRuleLimitMutation(c.config, OpUpdateOne, withRuleLimitID(id))
	return &RuleLimitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RuleLimit.
func (c *RuleLimitClient) Delete() *RuleLimitDelete {
	mutation := newRuleLimitMutation(c.config, OpDelete)
	return &RuleLimitDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RuleLimitClient) DeleteOne(rl *RuleLimit) *RuleLimitDeleteOne {
	return c.DeleteOneID(rl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RuleLimitClient) DeleteOneID(id int) *RuleLimitDeleteOne {
	builder := c.Delete().Where(rulelimit.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RuleLimitDeleteOne{builder}
}

// Query returns a query builder for RuleLimit.
func (c *RuleLimitClient) Query() *RuleLimitQuery {
	return &RuleLimitQuery{config: c.config}
}

// Get returns a RuleLimit entity by its id.
func (c *RuleLimitClient) Get(ctx context.Context, id int) (*RuleLimit, error) {
	return c.Query().Where(rulelimit.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RuleLimitClient) GetX(ctx context.Context, id int) *RuleLimit {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryComparator queries the comparator edge of a RuleLimit.
func (c *RuleLimitClient) QueryComparator(rl *RuleLimit) *ComparatorQuery {
	query := &ComparatorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rulelimit.Table, rulelimit.FieldID, id),
			sqlgraph.To(comparator.Table, comparator.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rulelimit.ComparatorTable, rulelimit.ComparatorColumn),
		)
		fromV = sqlgraph.Neighbors(rl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRule queries the rule edge of a RuleLimit.
func (c *RuleLimitClient) QueryRule(rl *RuleLimit) *RuleQuery {
	query := &RuleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rulelimit.Table, rulelimit.FieldID, id),
			sqlgraph.To(rule.Table, rule.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rulelimit.RuleTable, rulelimit.RuleColumn),
		)
		fromV = sqlgraph.Neighbors(rl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RuleLimitClient) Hooks() []Hook {
	hooks := c.hooks.RuleLimit
	return append(hooks[:len(hooks):len(hooks)], rulelimit.Hooks[:]...)
}

// RuleTypeClient is a client for the RuleType schema.
type RuleTypeClient struct {
	config
}

// NewRuleTypeClient returns a client for the RuleType from the given config.
func NewRuleTypeClient(c config) *RuleTypeClient {
	return &RuleTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ruletype.Hooks(f(g(h())))`.
func (c *RuleTypeClient) Use(hooks ...Hook) {
	c.hooks.RuleType = append(c.hooks.RuleType, hooks...)
}

// Create returns a create builder for RuleType.
func (c *RuleTypeClient) Create() *RuleTypeCreate {
	mutation := newRuleTypeMutation(c.config, OpCreate)
	return &RuleTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RuleType entities.
func (c *RuleTypeClient) CreateBulk(builders ...*RuleTypeCreate) *RuleTypeCreateBulk {
	return &RuleTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RuleType.
func (c *RuleTypeClient) Update() *RuleTypeUpdate {
	mutation := newRuleTypeMutation(c.config, OpUpdate)
	return &RuleTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RuleTypeClient) UpdateOne(rt *RuleType) *RuleTypeUpdateOne {
	mutation := newRuleTypeMutation(c.config, OpUpdateOne, withRuleType(rt))
	return &RuleTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RuleTypeClient) UpdateOneID(id int) *RuleTypeUpdateOne {
	mutation := newRuleTypeMutation(c.config, OpUpdateOne, withRuleTypeID(id))
	return &RuleTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RuleType.
func (c *RuleTypeClient) Delete() *RuleTypeDelete {
	mutation := newRuleTypeMutation(c.config, OpDelete)
	return &RuleTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RuleTypeClient) DeleteOne(rt *RuleType) *RuleTypeDeleteOne {
	return c.DeleteOneID(rt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RuleTypeClient) DeleteOneID(id int) *RuleTypeDeleteOne {
	builder := c.Delete().Where(ruletype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RuleTypeDeleteOne{builder}
}

// Query returns a query builder for RuleType.
func (c *RuleTypeClient) Query() *RuleTypeQuery {
	return &RuleTypeQuery{config: c.config}
}

// Get returns a RuleType entity by its id.
func (c *RuleTypeClient) Get(ctx context.Context, id int) (*RuleType, error) {
	return c.Query().Where(ruletype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RuleTypeClient) GetX(ctx context.Context, id int) *RuleType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRuletyperule queries the ruletyperule edge of a RuleType.
func (c *RuleTypeClient) QueryRuletyperule(rt *RuleType) *RuleQuery {
	query := &RuleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ruletype.Table, ruletype.FieldID, id),
			sqlgraph.To(rule.Table, rule.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ruletype.RuletyperuleTable, ruletype.RuletyperuleColumn),
		)
		fromV = sqlgraph.Neighbors(rt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RuleTypeClient) Hooks() []Hook {
	hooks := c.hooks.RuleType
	return append(hooks[:len(hooks):len(hooks)], ruletype.Hooks[:]...)
}

// ServiceClient is a client for the Service schema.
type ServiceClient struct {
	config
}

// NewServiceClient returns a client for the Service from the given config.
func NewServiceClient(c config) *ServiceClient {
	return &ServiceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `service.Hooks(f(g(h())))`.
func (c *ServiceClient) Use(hooks ...Hook) {
	c.hooks.Service = append(c.hooks.Service, hooks...)
}

// Create returns a create builder for Service.
func (c *ServiceClient) Create() *ServiceCreate {
	mutation := newServiceMutation(c.config, OpCreate)
	return &ServiceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Service entities.
func (c *ServiceClient) CreateBulk(builders ...*ServiceCreate) *ServiceCreateBulk {
	return &ServiceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Service.
func (c *ServiceClient) Update() *ServiceUpdate {
	mutation := newServiceMutation(c.config, OpUpdate)
	return &ServiceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServiceClient) UpdateOne(s *Service) *ServiceUpdateOne {
	mutation := newServiceMutation(c.config, OpUpdateOne, withService(s))
	return &ServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServiceClient) UpdateOneID(id int) *ServiceUpdateOne {
	mutation := newServiceMutation(c.config, OpUpdateOne, withServiceID(id))
	return &ServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Service.
func (c *ServiceClient) Delete() *ServiceDelete {
	mutation := newServiceMutation(c.config, OpDelete)
	return &ServiceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ServiceClient) DeleteOne(s *Service) *ServiceDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ServiceClient) DeleteOneID(id int) *ServiceDeleteOne {
	builder := c.Delete().Where(service.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServiceDeleteOne{builder}
}

// Query returns a query builder for Service.
func (c *ServiceClient) Query() *ServiceQuery {
	return &ServiceQuery{config: c.config}
}

// Get returns a Service entity by its id.
func (c *ServiceClient) Get(ctx context.Context, id int) (*Service, error) {
	return c.Query().Where(service.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServiceClient) GetX(ctx context.Context, id int) *Service {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryType queries the type edge of a Service.
func (c *ServiceClient) QueryType(s *Service) *ServiceTypeQuery {
	query := &ServiceTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(service.Table, service.FieldID, id),
			sqlgraph.To(servicetype.Table, servicetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, service.TypeTable, service.TypeColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDownstream queries the downstream edge of a Service.
func (c *ServiceClient) QueryDownstream(s *Service) *ServiceQuery {
	query := &ServiceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(service.Table, service.FieldID, id),
			sqlgraph.To(service.Table, service.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, service.DownstreamTable, service.DownstreamPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpstream queries the upstream edge of a Service.
func (c *ServiceClient) QueryUpstream(s *Service) *ServiceQuery {
	query := &ServiceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(service.Table, service.FieldID, id),
			sqlgraph.To(service.Table, service.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, service.UpstreamTable, service.UpstreamPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProperties queries the properties edge of a Service.
func (c *ServiceClient) QueryProperties(s *Service) *PropertyQuery {
	query := &PropertyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(service.Table, service.FieldID, id),
			sqlgraph.To(property.Table, property.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, service.PropertiesTable, service.PropertiesColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLinks queries the links edge of a Service.
func (c *ServiceClient) QueryLinks(s *Service) *LinkQuery {
	query := &LinkQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(service.Table, service.FieldID, id),
			sqlgraph.To(link.Table, link.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, service.LinksTable, service.LinksPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPorts queries the ports edge of a Service.
func (c *ServiceClient) QueryPorts(s *Service) *EquipmentPortQuery {
	query := &EquipmentPortQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(service.Table, service.FieldID, id),
			sqlgraph.To(equipmentport.Table, equipmentport.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, service.PortsTable, service.PortsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCustomer queries the customer edge of a Service.
func (c *ServiceClient) QueryCustomer(s *Service) *CustomerQuery {
	query := &CustomerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(service.Table, service.FieldID, id),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, service.CustomerTable, service.CustomerPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEndpoints queries the endpoints edge of a Service.
func (c *ServiceClient) QueryEndpoints(s *Service) *ServiceEndpointQuery {
	query := &ServiceEndpointQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(service.Table, service.FieldID, id),
			sqlgraph.To(serviceendpoint.Table, serviceendpoint.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, service.EndpointsTable, service.EndpointsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServiceClient) Hooks() []Hook {
	hooks := c.hooks.Service
	return append(hooks[:len(hooks):len(hooks)], service.Hooks[:]...)
}

// ServiceEndpointClient is a client for the ServiceEndpoint schema.
type ServiceEndpointClient struct {
	config
}

// NewServiceEndpointClient returns a client for the ServiceEndpoint from the given config.
func NewServiceEndpointClient(c config) *ServiceEndpointClient {
	return &ServiceEndpointClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `serviceendpoint.Hooks(f(g(h())))`.
func (c *ServiceEndpointClient) Use(hooks ...Hook) {
	c.hooks.ServiceEndpoint = append(c.hooks.ServiceEndpoint, hooks...)
}

// Create returns a create builder for ServiceEndpoint.
func (c *ServiceEndpointClient) Create() *ServiceEndpointCreate {
	mutation := newServiceEndpointMutation(c.config, OpCreate)
	return &ServiceEndpointCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServiceEndpoint entities.
func (c *ServiceEndpointClient) CreateBulk(builders ...*ServiceEndpointCreate) *ServiceEndpointCreateBulk {
	return &ServiceEndpointCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServiceEndpoint.
func (c *ServiceEndpointClient) Update() *ServiceEndpointUpdate {
	mutation := newServiceEndpointMutation(c.config, OpUpdate)
	return &ServiceEndpointUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServiceEndpointClient) UpdateOne(se *ServiceEndpoint) *ServiceEndpointUpdateOne {
	mutation := newServiceEndpointMutation(c.config, OpUpdateOne, withServiceEndpoint(se))
	return &ServiceEndpointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServiceEndpointClient) UpdateOneID(id int) *ServiceEndpointUpdateOne {
	mutation := newServiceEndpointMutation(c.config, OpUpdateOne, withServiceEndpointID(id))
	return &ServiceEndpointUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServiceEndpoint.
func (c *ServiceEndpointClient) Delete() *ServiceEndpointDelete {
	mutation := newServiceEndpointMutation(c.config, OpDelete)
	return &ServiceEndpointDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ServiceEndpointClient) DeleteOne(se *ServiceEndpoint) *ServiceEndpointDeleteOne {
	return c.DeleteOneID(se.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ServiceEndpointClient) DeleteOneID(id int) *ServiceEndpointDeleteOne {
	builder := c.Delete().Where(serviceendpoint.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServiceEndpointDeleteOne{builder}
}

// Query returns a query builder for ServiceEndpoint.
func (c *ServiceEndpointClient) Query() *ServiceEndpointQuery {
	return &ServiceEndpointQuery{config: c.config}
}

// Get returns a ServiceEndpoint entity by its id.
func (c *ServiceEndpointClient) Get(ctx context.Context, id int) (*ServiceEndpoint, error) {
	return c.Query().Where(serviceendpoint.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServiceEndpointClient) GetX(ctx context.Context, id int) *ServiceEndpoint {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPort queries the port edge of a ServiceEndpoint.
func (c *ServiceEndpointClient) QueryPort(se *ServiceEndpoint) *EquipmentPortQuery {
	query := &EquipmentPortQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := se.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(serviceendpoint.Table, serviceendpoint.FieldID, id),
			sqlgraph.To(equipmentport.Table, equipmentport.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, serviceendpoint.PortTable, serviceendpoint.PortColumn),
		)
		fromV = sqlgraph.Neighbors(se.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipment queries the equipment edge of a ServiceEndpoint.
func (c *ServiceEndpointClient) QueryEquipment(se *ServiceEndpoint) *EquipmentQuery {
	query := &EquipmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := se.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(serviceendpoint.Table, serviceendpoint.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, serviceendpoint.EquipmentTable, serviceendpoint.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(se.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryService queries the service edge of a ServiceEndpoint.
func (c *ServiceEndpointClient) QueryService(se *ServiceEndpoint) *ServiceQuery {
	query := &ServiceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := se.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(serviceendpoint.Table, serviceendpoint.FieldID, id),
			sqlgraph.To(service.Table, service.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, serviceendpoint.ServiceTable, serviceendpoint.ServiceColumn),
		)
		fromV = sqlgraph.Neighbors(se.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDefinition queries the definition edge of a ServiceEndpoint.
func (c *ServiceEndpointClient) QueryDefinition(se *ServiceEndpoint) *ServiceEndpointDefinitionQuery {
	query := &ServiceEndpointDefinitionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := se.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(serviceendpoint.Table, serviceendpoint.FieldID, id),
			sqlgraph.To(serviceendpointdefinition.Table, serviceendpointdefinition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, serviceendpoint.DefinitionTable, serviceendpoint.DefinitionColumn),
		)
		fromV = sqlgraph.Neighbors(se.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServiceEndpointClient) Hooks() []Hook {
	hooks := c.hooks.ServiceEndpoint
	return append(hooks[:len(hooks):len(hooks)], serviceendpoint.Hooks[:]...)
}

// ServiceEndpointDefinitionClient is a client for the ServiceEndpointDefinition schema.
type ServiceEndpointDefinitionClient struct {
	config
}

// NewServiceEndpointDefinitionClient returns a client for the ServiceEndpointDefinition from the given config.
func NewServiceEndpointDefinitionClient(c config) *ServiceEndpointDefinitionClient {
	return &ServiceEndpointDefinitionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `serviceendpointdefinition.Hooks(f(g(h())))`.
func (c *ServiceEndpointDefinitionClient) Use(hooks ...Hook) {
	c.hooks.ServiceEndpointDefinition = append(c.hooks.ServiceEndpointDefinition, hooks...)
}

// Create returns a create builder for ServiceEndpointDefinition.
func (c *ServiceEndpointDefinitionClient) Create() *ServiceEndpointDefinitionCreate {
	mutation := newServiceEndpointDefinitionMutation(c.config, OpCreate)
	return &ServiceEndpointDefinitionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServiceEndpointDefinition entities.
func (c *ServiceEndpointDefinitionClient) CreateBulk(builders ...*ServiceEndpointDefinitionCreate) *ServiceEndpointDefinitionCreateBulk {
	return &ServiceEndpointDefinitionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServiceEndpointDefinition.
func (c *ServiceEndpointDefinitionClient) Update() *ServiceEndpointDefinitionUpdate {
	mutation := newServiceEndpointDefinitionMutation(c.config, OpUpdate)
	return &ServiceEndpointDefinitionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServiceEndpointDefinitionClient) UpdateOne(sed *ServiceEndpointDefinition) *ServiceEndpointDefinitionUpdateOne {
	mutation := newServiceEndpointDefinitionMutation(c.config, OpUpdateOne, withServiceEndpointDefinition(sed))
	return &ServiceEndpointDefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServiceEndpointDefinitionClient) UpdateOneID(id int) *ServiceEndpointDefinitionUpdateOne {
	mutation := newServiceEndpointDefinitionMutation(c.config, OpUpdateOne, withServiceEndpointDefinitionID(id))
	return &ServiceEndpointDefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServiceEndpointDefinition.
func (c *ServiceEndpointDefinitionClient) Delete() *ServiceEndpointDefinitionDelete {
	mutation := newServiceEndpointDefinitionMutation(c.config, OpDelete)
	return &ServiceEndpointDefinitionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ServiceEndpointDefinitionClient) DeleteOne(sed *ServiceEndpointDefinition) *ServiceEndpointDefinitionDeleteOne {
	return c.DeleteOneID(sed.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ServiceEndpointDefinitionClient) DeleteOneID(id int) *ServiceEndpointDefinitionDeleteOne {
	builder := c.Delete().Where(serviceendpointdefinition.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServiceEndpointDefinitionDeleteOne{builder}
}

// Query returns a query builder for ServiceEndpointDefinition.
func (c *ServiceEndpointDefinitionClient) Query() *ServiceEndpointDefinitionQuery {
	return &ServiceEndpointDefinitionQuery{config: c.config}
}

// Get returns a ServiceEndpointDefinition entity by its id.
func (c *ServiceEndpointDefinitionClient) Get(ctx context.Context, id int) (*ServiceEndpointDefinition, error) {
	return c.Query().Where(serviceendpointdefinition.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServiceEndpointDefinitionClient) GetX(ctx context.Context, id int) *ServiceEndpointDefinition {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEndpoints queries the endpoints edge of a ServiceEndpointDefinition.
func (c *ServiceEndpointDefinitionClient) QueryEndpoints(sed *ServiceEndpointDefinition) *ServiceEndpointQuery {
	query := &ServiceEndpointQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sed.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(serviceendpointdefinition.Table, serviceendpointdefinition.FieldID, id),
			sqlgraph.To(serviceendpoint.Table, serviceendpoint.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, serviceendpointdefinition.EndpointsTable, serviceendpointdefinition.EndpointsColumn),
		)
		fromV = sqlgraph.Neighbors(sed.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryServiceType queries the service_type edge of a ServiceEndpointDefinition.
func (c *ServiceEndpointDefinitionClient) QueryServiceType(sed *ServiceEndpointDefinition) *ServiceTypeQuery {
	query := &ServiceTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sed.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(serviceendpointdefinition.Table, serviceendpointdefinition.FieldID, id),
			sqlgraph.To(servicetype.Table, servicetype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, serviceendpointdefinition.ServiceTypeTable, serviceendpointdefinition.ServiceTypeColumn),
		)
		fromV = sqlgraph.Neighbors(sed.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipmentType queries the equipment_type edge of a ServiceEndpointDefinition.
func (c *ServiceEndpointDefinitionClient) QueryEquipmentType(sed *ServiceEndpointDefinition) *EquipmentTypeQuery {
	query := &EquipmentTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sed.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(serviceendpointdefinition.Table, serviceendpointdefinition.FieldID, id),
			sqlgraph.To(equipmenttype.Table, equipmenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, serviceendpointdefinition.EquipmentTypeTable, serviceendpointdefinition.EquipmentTypeColumn),
		)
		fromV = sqlgraph.Neighbors(sed.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServiceEndpointDefinitionClient) Hooks() []Hook {
	hooks := c.hooks.ServiceEndpointDefinition
	return append(hooks[:len(hooks):len(hooks)], serviceendpointdefinition.Hooks[:]...)
}

// ServiceTypeClient is a client for the ServiceType schema.
type ServiceTypeClient struct {
	config
}

// NewServiceTypeClient returns a client for the ServiceType from the given config.
func NewServiceTypeClient(c config) *ServiceTypeClient {
	return &ServiceTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `servicetype.Hooks(f(g(h())))`.
func (c *ServiceTypeClient) Use(hooks ...Hook) {
	c.hooks.ServiceType = append(c.hooks.ServiceType, hooks...)
}

// Create returns a create builder for ServiceType.
func (c *ServiceTypeClient) Create() *ServiceTypeCreate {
	mutation := newServiceTypeMutation(c.config, OpCreate)
	return &ServiceTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ServiceType entities.
func (c *ServiceTypeClient) CreateBulk(builders ...*ServiceTypeCreate) *ServiceTypeCreateBulk {
	return &ServiceTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ServiceType.
func (c *ServiceTypeClient) Update() *ServiceTypeUpdate {
	mutation := newServiceTypeMutation(c.config, OpUpdate)
	return &ServiceTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServiceTypeClient) UpdateOne(st *ServiceType) *ServiceTypeUpdateOne {
	mutation := newServiceTypeMutation(c.config, OpUpdateOne, withServiceType(st))
	return &ServiceTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServiceTypeClient) UpdateOneID(id int) *ServiceTypeUpdateOne {
	mutation := newServiceTypeMutation(c.config, OpUpdateOne, withServiceTypeID(id))
	return &ServiceTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ServiceType.
func (c *ServiceTypeClient) Delete() *ServiceTypeDelete {
	mutation := newServiceTypeMutation(c.config, OpDelete)
	return &ServiceTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ServiceTypeClient) DeleteOne(st *ServiceType) *ServiceTypeDeleteOne {
	return c.DeleteOneID(st.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ServiceTypeClient) DeleteOneID(id int) *ServiceTypeDeleteOne {
	builder := c.Delete().Where(servicetype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServiceTypeDeleteOne{builder}
}

// Query returns a query builder for ServiceType.
func (c *ServiceTypeClient) Query() *ServiceTypeQuery {
	return &ServiceTypeQuery{config: c.config}
}

// Get returns a ServiceType entity by its id.
func (c *ServiceTypeClient) Get(ctx context.Context, id int) (*ServiceType, error) {
	return c.Query().Where(servicetype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServiceTypeClient) GetX(ctx context.Context, id int) *ServiceType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryServices queries the services edge of a ServiceType.
func (c *ServiceTypeClient) QueryServices(st *ServiceType) *ServiceQuery {
	query := &ServiceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servicetype.Table, servicetype.FieldID, id),
			sqlgraph.To(service.Table, service.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, servicetype.ServicesTable, servicetype.ServicesColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPropertyTypes queries the property_types edge of a ServiceType.
func (c *ServiceTypeClient) QueryPropertyTypes(st *ServiceType) *PropertyTypeQuery {
	query := &PropertyTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servicetype.Table, servicetype.FieldID, id),
			sqlgraph.To(propertytype.Table, propertytype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, servicetype.PropertyTypesTable, servicetype.PropertyTypesColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEndpointDefinitions queries the endpoint_definitions edge of a ServiceType.
func (c *ServiceTypeClient) QueryEndpointDefinitions(st *ServiceType) *ServiceEndpointDefinitionQuery {
	query := &ServiceEndpointDefinitionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(servicetype.Table, servicetype.FieldID, id),
			sqlgraph.To(serviceendpointdefinition.Table, serviceendpointdefinition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, servicetype.EndpointDefinitionsTable, servicetype.EndpointDefinitionsColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServiceTypeClient) Hooks() []Hook {
	hooks := c.hooks.ServiceType
	return append(hooks[:len(hooks):len(hooks)], servicetype.Hooks[:]...)
}

// SurveyClient is a client for the Survey schema.
type SurveyClient struct {
	config
}

// NewSurveyClient returns a client for the Survey from the given config.
func NewSurveyClient(c config) *SurveyClient {
	return &SurveyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `survey.Hooks(f(g(h())))`.
func (c *SurveyClient) Use(hooks ...Hook) {
	c.hooks.Survey = append(c.hooks.Survey, hooks...)
}

// Create returns a create builder for Survey.
func (c *SurveyClient) Create() *SurveyCreate {
	mutation := newSurveyMutation(c.config, OpCreate)
	return &SurveyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Survey entities.
func (c *SurveyClient) CreateBulk(builders ...*SurveyCreate) *SurveyCreateBulk {
	return &SurveyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Survey.
func (c *SurveyClient) Update() *SurveyUpdate {
	mutation := newSurveyMutation(c.config, OpUpdate)
	return &SurveyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SurveyClient) UpdateOne(s *Survey) *SurveyUpdateOne {
	mutation := newSurveyMutation(c.config, OpUpdateOne, withSurvey(s))
	return &SurveyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SurveyClient) UpdateOneID(id int) *SurveyUpdateOne {
	mutation := newSurveyMutation(c.config, OpUpdateOne, withSurveyID(id))
	return &SurveyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Survey.
func (c *SurveyClient) Delete() *SurveyDelete {
	mutation := newSurveyMutation(c.config, OpDelete)
	return &SurveyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SurveyClient) DeleteOne(s *Survey) *SurveyDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SurveyClient) DeleteOneID(id int) *SurveyDeleteOne {
	builder := c.Delete().Where(survey.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SurveyDeleteOne{builder}
}

// Query returns a query builder for Survey.
func (c *SurveyClient) Query() *SurveyQuery {
	return &SurveyQuery{config: c.config}
}

// Get returns a Survey entity by its id.
func (c *SurveyClient) Get(ctx context.Context, id int) (*Survey, error) {
	return c.Query().Where(survey.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SurveyClient) GetX(ctx context.Context, id int) *Survey {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLocation queries the location edge of a Survey.
func (c *SurveyClient) QueryLocation(s *Survey) *LocationQuery {
	query := &LocationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(survey.Table, survey.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, survey.LocationTable, survey.LocationColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySourceFile queries the source_file edge of a Survey.
func (c *SurveyClient) QuerySourceFile(s *Survey) *FileQuery {
	query := &FileQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(survey.Table, survey.FieldID, id),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, survey.SourceFileTable, survey.SourceFileColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQuestions queries the questions edge of a Survey.
func (c *SurveyClient) QueryQuestions(s *Survey) *SurveyQuestionQuery {
	query := &SurveyQuestionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(survey.Table, survey.FieldID, id),
			sqlgraph.To(surveyquestion.Table, surveyquestion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, survey.QuestionsTable, survey.QuestionsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SurveyClient) Hooks() []Hook {
	hooks := c.hooks.Survey
	return append(hooks[:len(hooks):len(hooks)], survey.Hooks[:]...)
}

// SurveyCellScanClient is a client for the SurveyCellScan schema.
type SurveyCellScanClient struct {
	config
}

// NewSurveyCellScanClient returns a client for the SurveyCellScan from the given config.
func NewSurveyCellScanClient(c config) *SurveyCellScanClient {
	return &SurveyCellScanClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `surveycellscan.Hooks(f(g(h())))`.
func (c *SurveyCellScanClient) Use(hooks ...Hook) {
	c.hooks.SurveyCellScan = append(c.hooks.SurveyCellScan, hooks...)
}

// Create returns a create builder for SurveyCellScan.
func (c *SurveyCellScanClient) Create() *SurveyCellScanCreate {
	mutation := newSurveyCellScanMutation(c.config, OpCreate)
	return &SurveyCellScanCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SurveyCellScan entities.
func (c *SurveyCellScanClient) CreateBulk(builders ...*SurveyCellScanCreate) *SurveyCellScanCreateBulk {
	return &SurveyCellScanCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SurveyCellScan.
func (c *SurveyCellScanClient) Update() *SurveyCellScanUpdate {
	mutation := newSurveyCellScanMutation(c.config, OpUpdate)
	return &SurveyCellScanUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SurveyCellScanClient) UpdateOne(scs *SurveyCellScan) *SurveyCellScanUpdateOne {
	mutation := newSurveyCellScanMutation(c.config, OpUpdateOne, withSurveyCellScan(scs))
	return &SurveyCellScanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SurveyCellScanClient) UpdateOneID(id int) *SurveyCellScanUpdateOne {
	mutation := newSurveyCellScanMutation(c.config, OpUpdateOne, withSurveyCellScanID(id))
	return &SurveyCellScanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SurveyCellScan.
func (c *SurveyCellScanClient) Delete() *SurveyCellScanDelete {
	mutation := newSurveyCellScanMutation(c.config, OpDelete)
	return &SurveyCellScanDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SurveyCellScanClient) DeleteOne(scs *SurveyCellScan) *SurveyCellScanDeleteOne {
	return c.DeleteOneID(scs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SurveyCellScanClient) DeleteOneID(id int) *SurveyCellScanDeleteOne {
	builder := c.Delete().Where(surveycellscan.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SurveyCellScanDeleteOne{builder}
}

// Query returns a query builder for SurveyCellScan.
func (c *SurveyCellScanClient) Query() *SurveyCellScanQuery {
	return &SurveyCellScanQuery{config: c.config}
}

// Get returns a SurveyCellScan entity by its id.
func (c *SurveyCellScanClient) Get(ctx context.Context, id int) (*SurveyCellScan, error) {
	return c.Query().Where(surveycellscan.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SurveyCellScanClient) GetX(ctx context.Context, id int) *SurveyCellScan {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChecklistItem queries the checklist_item edge of a SurveyCellScan.
func (c *SurveyCellScanClient) QueryChecklistItem(scs *SurveyCellScan) *CheckListItemQuery {
	query := &CheckListItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := scs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(surveycellscan.Table, surveycellscan.FieldID, id),
			sqlgraph.To(checklistitem.Table, checklistitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, surveycellscan.ChecklistItemTable, surveycellscan.ChecklistItemColumn),
		)
		fromV = sqlgraph.Neighbors(scs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySurveyQuestion queries the survey_question edge of a SurveyCellScan.
func (c *SurveyCellScanClient) QuerySurveyQuestion(scs *SurveyCellScan) *SurveyQuestionQuery {
	query := &SurveyQuestionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := scs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(surveycellscan.Table, surveycellscan.FieldID, id),
			sqlgraph.To(surveyquestion.Table, surveyquestion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, surveycellscan.SurveyQuestionTable, surveycellscan.SurveyQuestionColumn),
		)
		fromV = sqlgraph.Neighbors(scs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLocation queries the location edge of a SurveyCellScan.
func (c *SurveyCellScanClient) QueryLocation(scs *SurveyCellScan) *LocationQuery {
	query := &LocationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := scs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(surveycellscan.Table, surveycellscan.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, surveycellscan.LocationTable, surveycellscan.LocationColumn),
		)
		fromV = sqlgraph.Neighbors(scs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SurveyCellScanClient) Hooks() []Hook {
	hooks := c.hooks.SurveyCellScan
	return append(hooks[:len(hooks):len(hooks)], surveycellscan.Hooks[:]...)
}

// SurveyQuestionClient is a client for the SurveyQuestion schema.
type SurveyQuestionClient struct {
	config
}

// NewSurveyQuestionClient returns a client for the SurveyQuestion from the given config.
func NewSurveyQuestionClient(c config) *SurveyQuestionClient {
	return &SurveyQuestionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `surveyquestion.Hooks(f(g(h())))`.
func (c *SurveyQuestionClient) Use(hooks ...Hook) {
	c.hooks.SurveyQuestion = append(c.hooks.SurveyQuestion, hooks...)
}

// Create returns a create builder for SurveyQuestion.
func (c *SurveyQuestionClient) Create() *SurveyQuestionCreate {
	mutation := newSurveyQuestionMutation(c.config, OpCreate)
	return &SurveyQuestionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SurveyQuestion entities.
func (c *SurveyQuestionClient) CreateBulk(builders ...*SurveyQuestionCreate) *SurveyQuestionCreateBulk {
	return &SurveyQuestionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SurveyQuestion.
func (c *SurveyQuestionClient) Update() *SurveyQuestionUpdate {
	mutation := newSurveyQuestionMutation(c.config, OpUpdate)
	return &SurveyQuestionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SurveyQuestionClient) UpdateOne(sq *SurveyQuestion) *SurveyQuestionUpdateOne {
	mutation := newSurveyQuestionMutation(c.config, OpUpdateOne, withSurveyQuestion(sq))
	return &SurveyQuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SurveyQuestionClient) UpdateOneID(id int) *SurveyQuestionUpdateOne {
	mutation := newSurveyQuestionMutation(c.config, OpUpdateOne, withSurveyQuestionID(id))
	return &SurveyQuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SurveyQuestion.
func (c *SurveyQuestionClient) Delete() *SurveyQuestionDelete {
	mutation := newSurveyQuestionMutation(c.config, OpDelete)
	return &SurveyQuestionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SurveyQuestionClient) DeleteOne(sq *SurveyQuestion) *SurveyQuestionDeleteOne {
	return c.DeleteOneID(sq.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SurveyQuestionClient) DeleteOneID(id int) *SurveyQuestionDeleteOne {
	builder := c.Delete().Where(surveyquestion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SurveyQuestionDeleteOne{builder}
}

// Query returns a query builder for SurveyQuestion.
func (c *SurveyQuestionClient) Query() *SurveyQuestionQuery {
	return &SurveyQuestionQuery{config: c.config}
}

// Get returns a SurveyQuestion entity by its id.
func (c *SurveyQuestionClient) Get(ctx context.Context, id int) (*SurveyQuestion, error) {
	return c.Query().Where(surveyquestion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SurveyQuestionClient) GetX(ctx context.Context, id int) *SurveyQuestion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySurvey queries the survey edge of a SurveyQuestion.
func (c *SurveyQuestionClient) QuerySurvey(sq *SurveyQuestion) *SurveyQuery {
	query := &SurveyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(surveyquestion.Table, surveyquestion.FieldID, id),
			sqlgraph.To(survey.Table, survey.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, surveyquestion.SurveyTable, surveyquestion.SurveyColumn),
		)
		fromV = sqlgraph.Neighbors(sq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWifiScan queries the wifi_scan edge of a SurveyQuestion.
func (c *SurveyQuestionClient) QueryWifiScan(sq *SurveyQuestion) *SurveyWiFiScanQuery {
	query := &SurveyWiFiScanQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(surveyquestion.Table, surveyquestion.FieldID, id),
			sqlgraph.To(surveywifiscan.Table, surveywifiscan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, surveyquestion.WifiScanTable, surveyquestion.WifiScanColumn),
		)
		fromV = sqlgraph.Neighbors(sq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCellScan queries the cell_scan edge of a SurveyQuestion.
func (c *SurveyQuestionClient) QueryCellScan(sq *SurveyQuestion) *SurveyCellScanQuery {
	query := &SurveyCellScanQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(surveyquestion.Table, surveyquestion.FieldID, id),
			sqlgraph.To(surveycellscan.Table, surveycellscan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, surveyquestion.CellScanTable, surveyquestion.CellScanColumn),
		)
		fromV = sqlgraph.Neighbors(sq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPhotoData queries the photo_data edge of a SurveyQuestion.
func (c *SurveyQuestionClient) QueryPhotoData(sq *SurveyQuestion) *FileQuery {
	query := &FileQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(surveyquestion.Table, surveyquestion.FieldID, id),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, surveyquestion.PhotoDataTable, surveyquestion.PhotoDataColumn),
		)
		fromV = sqlgraph.Neighbors(sq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryImages queries the images edge of a SurveyQuestion.
func (c *SurveyQuestionClient) QueryImages(sq *SurveyQuestion) *FileQuery {
	query := &FileQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(surveyquestion.Table, surveyquestion.FieldID, id),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, surveyquestion.ImagesTable, surveyquestion.ImagesColumn),
		)
		fromV = sqlgraph.Neighbors(sq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SurveyQuestionClient) Hooks() []Hook {
	hooks := c.hooks.SurveyQuestion
	return append(hooks[:len(hooks):len(hooks)], surveyquestion.Hooks[:]...)
}

// SurveyTemplateCategoryClient is a client for the SurveyTemplateCategory schema.
type SurveyTemplateCategoryClient struct {
	config
}

// NewSurveyTemplateCategoryClient returns a client for the SurveyTemplateCategory from the given config.
func NewSurveyTemplateCategoryClient(c config) *SurveyTemplateCategoryClient {
	return &SurveyTemplateCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `surveytemplatecategory.Hooks(f(g(h())))`.
func (c *SurveyTemplateCategoryClient) Use(hooks ...Hook) {
	c.hooks.SurveyTemplateCategory = append(c.hooks.SurveyTemplateCategory, hooks...)
}

// Create returns a create builder for SurveyTemplateCategory.
func (c *SurveyTemplateCategoryClient) Create() *SurveyTemplateCategoryCreate {
	mutation := newSurveyTemplateCategoryMutation(c.config, OpCreate)
	return &SurveyTemplateCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SurveyTemplateCategory entities.
func (c *SurveyTemplateCategoryClient) CreateBulk(builders ...*SurveyTemplateCategoryCreate) *SurveyTemplateCategoryCreateBulk {
	return &SurveyTemplateCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SurveyTemplateCategory.
func (c *SurveyTemplateCategoryClient) Update() *SurveyTemplateCategoryUpdate {
	mutation := newSurveyTemplateCategoryMutation(c.config, OpUpdate)
	return &SurveyTemplateCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SurveyTemplateCategoryClient) UpdateOne(stc *SurveyTemplateCategory) *SurveyTemplateCategoryUpdateOne {
	mutation := newSurveyTemplateCategoryMutation(c.config, OpUpdateOne, withSurveyTemplateCategory(stc))
	return &SurveyTemplateCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SurveyTemplateCategoryClient) UpdateOneID(id int) *SurveyTemplateCategoryUpdateOne {
	mutation := newSurveyTemplateCategoryMutation(c.config, OpUpdateOne, withSurveyTemplateCategoryID(id))
	return &SurveyTemplateCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SurveyTemplateCategory.
func (c *SurveyTemplateCategoryClient) Delete() *SurveyTemplateCategoryDelete {
	mutation := newSurveyTemplateCategoryMutation(c.config, OpDelete)
	return &SurveyTemplateCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SurveyTemplateCategoryClient) DeleteOne(stc *SurveyTemplateCategory) *SurveyTemplateCategoryDeleteOne {
	return c.DeleteOneID(stc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SurveyTemplateCategoryClient) DeleteOneID(id int) *SurveyTemplateCategoryDeleteOne {
	builder := c.Delete().Where(surveytemplatecategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SurveyTemplateCategoryDeleteOne{builder}
}

// Query returns a query builder for SurveyTemplateCategory.
func (c *SurveyTemplateCategoryClient) Query() *SurveyTemplateCategoryQuery {
	return &SurveyTemplateCategoryQuery{config: c.config}
}

// Get returns a SurveyTemplateCategory entity by its id.
func (c *SurveyTemplateCategoryClient) Get(ctx context.Context, id int) (*SurveyTemplateCategory, error) {
	return c.Query().Where(surveytemplatecategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SurveyTemplateCategoryClient) GetX(ctx context.Context, id int) *SurveyTemplateCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySurveyTemplateQuestions queries the survey_template_questions edge of a SurveyTemplateCategory.
func (c *SurveyTemplateCategoryClient) QuerySurveyTemplateQuestions(stc *SurveyTemplateCategory) *SurveyTemplateQuestionQuery {
	query := &SurveyTemplateQuestionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := stc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(surveytemplatecategory.Table, surveytemplatecategory.FieldID, id),
			sqlgraph.To(surveytemplatequestion.Table, surveytemplatequestion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, surveytemplatecategory.SurveyTemplateQuestionsTable, surveytemplatecategory.SurveyTemplateQuestionsColumn),
		)
		fromV = sqlgraph.Neighbors(stc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLocationType queries the location_type edge of a SurveyTemplateCategory.
func (c *SurveyTemplateCategoryClient) QueryLocationType(stc *SurveyTemplateCategory) *LocationTypeQuery {
	query := &LocationTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := stc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(surveytemplatecategory.Table, surveytemplatecategory.FieldID, id),
			sqlgraph.To(locationtype.Table, locationtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, surveytemplatecategory.LocationTypeTable, surveytemplatecategory.LocationTypeColumn),
		)
		fromV = sqlgraph.Neighbors(stc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SurveyTemplateCategoryClient) Hooks() []Hook {
	hooks := c.hooks.SurveyTemplateCategory
	return append(hooks[:len(hooks):len(hooks)], surveytemplatecategory.Hooks[:]...)
}

// SurveyTemplateQuestionClient is a client for the SurveyTemplateQuestion schema.
type SurveyTemplateQuestionClient struct {
	config
}

// NewSurveyTemplateQuestionClient returns a client for the SurveyTemplateQuestion from the given config.
func NewSurveyTemplateQuestionClient(c config) *SurveyTemplateQuestionClient {
	return &SurveyTemplateQuestionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `surveytemplatequestion.Hooks(f(g(h())))`.
func (c *SurveyTemplateQuestionClient) Use(hooks ...Hook) {
	c.hooks.SurveyTemplateQuestion = append(c.hooks.SurveyTemplateQuestion, hooks...)
}

// Create returns a create builder for SurveyTemplateQuestion.
func (c *SurveyTemplateQuestionClient) Create() *SurveyTemplateQuestionCreate {
	mutation := newSurveyTemplateQuestionMutation(c.config, OpCreate)
	return &SurveyTemplateQuestionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SurveyTemplateQuestion entities.
func (c *SurveyTemplateQuestionClient) CreateBulk(builders ...*SurveyTemplateQuestionCreate) *SurveyTemplateQuestionCreateBulk {
	return &SurveyTemplateQuestionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SurveyTemplateQuestion.
func (c *SurveyTemplateQuestionClient) Update() *SurveyTemplateQuestionUpdate {
	mutation := newSurveyTemplateQuestionMutation(c.config, OpUpdate)
	return &SurveyTemplateQuestionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SurveyTemplateQuestionClient) UpdateOne(stq *SurveyTemplateQuestion) *SurveyTemplateQuestionUpdateOne {
	mutation := newSurveyTemplateQuestionMutation(c.config, OpUpdateOne, withSurveyTemplateQuestion(stq))
	return &SurveyTemplateQuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SurveyTemplateQuestionClient) UpdateOneID(id int) *SurveyTemplateQuestionUpdateOne {
	mutation := newSurveyTemplateQuestionMutation(c.config, OpUpdateOne, withSurveyTemplateQuestionID(id))
	return &SurveyTemplateQuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SurveyTemplateQuestion.
func (c *SurveyTemplateQuestionClient) Delete() *SurveyTemplateQuestionDelete {
	mutation := newSurveyTemplateQuestionMutation(c.config, OpDelete)
	return &SurveyTemplateQuestionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SurveyTemplateQuestionClient) DeleteOne(stq *SurveyTemplateQuestion) *SurveyTemplateQuestionDeleteOne {
	return c.DeleteOneID(stq.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SurveyTemplateQuestionClient) DeleteOneID(id int) *SurveyTemplateQuestionDeleteOne {
	builder := c.Delete().Where(surveytemplatequestion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SurveyTemplateQuestionDeleteOne{builder}
}

// Query returns a query builder for SurveyTemplateQuestion.
func (c *SurveyTemplateQuestionClient) Query() *SurveyTemplateQuestionQuery {
	return &SurveyTemplateQuestionQuery{config: c.config}
}

// Get returns a SurveyTemplateQuestion entity by its id.
func (c *SurveyTemplateQuestionClient) Get(ctx context.Context, id int) (*SurveyTemplateQuestion, error) {
	return c.Query().Where(surveytemplatequestion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SurveyTemplateQuestionClient) GetX(ctx context.Context, id int) *SurveyTemplateQuestion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCategory queries the category edge of a SurveyTemplateQuestion.
func (c *SurveyTemplateQuestionClient) QueryCategory(stq *SurveyTemplateQuestion) *SurveyTemplateCategoryQuery {
	query := &SurveyTemplateCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := stq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(surveytemplatequestion.Table, surveytemplatequestion.FieldID, id),
			sqlgraph.To(surveytemplatecategory.Table, surveytemplatecategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, surveytemplatequestion.CategoryTable, surveytemplatequestion.CategoryColumn),
		)
		fromV = sqlgraph.Neighbors(stq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SurveyTemplateQuestionClient) Hooks() []Hook {
	hooks := c.hooks.SurveyTemplateQuestion
	return append(hooks[:len(hooks):len(hooks)], surveytemplatequestion.Hooks[:]...)
}

// SurveyWiFiScanClient is a client for the SurveyWiFiScan schema.
type SurveyWiFiScanClient struct {
	config
}

// NewSurveyWiFiScanClient returns a client for the SurveyWiFiScan from the given config.
func NewSurveyWiFiScanClient(c config) *SurveyWiFiScanClient {
	return &SurveyWiFiScanClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `surveywifiscan.Hooks(f(g(h())))`.
func (c *SurveyWiFiScanClient) Use(hooks ...Hook) {
	c.hooks.SurveyWiFiScan = append(c.hooks.SurveyWiFiScan, hooks...)
}

// Create returns a create builder for SurveyWiFiScan.
func (c *SurveyWiFiScanClient) Create() *SurveyWiFiScanCreate {
	mutation := newSurveyWiFiScanMutation(c.config, OpCreate)
	return &SurveyWiFiScanCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SurveyWiFiScan entities.
func (c *SurveyWiFiScanClient) CreateBulk(builders ...*SurveyWiFiScanCreate) *SurveyWiFiScanCreateBulk {
	return &SurveyWiFiScanCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SurveyWiFiScan.
func (c *SurveyWiFiScanClient) Update() *SurveyWiFiScanUpdate {
	mutation := newSurveyWiFiScanMutation(c.config, OpUpdate)
	return &SurveyWiFiScanUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SurveyWiFiScanClient) UpdateOne(swfs *SurveyWiFiScan) *SurveyWiFiScanUpdateOne {
	mutation := newSurveyWiFiScanMutation(c.config, OpUpdateOne, withSurveyWiFiScan(swfs))
	return &SurveyWiFiScanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SurveyWiFiScanClient) UpdateOneID(id int) *SurveyWiFiScanUpdateOne {
	mutation := newSurveyWiFiScanMutation(c.config, OpUpdateOne, withSurveyWiFiScanID(id))
	return &SurveyWiFiScanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SurveyWiFiScan.
func (c *SurveyWiFiScanClient) Delete() *SurveyWiFiScanDelete {
	mutation := newSurveyWiFiScanMutation(c.config, OpDelete)
	return &SurveyWiFiScanDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SurveyWiFiScanClient) DeleteOne(swfs *SurveyWiFiScan) *SurveyWiFiScanDeleteOne {
	return c.DeleteOneID(swfs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SurveyWiFiScanClient) DeleteOneID(id int) *SurveyWiFiScanDeleteOne {
	builder := c.Delete().Where(surveywifiscan.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SurveyWiFiScanDeleteOne{builder}
}

// Query returns a query builder for SurveyWiFiScan.
func (c *SurveyWiFiScanClient) Query() *SurveyWiFiScanQuery {
	return &SurveyWiFiScanQuery{config: c.config}
}

// Get returns a SurveyWiFiScan entity by its id.
func (c *SurveyWiFiScanClient) Get(ctx context.Context, id int) (*SurveyWiFiScan, error) {
	return c.Query().Where(surveywifiscan.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SurveyWiFiScanClient) GetX(ctx context.Context, id int) *SurveyWiFiScan {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChecklistItem queries the checklist_item edge of a SurveyWiFiScan.
func (c *SurveyWiFiScanClient) QueryChecklistItem(swfs *SurveyWiFiScan) *CheckListItemQuery {
	query := &CheckListItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := swfs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(surveywifiscan.Table, surveywifiscan.FieldID, id),
			sqlgraph.To(checklistitem.Table, checklistitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, surveywifiscan.ChecklistItemTable, surveywifiscan.ChecklistItemColumn),
		)
		fromV = sqlgraph.Neighbors(swfs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySurveyQuestion queries the survey_question edge of a SurveyWiFiScan.
func (c *SurveyWiFiScanClient) QuerySurveyQuestion(swfs *SurveyWiFiScan) *SurveyQuestionQuery {
	query := &SurveyQuestionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := swfs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(surveywifiscan.Table, surveywifiscan.FieldID, id),
			sqlgraph.To(surveyquestion.Table, surveyquestion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, surveywifiscan.SurveyQuestionTable, surveywifiscan.SurveyQuestionColumn),
		)
		fromV = sqlgraph.Neighbors(swfs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLocation queries the location edge of a SurveyWiFiScan.
func (c *SurveyWiFiScanClient) QueryLocation(swfs *SurveyWiFiScan) *LocationQuery {
	query := &LocationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := swfs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(surveywifiscan.Table, surveywifiscan.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, surveywifiscan.LocationTable, surveywifiscan.LocationColumn),
		)
		fromV = sqlgraph.Neighbors(swfs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SurveyWiFiScanClient) Hooks() []Hook {
	hooks := c.hooks.SurveyWiFiScan
	return append(hooks[:len(hooks):len(hooks)], surveywifiscan.Hooks[:]...)
}

// TechClient is a client for the Tech schema.
type TechClient struct {
	config
}

// NewTechClient returns a client for the Tech from the given config.
func NewTechClient(c config) *TechClient {
	return &TechClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tech.Hooks(f(g(h())))`.
func (c *TechClient) Use(hooks ...Hook) {
	c.hooks.Tech = append(c.hooks.Tech, hooks...)
}

// Create returns a create builder for Tech.
func (c *TechClient) Create() *TechCreate {
	mutation := newTechMutation(c.config, OpCreate)
	return &TechCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tech entities.
func (c *TechClient) CreateBulk(builders ...*TechCreate) *TechCreateBulk {
	return &TechCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tech.
func (c *TechClient) Update() *TechUpdate {
	mutation := newTechMutation(c.config, OpUpdate)
	return &TechUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TechClient) UpdateOne(t *Tech) *TechUpdateOne {
	mutation := newTechMutation(c.config, OpUpdateOne, withTech(t))
	return &TechUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TechClient) UpdateOneID(id int) *TechUpdateOne {
	mutation := newTechMutation(c.config, OpUpdateOne, withTechID(id))
	return &TechUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tech.
func (c *TechClient) Delete() *TechDelete {
	mutation := newTechMutation(c.config, OpDelete)
	return &TechDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TechClient) DeleteOne(t *Tech) *TechDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TechClient) DeleteOneID(id int) *TechDeleteOne {
	builder := c.Delete().Where(tech.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TechDeleteOne{builder}
}

// Query returns a query builder for Tech.
func (c *TechClient) Query() *TechQuery {
	return &TechQuery{config: c.config}
}

// Get returns a Tech entity by its id.
func (c *TechClient) Get(ctx context.Context, id int) (*Tech, error) {
	return c.Query().Where(tech.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TechClient) GetX(ctx context.Context, id int) *Tech {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDomain queries the domain edge of a Tech.
func (c *TechClient) QueryDomain(t *Tech) *DomainQuery {
	query := &DomainQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tech.Table, tech.FieldID, id),
			sqlgraph.To(domain.Table, domain.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tech.DomainTable, tech.DomainColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFormulatech queries the formulatech edge of a Tech.
func (c *TechClient) QueryFormulatech(t *Tech) *FormulaQuery {
	query := &FormulaQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tech.Table, tech.FieldID, id),
			sqlgraph.To(formula.Table, formula.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tech.FormulatechTable, tech.FormulatechColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TechClient) Hooks() []Hook {
	hooks := c.hooks.Tech
	return append(hooks[:len(hooks):len(hooks)], tech.Hooks[:]...)
}

// ThresholdClient is a client for the Threshold schema.
type ThresholdClient struct {
	config
}

// NewThresholdClient returns a client for the Threshold from the given config.
func NewThresholdClient(c config) *ThresholdClient {
	return &ThresholdClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `threshold.Hooks(f(g(h())))`.
func (c *ThresholdClient) Use(hooks ...Hook) {
	c.hooks.Threshold = append(c.hooks.Threshold, hooks...)
}

// Create returns a create builder for Threshold.
func (c *ThresholdClient) Create() *ThresholdCreate {
	mutation := newThresholdMutation(c.config, OpCreate)
	return &ThresholdCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Threshold entities.
func (c *ThresholdClient) CreateBulk(builders ...*ThresholdCreate) *ThresholdCreateBulk {
	return &ThresholdCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Threshold.
func (c *ThresholdClient) Update() *ThresholdUpdate {
	mutation := newThresholdMutation(c.config, OpUpdate)
	return &ThresholdUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ThresholdClient) UpdateOne(t *Threshold) *ThresholdUpdateOne {
	mutation := newThresholdMutation(c.config, OpUpdateOne, withThreshold(t))
	return &ThresholdUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ThresholdClient) UpdateOneID(id int) *ThresholdUpdateOne {
	mutation := newThresholdMutation(c.config, OpUpdateOne, withThresholdID(id))
	return &ThresholdUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Threshold.
func (c *ThresholdClient) Delete() *ThresholdDelete {
	mutation := newThresholdMutation(c.config, OpDelete)
	return &ThresholdDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ThresholdClient) DeleteOne(t *Threshold) *ThresholdDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ThresholdClient) DeleteOneID(id int) *ThresholdDeleteOne {
	builder := c.Delete().Where(threshold.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ThresholdDeleteOne{builder}
}

// Query returns a query builder for Threshold.
func (c *ThresholdClient) Query() *ThresholdQuery {
	return &ThresholdQuery{config: c.config}
}

// Get returns a Threshold entity by its id.
func (c *ThresholdClient) Get(ctx context.Context, id int) (*Threshold, error) {
	return c.Query().Where(threshold.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ThresholdClient) GetX(ctx context.Context, id int) *Threshold {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryKpi queries the kpi edge of a Threshold.
func (c *ThresholdClient) QueryKpi(t *Threshold) *KpiQuery {
	query := &KpiQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(threshold.Table, threshold.FieldID, id),
			sqlgraph.To(kpi.Table, kpi.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, threshold.KpiTable, threshold.KpiColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRulethreshold queries the rulethreshold edge of a Threshold.
func (c *ThresholdClient) QueryRulethreshold(t *Threshold) *RuleQuery {
	query := &RuleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(threshold.Table, threshold.FieldID, id),
			sqlgraph.To(rule.Table, rule.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, threshold.RulethresholdTable, threshold.RulethresholdColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ThresholdClient) Hooks() []Hook {
	hooks := c.hooks.Threshold
	return append(hooks[:len(hooks):len(hooks)], threshold.Hooks[:]...)
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProfilePhoto queries the profile_photo edge of a User.
func (c *UserClient) QueryProfilePhoto(u *User) *FileQuery {
	query := &FileQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.ProfilePhotoTable, user.ProfilePhotoColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserCreate queries the User_create edge of a User.
func (c *UserClient) QueryUserCreate(u *User) *RecommendationsQuery {
	query := &RecommendationsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(recommendations.Table, recommendations.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserCreateTable, user.UserCreateColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserApproved queries the User_approved edge of a User.
func (c *UserClient) QueryUserApproved(u *User) *RecommendationsQuery {
	query := &RecommendationsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(recommendations.Table, recommendations.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserApprovedTable, user.UserApprovedColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroups queries the groups edge of a User.
func (c *UserClient) QueryGroups(u *User) *UsersGroupQuery {
	query := &UsersGroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(usersgroup.Table, usersgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.GroupsTable, user.GroupsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a User.
func (c *UserClient) QueryOrganization(u *User) *OrganizationQuery {
	query := &OrganizationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.OrganizationTable, user.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwnedWorkOrders queries the owned_work_orders edge of a User.
func (c *UserClient) QueryOwnedWorkOrders(u *User) *WorkOrderQuery {
	query := &WorkOrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(workorder.Table, workorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.OwnedWorkOrdersTable, user.OwnedWorkOrdersColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssignedWorkOrders queries the assigned_work_orders edge of a User.
func (c *UserClient) QueryAssignedWorkOrders(u *User) *WorkOrderQuery {
	query := &WorkOrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(workorder.Table, workorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.AssignedWorkOrdersTable, user.AssignedWorkOrdersColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCreatedProjects queries the created_projects edge of a User.
func (c *UserClient) QueryCreatedProjects(u *User) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.CreatedProjectsTable, user.CreatedProjectsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeatures queries the features edge of a User.
func (c *UserClient) QueryFeatures(u *User) *FeatureQuery {
	query := &FeatureQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(feature.Table, feature.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.FeaturesTable, user.FeaturesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppointment queries the appointment edge of a User.
func (c *UserClient) QueryAppointment(u *User) *AppointmentQuery {
	query := &AppointmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(appointment.Table, appointment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AppointmentTable, user.AppointmentColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	hooks := c.hooks.User
	return append(hooks[:len(hooks):len(hooks)], user.Hooks[:]...)
}

// UsersGroupClient is a client for the UsersGroup schema.
type UsersGroupClient struct {
	config
}

// NewUsersGroupClient returns a client for the UsersGroup from the given config.
func NewUsersGroupClient(c config) *UsersGroupClient {
	return &UsersGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usersgroup.Hooks(f(g(h())))`.
func (c *UsersGroupClient) Use(hooks ...Hook) {
	c.hooks.UsersGroup = append(c.hooks.UsersGroup, hooks...)
}

// Create returns a create builder for UsersGroup.
func (c *UsersGroupClient) Create() *UsersGroupCreate {
	mutation := newUsersGroupMutation(c.config, OpCreate)
	return &UsersGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UsersGroup entities.
func (c *UsersGroupClient) CreateBulk(builders ...*UsersGroupCreate) *UsersGroupCreateBulk {
	return &UsersGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UsersGroup.
func (c *UsersGroupClient) Update() *UsersGroupUpdate {
	mutation := newUsersGroupMutation(c.config, OpUpdate)
	return &UsersGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UsersGroupClient) UpdateOne(ug *UsersGroup) *UsersGroupUpdateOne {
	mutation := newUsersGroupMutation(c.config, OpUpdateOne, withUsersGroup(ug))
	return &UsersGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UsersGroupClient) UpdateOneID(id int) *UsersGroupUpdateOne {
	mutation := newUsersGroupMutation(c.config, OpUpdateOne, withUsersGroupID(id))
	return &UsersGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UsersGroup.
func (c *UsersGroupClient) Delete() *UsersGroupDelete {
	mutation := newUsersGroupMutation(c.config, OpDelete)
	return &UsersGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UsersGroupClient) DeleteOne(ug *UsersGroup) *UsersGroupDeleteOne {
	return c.DeleteOneID(ug.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UsersGroupClient) DeleteOneID(id int) *UsersGroupDeleteOne {
	builder := c.Delete().Where(usersgroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UsersGroupDeleteOne{builder}
}

// Query returns a query builder for UsersGroup.
func (c *UsersGroupClient) Query() *UsersGroupQuery {
	return &UsersGroupQuery{config: c.config}
}

// Get returns a UsersGroup entity by its id.
func (c *UsersGroupClient) Get(ctx context.Context, id int) (*UsersGroup, error) {
	return c.Query().Where(usersgroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UsersGroupClient) GetX(ctx context.Context, id int) *UsersGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMembers queries the members edge of a UsersGroup.
func (c *UsersGroupClient) QueryMembers(ug *UsersGroup) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ug.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usersgroup.Table, usersgroup.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, usersgroup.MembersTable, usersgroup.MembersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ug.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPolicies queries the policies edge of a UsersGroup.
func (c *UsersGroupClient) QueryPolicies(ug *UsersGroup) *PermissionsPolicyQuery {
	query := &PermissionsPolicyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ug.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usersgroup.Table, usersgroup.FieldID, id),
			sqlgraph.To(permissionspolicy.Table, permissionspolicy.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, usersgroup.PoliciesTable, usersgroup.PoliciesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ug.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFeatures queries the features edge of a UsersGroup.
func (c *UsersGroupClient) QueryFeatures(ug *UsersGroup) *FeatureQuery {
	query := &FeatureQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ug.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usersgroup.Table, usersgroup.FieldID, id),
			sqlgraph.To(feature.Table, feature.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, usersgroup.FeaturesTable, usersgroup.FeaturesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ug.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UsersGroupClient) Hooks() []Hook {
	hooks := c.hooks.UsersGroup
	return append(hooks[:len(hooks):len(hooks)], usersgroup.Hooks[:]...)
}

// VendorClient is a client for the Vendor schema.
type VendorClient struct {
	config
}

// NewVendorClient returns a client for the Vendor from the given config.
func NewVendorClient(c config) *VendorClient {
	return &VendorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vendor.Hooks(f(g(h())))`.
func (c *VendorClient) Use(hooks ...Hook) {
	c.hooks.Vendor = append(c.hooks.Vendor, hooks...)
}

// Create returns a create builder for Vendor.
func (c *VendorClient) Create() *VendorCreate {
	mutation := newVendorMutation(c.config, OpCreate)
	return &VendorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Vendor entities.
func (c *VendorClient) CreateBulk(builders ...*VendorCreate) *VendorCreateBulk {
	return &VendorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Vendor.
func (c *VendorClient) Update() *VendorUpdate {
	mutation := newVendorMutation(c.config, OpUpdate)
	return &VendorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VendorClient) UpdateOne(v *Vendor) *VendorUpdateOne {
	mutation := newVendorMutation(c.config, OpUpdateOne, withVendor(v))
	return &VendorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VendorClient) UpdateOneID(id int) *VendorUpdateOne {
	mutation := newVendorMutation(c.config, OpUpdateOne, withVendorID(id))
	return &VendorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Vendor.
func (c *VendorClient) Delete() *VendorDelete {
	mutation := newVendorMutation(c.config, OpDelete)
	return &VendorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *VendorClient) DeleteOne(v *Vendor) *VendorDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *VendorClient) DeleteOneID(id int) *VendorDeleteOne {
	builder := c.Delete().Where(vendor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VendorDeleteOne{builder}
}

// Query returns a query builder for Vendor.
func (c *VendorClient) Query() *VendorQuery {
	return &VendorQuery{config: c.config}
}

// Get returns a Vendor entity by its id.
func (c *VendorClient) Get(ctx context.Context, id int) (*Vendor, error) {
	return c.Query().Where(vendor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VendorClient) GetX(ctx context.Context, id int) *Vendor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVendorFk queries the vendor_fk edge of a Vendor.
func (c *VendorClient) QueryVendorFk(v *Vendor) *CounterQuery {
	query := &CounterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vendor.Table, vendor.FieldID, id),
			sqlgraph.To(counter.Table, counter.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, vendor.VendorFkTable, vendor.VendorFkColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVendorsRecomendations queries the vendors_recomendations edge of a Vendor.
func (c *VendorClient) QueryVendorsRecomendations(v *Vendor) *RecommendationsQuery {
	query := &RecommendationsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vendor.Table, vendor.FieldID, id),
			sqlgraph.To(recommendations.Table, recommendations.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, vendor.VendorsRecomendationsTable, vendor.VendorsRecomendationsColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VendorClient) Hooks() []Hook {
	hooks := c.hooks.Vendor
	return append(hooks[:len(hooks):len(hooks)], vendor.Hooks[:]...)
}

// WorkOrderClient is a client for the WorkOrder schema.
type WorkOrderClient struct {
	config
}

// NewWorkOrderClient returns a client for the WorkOrder from the given config.
func NewWorkOrderClient(c config) *WorkOrderClient {
	return &WorkOrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workorder.Hooks(f(g(h())))`.
func (c *WorkOrderClient) Use(hooks ...Hook) {
	c.hooks.WorkOrder = append(c.hooks.WorkOrder, hooks...)
}

// Create returns a create builder for WorkOrder.
func (c *WorkOrderClient) Create() *WorkOrderCreate {
	mutation := newWorkOrderMutation(c.config, OpCreate)
	return &WorkOrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkOrder entities.
func (c *WorkOrderClient) CreateBulk(builders ...*WorkOrderCreate) *WorkOrderCreateBulk {
	return &WorkOrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkOrder.
func (c *WorkOrderClient) Update() *WorkOrderUpdate {
	mutation := newWorkOrderMutation(c.config, OpUpdate)
	return &WorkOrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkOrderClient) UpdateOne(wo *WorkOrder) *WorkOrderUpdateOne {
	mutation := newWorkOrderMutation(c.config, OpUpdateOne, withWorkOrder(wo))
	return &WorkOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkOrderClient) UpdateOneID(id int) *WorkOrderUpdateOne {
	mutation := newWorkOrderMutation(c.config, OpUpdateOne, withWorkOrderID(id))
	return &WorkOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkOrder.
func (c *WorkOrderClient) Delete() *WorkOrderDelete {
	mutation := newWorkOrderMutation(c.config, OpDelete)
	return &WorkOrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkOrderClient) DeleteOne(wo *WorkOrder) *WorkOrderDeleteOne {
	return c.DeleteOneID(wo.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkOrderClient) DeleteOneID(id int) *WorkOrderDeleteOne {
	builder := c.Delete().Where(workorder.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkOrderDeleteOne{builder}
}

// Query returns a query builder for WorkOrder.
func (c *WorkOrderClient) Query() *WorkOrderQuery {
	return &WorkOrderQuery{config: c.config}
}

// Get returns a WorkOrder entity by its id.
func (c *WorkOrderClient) Get(ctx context.Context, id int) (*WorkOrder, error) {
	return c.Query().Where(workorder.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkOrderClient) GetX(ctx context.Context, id int) *WorkOrder {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryType queries the type edge of a WorkOrder.
func (c *WorkOrderClient) QueryType(wo *WorkOrder) *WorkOrderTypeQuery {
	query := &WorkOrderTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workorder.Table, workorder.FieldID, id),
			sqlgraph.To(workordertype.Table, workordertype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workorder.TypeTable, workorder.TypeColumn),
		)
		fromV = sqlgraph.Neighbors(wo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTemplate queries the template edge of a WorkOrder.
func (c *WorkOrderClient) QueryTemplate(wo *WorkOrder) *WorkOrderTemplateQuery {
	query := &WorkOrderTemplateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workorder.Table, workorder.FieldID, id),
			sqlgraph.To(workordertemplate.Table, workordertemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workorder.TemplateTable, workorder.TemplateColumn),
		)
		fromV = sqlgraph.Neighbors(wo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEquipment queries the equipment edge of a WorkOrder.
func (c *WorkOrderClient) QueryEquipment(wo *WorkOrder) *EquipmentQuery {
	query := &EquipmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workorder.Table, workorder.FieldID, id),
			sqlgraph.To(equipment.Table, equipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, workorder.EquipmentTable, workorder.EquipmentColumn),
		)
		fromV = sqlgraph.Neighbors(wo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLinks queries the links edge of a WorkOrder.
func (c *WorkOrderClient) QueryLinks(wo *WorkOrder) *LinkQuery {
	query := &LinkQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workorder.Table, workorder.FieldID, id),
			sqlgraph.To(link.Table, link.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, workorder.LinksTable, workorder.LinksColumn),
		)
		fromV = sqlgraph.Neighbors(wo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a WorkOrder.
func (c *WorkOrderClient) QueryOrganization(wo *WorkOrder) *OrganizationQuery {
	query := &OrganizationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workorder.Table, workorder.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workorder.OrganizationTable, workorder.OrganizationColumn),
		)
		fromV = sqlgraph.Neighbors(wo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFiles queries the files edge of a WorkOrder.
func (c *WorkOrderClient) QueryFiles(wo *WorkOrder) *FileQuery {
	query := &FileQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workorder.Table, workorder.FieldID, id),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workorder.FilesTable, workorder.FilesColumn),
		)
		fromV = sqlgraph.Neighbors(wo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHyperlinks queries the hyperlinks edge of a WorkOrder.
func (c *WorkOrderClient) QueryHyperlinks(wo *WorkOrder) *HyperlinkQuery {
	query := &HyperlinkQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workorder.Table, workorder.FieldID, id),
			sqlgraph.To(hyperlink.Table, hyperlink.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workorder.HyperlinksTable, workorder.HyperlinksColumn),
		)
		fromV = sqlgraph.Neighbors(wo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLocation queries the location edge of a WorkOrder.
func (c *WorkOrderClient) QueryLocation(wo *WorkOrder) *LocationQuery {
	query := &LocationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workorder.Table, workorder.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workorder.LocationTable, workorder.LocationColumn),
		)
		fromV = sqlgraph.Neighbors(wo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryComments queries the comments edge of a WorkOrder.
func (c *WorkOrderClient) QueryComments(wo *WorkOrder) *CommentQuery {
	query := &CommentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workorder.Table, workorder.FieldID, id),
			sqlgraph.To(comment.Table, comment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workorder.CommentsTable, workorder.CommentsColumn),
		)
		fromV = sqlgraph.Neighbors(wo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActivities queries the activities edge of a WorkOrder.
func (c *WorkOrderClient) QueryActivities(wo *WorkOrder) *ActivityQuery {
	query := &ActivityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workorder.Table, workorder.FieldID, id),
			sqlgraph.To(activity.Table, activity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workorder.ActivitiesTable, workorder.ActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(wo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProperties queries the properties edge of a WorkOrder.
func (c *WorkOrderClient) QueryProperties(wo *WorkOrder) *PropertyQuery {
	query := &PropertyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workorder.Table, workorder.FieldID, id),
			sqlgraph.To(property.Table, property.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workorder.PropertiesTable, workorder.PropertiesColumn),
		)
		fromV = sqlgraph.Neighbors(wo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCheckListCategories queries the check_list_categories edge of a WorkOrder.
func (c *WorkOrderClient) QueryCheckListCategories(wo *WorkOrder) *CheckListCategoryQuery {
	query := &CheckListCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workorder.Table, workorder.FieldID, id),
			sqlgraph.To(checklistcategory.Table, checklistcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workorder.CheckListCategoriesTable, workorder.CheckListCategoriesColumn),
		)
		fromV = sqlgraph.Neighbors(wo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProject queries the project edge of a WorkOrder.
func (c *WorkOrderClient) QueryProject(wo *WorkOrder) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workorder.Table, workorder.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workorder.ProjectTable, workorder.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(wo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwner queries the owner edge of a WorkOrder.
func (c *WorkOrderClient) QueryOwner(wo *WorkOrder) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workorder.Table, workorder.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workorder.OwnerTable, workorder.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(wo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssignee queries the assignee edge of a WorkOrder.
func (c *WorkOrderClient) QueryAssignee(wo *WorkOrder) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workorder.Table, workorder.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workorder.AssigneeTable, workorder.AssigneeColumn),
		)
		fromV = sqlgraph.Neighbors(wo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppointment queries the appointment edge of a WorkOrder.
func (c *WorkOrderClient) QueryAppointment(wo *WorkOrder) *AppointmentQuery {
	query := &AppointmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workorder.Table, workorder.FieldID, id),
			sqlgraph.To(appointment.Table, appointment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workorder.AppointmentTable, workorder.AppointmentColumn),
		)
		fromV = sqlgraph.Neighbors(wo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkOrderClient) Hooks() []Hook {
	hooks := c.hooks.WorkOrder
	return append(hooks[:len(hooks):len(hooks)], workorder.Hooks[:]...)
}

// WorkOrderDefinitionClient is a client for the WorkOrderDefinition schema.
type WorkOrderDefinitionClient struct {
	config
}

// NewWorkOrderDefinitionClient returns a client for the WorkOrderDefinition from the given config.
func NewWorkOrderDefinitionClient(c config) *WorkOrderDefinitionClient {
	return &WorkOrderDefinitionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workorderdefinition.Hooks(f(g(h())))`.
func (c *WorkOrderDefinitionClient) Use(hooks ...Hook) {
	c.hooks.WorkOrderDefinition = append(c.hooks.WorkOrderDefinition, hooks...)
}

// Create returns a create builder for WorkOrderDefinition.
func (c *WorkOrderDefinitionClient) Create() *WorkOrderDefinitionCreate {
	mutation := newWorkOrderDefinitionMutation(c.config, OpCreate)
	return &WorkOrderDefinitionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkOrderDefinition entities.
func (c *WorkOrderDefinitionClient) CreateBulk(builders ...*WorkOrderDefinitionCreate) *WorkOrderDefinitionCreateBulk {
	return &WorkOrderDefinitionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkOrderDefinition.
func (c *WorkOrderDefinitionClient) Update() *WorkOrderDefinitionUpdate {
	mutation := newWorkOrderDefinitionMutation(c.config, OpUpdate)
	return &WorkOrderDefinitionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkOrderDefinitionClient) UpdateOne(wod *WorkOrderDefinition) *WorkOrderDefinitionUpdateOne {
	mutation := newWorkOrderDefinitionMutation(c.config, OpUpdateOne, withWorkOrderDefinition(wod))
	return &WorkOrderDefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkOrderDefinitionClient) UpdateOneID(id int) *WorkOrderDefinitionUpdateOne {
	mutation := newWorkOrderDefinitionMutation(c.config, OpUpdateOne, withWorkOrderDefinitionID(id))
	return &WorkOrderDefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkOrderDefinition.
func (c *WorkOrderDefinitionClient) Delete() *WorkOrderDefinitionDelete {
	mutation := newWorkOrderDefinitionMutation(c.config, OpDelete)
	return &WorkOrderDefinitionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkOrderDefinitionClient) DeleteOne(wod *WorkOrderDefinition) *WorkOrderDefinitionDeleteOne {
	return c.DeleteOneID(wod.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkOrderDefinitionClient) DeleteOneID(id int) *WorkOrderDefinitionDeleteOne {
	builder := c.Delete().Where(workorderdefinition.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkOrderDefinitionDeleteOne{builder}
}

// Query returns a query builder for WorkOrderDefinition.
func (c *WorkOrderDefinitionClient) Query() *WorkOrderDefinitionQuery {
	return &WorkOrderDefinitionQuery{config: c.config}
}

// Get returns a WorkOrderDefinition entity by its id.
func (c *WorkOrderDefinitionClient) Get(ctx context.Context, id int) (*WorkOrderDefinition, error) {
	return c.Query().Where(workorderdefinition.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkOrderDefinitionClient) GetX(ctx context.Context, id int) *WorkOrderDefinition {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryType queries the type edge of a WorkOrderDefinition.
func (c *WorkOrderDefinitionClient) QueryType(wod *WorkOrderDefinition) *WorkOrderTypeQuery {
	query := &WorkOrderTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wod.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workorderdefinition.Table, workorderdefinition.FieldID, id),
			sqlgraph.To(workordertype.Table, workordertype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workorderdefinition.TypeTable, workorderdefinition.TypeColumn),
		)
		fromV = sqlgraph.Neighbors(wod.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectType queries the project_type edge of a WorkOrderDefinition.
func (c *WorkOrderDefinitionClient) QueryProjectType(wod *WorkOrderDefinition) *ProjectTypeQuery {
	query := &ProjectTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wod.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workorderdefinition.Table, workorderdefinition.FieldID, id),
			sqlgraph.To(projecttype.Table, projecttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workorderdefinition.ProjectTypeTable, workorderdefinition.ProjectTypeColumn),
		)
		fromV = sqlgraph.Neighbors(wod.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectTemplate queries the project_template edge of a WorkOrderDefinition.
func (c *WorkOrderDefinitionClient) QueryProjectTemplate(wod *WorkOrderDefinition) *ProjectTemplateQuery {
	query := &ProjectTemplateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wod.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workorderdefinition.Table, workorderdefinition.FieldID, id),
			sqlgraph.To(projecttemplate.Table, projecttemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workorderdefinition.ProjectTemplateTable, workorderdefinition.ProjectTemplateColumn),
		)
		fromV = sqlgraph.Neighbors(wod.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkOrderDefinitionClient) Hooks() []Hook {
	hooks := c.hooks.WorkOrderDefinition
	return append(hooks[:len(hooks):len(hooks)], workorderdefinition.Hooks[:]...)
}

// WorkOrderTemplateClient is a client for the WorkOrderTemplate schema.
type WorkOrderTemplateClient struct {
	config
}

// NewWorkOrderTemplateClient returns a client for the WorkOrderTemplate from the given config.
func NewWorkOrderTemplateClient(c config) *WorkOrderTemplateClient {
	return &WorkOrderTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workordertemplate.Hooks(f(g(h())))`.
func (c *WorkOrderTemplateClient) Use(hooks ...Hook) {
	c.hooks.WorkOrderTemplate = append(c.hooks.WorkOrderTemplate, hooks...)
}

// Create returns a create builder for WorkOrderTemplate.
func (c *WorkOrderTemplateClient) Create() *WorkOrderTemplateCreate {
	mutation := newWorkOrderTemplateMutation(c.config, OpCreate)
	return &WorkOrderTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkOrderTemplate entities.
func (c *WorkOrderTemplateClient) CreateBulk(builders ...*WorkOrderTemplateCreate) *WorkOrderTemplateCreateBulk {
	return &WorkOrderTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkOrderTemplate.
func (c *WorkOrderTemplateClient) Update() *WorkOrderTemplateUpdate {
	mutation := newWorkOrderTemplateMutation(c.config, OpUpdate)
	return &WorkOrderTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkOrderTemplateClient) UpdateOne(wot *WorkOrderTemplate) *WorkOrderTemplateUpdateOne {
	mutation := newWorkOrderTemplateMutation(c.config, OpUpdateOne, withWorkOrderTemplate(wot))
	return &WorkOrderTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkOrderTemplateClient) UpdateOneID(id int) *WorkOrderTemplateUpdateOne {
	mutation := newWorkOrderTemplateMutation(c.config, OpUpdateOne, withWorkOrderTemplateID(id))
	return &WorkOrderTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkOrderTemplate.
func (c *WorkOrderTemplateClient) Delete() *WorkOrderTemplateDelete {
	mutation := newWorkOrderTemplateMutation(c.config, OpDelete)
	return &WorkOrderTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkOrderTemplateClient) DeleteOne(wot *WorkOrderTemplate) *WorkOrderTemplateDeleteOne {
	return c.DeleteOneID(wot.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkOrderTemplateClient) DeleteOneID(id int) *WorkOrderTemplateDeleteOne {
	builder := c.Delete().Where(workordertemplate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkOrderTemplateDeleteOne{builder}
}

// Query returns a query builder for WorkOrderTemplate.
func (c *WorkOrderTemplateClient) Query() *WorkOrderTemplateQuery {
	return &WorkOrderTemplateQuery{config: c.config}
}

// Get returns a WorkOrderTemplate entity by its id.
func (c *WorkOrderTemplateClient) Get(ctx context.Context, id int) (*WorkOrderTemplate, error) {
	return c.Query().Where(workordertemplate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkOrderTemplateClient) GetX(ctx context.Context, id int) *WorkOrderTemplate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPropertyTypes queries the property_types edge of a WorkOrderTemplate.
func (c *WorkOrderTemplateClient) QueryPropertyTypes(wot *WorkOrderTemplate) *PropertyTypeQuery {
	query := &PropertyTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wot.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workordertemplate.Table, workordertemplate.FieldID, id),
			sqlgraph.To(propertytype.Table, propertytype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workordertemplate.PropertyTypesTable, workordertemplate.PropertyTypesColumn),
		)
		fromV = sqlgraph.Neighbors(wot.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCheckListCategoryDefinitions queries the check_list_category_definitions edge of a WorkOrderTemplate.
func (c *WorkOrderTemplateClient) QueryCheckListCategoryDefinitions(wot *WorkOrderTemplate) *CheckListCategoryDefinitionQuery {
	query := &CheckListCategoryDefinitionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wot.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workordertemplate.Table, workordertemplate.FieldID, id),
			sqlgraph.To(checklistcategorydefinition.Table, checklistcategorydefinition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workordertemplate.CheckListCategoryDefinitionsTable, workordertemplate.CheckListCategoryDefinitionsColumn),
		)
		fromV = sqlgraph.Neighbors(wot.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryType queries the type edge of a WorkOrderTemplate.
func (c *WorkOrderTemplateClient) QueryType(wot *WorkOrderTemplate) *WorkOrderTypeQuery {
	query := &WorkOrderTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wot.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workordertemplate.Table, workordertemplate.FieldID, id),
			sqlgraph.To(workordertype.Table, workordertype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workordertemplate.TypeTable, workordertemplate.TypeColumn),
		)
		fromV = sqlgraph.Neighbors(wot.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkOrderTemplateClient) Hooks() []Hook {
	hooks := c.hooks.WorkOrderTemplate
	return append(hooks[:len(hooks):len(hooks)], workordertemplate.Hooks[:]...)
}

// WorkOrderTypeClient is a client for the WorkOrderType schema.
type WorkOrderTypeClient struct {
	config
}

// NewWorkOrderTypeClient returns a client for the WorkOrderType from the given config.
func NewWorkOrderTypeClient(c config) *WorkOrderTypeClient {
	return &WorkOrderTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workordertype.Hooks(f(g(h())))`.
func (c *WorkOrderTypeClient) Use(hooks ...Hook) {
	c.hooks.WorkOrderType = append(c.hooks.WorkOrderType, hooks...)
}

// Create returns a create builder for WorkOrderType.
func (c *WorkOrderTypeClient) Create() *WorkOrderTypeCreate {
	mutation := newWorkOrderTypeMutation(c.config, OpCreate)
	return &WorkOrderTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkOrderType entities.
func (c *WorkOrderTypeClient) CreateBulk(builders ...*WorkOrderTypeCreate) *WorkOrderTypeCreateBulk {
	return &WorkOrderTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkOrderType.
func (c *WorkOrderTypeClient) Update() *WorkOrderTypeUpdate {
	mutation := newWorkOrderTypeMutation(c.config, OpUpdate)
	return &WorkOrderTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkOrderTypeClient) UpdateOne(wot *WorkOrderType) *WorkOrderTypeUpdateOne {
	mutation := newWorkOrderTypeMutation(c.config, OpUpdateOne, withWorkOrderType(wot))
	return &WorkOrderTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkOrderTypeClient) UpdateOneID(id int) *WorkOrderTypeUpdateOne {
	mutation := newWorkOrderTypeMutation(c.config, OpUpdateOne, withWorkOrderTypeID(id))
	return &WorkOrderTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkOrderType.
func (c *WorkOrderTypeClient) Delete() *WorkOrderTypeDelete {
	mutation := newWorkOrderTypeMutation(c.config, OpDelete)
	return &WorkOrderTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkOrderTypeClient) DeleteOne(wot *WorkOrderType) *WorkOrderTypeDeleteOne {
	return c.DeleteOneID(wot.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkOrderTypeClient) DeleteOneID(id int) *WorkOrderTypeDeleteOne {
	builder := c.Delete().Where(workordertype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkOrderTypeDeleteOne{builder}
}

// Query returns a query builder for WorkOrderType.
func (c *WorkOrderTypeClient) Query() *WorkOrderTypeQuery {
	return &WorkOrderTypeQuery{config: c.config}
}

// Get returns a WorkOrderType entity by its id.
func (c *WorkOrderTypeClient) Get(ctx context.Context, id int) (*WorkOrderType, error) {
	return c.Query().Where(workordertype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkOrderTypeClient) GetX(ctx context.Context, id int) *WorkOrderType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPropertyTypes queries the property_types edge of a WorkOrderType.
func (c *WorkOrderTypeClient) QueryPropertyTypes(wot *WorkOrderType) *PropertyTypeQuery {
	query := &PropertyTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wot.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workordertype.Table, workordertype.FieldID, id),
			sqlgraph.To(propertytype.Table, propertytype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workordertype.PropertyTypesTable, workordertype.PropertyTypesColumn),
		)
		fromV = sqlgraph.Neighbors(wot.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCheckListCategoryDefinitions queries the check_list_category_definitions edge of a WorkOrderType.
func (c *WorkOrderTypeClient) QueryCheckListCategoryDefinitions(wot *WorkOrderType) *CheckListCategoryDefinitionQuery {
	query := &CheckListCategoryDefinitionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wot.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workordertype.Table, workordertype.FieldID, id),
			sqlgraph.To(checklistcategorydefinition.Table, checklistcategorydefinition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workordertype.CheckListCategoryDefinitionsTable, workordertype.CheckListCategoryDefinitionsColumn),
		)
		fromV = sqlgraph.Neighbors(wot.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkOrders queries the work_orders edge of a WorkOrderType.
func (c *WorkOrderTypeClient) QueryWorkOrders(wot *WorkOrderType) *WorkOrderQuery {
	query := &WorkOrderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wot.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workordertype.Table, workordertype.FieldID, id),
			sqlgraph.To(workorder.Table, workorder.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, workordertype.WorkOrdersTable, workordertype.WorkOrdersColumn),
		)
		fromV = sqlgraph.Neighbors(wot.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDefinitions queries the definitions edge of a WorkOrderType.
func (c *WorkOrderTypeClient) QueryDefinitions(wot *WorkOrderType) *WorkOrderDefinitionQuery {
	query := &WorkOrderDefinitionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wot.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workordertype.Table, workordertype.FieldID, id),
			sqlgraph.To(workorderdefinition.Table, workorderdefinition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, workordertype.DefinitionsTable, workordertype.DefinitionsColumn),
		)
		fromV = sqlgraph.Neighbors(wot.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkOrderTypeClient) Hooks() []Hook {
	hooks := c.hooks.WorkOrderType
	return append(hooks[:len(hooks):len(hooks)], workordertype.Hooks[:]...)
}

// WorkerTypeClient is a client for the WorkerType schema.
type WorkerTypeClient struct {
	config
}

// NewWorkerTypeClient returns a client for the WorkerType from the given config.
func NewWorkerTypeClient(c config) *WorkerTypeClient {
	return &WorkerTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workertype.Hooks(f(g(h())))`.
func (c *WorkerTypeClient) Use(hooks ...Hook) {
	c.hooks.WorkerType = append(c.hooks.WorkerType, hooks...)
}

// Create returns a create builder for WorkerType.
func (c *WorkerTypeClient) Create() *WorkerTypeCreate {
	mutation := newWorkerTypeMutation(c.config, OpCreate)
	return &WorkerTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkerType entities.
func (c *WorkerTypeClient) CreateBulk(builders ...*WorkerTypeCreate) *WorkerTypeCreateBulk {
	return &WorkerTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkerType.
func (c *WorkerTypeClient) Update() *WorkerTypeUpdate {
	mutation := newWorkerTypeMutation(c.config, OpUpdate)
	return &WorkerTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkerTypeClient) UpdateOne(wt *WorkerType) *WorkerTypeUpdateOne {
	mutation := newWorkerTypeMutation(c.config, OpUpdateOne, withWorkerType(wt))
	return &WorkerTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkerTypeClient) UpdateOneID(id int) *WorkerTypeUpdateOne {
	mutation := newWorkerTypeMutation(c.config, OpUpdateOne, withWorkerTypeID(id))
	return &WorkerTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkerType.
func (c *WorkerTypeClient) Delete() *WorkerTypeDelete {
	mutation := newWorkerTypeMutation(c.config, OpDelete)
	return &WorkerTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *WorkerTypeClient) DeleteOne(wt *WorkerType) *WorkerTypeDeleteOne {
	return c.DeleteOneID(wt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *WorkerTypeClient) DeleteOneID(id int) *WorkerTypeDeleteOne {
	builder := c.Delete().Where(workertype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkerTypeDeleteOne{builder}
}

// Query returns a query builder for WorkerType.
func (c *WorkerTypeClient) Query() *WorkerTypeQuery {
	return &WorkerTypeQuery{config: c.config}
}

// Get returns a WorkerType entity by its id.
func (c *WorkerTypeClient) Get(ctx context.Context, id int) (*WorkerType, error) {
	return c.Query().Where(workertype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkerTypeClient) GetX(ctx context.Context, id int) *WorkerType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPropertyTypes queries the property_types edge of a WorkerType.
func (c *WorkerTypeClient) QueryPropertyTypes(wt *WorkerType) *PropertyTypeQuery {
	query := &PropertyTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := wt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workertype.Table, workertype.FieldID, id),
			sqlgraph.To(propertytype.Table, propertytype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workertype.PropertyTypesTable, workertype.PropertyTypesColumn),
		)
		fromV = sqlgraph.Neighbors(wt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkerTypeClient) Hooks() []Hook {
	hooks := c.hooks.WorkerType
	return append(hooks[:len(hooks):len(hooks)], workertype.Hooks[:]...)
}
