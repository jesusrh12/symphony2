// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/alarmfilter"
	"github.com/facebookincubator/symphony/pkg/ent/alarmstatus"
)

// AlarmFilter is the model entity for the AlarmFilter schema.
type AlarmFilter struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// NetworkResource holds the value of the "networkResource" field.
	NetworkResource string `json:"networkResource,omitempty"`
	// BeginTime holds the value of the "beginTime" field.
	BeginTime time.Time `json:"beginTime,omitempty"`
	// EndTime holds the value of the "endTime" field.
	EndTime time.Time `json:"endTime,omitempty"`
	// Reason holds the value of the "reason" field.
	Reason string `json:"reason,omitempty"`
	// User holds the value of the "user" field.
	User string `json:"user,omitempty"`
	// CreationTime holds the value of the "creationTime" field.
	CreationTime time.Time `json:"creationTime,omitempty"`
	// Enable holds the value of the "enable" field.
	Enable bool `json:"enable,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AlarmFilterQuery when eager-loading is set.
	Edges                        AlarmFilterEdges `json:"edges"`
	alarm_status_alarm_status_fk *int
}

// AlarmFilterEdges holds the relations/edges for other nodes in the graph.
type AlarmFilterEdges struct {
	// AlarmStatusFk holds the value of the alarmStatusFk edge.
	AlarmStatusFk *AlarmStatus
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AlarmStatusFkOrErr returns the AlarmStatusFk value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AlarmFilterEdges) AlarmStatusFkOrErr() (*AlarmStatus, error) {
	if e.loadedTypes[0] {
		if e.AlarmStatusFk == nil {
			// The edge alarmStatusFk was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: alarmstatus.Label}
		}
		return e.AlarmStatusFk, nil
	}
	return nil, &NotLoadedError{edge: "alarmStatusFk"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AlarmFilter) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // name
		&sql.NullString{}, // networkResource
		&sql.NullTime{},   // beginTime
		&sql.NullTime{},   // endTime
		&sql.NullString{}, // reason
		&sql.NullString{}, // user
		&sql.NullTime{},   // creationTime
		&sql.NullBool{},   // enable
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*AlarmFilter) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // alarm_status_alarm_status_fk
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AlarmFilter fields.
func (af *AlarmFilter) assignValues(values ...interface{}) error {
	if m, n := len(values), len(alarmfilter.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	af.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		af.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		af.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[2])
	} else if value.Valid {
		af.Name = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field networkResource", values[3])
	} else if value.Valid {
		af.NetworkResource = value.String
	}
	if value, ok := values[4].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field beginTime", values[4])
	} else if value.Valid {
		af.BeginTime = value.Time
	}
	if value, ok := values[5].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field endTime", values[5])
	} else if value.Valid {
		af.EndTime = value.Time
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field reason", values[6])
	} else if value.Valid {
		af.Reason = value.String
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field user", values[7])
	} else if value.Valid {
		af.User = value.String
	}
	if value, ok := values[8].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field creationTime", values[8])
	} else if value.Valid {
		af.CreationTime = value.Time
	}
	if value, ok := values[9].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field enable", values[9])
	} else if value.Valid {
		af.Enable = value.Bool
	}
	values = values[10:]
	if len(values) == len(alarmfilter.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field alarm_status_alarm_status_fk", value)
		} else if value.Valid {
			af.alarm_status_alarm_status_fk = new(int)
			*af.alarm_status_alarm_status_fk = int(value.Int64)
		}
	}
	return nil
}

// QueryAlarmStatusFk queries the alarmStatusFk edge of the AlarmFilter.
func (af *AlarmFilter) QueryAlarmStatusFk() *AlarmStatusQuery {
	return (&AlarmFilterClient{config: af.config}).QueryAlarmStatusFk(af)
}

// Update returns a builder for updating this AlarmFilter.
// Note that, you need to call AlarmFilter.Unwrap() before calling this method, if this AlarmFilter
// was returned from a transaction, and the transaction was committed or rolled back.
func (af *AlarmFilter) Update() *AlarmFilterUpdateOne {
	return (&AlarmFilterClient{config: af.config}).UpdateOne(af)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (af *AlarmFilter) Unwrap() *AlarmFilter {
	tx, ok := af.config.driver.(*txDriver)
	if !ok {
		panic("ent: AlarmFilter is not a transactional entity")
	}
	af.config.driver = tx.drv
	return af
}

// String implements the fmt.Stringer.
func (af *AlarmFilter) String() string {
	var builder strings.Builder
	builder.WriteString("AlarmFilter(")
	builder.WriteString(fmt.Sprintf("id=%v", af.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(af.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(af.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(af.Name)
	builder.WriteString(", networkResource=")
	builder.WriteString(af.NetworkResource)
	builder.WriteString(", beginTime=")
	builder.WriteString(af.BeginTime.Format(time.ANSIC))
	builder.WriteString(", endTime=")
	builder.WriteString(af.EndTime.Format(time.ANSIC))
	builder.WriteString(", reason=")
	builder.WriteString(af.Reason)
	builder.WriteString(", user=")
	builder.WriteString(af.User)
	builder.WriteString(", creationTime=")
	builder.WriteString(af.CreationTime.Format(time.ANSIC))
	builder.WriteString(", enable=")
	builder.WriteString(fmt.Sprintf("%v", af.Enable))
	builder.WriteByte(')')
	return builder.String()
}

// AlarmFilters is a parsable slice of AlarmFilter.
type AlarmFilters []*AlarmFilter

func (af AlarmFilters) config(cfg config) {
	for _i := range af {
		af[_i].config = cfg
	}
}
