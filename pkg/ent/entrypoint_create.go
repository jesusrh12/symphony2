// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/block"
	"github.com/facebookincubator/symphony/pkg/ent/entrypoint"
	"github.com/facebookincubator/symphony/pkg/ent/exitpoint"
	"github.com/facebookincubator/symphony/pkg/flowengine/flowschema"
)

// EntryPointCreate is the builder for creating a EntryPoint entity.
type EntryPointCreate struct {
	config
	mutation *EntryPointMutation
	hooks    []Hook
}

// SetCreateTime sets the create_time field.
func (epc *EntryPointCreate) SetCreateTime(t time.Time) *EntryPointCreate {
	epc.mutation.SetCreateTime(t)
	return epc
}

// SetNillableCreateTime sets the create_time field if the given value is not nil.
func (epc *EntryPointCreate) SetNillableCreateTime(t *time.Time) *EntryPointCreate {
	if t != nil {
		epc.SetCreateTime(*t)
	}
	return epc
}

// SetUpdateTime sets the update_time field.
func (epc *EntryPointCreate) SetUpdateTime(t time.Time) *EntryPointCreate {
	epc.mutation.SetUpdateTime(t)
	return epc
}

// SetNillableUpdateTime sets the update_time field if the given value is not nil.
func (epc *EntryPointCreate) SetNillableUpdateTime(t *time.Time) *EntryPointCreate {
	if t != nil {
		epc.SetUpdateTime(*t)
	}
	return epc
}

// SetRole sets the role field.
func (epc *EntryPointCreate) SetRole(fpr flowschema.EntryPointRole) *EntryPointCreate {
	epc.mutation.SetRole(fpr)
	return epc
}

// SetCid sets the cid field.
func (epc *EntryPointCreate) SetCid(s string) *EntryPointCreate {
	epc.mutation.SetCid(s)
	return epc
}

// SetNillableCid sets the cid field if the given value is not nil.
func (epc *EntryPointCreate) SetNillableCid(s *string) *EntryPointCreate {
	if s != nil {
		epc.SetCid(*s)
	}
	return epc
}

// AddPrevExitPointIDs adds the prev_exit_points edge to ExitPoint by ids.
func (epc *EntryPointCreate) AddPrevExitPointIDs(ids ...int) *EntryPointCreate {
	epc.mutation.AddPrevExitPointIDs(ids...)
	return epc
}

// AddPrevExitPoints adds the prev_exit_points edges to ExitPoint.
func (epc *EntryPointCreate) AddPrevExitPoints(e ...*ExitPoint) *EntryPointCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epc.AddPrevExitPointIDs(ids...)
}

// SetParentBlockID sets the parent_block edge to Block by id.
func (epc *EntryPointCreate) SetParentBlockID(id int) *EntryPointCreate {
	epc.mutation.SetParentBlockID(id)
	return epc
}

// SetParentBlock sets the parent_block edge to Block.
func (epc *EntryPointCreate) SetParentBlock(b *Block) *EntryPointCreate {
	return epc.SetParentBlockID(b.ID)
}

// Mutation returns the EntryPointMutation object of the builder.
func (epc *EntryPointCreate) Mutation() *EntryPointMutation {
	return epc.mutation
}

// Save creates the EntryPoint in the database.
func (epc *EntryPointCreate) Save(ctx context.Context) (*EntryPoint, error) {
	var (
		err  error
		node *EntryPoint
	)
	epc.defaults()
	if len(epc.hooks) == 0 {
		if err = epc.check(); err != nil {
			return nil, err
		}
		node, err = epc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EntryPointMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = epc.check(); err != nil {
				return nil, err
			}
			epc.mutation = mutation
			node, err = epc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(epc.hooks) - 1; i >= 0; i-- {
			mut = epc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, epc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (epc *EntryPointCreate) SaveX(ctx context.Context) *EntryPoint {
	v, err := epc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (epc *EntryPointCreate) defaults() {
	if _, ok := epc.mutation.CreateTime(); !ok {
		v := entrypoint.DefaultCreateTime()
		epc.mutation.SetCreateTime(v)
	}
	if _, ok := epc.mutation.UpdateTime(); !ok {
		v := entrypoint.DefaultUpdateTime()
		epc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (epc *EntryPointCreate) check() error {
	if _, ok := epc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := epc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := epc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New("ent: missing required field \"role\"")}
	}
	if v, ok := epc.mutation.Role(); ok {
		if err := entrypoint.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf("ent: validator failed for field \"role\": %w", err)}
		}
	}
	if _, ok := epc.mutation.ParentBlockID(); !ok {
		return &ValidationError{Name: "parent_block", err: errors.New("ent: missing required edge \"parent_block\"")}
	}
	return nil
}

func (epc *EntryPointCreate) sqlSave(ctx context.Context) (*EntryPoint, error) {
	_node, _spec := epc.createSpec()
	if err := sqlgraph.CreateNode(ctx, epc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (epc *EntryPointCreate) createSpec() (*EntryPoint, *sqlgraph.CreateSpec) {
	var (
		_node = &EntryPoint{config: epc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: entrypoint.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: entrypoint.FieldID,
			},
		}
	)
	if value, ok := epc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entrypoint.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := epc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entrypoint.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := epc.mutation.Role(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: entrypoint.FieldRole,
		})
		_node.Role = value
	}
	if value, ok := epc.mutation.Cid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entrypoint.FieldCid,
		})
		_node.Cid = &value
	}
	if nodes := epc.mutation.PrevExitPointsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entrypoint.PrevExitPointsTable,
			Columns: entrypoint.PrevExitPointsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: exitpoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := epc.mutation.ParentBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   entrypoint.ParentBlockTable,
			Columns: []string{entrypoint.ParentBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EntryPointCreateBulk is the builder for creating a bulk of EntryPoint entities.
type EntryPointCreateBulk struct {
	config
	builders []*EntryPointCreate
}

// Save creates the EntryPoint entities in the database.
func (epcb *EntryPointCreateBulk) Save(ctx context.Context) ([]*EntryPoint, error) {
	specs := make([]*sqlgraph.CreateSpec, len(epcb.builders))
	nodes := make([]*EntryPoint, len(epcb.builders))
	mutators := make([]Mutator, len(epcb.builders))
	for i := range epcb.builders {
		func(i int, root context.Context) {
			builder := epcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntryPointMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, epcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, epcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, epcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (epcb *EntryPointCreateBulk) SaveX(ctx context.Context) []*EntryPoint {
	v, err := epcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
