// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/domain"
	"github.com/facebookincubator/symphony/pkg/ent/formula"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/tech"
)

// TechUpdate is the builder for updating Tech entities.
type TechUpdate struct {
	config
	hooks    []Hook
	mutation *TechMutation
}

// Where adds a new predicate for the builder.
func (tu *TechUpdate) Where(ps ...predicate.Tech) *TechUpdate {
	tu.mutation.predicates = append(tu.mutation.predicates, ps...)
	return tu
}

// SetName sets the name field.
func (tu *TechUpdate) SetName(s string) *TechUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetDomainID sets the domain edge to Domain by id.
func (tu *TechUpdate) SetDomainID(id int) *TechUpdate {
	tu.mutation.SetDomainID(id)
	return tu
}

// SetNillableDomainID sets the domain edge to Domain by id if the given value is not nil.
func (tu *TechUpdate) SetNillableDomainID(id *int) *TechUpdate {
	if id != nil {
		tu = tu.SetDomainID(*id)
	}
	return tu
}

// SetDomain sets the domain edge to Domain.
func (tu *TechUpdate) SetDomain(d *Domain) *TechUpdate {
	return tu.SetDomainID(d.ID)
}

// AddFormulatechIDs adds the formulatech edge to Formula by ids.
func (tu *TechUpdate) AddFormulatechIDs(ids ...int) *TechUpdate {
	tu.mutation.AddFormulatechIDs(ids...)
	return tu
}

// AddFormulatech adds the formulatech edges to Formula.
func (tu *TechUpdate) AddFormulatech(f ...*Formula) *TechUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tu.AddFormulatechIDs(ids...)
}

// Mutation returns the TechMutation object of the builder.
func (tu *TechUpdate) Mutation() *TechMutation {
	return tu.mutation
}

// ClearDomain clears the "domain" edge to type Domain.
func (tu *TechUpdate) ClearDomain() *TechUpdate {
	tu.mutation.ClearDomain()
	return tu
}

// ClearFormulatech clears all "formulatech" edges to type Formula.
func (tu *TechUpdate) ClearFormulatech() *TechUpdate {
	tu.mutation.ClearFormulatech()
	return tu
}

// RemoveFormulatechIDs removes the formulatech edge to Formula by ids.
func (tu *TechUpdate) RemoveFormulatechIDs(ids ...int) *TechUpdate {
	tu.mutation.RemoveFormulatechIDs(ids...)
	return tu
}

// RemoveFormulatech removes formulatech edges to Formula.
func (tu *TechUpdate) RemoveFormulatech(f ...*Formula) *TechUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tu.RemoveFormulatechIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TechUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tu.defaults()
	if len(tu.hooks) == 0 {
		if err = tu.check(); err != nil {
			return 0, err
		}
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TechMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tu.check(); err != nil {
				return 0, err
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TechUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TechUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TechUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TechUpdate) defaults() {
	if _, ok := tu.mutation.UpdateTime(); !ok {
		v := tech.UpdateDefaultUpdateTime()
		tu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TechUpdate) check() error {
	if v, ok := tu.mutation.Name(); ok {
		if err := tech.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (tu *TechUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tech.Table,
			Columns: tech.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tech.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tech.FieldUpdateTime,
		})
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tech.FieldName,
		})
	}
	if tu.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tech.DomainTable,
			Columns: []string{tech.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: domain.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tech.DomainTable,
			Columns: []string{tech.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: domain.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.FormulatechCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tech.FormulatechTable,
			Columns: []string{tech.FormulatechColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: formula.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedFormulatechIDs(); len(nodes) > 0 && !tu.mutation.FormulatechCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tech.FormulatechTable,
			Columns: []string{tech.FormulatechColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: formula.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.FormulatechIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tech.FormulatechTable,
			Columns: []string{tech.FormulatechColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: formula.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tech.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TechUpdateOne is the builder for updating a single Tech entity.
type TechUpdateOne struct {
	config
	hooks    []Hook
	mutation *TechMutation
}

// SetName sets the name field.
func (tuo *TechUpdateOne) SetName(s string) *TechUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetDomainID sets the domain edge to Domain by id.
func (tuo *TechUpdateOne) SetDomainID(id int) *TechUpdateOne {
	tuo.mutation.SetDomainID(id)
	return tuo
}

// SetNillableDomainID sets the domain edge to Domain by id if the given value is not nil.
func (tuo *TechUpdateOne) SetNillableDomainID(id *int) *TechUpdateOne {
	if id != nil {
		tuo = tuo.SetDomainID(*id)
	}
	return tuo
}

// SetDomain sets the domain edge to Domain.
func (tuo *TechUpdateOne) SetDomain(d *Domain) *TechUpdateOne {
	return tuo.SetDomainID(d.ID)
}

// AddFormulatechIDs adds the formulatech edge to Formula by ids.
func (tuo *TechUpdateOne) AddFormulatechIDs(ids ...int) *TechUpdateOne {
	tuo.mutation.AddFormulatechIDs(ids...)
	return tuo
}

// AddFormulatech adds the formulatech edges to Formula.
func (tuo *TechUpdateOne) AddFormulatech(f ...*Formula) *TechUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tuo.AddFormulatechIDs(ids...)
}

// Mutation returns the TechMutation object of the builder.
func (tuo *TechUpdateOne) Mutation() *TechMutation {
	return tuo.mutation
}

// ClearDomain clears the "domain" edge to type Domain.
func (tuo *TechUpdateOne) ClearDomain() *TechUpdateOne {
	tuo.mutation.ClearDomain()
	return tuo
}

// ClearFormulatech clears all "formulatech" edges to type Formula.
func (tuo *TechUpdateOne) ClearFormulatech() *TechUpdateOne {
	tuo.mutation.ClearFormulatech()
	return tuo
}

// RemoveFormulatechIDs removes the formulatech edge to Formula by ids.
func (tuo *TechUpdateOne) RemoveFormulatechIDs(ids ...int) *TechUpdateOne {
	tuo.mutation.RemoveFormulatechIDs(ids...)
	return tuo
}

// RemoveFormulatech removes formulatech edges to Formula.
func (tuo *TechUpdateOne) RemoveFormulatech(f ...*Formula) *TechUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tuo.RemoveFormulatechIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (tuo *TechUpdateOne) Save(ctx context.Context) (*Tech, error) {
	var (
		err  error
		node *Tech
	)
	tuo.defaults()
	if len(tuo.hooks) == 0 {
		if err = tuo.check(); err != nil {
			return nil, err
		}
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TechMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuo.check(); err != nil {
				return nil, err
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TechUpdateOne) SaveX(ctx context.Context) *Tech {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TechUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TechUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TechUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdateTime(); !ok {
		v := tech.UpdateDefaultUpdateTime()
		tuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TechUpdateOne) check() error {
	if v, ok := tuo.mutation.Name(); ok {
		if err := tech.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (tuo *TechUpdateOne) sqlSave(ctx context.Context) (_node *Tech, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tech.Table,
			Columns: tech.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tech.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Tech.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := tuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tech.FieldUpdateTime,
		})
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tech.FieldName,
		})
	}
	if tuo.mutation.DomainCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tech.DomainTable,
			Columns: []string{tech.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: domain.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tech.DomainTable,
			Columns: []string{tech.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: domain.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.FormulatechCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tech.FormulatechTable,
			Columns: []string{tech.FormulatechColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: formula.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedFormulatechIDs(); len(nodes) > 0 && !tuo.mutation.FormulatechCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tech.FormulatechTable,
			Columns: []string{tech.FormulatechColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: formula.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.FormulatechIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tech.FormulatechTable,
			Columns: []string{tech.FormulatechColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: formula.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Tech{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tech.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
