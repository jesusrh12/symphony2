// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/appointment"
	"github.com/facebookincubator/symphony/pkg/ent/user"
	"github.com/facebookincubator/symphony/pkg/ent/workorder"
)

// AppointmentCreate is the builder for creating a Appointment entity.
type AppointmentCreate struct {
	config
	mutation *AppointmentMutation
	hooks    []Hook
}

// SetCreateTime sets the create_time field.
func (ac *AppointmentCreate) SetCreateTime(t time.Time) *AppointmentCreate {
	ac.mutation.SetCreateTime(t)
	return ac
}

// SetNillableCreateTime sets the create_time field if the given value is not nil.
func (ac *AppointmentCreate) SetNillableCreateTime(t *time.Time) *AppointmentCreate {
	if t != nil {
		ac.SetCreateTime(*t)
	}
	return ac
}

// SetUpdateTime sets the update_time field.
func (ac *AppointmentCreate) SetUpdateTime(t time.Time) *AppointmentCreate {
	ac.mutation.SetUpdateTime(t)
	return ac
}

// SetNillableUpdateTime sets the update_time field if the given value is not nil.
func (ac *AppointmentCreate) SetNillableUpdateTime(t *time.Time) *AppointmentCreate {
	if t != nil {
		ac.SetUpdateTime(*t)
	}
	return ac
}

// SetStart sets the start field.
func (ac *AppointmentCreate) SetStart(t time.Time) *AppointmentCreate {
	ac.mutation.SetStart(t)
	return ac
}

// SetEnd sets the end field.
func (ac *AppointmentCreate) SetEnd(t time.Time) *AppointmentCreate {
	ac.mutation.SetEnd(t)
	return ac
}

// SetDuration sets the duration field.
func (ac *AppointmentCreate) SetDuration(f float64) *AppointmentCreate {
	ac.mutation.SetDuration(f)
	return ac
}

// SetStatus sets the status field.
func (ac *AppointmentCreate) SetStatus(a appointment.Status) *AppointmentCreate {
	ac.mutation.SetStatus(a)
	return ac
}

// SetNillableStatus sets the status field if the given value is not nil.
func (ac *AppointmentCreate) SetNillableStatus(a *appointment.Status) *AppointmentCreate {
	if a != nil {
		ac.SetStatus(*a)
	}
	return ac
}

// SetCreationDate sets the creation_date field.
func (ac *AppointmentCreate) SetCreationDate(t time.Time) *AppointmentCreate {
	ac.mutation.SetCreationDate(t)
	return ac
}

// SetWorkorderID sets the workorder edge to WorkOrder by id.
func (ac *AppointmentCreate) SetWorkorderID(id int) *AppointmentCreate {
	ac.mutation.SetWorkorderID(id)
	return ac
}

// SetNillableWorkorderID sets the workorder edge to WorkOrder by id if the given value is not nil.
func (ac *AppointmentCreate) SetNillableWorkorderID(id *int) *AppointmentCreate {
	if id != nil {
		ac = ac.SetWorkorderID(*id)
	}
	return ac
}

// SetWorkorder sets the workorder edge to WorkOrder.
func (ac *AppointmentCreate) SetWorkorder(w *WorkOrder) *AppointmentCreate {
	return ac.SetWorkorderID(w.ID)
}

// SetAssigneeID sets the assignee edge to User by id.
func (ac *AppointmentCreate) SetAssigneeID(id int) *AppointmentCreate {
	ac.mutation.SetAssigneeID(id)
	return ac
}

// SetNillableAssigneeID sets the assignee edge to User by id if the given value is not nil.
func (ac *AppointmentCreate) SetNillableAssigneeID(id *int) *AppointmentCreate {
	if id != nil {
		ac = ac.SetAssigneeID(*id)
	}
	return ac
}

// SetAssignee sets the assignee edge to User.
func (ac *AppointmentCreate) SetAssignee(u *User) *AppointmentCreate {
	return ac.SetAssigneeID(u.ID)
}

// Mutation returns the AppointmentMutation object of the builder.
func (ac *AppointmentCreate) Mutation() *AppointmentMutation {
	return ac.mutation
}

// Save creates the Appointment in the database.
func (ac *AppointmentCreate) Save(ctx context.Context) (*Appointment, error) {
	var (
		err  error
		node *Appointment
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppointmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			node, err = ac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AppointmentCreate) SaveX(ctx context.Context) *Appointment {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ac *AppointmentCreate) defaults() {
	if _, ok := ac.mutation.CreateTime(); !ok {
		v := appointment.DefaultCreateTime()
		ac.mutation.SetCreateTime(v)
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		v := appointment.DefaultUpdateTime()
		ac.mutation.SetUpdateTime(v)
	}
	if _, ok := ac.mutation.Status(); !ok {
		v := appointment.DefaultStatus
		ac.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AppointmentCreate) check() error {
	if _, ok := ac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := ac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := ac.mutation.Start(); !ok {
		return &ValidationError{Name: "start", err: errors.New("ent: missing required field \"start\"")}
	}
	if _, ok := ac.mutation.End(); !ok {
		return &ValidationError{Name: "end", err: errors.New("ent: missing required field \"end\"")}
	}
	if _, ok := ac.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New("ent: missing required field \"duration\"")}
	}
	if _, ok := ac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if v, ok := ac.mutation.Status(); ok {
		if err := appointment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if _, ok := ac.mutation.CreationDate(); !ok {
		return &ValidationError{Name: "creation_date", err: errors.New("ent: missing required field \"creation_date\"")}
	}
	return nil
}

func (ac *AppointmentCreate) sqlSave(ctx context.Context) (*Appointment, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ac *AppointmentCreate) createSpec() (*Appointment, *sqlgraph.CreateSpec) {
	var (
		_node = &Appointment{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: appointment.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: appointment.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := ac.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := ac.mutation.Start(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldStart,
		})
		_node.Start = value
	}
	if value, ok := ac.mutation.End(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldEnd,
		})
		_node.End = value
	}
	if value, ok := ac.mutation.Duration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: appointment.FieldDuration,
		})
		_node.Duration = value
	}
	if value, ok := ac.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: appointment.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := ac.mutation.CreationDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldCreationDate,
		})
		_node.CreationDate = value
	}
	if nodes := ac.mutation.WorkorderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.WorkorderTable,
			Columns: []string{appointment.WorkorderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workorder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AssigneeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.AssigneeTable,
			Columns: []string{appointment.AssigneeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AppointmentCreateBulk is the builder for creating a bulk of Appointment entities.
type AppointmentCreateBulk struct {
	config
	builders []*AppointmentCreate
}

// Save creates the Appointment entities in the database.
func (acb *AppointmentCreateBulk) Save(ctx context.Context) ([]*Appointment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Appointment, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppointmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (acb *AppointmentCreateBulk) SaveX(ctx context.Context) []*Appointment {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
