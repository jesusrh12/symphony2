// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package alarmfilter

import (
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NetworkResource applies equality check predicate on the "networkResource" field. It's identical to NetworkResourceEQ.
func NetworkResource(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNetworkResource), v))
	})
}

// BeginTime applies equality check predicate on the "beginTime" field. It's identical to BeginTimeEQ.
func BeginTime(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBeginTime), v))
	})
}

// EndTime applies equality check predicate on the "endTime" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTime), v))
	})
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReason), v))
	})
}

// User applies equality check predicate on the "user" field. It's identical to UserEQ.
func User(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUser), v))
	})
}

// CreationTime applies equality check predicate on the "creationTime" field. It's identical to CreationTimeEQ.
func CreationTime(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreationTime), v))
	})
}

// Enable applies equality check predicate on the "enable" field. It's identical to EnableEQ.
func Enable(v bool) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnable), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.AlarmFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AlarmFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.AlarmFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AlarmFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.AlarmFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AlarmFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.AlarmFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AlarmFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.AlarmFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AlarmFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.AlarmFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AlarmFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// NetworkResourceEQ applies the EQ predicate on the "networkResource" field.
func NetworkResourceEQ(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNetworkResource), v))
	})
}

// NetworkResourceNEQ applies the NEQ predicate on the "networkResource" field.
func NetworkResourceNEQ(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNetworkResource), v))
	})
}

// NetworkResourceIn applies the In predicate on the "networkResource" field.
func NetworkResourceIn(vs ...string) predicate.AlarmFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AlarmFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNetworkResource), v...))
	})
}

// NetworkResourceNotIn applies the NotIn predicate on the "networkResource" field.
func NetworkResourceNotIn(vs ...string) predicate.AlarmFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AlarmFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNetworkResource), v...))
	})
}

// NetworkResourceGT applies the GT predicate on the "networkResource" field.
func NetworkResourceGT(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNetworkResource), v))
	})
}

// NetworkResourceGTE applies the GTE predicate on the "networkResource" field.
func NetworkResourceGTE(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNetworkResource), v))
	})
}

// NetworkResourceLT applies the LT predicate on the "networkResource" field.
func NetworkResourceLT(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNetworkResource), v))
	})
}

// NetworkResourceLTE applies the LTE predicate on the "networkResource" field.
func NetworkResourceLTE(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNetworkResource), v))
	})
}

// NetworkResourceContains applies the Contains predicate on the "networkResource" field.
func NetworkResourceContains(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNetworkResource), v))
	})
}

// NetworkResourceHasPrefix applies the HasPrefix predicate on the "networkResource" field.
func NetworkResourceHasPrefix(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNetworkResource), v))
	})
}

// NetworkResourceHasSuffix applies the HasSuffix predicate on the "networkResource" field.
func NetworkResourceHasSuffix(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNetworkResource), v))
	})
}

// NetworkResourceEqualFold applies the EqualFold predicate on the "networkResource" field.
func NetworkResourceEqualFold(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNetworkResource), v))
	})
}

// NetworkResourceContainsFold applies the ContainsFold predicate on the "networkResource" field.
func NetworkResourceContainsFold(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNetworkResource), v))
	})
}

// BeginTimeEQ applies the EQ predicate on the "beginTime" field.
func BeginTimeEQ(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBeginTime), v))
	})
}

// BeginTimeNEQ applies the NEQ predicate on the "beginTime" field.
func BeginTimeNEQ(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBeginTime), v))
	})
}

// BeginTimeIn applies the In predicate on the "beginTime" field.
func BeginTimeIn(vs ...time.Time) predicate.AlarmFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AlarmFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBeginTime), v...))
	})
}

// BeginTimeNotIn applies the NotIn predicate on the "beginTime" field.
func BeginTimeNotIn(vs ...time.Time) predicate.AlarmFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AlarmFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBeginTime), v...))
	})
}

// BeginTimeGT applies the GT predicate on the "beginTime" field.
func BeginTimeGT(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBeginTime), v))
	})
}

// BeginTimeGTE applies the GTE predicate on the "beginTime" field.
func BeginTimeGTE(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBeginTime), v))
	})
}

// BeginTimeLT applies the LT predicate on the "beginTime" field.
func BeginTimeLT(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBeginTime), v))
	})
}

// BeginTimeLTE applies the LTE predicate on the "beginTime" field.
func BeginTimeLTE(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBeginTime), v))
	})
}

// EndTimeEQ applies the EQ predicate on the "endTime" field.
func EndTimeEQ(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTime), v))
	})
}

// EndTimeNEQ applies the NEQ predicate on the "endTime" field.
func EndTimeNEQ(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndTime), v))
	})
}

// EndTimeIn applies the In predicate on the "endTime" field.
func EndTimeIn(vs ...time.Time) predicate.AlarmFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AlarmFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEndTime), v...))
	})
}

// EndTimeNotIn applies the NotIn predicate on the "endTime" field.
func EndTimeNotIn(vs ...time.Time) predicate.AlarmFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AlarmFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEndTime), v...))
	})
}

// EndTimeGT applies the GT predicate on the "endTime" field.
func EndTimeGT(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndTime), v))
	})
}

// EndTimeGTE applies the GTE predicate on the "endTime" field.
func EndTimeGTE(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndTime), v))
	})
}

// EndTimeLT applies the LT predicate on the "endTime" field.
func EndTimeLT(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndTime), v))
	})
}

// EndTimeLTE applies the LTE predicate on the "endTime" field.
func EndTimeLTE(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndTime), v))
	})
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReason), v))
	})
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReason), v))
	})
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.AlarmFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AlarmFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReason), v...))
	})
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.AlarmFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AlarmFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReason), v...))
	})
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReason), v))
	})
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReason), v))
	})
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReason), v))
	})
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReason), v))
	})
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReason), v))
	})
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReason), v))
	})
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReason), v))
	})
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReason), v))
	})
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReason), v))
	})
}

// UserEQ applies the EQ predicate on the "user" field.
func UserEQ(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUser), v))
	})
}

// UserNEQ applies the NEQ predicate on the "user" field.
func UserNEQ(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUser), v))
	})
}

// UserIn applies the In predicate on the "user" field.
func UserIn(vs ...string) predicate.AlarmFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AlarmFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUser), v...))
	})
}

// UserNotIn applies the NotIn predicate on the "user" field.
func UserNotIn(vs ...string) predicate.AlarmFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AlarmFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUser), v...))
	})
}

// UserGT applies the GT predicate on the "user" field.
func UserGT(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUser), v))
	})
}

// UserGTE applies the GTE predicate on the "user" field.
func UserGTE(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUser), v))
	})
}

// UserLT applies the LT predicate on the "user" field.
func UserLT(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUser), v))
	})
}

// UserLTE applies the LTE predicate on the "user" field.
func UserLTE(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUser), v))
	})
}

// UserContains applies the Contains predicate on the "user" field.
func UserContains(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUser), v))
	})
}

// UserHasPrefix applies the HasPrefix predicate on the "user" field.
func UserHasPrefix(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUser), v))
	})
}

// UserHasSuffix applies the HasSuffix predicate on the "user" field.
func UserHasSuffix(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUser), v))
	})
}

// UserEqualFold applies the EqualFold predicate on the "user" field.
func UserEqualFold(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUser), v))
	})
}

// UserContainsFold applies the ContainsFold predicate on the "user" field.
func UserContainsFold(v string) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUser), v))
	})
}

// CreationTimeEQ applies the EQ predicate on the "creationTime" field.
func CreationTimeEQ(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreationTime), v))
	})
}

// CreationTimeNEQ applies the NEQ predicate on the "creationTime" field.
func CreationTimeNEQ(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreationTime), v))
	})
}

// CreationTimeIn applies the In predicate on the "creationTime" field.
func CreationTimeIn(vs ...time.Time) predicate.AlarmFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AlarmFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreationTime), v...))
	})
}

// CreationTimeNotIn applies the NotIn predicate on the "creationTime" field.
func CreationTimeNotIn(vs ...time.Time) predicate.AlarmFilter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AlarmFilter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreationTime), v...))
	})
}

// CreationTimeGT applies the GT predicate on the "creationTime" field.
func CreationTimeGT(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreationTime), v))
	})
}

// CreationTimeGTE applies the GTE predicate on the "creationTime" field.
func CreationTimeGTE(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreationTime), v))
	})
}

// CreationTimeLT applies the LT predicate on the "creationTime" field.
func CreationTimeLT(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreationTime), v))
	})
}

// CreationTimeLTE applies the LTE predicate on the "creationTime" field.
func CreationTimeLTE(v time.Time) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreationTime), v))
	})
}

// EnableEQ applies the EQ predicate on the "enable" field.
func EnableEQ(v bool) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnable), v))
	})
}

// EnableNEQ applies the NEQ predicate on the "enable" field.
func EnableNEQ(v bool) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnable), v))
	})
}

// HasAlarmStatusFk applies the HasEdge predicate on the "alarmStatusFk" edge.
func HasAlarmStatusFk() predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AlarmStatusFkTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AlarmStatusFkTable, AlarmStatusFkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAlarmStatusFkWith applies the HasEdge predicate on the "alarmStatusFk" edge with a given conditions (other predicates).
func HasAlarmStatusFkWith(preds ...predicate.AlarmStatus) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AlarmStatusFkInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AlarmStatusFkTable, AlarmStatusFkColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.AlarmFilter) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.AlarmFilter) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AlarmFilter) predicate.AlarmFilter {
	return predicate.AlarmFilter(func(s *sql.Selector) {
		p(s.Not())
	})
}
