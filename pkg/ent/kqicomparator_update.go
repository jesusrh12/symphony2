// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/comparator"
	"github.com/facebookincubator/symphony/pkg/ent/kqicomparator"
	"github.com/facebookincubator/symphony/pkg/ent/kqitarget"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
)

// KqiComparatorUpdate is the builder for updating KqiComparator entities.
type KqiComparatorUpdate struct {
	config
	hooks    []Hook
	mutation *KqiComparatorMutation
}

// Where adds a new predicate for the builder.
func (kcu *KqiComparatorUpdate) Where(ps ...predicate.KqiComparator) *KqiComparatorUpdate {
	kcu.mutation.predicates = append(kcu.mutation.predicates, ps...)
	return kcu
}

// SetNumber sets the number field.
func (kcu *KqiComparatorUpdate) SetNumber(f float64) *KqiComparatorUpdate {
	kcu.mutation.ResetNumber()
	kcu.mutation.SetNumber(f)
	return kcu
}

// AddNumber adds f to number.
func (kcu *KqiComparatorUpdate) AddNumber(f float64) *KqiComparatorUpdate {
	kcu.mutation.AddNumber(f)
	return kcu
}

// SetComparatorType sets the comparatorType field.
func (kcu *KqiComparatorUpdate) SetComparatorType(s string) *KqiComparatorUpdate {
	kcu.mutation.SetComparatorType(s)
	return kcu
}

// SetComparatorkqitargetfkID sets the comparatorkqitargetfk edge to Comparator by id.
func (kcu *KqiComparatorUpdate) SetComparatorkqitargetfkID(id int) *KqiComparatorUpdate {
	kcu.mutation.SetComparatorkqitargetfkID(id)
	return kcu
}

// SetNillableComparatorkqitargetfkID sets the comparatorkqitargetfk edge to Comparator by id if the given value is not nil.
func (kcu *KqiComparatorUpdate) SetNillableComparatorkqitargetfkID(id *int) *KqiComparatorUpdate {
	if id != nil {
		kcu = kcu.SetComparatorkqitargetfkID(*id)
	}
	return kcu
}

// SetComparatorkqitargetfk sets the comparatorkqitargetfk edge to Comparator.
func (kcu *KqiComparatorUpdate) SetComparatorkqitargetfk(c *Comparator) *KqiComparatorUpdate {
	return kcu.SetComparatorkqitargetfkID(c.ID)
}

// SetKqitargetcomparatorfkID sets the kqitargetcomparatorfk edge to KqiTarget by id.
func (kcu *KqiComparatorUpdate) SetKqitargetcomparatorfkID(id int) *KqiComparatorUpdate {
	kcu.mutation.SetKqitargetcomparatorfkID(id)
	return kcu
}

// SetNillableKqitargetcomparatorfkID sets the kqitargetcomparatorfk edge to KqiTarget by id if the given value is not nil.
func (kcu *KqiComparatorUpdate) SetNillableKqitargetcomparatorfkID(id *int) *KqiComparatorUpdate {
	if id != nil {
		kcu = kcu.SetKqitargetcomparatorfkID(*id)
	}
	return kcu
}

// SetKqitargetcomparatorfk sets the kqitargetcomparatorfk edge to KqiTarget.
func (kcu *KqiComparatorUpdate) SetKqitargetcomparatorfk(k *KqiTarget) *KqiComparatorUpdate {
	return kcu.SetKqitargetcomparatorfkID(k.ID)
}

// Mutation returns the KqiComparatorMutation object of the builder.
func (kcu *KqiComparatorUpdate) Mutation() *KqiComparatorMutation {
	return kcu.mutation
}

// ClearComparatorkqitargetfk clears the "comparatorkqitargetfk" edge to type Comparator.
func (kcu *KqiComparatorUpdate) ClearComparatorkqitargetfk() *KqiComparatorUpdate {
	kcu.mutation.ClearComparatorkqitargetfk()
	return kcu
}

// ClearKqitargetcomparatorfk clears the "kqitargetcomparatorfk" edge to type KqiTarget.
func (kcu *KqiComparatorUpdate) ClearKqitargetcomparatorfk() *KqiComparatorUpdate {
	kcu.mutation.ClearKqitargetcomparatorfk()
	return kcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (kcu *KqiComparatorUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	kcu.defaults()
	if len(kcu.hooks) == 0 {
		if err = kcu.check(); err != nil {
			return 0, err
		}
		affected, err = kcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KqiComparatorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = kcu.check(); err != nil {
				return 0, err
			}
			kcu.mutation = mutation
			affected, err = kcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(kcu.hooks) - 1; i >= 0; i-- {
			mut = kcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (kcu *KqiComparatorUpdate) SaveX(ctx context.Context) int {
	affected, err := kcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (kcu *KqiComparatorUpdate) Exec(ctx context.Context) error {
	_, err := kcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcu *KqiComparatorUpdate) ExecX(ctx context.Context) {
	if err := kcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kcu *KqiComparatorUpdate) defaults() {
	if _, ok := kcu.mutation.UpdateTime(); !ok {
		v := kqicomparator.UpdateDefaultUpdateTime()
		kcu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kcu *KqiComparatorUpdate) check() error {
	if v, ok := kcu.mutation.ComparatorType(); ok {
		if err := kqicomparator.ComparatorTypeValidator(v); err != nil {
			return &ValidationError{Name: "comparatorType", err: fmt.Errorf("ent: validator failed for field \"comparatorType\": %w", err)}
		}
	}
	return nil
}

func (kcu *KqiComparatorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kqicomparator.Table,
			Columns: kqicomparator.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kqicomparator.FieldID,
			},
		},
	}
	if ps := kcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kcu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kqicomparator.FieldUpdateTime,
		})
	}
	if value, ok := kcu.mutation.Number(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kqicomparator.FieldNumber,
		})
	}
	if value, ok := kcu.mutation.AddedNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kqicomparator.FieldNumber,
		})
	}
	if value, ok := kcu.mutation.ComparatorType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kqicomparator.FieldComparatorType,
		})
	}
	if kcu.mutation.ComparatorkqitargetfkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kqicomparator.ComparatorkqitargetfkTable,
			Columns: []string{kqicomparator.ComparatorkqitargetfkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comparator.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcu.mutation.ComparatorkqitargetfkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kqicomparator.ComparatorkqitargetfkTable,
			Columns: []string{kqicomparator.ComparatorkqitargetfkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comparator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcu.mutation.KqitargetcomparatorfkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kqicomparator.KqitargetcomparatorfkTable,
			Columns: []string{kqicomparator.KqitargetcomparatorfkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqitarget.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcu.mutation.KqitargetcomparatorfkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kqicomparator.KqitargetcomparatorfkTable,
			Columns: []string{kqicomparator.KqitargetcomparatorfkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqitarget.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, kcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kqicomparator.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// KqiComparatorUpdateOne is the builder for updating a single KqiComparator entity.
type KqiComparatorUpdateOne struct {
	config
	hooks    []Hook
	mutation *KqiComparatorMutation
}

// SetNumber sets the number field.
func (kcuo *KqiComparatorUpdateOne) SetNumber(f float64) *KqiComparatorUpdateOne {
	kcuo.mutation.ResetNumber()
	kcuo.mutation.SetNumber(f)
	return kcuo
}

// AddNumber adds f to number.
func (kcuo *KqiComparatorUpdateOne) AddNumber(f float64) *KqiComparatorUpdateOne {
	kcuo.mutation.AddNumber(f)
	return kcuo
}

// SetComparatorType sets the comparatorType field.
func (kcuo *KqiComparatorUpdateOne) SetComparatorType(s string) *KqiComparatorUpdateOne {
	kcuo.mutation.SetComparatorType(s)
	return kcuo
}

// SetComparatorkqitargetfkID sets the comparatorkqitargetfk edge to Comparator by id.
func (kcuo *KqiComparatorUpdateOne) SetComparatorkqitargetfkID(id int) *KqiComparatorUpdateOne {
	kcuo.mutation.SetComparatorkqitargetfkID(id)
	return kcuo
}

// SetNillableComparatorkqitargetfkID sets the comparatorkqitargetfk edge to Comparator by id if the given value is not nil.
func (kcuo *KqiComparatorUpdateOne) SetNillableComparatorkqitargetfkID(id *int) *KqiComparatorUpdateOne {
	if id != nil {
		kcuo = kcuo.SetComparatorkqitargetfkID(*id)
	}
	return kcuo
}

// SetComparatorkqitargetfk sets the comparatorkqitargetfk edge to Comparator.
func (kcuo *KqiComparatorUpdateOne) SetComparatorkqitargetfk(c *Comparator) *KqiComparatorUpdateOne {
	return kcuo.SetComparatorkqitargetfkID(c.ID)
}

// SetKqitargetcomparatorfkID sets the kqitargetcomparatorfk edge to KqiTarget by id.
func (kcuo *KqiComparatorUpdateOne) SetKqitargetcomparatorfkID(id int) *KqiComparatorUpdateOne {
	kcuo.mutation.SetKqitargetcomparatorfkID(id)
	return kcuo
}

// SetNillableKqitargetcomparatorfkID sets the kqitargetcomparatorfk edge to KqiTarget by id if the given value is not nil.
func (kcuo *KqiComparatorUpdateOne) SetNillableKqitargetcomparatorfkID(id *int) *KqiComparatorUpdateOne {
	if id != nil {
		kcuo = kcuo.SetKqitargetcomparatorfkID(*id)
	}
	return kcuo
}

// SetKqitargetcomparatorfk sets the kqitargetcomparatorfk edge to KqiTarget.
func (kcuo *KqiComparatorUpdateOne) SetKqitargetcomparatorfk(k *KqiTarget) *KqiComparatorUpdateOne {
	return kcuo.SetKqitargetcomparatorfkID(k.ID)
}

// Mutation returns the KqiComparatorMutation object of the builder.
func (kcuo *KqiComparatorUpdateOne) Mutation() *KqiComparatorMutation {
	return kcuo.mutation
}

// ClearComparatorkqitargetfk clears the "comparatorkqitargetfk" edge to type Comparator.
func (kcuo *KqiComparatorUpdateOne) ClearComparatorkqitargetfk() *KqiComparatorUpdateOne {
	kcuo.mutation.ClearComparatorkqitargetfk()
	return kcuo
}

// ClearKqitargetcomparatorfk clears the "kqitargetcomparatorfk" edge to type KqiTarget.
func (kcuo *KqiComparatorUpdateOne) ClearKqitargetcomparatorfk() *KqiComparatorUpdateOne {
	kcuo.mutation.ClearKqitargetcomparatorfk()
	return kcuo
}

// Save executes the query and returns the updated entity.
func (kcuo *KqiComparatorUpdateOne) Save(ctx context.Context) (*KqiComparator, error) {
	var (
		err  error
		node *KqiComparator
	)
	kcuo.defaults()
	if len(kcuo.hooks) == 0 {
		if err = kcuo.check(); err != nil {
			return nil, err
		}
		node, err = kcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KqiComparatorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = kcuo.check(); err != nil {
				return nil, err
			}
			kcuo.mutation = mutation
			node, err = kcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kcuo.hooks) - 1; i >= 0; i-- {
			mut = kcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (kcuo *KqiComparatorUpdateOne) SaveX(ctx context.Context) *KqiComparator {
	node, err := kcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kcuo *KqiComparatorUpdateOne) Exec(ctx context.Context) error {
	_, err := kcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcuo *KqiComparatorUpdateOne) ExecX(ctx context.Context) {
	if err := kcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kcuo *KqiComparatorUpdateOne) defaults() {
	if _, ok := kcuo.mutation.UpdateTime(); !ok {
		v := kqicomparator.UpdateDefaultUpdateTime()
		kcuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kcuo *KqiComparatorUpdateOne) check() error {
	if v, ok := kcuo.mutation.ComparatorType(); ok {
		if err := kqicomparator.ComparatorTypeValidator(v); err != nil {
			return &ValidationError{Name: "comparatorType", err: fmt.Errorf("ent: validator failed for field \"comparatorType\": %w", err)}
		}
	}
	return nil
}

func (kcuo *KqiComparatorUpdateOne) sqlSave(ctx context.Context) (_node *KqiComparator, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kqicomparator.Table,
			Columns: kqicomparator.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kqicomparator.FieldID,
			},
		},
	}
	id, ok := kcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing KqiComparator.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := kcuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kqicomparator.FieldUpdateTime,
		})
	}
	if value, ok := kcuo.mutation.Number(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kqicomparator.FieldNumber,
		})
	}
	if value, ok := kcuo.mutation.AddedNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kqicomparator.FieldNumber,
		})
	}
	if value, ok := kcuo.mutation.ComparatorType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kqicomparator.FieldComparatorType,
		})
	}
	if kcuo.mutation.ComparatorkqitargetfkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kqicomparator.ComparatorkqitargetfkTable,
			Columns: []string{kqicomparator.ComparatorkqitargetfkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comparator.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcuo.mutation.ComparatorkqitargetfkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kqicomparator.ComparatorkqitargetfkTable,
			Columns: []string{kqicomparator.ComparatorkqitargetfkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comparator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kcuo.mutation.KqitargetcomparatorfkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kqicomparator.KqitargetcomparatorfkTable,
			Columns: []string{kqicomparator.KqitargetcomparatorfkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqitarget.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcuo.mutation.KqitargetcomparatorfkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kqicomparator.KqitargetcomparatorfkTable,
			Columns: []string{kqicomparator.KqitargetcomparatorfkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqitarget.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &KqiComparator{config: kcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, kcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kqicomparator.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
