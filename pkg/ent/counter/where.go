// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package counter

import (
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// ExternalId applies equality check predicate on the "externalId" field. It's identical to ExternalIdEQ.
func ExternalId(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExternalId), v))
	})
}

// NetworkManagerSystem applies equality check predicate on the "networkManagerSystem" field. It's identical to NetworkManagerSystemEQ.
func NetworkManagerSystem(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNetworkManagerSystem), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Counter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Counter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Counter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Counter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Counter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Counter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Counter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Counter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Counter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Counter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Counter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Counter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// ExternalIdEQ applies the EQ predicate on the "externalId" field.
func ExternalIdEQ(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExternalId), v))
	})
}

// ExternalIdNEQ applies the NEQ predicate on the "externalId" field.
func ExternalIdNEQ(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExternalId), v))
	})
}

// ExternalIdIn applies the In predicate on the "externalId" field.
func ExternalIdIn(vs ...string) predicate.Counter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Counter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExternalId), v...))
	})
}

// ExternalIdNotIn applies the NotIn predicate on the "externalId" field.
func ExternalIdNotIn(vs ...string) predicate.Counter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Counter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExternalId), v...))
	})
}

// ExternalIdGT applies the GT predicate on the "externalId" field.
func ExternalIdGT(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExternalId), v))
	})
}

// ExternalIdGTE applies the GTE predicate on the "externalId" field.
func ExternalIdGTE(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExternalId), v))
	})
}

// ExternalIdLT applies the LT predicate on the "externalId" field.
func ExternalIdLT(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExternalId), v))
	})
}

// ExternalIdLTE applies the LTE predicate on the "externalId" field.
func ExternalIdLTE(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExternalId), v))
	})
}

// ExternalIdContains applies the Contains predicate on the "externalId" field.
func ExternalIdContains(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExternalId), v))
	})
}

// ExternalIdHasPrefix applies the HasPrefix predicate on the "externalId" field.
func ExternalIdHasPrefix(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExternalId), v))
	})
}

// ExternalIdHasSuffix applies the HasSuffix predicate on the "externalId" field.
func ExternalIdHasSuffix(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExternalId), v))
	})
}

// ExternalIdEqualFold applies the EqualFold predicate on the "externalId" field.
func ExternalIdEqualFold(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExternalId), v))
	})
}

// ExternalIdContainsFold applies the ContainsFold predicate on the "externalId" field.
func ExternalIdContainsFold(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExternalId), v))
	})
}

// NetworkManagerSystemEQ applies the EQ predicate on the "networkManagerSystem" field.
func NetworkManagerSystemEQ(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNetworkManagerSystem), v))
	})
}

// NetworkManagerSystemNEQ applies the NEQ predicate on the "networkManagerSystem" field.
func NetworkManagerSystemNEQ(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNetworkManagerSystem), v))
	})
}

// NetworkManagerSystemIn applies the In predicate on the "networkManagerSystem" field.
func NetworkManagerSystemIn(vs ...string) predicate.Counter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Counter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNetworkManagerSystem), v...))
	})
}

// NetworkManagerSystemNotIn applies the NotIn predicate on the "networkManagerSystem" field.
func NetworkManagerSystemNotIn(vs ...string) predicate.Counter {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Counter(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNetworkManagerSystem), v...))
	})
}

// NetworkManagerSystemGT applies the GT predicate on the "networkManagerSystem" field.
func NetworkManagerSystemGT(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNetworkManagerSystem), v))
	})
}

// NetworkManagerSystemGTE applies the GTE predicate on the "networkManagerSystem" field.
func NetworkManagerSystemGTE(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNetworkManagerSystem), v))
	})
}

// NetworkManagerSystemLT applies the LT predicate on the "networkManagerSystem" field.
func NetworkManagerSystemLT(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNetworkManagerSystem), v))
	})
}

// NetworkManagerSystemLTE applies the LTE predicate on the "networkManagerSystem" field.
func NetworkManagerSystemLTE(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNetworkManagerSystem), v))
	})
}

// NetworkManagerSystemContains applies the Contains predicate on the "networkManagerSystem" field.
func NetworkManagerSystemContains(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNetworkManagerSystem), v))
	})
}

// NetworkManagerSystemHasPrefix applies the HasPrefix predicate on the "networkManagerSystem" field.
func NetworkManagerSystemHasPrefix(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNetworkManagerSystem), v))
	})
}

// NetworkManagerSystemHasSuffix applies the HasSuffix predicate on the "networkManagerSystem" field.
func NetworkManagerSystemHasSuffix(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNetworkManagerSystem), v))
	})
}

// NetworkManagerSystemEqualFold applies the EqualFold predicate on the "networkManagerSystem" field.
func NetworkManagerSystemEqualFold(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNetworkManagerSystem), v))
	})
}

// NetworkManagerSystemContainsFold applies the ContainsFold predicate on the "networkManagerSystem" field.
func NetworkManagerSystemContainsFold(v string) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNetworkManagerSystem), v))
	})
}

// HasCounterfamily applies the HasEdge predicate on the "counterfamily" edge.
func HasCounterfamily() predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CounterfamilyTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CounterfamilyTable, CounterfamilyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCounterfamilyWith applies the HasEdge predicate on the "counterfamily" edge with a given conditions (other predicates).
func HasCounterfamilyWith(preds ...predicate.CounterFamily) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CounterfamilyInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CounterfamilyTable, CounterfamilyColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVendor applies the HasEdge predicate on the "vendor" edge.
func HasVendor() predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VendorTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VendorTable, VendorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVendorWith applies the HasEdge predicate on the "vendor" edge with a given conditions (other predicates).
func HasVendorWith(preds ...predicate.Vendor) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VendorInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VendorTable, VendorColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCounterFk applies the HasEdge predicate on the "counter_fk" edge.
func HasCounterFk() predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CounterFkTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CounterFkTable, CounterFkColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCounterFkWith applies the HasEdge predicate on the "counter_fk" edge with a given conditions (other predicates).
func HasCounterFkWith(preds ...predicate.CounterFormula) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CounterFkInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CounterFkTable, CounterFkColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Counter) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Counter) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Counter) predicate.Counter {
	return predicate.Counter(func(s *sql.Selector) {
		p(s.Not())
	})
}
