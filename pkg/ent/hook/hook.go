// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"github.com/facebookincubator/symphony/pkg/ent"
)

// The ActivityFunc type is an adapter to allow the use of ordinary
// function as Activity mutator.
type ActivityFunc func(context.Context, *ent.ActivityMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ActivityFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ActivityMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ActivityMutation", m)
	}
	return f(ctx, mv)
}

// The AlarmFilterFunc type is an adapter to allow the use of ordinary
// function as AlarmFilter mutator.
type AlarmFilterFunc func(context.Context, *ent.AlarmFilterMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AlarmFilterFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AlarmFilterMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AlarmFilterMutation", m)
	}
	return f(ctx, mv)
}

// The AlarmStatusFunc type is an adapter to allow the use of ordinary
// function as AlarmStatus mutator.
type AlarmStatusFunc func(context.Context, *ent.AlarmStatusMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AlarmStatusFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AlarmStatusMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AlarmStatusMutation", m)
	}
	return f(ctx, mv)
}

// The AppointmentFunc type is an adapter to allow the use of ordinary
// function as Appointment mutator.
type AppointmentFunc func(context.Context, *ent.AppointmentMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AppointmentFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AppointmentMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AppointmentMutation", m)
	}
	return f(ctx, mv)
}

// The BlockFunc type is an adapter to allow the use of ordinary
// function as Block mutator.
type BlockFunc func(context.Context, *ent.BlockMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlockFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.BlockMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlockMutation", m)
	}
	return f(ctx, mv)
}

// The BlockInstanceFunc type is an adapter to allow the use of ordinary
// function as BlockInstance mutator.
type BlockInstanceFunc func(context.Context, *ent.BlockInstanceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BlockInstanceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.BlockInstanceMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BlockInstanceMutation", m)
	}
	return f(ctx, mv)
}

// The CheckListCategoryFunc type is an adapter to allow the use of ordinary
// function as CheckListCategory mutator.
type CheckListCategoryFunc func(context.Context, *ent.CheckListCategoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CheckListCategoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CheckListCategoryMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CheckListCategoryMutation", m)
	}
	return f(ctx, mv)
}

// The CheckListCategoryDefinitionFunc type is an adapter to allow the use of ordinary
// function as CheckListCategoryDefinition mutator.
type CheckListCategoryDefinitionFunc func(context.Context, *ent.CheckListCategoryDefinitionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CheckListCategoryDefinitionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CheckListCategoryDefinitionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CheckListCategoryDefinitionMutation", m)
	}
	return f(ctx, mv)
}

// The CheckListItemFunc type is an adapter to allow the use of ordinary
// function as CheckListItem mutator.
type CheckListItemFunc func(context.Context, *ent.CheckListItemMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CheckListItemFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CheckListItemMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CheckListItemMutation", m)
	}
	return f(ctx, mv)
}

// The CheckListItemDefinitionFunc type is an adapter to allow the use of ordinary
// function as CheckListItemDefinition mutator.
type CheckListItemDefinitionFunc func(context.Context, *ent.CheckListItemDefinitionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CheckListItemDefinitionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CheckListItemDefinitionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CheckListItemDefinitionMutation", m)
	}
	return f(ctx, mv)
}

// The CommentFunc type is an adapter to allow the use of ordinary
// function as Comment mutator.
type CommentFunc func(context.Context, *ent.CommentMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CommentFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CommentMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CommentMutation", m)
	}
	return f(ctx, mv)
}

// The ComparatorFunc type is an adapter to allow the use of ordinary
// function as Comparator mutator.
type ComparatorFunc func(context.Context, *ent.ComparatorMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ComparatorFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ComparatorMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ComparatorMutation", m)
	}
	return f(ctx, mv)
}

// The CounterFunc type is an adapter to allow the use of ordinary
// function as Counter mutator.
type CounterFunc func(context.Context, *ent.CounterMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CounterFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CounterMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CounterMutation", m)
	}
	return f(ctx, mv)
}

// The CounterFamilyFunc type is an adapter to allow the use of ordinary
// function as CounterFamily mutator.
type CounterFamilyFunc func(context.Context, *ent.CounterFamilyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CounterFamilyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CounterFamilyMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CounterFamilyMutation", m)
	}
	return f(ctx, mv)
}

// The CounterFormulaFunc type is an adapter to allow the use of ordinary
// function as CounterFormula mutator.
type CounterFormulaFunc func(context.Context, *ent.CounterFormulaMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CounterFormulaFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CounterFormulaMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CounterFormulaMutation", m)
	}
	return f(ctx, mv)
}

// The CustomerFunc type is an adapter to allow the use of ordinary
// function as Customer mutator.
type CustomerFunc func(context.Context, *ent.CustomerMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CustomerFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CustomerMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CustomerMutation", m)
	}
	return f(ctx, mv)
}

// The DocumentCategoryFunc type is an adapter to allow the use of ordinary
// function as DocumentCategory mutator.
type DocumentCategoryFunc func(context.Context, *ent.DocumentCategoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DocumentCategoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.DocumentCategoryMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DocumentCategoryMutation", m)
	}
	return f(ctx, mv)
}

// The DomainFunc type is an adapter to allow the use of ordinary
// function as Domain mutator.
type DomainFunc func(context.Context, *ent.DomainMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DomainFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.DomainMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DomainMutation", m)
	}
	return f(ctx, mv)
}

// The EntryPointFunc type is an adapter to allow the use of ordinary
// function as EntryPoint mutator.
type EntryPointFunc func(context.Context, *ent.EntryPointMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EntryPointFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.EntryPointMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EntryPointMutation", m)
	}
	return f(ctx, mv)
}

// The EquipmentFunc type is an adapter to allow the use of ordinary
// function as Equipment mutator.
type EquipmentFunc func(context.Context, *ent.EquipmentMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EquipmentFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.EquipmentMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EquipmentMutation", m)
	}
	return f(ctx, mv)
}

// The EquipmentCategoryFunc type is an adapter to allow the use of ordinary
// function as EquipmentCategory mutator.
type EquipmentCategoryFunc func(context.Context, *ent.EquipmentCategoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EquipmentCategoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.EquipmentCategoryMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EquipmentCategoryMutation", m)
	}
	return f(ctx, mv)
}

// The EquipmentPortFunc type is an adapter to allow the use of ordinary
// function as EquipmentPort mutator.
type EquipmentPortFunc func(context.Context, *ent.EquipmentPortMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EquipmentPortFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.EquipmentPortMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EquipmentPortMutation", m)
	}
	return f(ctx, mv)
}

// The EquipmentPortDefinitionFunc type is an adapter to allow the use of ordinary
// function as EquipmentPortDefinition mutator.
type EquipmentPortDefinitionFunc func(context.Context, *ent.EquipmentPortDefinitionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EquipmentPortDefinitionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.EquipmentPortDefinitionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EquipmentPortDefinitionMutation", m)
	}
	return f(ctx, mv)
}

// The EquipmentPortTypeFunc type is an adapter to allow the use of ordinary
// function as EquipmentPortType mutator.
type EquipmentPortTypeFunc func(context.Context, *ent.EquipmentPortTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EquipmentPortTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.EquipmentPortTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EquipmentPortTypeMutation", m)
	}
	return f(ctx, mv)
}

// The EquipmentPositionFunc type is an adapter to allow the use of ordinary
// function as EquipmentPosition mutator.
type EquipmentPositionFunc func(context.Context, *ent.EquipmentPositionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EquipmentPositionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.EquipmentPositionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EquipmentPositionMutation", m)
	}
	return f(ctx, mv)
}

// The EquipmentPositionDefinitionFunc type is an adapter to allow the use of ordinary
// function as EquipmentPositionDefinition mutator.
type EquipmentPositionDefinitionFunc func(context.Context, *ent.EquipmentPositionDefinitionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EquipmentPositionDefinitionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.EquipmentPositionDefinitionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EquipmentPositionDefinitionMutation", m)
	}
	return f(ctx, mv)
}

// The EquipmentTypeFunc type is an adapter to allow the use of ordinary
// function as EquipmentType mutator.
type EquipmentTypeFunc func(context.Context, *ent.EquipmentTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EquipmentTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.EquipmentTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EquipmentTypeMutation", m)
	}
	return f(ctx, mv)
}

// The EventSeverityFunc type is an adapter to allow the use of ordinary
// function as EventSeverity mutator.
type EventSeverityFunc func(context.Context, *ent.EventSeverityMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EventSeverityFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.EventSeverityMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EventSeverityMutation", m)
	}
	return f(ctx, mv)
}

// The ExitPointFunc type is an adapter to allow the use of ordinary
// function as ExitPoint mutator.
type ExitPointFunc func(context.Context, *ent.ExitPointMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ExitPointFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ExitPointMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ExitPointMutation", m)
	}
	return f(ctx, mv)
}

// The ExportTaskFunc type is an adapter to allow the use of ordinary
// function as ExportTask mutator.
type ExportTaskFunc func(context.Context, *ent.ExportTaskMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ExportTaskFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ExportTaskMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ExportTaskMutation", m)
	}
	return f(ctx, mv)
}

// The FeatureFunc type is an adapter to allow the use of ordinary
// function as Feature mutator.
type FeatureFunc func(context.Context, *ent.FeatureMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FeatureFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.FeatureMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FeatureMutation", m)
	}
	return f(ctx, mv)
}

// The FileFunc type is an adapter to allow the use of ordinary
// function as File mutator.
type FileFunc func(context.Context, *ent.FileMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FileFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.FileMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FileMutation", m)
	}
	return f(ctx, mv)
}

// The FloorPlanFunc type is an adapter to allow the use of ordinary
// function as FloorPlan mutator.
type FloorPlanFunc func(context.Context, *ent.FloorPlanMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FloorPlanFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.FloorPlanMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FloorPlanMutation", m)
	}
	return f(ctx, mv)
}

// The FloorPlanReferencePointFunc type is an adapter to allow the use of ordinary
// function as FloorPlanReferencePoint mutator.
type FloorPlanReferencePointFunc func(context.Context, *ent.FloorPlanReferencePointMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FloorPlanReferencePointFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.FloorPlanReferencePointMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FloorPlanReferencePointMutation", m)
	}
	return f(ctx, mv)
}

// The FloorPlanScaleFunc type is an adapter to allow the use of ordinary
// function as FloorPlanScale mutator.
type FloorPlanScaleFunc func(context.Context, *ent.FloorPlanScaleMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FloorPlanScaleFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.FloorPlanScaleMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FloorPlanScaleMutation", m)
	}
	return f(ctx, mv)
}

// The FlowFunc type is an adapter to allow the use of ordinary
// function as Flow mutator.
type FlowFunc func(context.Context, *ent.FlowMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FlowFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.FlowMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FlowMutation", m)
	}
	return f(ctx, mv)
}

// The FlowDraftFunc type is an adapter to allow the use of ordinary
// function as FlowDraft mutator.
type FlowDraftFunc func(context.Context, *ent.FlowDraftMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FlowDraftFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.FlowDraftMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FlowDraftMutation", m)
	}
	return f(ctx, mv)
}

// The FlowExecutionTemplateFunc type is an adapter to allow the use of ordinary
// function as FlowExecutionTemplate mutator.
type FlowExecutionTemplateFunc func(context.Context, *ent.FlowExecutionTemplateMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FlowExecutionTemplateFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.FlowExecutionTemplateMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FlowExecutionTemplateMutation", m)
	}
	return f(ctx, mv)
}

// The FlowInstanceFunc type is an adapter to allow the use of ordinary
// function as FlowInstance mutator.
type FlowInstanceFunc func(context.Context, *ent.FlowInstanceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FlowInstanceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.FlowInstanceMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FlowInstanceMutation", m)
	}
	return f(ctx, mv)
}

// The FormulaFunc type is an adapter to allow the use of ordinary
// function as Formula mutator.
type FormulaFunc func(context.Context, *ent.FormulaMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FormulaFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.FormulaMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FormulaMutation", m)
	}
	return f(ctx, mv)
}

// The HyperlinkFunc type is an adapter to allow the use of ordinary
// function as Hyperlink mutator.
type HyperlinkFunc func(context.Context, *ent.HyperlinkMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f HyperlinkFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.HyperlinkMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.HyperlinkMutation", m)
	}
	return f(ctx, mv)
}

// The KpiFunc type is an adapter to allow the use of ordinary
// function as Kpi mutator.
type KpiFunc func(context.Context, *ent.KpiMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f KpiFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.KpiMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.KpiMutation", m)
	}
	return f(ctx, mv)
}

// The KpiCategoryFunc type is an adapter to allow the use of ordinary
// function as KpiCategory mutator.
type KpiCategoryFunc func(context.Context, *ent.KpiCategoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f KpiCategoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.KpiCategoryMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.KpiCategoryMutation", m)
	}
	return f(ctx, mv)
}

// The KqiFunc type is an adapter to allow the use of ordinary
// function as Kqi mutator.
type KqiFunc func(context.Context, *ent.KqiMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f KqiFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.KqiMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.KqiMutation", m)
	}
	return f(ctx, mv)
}

// The KqiCategoryFunc type is an adapter to allow the use of ordinary
// function as KqiCategory mutator.
type KqiCategoryFunc func(context.Context, *ent.KqiCategoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f KqiCategoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.KqiCategoryMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.KqiCategoryMutation", m)
	}
	return f(ctx, mv)
}

// The KqiComparatorFunc type is an adapter to allow the use of ordinary
// function as KqiComparator mutator.
type KqiComparatorFunc func(context.Context, *ent.KqiComparatorMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f KqiComparatorFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.KqiComparatorMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.KqiComparatorMutation", m)
	}
	return f(ctx, mv)
}

// The KqiPerspectiveFunc type is an adapter to allow the use of ordinary
// function as KqiPerspective mutator.
type KqiPerspectiveFunc func(context.Context, *ent.KqiPerspectiveMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f KqiPerspectiveFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.KqiPerspectiveMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.KqiPerspectiveMutation", m)
	}
	return f(ctx, mv)
}

// The KqiSourceFunc type is an adapter to allow the use of ordinary
// function as KqiSource mutator.
type KqiSourceFunc func(context.Context, *ent.KqiSourceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f KqiSourceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.KqiSourceMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.KqiSourceMutation", m)
	}
	return f(ctx, mv)
}

// The KqiTargetFunc type is an adapter to allow the use of ordinary
// function as KqiTarget mutator.
type KqiTargetFunc func(context.Context, *ent.KqiTargetMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f KqiTargetFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.KqiTargetMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.KqiTargetMutation", m)
	}
	return f(ctx, mv)
}

// The KqiTemporalFrequencyFunc type is an adapter to allow the use of ordinary
// function as KqiTemporalFrequency mutator.
type KqiTemporalFrequencyFunc func(context.Context, *ent.KqiTemporalFrequencyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f KqiTemporalFrequencyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.KqiTemporalFrequencyMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.KqiTemporalFrequencyMutation", m)
	}
	return f(ctx, mv)
}

// The LinkFunc type is an adapter to allow the use of ordinary
// function as Link mutator.
type LinkFunc func(context.Context, *ent.LinkMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f LinkFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.LinkMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.LinkMutation", m)
	}
	return f(ctx, mv)
}

// The LocationFunc type is an adapter to allow the use of ordinary
// function as Location mutator.
type LocationFunc func(context.Context, *ent.LocationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f LocationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.LocationMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.LocationMutation", m)
	}
	return f(ctx, mv)
}

// The LocationTypeFunc type is an adapter to allow the use of ordinary
// function as LocationType mutator.
type LocationTypeFunc func(context.Context, *ent.LocationTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f LocationTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.LocationTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.LocationTypeMutation", m)
	}
	return f(ctx, mv)
}

// The NetworkTypeFunc type is an adapter to allow the use of ordinary
// function as NetworkType mutator.
type NetworkTypeFunc func(context.Context, *ent.NetworkTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f NetworkTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.NetworkTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.NetworkTypeMutation", m)
	}
	return f(ctx, mv)
}

// The OrganizationFunc type is an adapter to allow the use of ordinary
// function as Organization mutator.
type OrganizationFunc func(context.Context, *ent.OrganizationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OrganizationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.OrganizationMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OrganizationMutation", m)
	}
	return f(ctx, mv)
}

// The ParameterCatalogFunc type is an adapter to allow the use of ordinary
// function as ParameterCatalog mutator.
type ParameterCatalogFunc func(context.Context, *ent.ParameterCatalogMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ParameterCatalogFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ParameterCatalogMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ParameterCatalogMutation", m)
	}
	return f(ctx, mv)
}

// The PermissionsPolicyFunc type is an adapter to allow the use of ordinary
// function as PermissionsPolicy mutator.
type PermissionsPolicyFunc func(context.Context, *ent.PermissionsPolicyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PermissionsPolicyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PermissionsPolicyMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PermissionsPolicyMutation", m)
	}
	return f(ctx, mv)
}

// The ProjectFunc type is an adapter to allow the use of ordinary
// function as Project mutator.
type ProjectFunc func(context.Context, *ent.ProjectMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProjectFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProjectMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProjectMutation", m)
	}
	return f(ctx, mv)
}

// The ProjectTemplateFunc type is an adapter to allow the use of ordinary
// function as ProjectTemplate mutator.
type ProjectTemplateFunc func(context.Context, *ent.ProjectTemplateMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProjectTemplateFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProjectTemplateMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProjectTemplateMutation", m)
	}
	return f(ctx, mv)
}

// The ProjectTypeFunc type is an adapter to allow the use of ordinary
// function as ProjectType mutator.
type ProjectTypeFunc func(context.Context, *ent.ProjectTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProjectTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ProjectTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProjectTypeMutation", m)
	}
	return f(ctx, mv)
}

// The PropertyFunc type is an adapter to allow the use of ordinary
// function as Property mutator.
type PropertyFunc func(context.Context, *ent.PropertyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PropertyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PropertyMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PropertyMutation", m)
	}
	return f(ctx, mv)
}

// The PropertyCategoryFunc type is an adapter to allow the use of ordinary
// function as PropertyCategory mutator.
type PropertyCategoryFunc func(context.Context, *ent.PropertyCategoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PropertyCategoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PropertyCategoryMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PropertyCategoryMutation", m)
	}
	return f(ctx, mv)
}

// The PropertyTypeFunc type is an adapter to allow the use of ordinary
// function as PropertyType mutator.
type PropertyTypeFunc func(context.Context, *ent.PropertyTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PropertyTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PropertyTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PropertyTypeMutation", m)
	}
	return f(ctx, mv)
}

// The RecommendationsFunc type is an adapter to allow the use of ordinary
// function as Recommendations mutator.
type RecommendationsFunc func(context.Context, *ent.RecommendationsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RecommendationsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.RecommendationsMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RecommendationsMutation", m)
	}
	return f(ctx, mv)
}

// The RecommendationsCategoryFunc type is an adapter to allow the use of ordinary
// function as RecommendationsCategory mutator.
type RecommendationsCategoryFunc func(context.Context, *ent.RecommendationsCategoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RecommendationsCategoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.RecommendationsCategoryMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RecommendationsCategoryMutation", m)
	}
	return f(ctx, mv)
}

// The RecommendationsSourcesFunc type is an adapter to allow the use of ordinary
// function as RecommendationsSources mutator.
type RecommendationsSourcesFunc func(context.Context, *ent.RecommendationsSourcesMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RecommendationsSourcesFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.RecommendationsSourcesMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RecommendationsSourcesMutation", m)
	}
	return f(ctx, mv)
}

// The ReportFilterFunc type is an adapter to allow the use of ordinary
// function as ReportFilter mutator.
type ReportFilterFunc func(context.Context, *ent.ReportFilterMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ReportFilterFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ReportFilterMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ReportFilterMutation", m)
	}
	return f(ctx, mv)
}

// The RuleFunc type is an adapter to allow the use of ordinary
// function as Rule mutator.
type RuleFunc func(context.Context, *ent.RuleMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RuleFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.RuleMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RuleMutation", m)
	}
	return f(ctx, mv)
}

// The RuleLimitFunc type is an adapter to allow the use of ordinary
// function as RuleLimit mutator.
type RuleLimitFunc func(context.Context, *ent.RuleLimitMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RuleLimitFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.RuleLimitMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RuleLimitMutation", m)
	}
	return f(ctx, mv)
}

// The RuleTypeFunc type is an adapter to allow the use of ordinary
// function as RuleType mutator.
type RuleTypeFunc func(context.Context, *ent.RuleTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RuleTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.RuleTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RuleTypeMutation", m)
	}
	return f(ctx, mv)
}

// The ServiceFunc type is an adapter to allow the use of ordinary
// function as Service mutator.
type ServiceFunc func(context.Context, *ent.ServiceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ServiceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ServiceMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ServiceMutation", m)
	}
	return f(ctx, mv)
}

// The ServiceEndpointFunc type is an adapter to allow the use of ordinary
// function as ServiceEndpoint mutator.
type ServiceEndpointFunc func(context.Context, *ent.ServiceEndpointMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ServiceEndpointFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ServiceEndpointMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ServiceEndpointMutation", m)
	}
	return f(ctx, mv)
}

// The ServiceEndpointDefinitionFunc type is an adapter to allow the use of ordinary
// function as ServiceEndpointDefinition mutator.
type ServiceEndpointDefinitionFunc func(context.Context, *ent.ServiceEndpointDefinitionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ServiceEndpointDefinitionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ServiceEndpointDefinitionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ServiceEndpointDefinitionMutation", m)
	}
	return f(ctx, mv)
}

// The ServiceTypeFunc type is an adapter to allow the use of ordinary
// function as ServiceType mutator.
type ServiceTypeFunc func(context.Context, *ent.ServiceTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ServiceTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ServiceTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ServiceTypeMutation", m)
	}
	return f(ctx, mv)
}

// The SurveyFunc type is an adapter to allow the use of ordinary
// function as Survey mutator.
type SurveyFunc func(context.Context, *ent.SurveyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SurveyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.SurveyMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SurveyMutation", m)
	}
	return f(ctx, mv)
}

// The SurveyCellScanFunc type is an adapter to allow the use of ordinary
// function as SurveyCellScan mutator.
type SurveyCellScanFunc func(context.Context, *ent.SurveyCellScanMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SurveyCellScanFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.SurveyCellScanMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SurveyCellScanMutation", m)
	}
	return f(ctx, mv)
}

// The SurveyQuestionFunc type is an adapter to allow the use of ordinary
// function as SurveyQuestion mutator.
type SurveyQuestionFunc func(context.Context, *ent.SurveyQuestionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SurveyQuestionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.SurveyQuestionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SurveyQuestionMutation", m)
	}
	return f(ctx, mv)
}

// The SurveyTemplateCategoryFunc type is an adapter to allow the use of ordinary
// function as SurveyTemplateCategory mutator.
type SurveyTemplateCategoryFunc func(context.Context, *ent.SurveyTemplateCategoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SurveyTemplateCategoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.SurveyTemplateCategoryMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SurveyTemplateCategoryMutation", m)
	}
	return f(ctx, mv)
}

// The SurveyTemplateQuestionFunc type is an adapter to allow the use of ordinary
// function as SurveyTemplateQuestion mutator.
type SurveyTemplateQuestionFunc func(context.Context, *ent.SurveyTemplateQuestionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SurveyTemplateQuestionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.SurveyTemplateQuestionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SurveyTemplateQuestionMutation", m)
	}
	return f(ctx, mv)
}

// The SurveyWiFiScanFunc type is an adapter to allow the use of ordinary
// function as SurveyWiFiScan mutator.
type SurveyWiFiScanFunc func(context.Context, *ent.SurveyWiFiScanMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SurveyWiFiScanFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.SurveyWiFiScanMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SurveyWiFiScanMutation", m)
	}
	return f(ctx, mv)
}

// The TechFunc type is an adapter to allow the use of ordinary
// function as Tech mutator.
type TechFunc func(context.Context, *ent.TechMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TechFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TechMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TechMutation", m)
	}
	return f(ctx, mv)
}

// The ThresholdFunc type is an adapter to allow the use of ordinary
// function as Threshold mutator.
type ThresholdFunc func(context.Context, *ent.ThresholdMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ThresholdFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ThresholdMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ThresholdMutation", m)
	}
	return f(ctx, mv)
}

// The UserFunc type is an adapter to allow the use of ordinary
// function as User mutator.
type UserFunc func(context.Context, *ent.UserMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.UserMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserMutation", m)
	}
	return f(ctx, mv)
}

// The UsersGroupFunc type is an adapter to allow the use of ordinary
// function as UsersGroup mutator.
type UsersGroupFunc func(context.Context, *ent.UsersGroupMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UsersGroupFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.UsersGroupMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UsersGroupMutation", m)
	}
	return f(ctx, mv)
}

// The VendorFunc type is an adapter to allow the use of ordinary
// function as Vendor mutator.
type VendorFunc func(context.Context, *ent.VendorMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f VendorFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.VendorMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.VendorMutation", m)
	}
	return f(ctx, mv)
}

// The WorkOrderFunc type is an adapter to allow the use of ordinary
// function as WorkOrder mutator.
type WorkOrderFunc func(context.Context, *ent.WorkOrderMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WorkOrderFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.WorkOrderMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WorkOrderMutation", m)
	}
	return f(ctx, mv)
}

// The WorkOrderDefinitionFunc type is an adapter to allow the use of ordinary
// function as WorkOrderDefinition mutator.
type WorkOrderDefinitionFunc func(context.Context, *ent.WorkOrderDefinitionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WorkOrderDefinitionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.WorkOrderDefinitionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WorkOrderDefinitionMutation", m)
	}
	return f(ctx, mv)
}

// The WorkOrderTemplateFunc type is an adapter to allow the use of ordinary
// function as WorkOrderTemplate mutator.
type WorkOrderTemplateFunc func(context.Context, *ent.WorkOrderTemplateMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WorkOrderTemplateFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.WorkOrderTemplateMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WorkOrderTemplateMutation", m)
	}
	return f(ctx, mv)
}

// The WorkOrderTypeFunc type is an adapter to allow the use of ordinary
// function as WorkOrderType mutator.
type WorkOrderTypeFunc func(context.Context, *ent.WorkOrderTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WorkOrderTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.WorkOrderTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WorkOrderTypeMutation", m)
	}
	return f(ctx, mv)
}

// The WorkerTypeFunc type is an adapter to allow the use of ordinary
// function as WorkerType mutator.
type WorkerTypeFunc func(context.Context, *ent.WorkerTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WorkerTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.WorkerTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WorkerTypeMutation", m)
	}
	return f(ctx, mv)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
//
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
//
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
//
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) ent.Hook {
	return func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(context.Context, ent.Mutation) (ent.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
//
func Reject(op ent.Op) ent.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
