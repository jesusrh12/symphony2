// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/comparator"
	"github.com/facebookincubator/symphony/pkg/ent/kqicomparator"
	"github.com/facebookincubator/symphony/pkg/ent/rulelimit"
)

// ComparatorCreate is the builder for creating a Comparator entity.
type ComparatorCreate struct {
	config
	mutation *ComparatorMutation
	hooks    []Hook
}

// SetCreateTime sets the create_time field.
func (cc *ComparatorCreate) SetCreateTime(t time.Time) *ComparatorCreate {
	cc.mutation.SetCreateTime(t)
	return cc
}

// SetNillableCreateTime sets the create_time field if the given value is not nil.
func (cc *ComparatorCreate) SetNillableCreateTime(t *time.Time) *ComparatorCreate {
	if t != nil {
		cc.SetCreateTime(*t)
	}
	return cc
}

// SetUpdateTime sets the update_time field.
func (cc *ComparatorCreate) SetUpdateTime(t time.Time) *ComparatorCreate {
	cc.mutation.SetUpdateTime(t)
	return cc
}

// SetNillableUpdateTime sets the update_time field if the given value is not nil.
func (cc *ComparatorCreate) SetNillableUpdateTime(t *time.Time) *ComparatorCreate {
	if t != nil {
		cc.SetUpdateTime(*t)
	}
	return cc
}

// SetName sets the name field.
func (cc *ComparatorCreate) SetName(s string) *ComparatorCreate {
	cc.mutation.SetName(s)
	return cc
}

// AddComparatorrulelimitIDs adds the comparatorrulelimit edge to RuleLimit by ids.
func (cc *ComparatorCreate) AddComparatorrulelimitIDs(ids ...int) *ComparatorCreate {
	cc.mutation.AddComparatorrulelimitIDs(ids...)
	return cc
}

// AddComparatorrulelimit adds the comparatorrulelimit edges to RuleLimit.
func (cc *ComparatorCreate) AddComparatorrulelimit(r ...*RuleLimit) *ComparatorCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cc.AddComparatorrulelimitIDs(ids...)
}

// AddComparatorkqitargetfkIDs adds the comparatorkqitargetfk edge to KqiComparator by ids.
func (cc *ComparatorCreate) AddComparatorkqitargetfkIDs(ids ...int) *ComparatorCreate {
	cc.mutation.AddComparatorkqitargetfkIDs(ids...)
	return cc
}

// AddComparatorkqitargetfk adds the comparatorkqitargetfk edges to KqiComparator.
func (cc *ComparatorCreate) AddComparatorkqitargetfk(k ...*KqiComparator) *ComparatorCreate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return cc.AddComparatorkqitargetfkIDs(ids...)
}

// Mutation returns the ComparatorMutation object of the builder.
func (cc *ComparatorCreate) Mutation() *ComparatorMutation {
	return cc.mutation
}

// Save creates the Comparator in the database.
func (cc *ComparatorCreate) Save(ctx context.Context) (*Comparator, error) {
	var (
		err  error
		node *Comparator
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ComparatorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ComparatorCreate) SaveX(ctx context.Context) *Comparator {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (cc *ComparatorCreate) defaults() {
	if _, ok := cc.mutation.CreateTime(); !ok {
		v := comparator.DefaultCreateTime()
		cc.mutation.SetCreateTime(v)
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		v := comparator.DefaultUpdateTime()
		cc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ComparatorCreate) check() error {
	if _, ok := cc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := cc.mutation.Name(); ok {
		if err := comparator.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (cc *ComparatorCreate) sqlSave(ctx context.Context) (*Comparator, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cc *ComparatorCreate) createSpec() (*Comparator, *sqlgraph.CreateSpec) {
	var (
		_node = &Comparator{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: comparator.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: comparator.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: comparator.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := cc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: comparator.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: comparator.FieldName,
		})
		_node.Name = value
	}
	if nodes := cc.mutation.ComparatorrulelimitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comparator.ComparatorrulelimitTable,
			Columns: []string{comparator.ComparatorrulelimitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rulelimit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ComparatorkqitargetfkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comparator.ComparatorkqitargetfkTable,
			Columns: []string{comparator.ComparatorkqitargetfkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqicomparator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ComparatorCreateBulk is the builder for creating a bulk of Comparator entities.
type ComparatorCreateBulk struct {
	config
	builders []*ComparatorCreate
}

// Save creates the Comparator entities in the database.
func (ccb *ComparatorCreateBulk) Save(ctx context.Context) ([]*Comparator, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Comparator, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ComparatorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (ccb *ComparatorCreateBulk) SaveX(ctx context.Context) []*Comparator {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
