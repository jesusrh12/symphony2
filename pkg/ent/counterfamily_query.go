// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/counter"
	"github.com/facebookincubator/symphony/pkg/ent/counterfamily"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
)

// CounterFamilyQuery is the builder for querying CounterFamily entities.
type CounterFamilyQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.CounterFamily
	// eager-loading edges.
	withCounterfamily *CounterQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (cfq *CounterFamilyQuery) Where(ps ...predicate.CounterFamily) *CounterFamilyQuery {
	cfq.predicates = append(cfq.predicates, ps...)
	return cfq
}

// Limit adds a limit step to the query.
func (cfq *CounterFamilyQuery) Limit(limit int) *CounterFamilyQuery {
	cfq.limit = &limit
	return cfq
}

// Offset adds an offset step to the query.
func (cfq *CounterFamilyQuery) Offset(offset int) *CounterFamilyQuery {
	cfq.offset = &offset
	return cfq
}

// Order adds an order step to the query.
func (cfq *CounterFamilyQuery) Order(o ...OrderFunc) *CounterFamilyQuery {
	cfq.order = append(cfq.order, o...)
	return cfq
}

// QueryCounterfamily chains the current query on the counterfamily edge.
func (cfq *CounterFamilyQuery) QueryCounterfamily() *CounterQuery {
	query := &CounterQuery{config: cfq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cfq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(counterfamily.Table, counterfamily.FieldID, selector),
			sqlgraph.To(counter.Table, counter.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, counterfamily.CounterfamilyTable, counterfamily.CounterfamilyColumn),
		)
		fromU = sqlgraph.SetNeighbors(cfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CounterFamily entity in the query. Returns *NotFoundError when no counterfamily was found.
func (cfq *CounterFamilyQuery) First(ctx context.Context) (*CounterFamily, error) {
	nodes, err := cfq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{counterfamily.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cfq *CounterFamilyQuery) FirstX(ctx context.Context) *CounterFamily {
	node, err := cfq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CounterFamily id in the query. Returns *NotFoundError when no id was found.
func (cfq *CounterFamilyQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cfq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{counterfamily.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cfq *CounterFamilyQuery) FirstIDX(ctx context.Context) int {
	id, err := cfq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only CounterFamily entity in the query, returns an error if not exactly one entity was returned.
func (cfq *CounterFamilyQuery) Only(ctx context.Context) (*CounterFamily, error) {
	nodes, err := cfq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{counterfamily.Label}
	default:
		return nil, &NotSingularError{counterfamily.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cfq *CounterFamilyQuery) OnlyX(ctx context.Context) *CounterFamily {
	node, err := cfq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only CounterFamily id in the query, returns an error if not exactly one id was returned.
func (cfq *CounterFamilyQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cfq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{counterfamily.Label}
	default:
		err = &NotSingularError{counterfamily.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cfq *CounterFamilyQuery) OnlyIDX(ctx context.Context) int {
	id, err := cfq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CounterFamilies.
func (cfq *CounterFamilyQuery) All(ctx context.Context) ([]*CounterFamily, error) {
	if err := cfq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return cfq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (cfq *CounterFamilyQuery) AllX(ctx context.Context) []*CounterFamily {
	nodes, err := cfq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CounterFamily ids.
func (cfq *CounterFamilyQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := cfq.Select(counterfamily.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cfq *CounterFamilyQuery) IDsX(ctx context.Context) []int {
	ids, err := cfq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cfq *CounterFamilyQuery) Count(ctx context.Context) (int, error) {
	if err := cfq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return cfq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (cfq *CounterFamilyQuery) CountX(ctx context.Context) int {
	count, err := cfq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cfq *CounterFamilyQuery) Exist(ctx context.Context) (bool, error) {
	if err := cfq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return cfq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (cfq *CounterFamilyQuery) ExistX(ctx context.Context) bool {
	exist, err := cfq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cfq *CounterFamilyQuery) Clone() *CounterFamilyQuery {
	if cfq == nil {
		return nil
	}
	return &CounterFamilyQuery{
		config:            cfq.config,
		limit:             cfq.limit,
		offset:            cfq.offset,
		order:             append([]OrderFunc{}, cfq.order...),
		unique:            append([]string{}, cfq.unique...),
		predicates:        append([]predicate.CounterFamily{}, cfq.predicates...),
		withCounterfamily: cfq.withCounterfamily.Clone(),
		// clone intermediate query.
		sql:  cfq.sql.Clone(),
		path: cfq.path,
	}
}

//  WithCounterfamily tells the query-builder to eager-loads the nodes that are connected to
// the "counterfamily" edge. The optional arguments used to configure the query builder of the edge.
func (cfq *CounterFamilyQuery) WithCounterfamily(opts ...func(*CounterQuery)) *CounterFamilyQuery {
	query := &CounterQuery{config: cfq.config}
	for _, opt := range opts {
		opt(query)
	}
	cfq.withCounterfamily = query
	return cfq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CounterFamily.Query().
//		GroupBy(counterfamily.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (cfq *CounterFamilyQuery) GroupBy(field string, fields ...string) *CounterFamilyGroupBy {
	group := &CounterFamilyGroupBy{config: cfq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := cfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return cfq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.CounterFamily.Query().
//		Select(counterfamily.FieldCreateTime).
//		Scan(ctx, &v)
//
func (cfq *CounterFamilyQuery) Select(field string, fields ...string) *CounterFamilySelect {
	selector := &CounterFamilySelect{config: cfq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := cfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return cfq.sqlQuery(), nil
	}
	return selector
}

func (cfq *CounterFamilyQuery) prepareQuery(ctx context.Context) error {
	if cfq.path != nil {
		prev, err := cfq.path(ctx)
		if err != nil {
			return err
		}
		cfq.sql = prev
	}
	if err := counterfamily.Policy.EvalQuery(ctx, cfq); err != nil {
		return err
	}
	return nil
}

func (cfq *CounterFamilyQuery) sqlAll(ctx context.Context) ([]*CounterFamily, error) {
	var (
		nodes       = []*CounterFamily{}
		_spec       = cfq.querySpec()
		loadedTypes = [1]bool{
			cfq.withCounterfamily != nil,
		}
	)
	_spec.ScanValues = func() []interface{} {
		node := &CounterFamily{config: cfq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, cfq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := cfq.withCounterfamily; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*CounterFamily)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Counterfamily = []*Counter{}
		}
		query.withFKs = true
		query.Where(predicate.Counter(func(s *sql.Selector) {
			s.Where(sql.InValues(counterfamily.CounterfamilyColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.counter_family_counterfamily
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "counter_family_counterfamily" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "counter_family_counterfamily" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Counterfamily = append(node.Edges.Counterfamily, n)
		}
	}

	return nodes, nil
}

func (cfq *CounterFamilyQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cfq.querySpec()
	return sqlgraph.CountNodes(ctx, cfq.driver, _spec)
}

func (cfq *CounterFamilyQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := cfq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (cfq *CounterFamilyQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   counterfamily.Table,
			Columns: counterfamily.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: counterfamily.FieldID,
			},
		},
		From:   cfq.sql,
		Unique: true,
	}
	if ps := cfq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cfq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cfq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cfq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, counterfamily.ValidColumn)
			}
		}
	}
	return _spec
}

func (cfq *CounterFamilyQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(cfq.driver.Dialect())
	t1 := builder.Table(counterfamily.Table)
	selector := builder.Select(t1.Columns(counterfamily.Columns...)...).From(t1)
	if cfq.sql != nil {
		selector = cfq.sql
		selector.Select(selector.Columns(counterfamily.Columns...)...)
	}
	for _, p := range cfq.predicates {
		p(selector)
	}
	for _, p := range cfq.order {
		p(selector, counterfamily.ValidColumn)
	}
	if offset := cfq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cfq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CounterFamilyGroupBy is the builder for group-by CounterFamily entities.
type CounterFamilyGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cfgb *CounterFamilyGroupBy) Aggregate(fns ...AggregateFunc) *CounterFamilyGroupBy {
	cfgb.fns = append(cfgb.fns, fns...)
	return cfgb
}

// Scan applies the group-by query and scan the result into the given value.
func (cfgb *CounterFamilyGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := cfgb.path(ctx)
	if err != nil {
		return err
	}
	cfgb.sql = query
	return cfgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (cfgb *CounterFamilyGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := cfgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (cfgb *CounterFamilyGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(cfgb.fields) > 1 {
		return nil, errors.New("ent: CounterFamilyGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := cfgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (cfgb *CounterFamilyGroupBy) StringsX(ctx context.Context) []string {
	v, err := cfgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (cfgb *CounterFamilyGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = cfgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{counterfamily.Label}
	default:
		err = fmt.Errorf("ent: CounterFamilyGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (cfgb *CounterFamilyGroupBy) StringX(ctx context.Context) string {
	v, err := cfgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (cfgb *CounterFamilyGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(cfgb.fields) > 1 {
		return nil, errors.New("ent: CounterFamilyGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := cfgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (cfgb *CounterFamilyGroupBy) IntsX(ctx context.Context) []int {
	v, err := cfgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (cfgb *CounterFamilyGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = cfgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{counterfamily.Label}
	default:
		err = fmt.Errorf("ent: CounterFamilyGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (cfgb *CounterFamilyGroupBy) IntX(ctx context.Context) int {
	v, err := cfgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (cfgb *CounterFamilyGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(cfgb.fields) > 1 {
		return nil, errors.New("ent: CounterFamilyGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := cfgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (cfgb *CounterFamilyGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := cfgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (cfgb *CounterFamilyGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = cfgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{counterfamily.Label}
	default:
		err = fmt.Errorf("ent: CounterFamilyGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (cfgb *CounterFamilyGroupBy) Float64X(ctx context.Context) float64 {
	v, err := cfgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (cfgb *CounterFamilyGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(cfgb.fields) > 1 {
		return nil, errors.New("ent: CounterFamilyGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := cfgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (cfgb *CounterFamilyGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := cfgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (cfgb *CounterFamilyGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = cfgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{counterfamily.Label}
	default:
		err = fmt.Errorf("ent: CounterFamilyGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (cfgb *CounterFamilyGroupBy) BoolX(ctx context.Context) bool {
	v, err := cfgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cfgb *CounterFamilyGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range cfgb.fields {
		if !counterfamily.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := cfgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cfgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (cfgb *CounterFamilyGroupBy) sqlQuery() *sql.Selector {
	selector := cfgb.sql
	columns := make([]string, 0, len(cfgb.fields)+len(cfgb.fns))
	columns = append(columns, cfgb.fields...)
	for _, fn := range cfgb.fns {
		columns = append(columns, fn(selector, counterfamily.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(cfgb.fields...)
}

// CounterFamilySelect is the builder for select fields of CounterFamily entities.
type CounterFamilySelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (cfs *CounterFamilySelect) Scan(ctx context.Context, v interface{}) error {
	query, err := cfs.path(ctx)
	if err != nil {
		return err
	}
	cfs.sql = query
	return cfs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (cfs *CounterFamilySelect) ScanX(ctx context.Context, v interface{}) {
	if err := cfs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (cfs *CounterFamilySelect) Strings(ctx context.Context) ([]string, error) {
	if len(cfs.fields) > 1 {
		return nil, errors.New("ent: CounterFamilySelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := cfs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (cfs *CounterFamilySelect) StringsX(ctx context.Context) []string {
	v, err := cfs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (cfs *CounterFamilySelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = cfs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{counterfamily.Label}
	default:
		err = fmt.Errorf("ent: CounterFamilySelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (cfs *CounterFamilySelect) StringX(ctx context.Context) string {
	v, err := cfs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (cfs *CounterFamilySelect) Ints(ctx context.Context) ([]int, error) {
	if len(cfs.fields) > 1 {
		return nil, errors.New("ent: CounterFamilySelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := cfs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (cfs *CounterFamilySelect) IntsX(ctx context.Context) []int {
	v, err := cfs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (cfs *CounterFamilySelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = cfs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{counterfamily.Label}
	default:
		err = fmt.Errorf("ent: CounterFamilySelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (cfs *CounterFamilySelect) IntX(ctx context.Context) int {
	v, err := cfs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (cfs *CounterFamilySelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(cfs.fields) > 1 {
		return nil, errors.New("ent: CounterFamilySelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := cfs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (cfs *CounterFamilySelect) Float64sX(ctx context.Context) []float64 {
	v, err := cfs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (cfs *CounterFamilySelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = cfs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{counterfamily.Label}
	default:
		err = fmt.Errorf("ent: CounterFamilySelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (cfs *CounterFamilySelect) Float64X(ctx context.Context) float64 {
	v, err := cfs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (cfs *CounterFamilySelect) Bools(ctx context.Context) ([]bool, error) {
	if len(cfs.fields) > 1 {
		return nil, errors.New("ent: CounterFamilySelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := cfs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (cfs *CounterFamilySelect) BoolsX(ctx context.Context) []bool {
	v, err := cfs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (cfs *CounterFamilySelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = cfs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{counterfamily.Label}
	default:
		err = fmt.Errorf("ent: CounterFamilySelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (cfs *CounterFamilySelect) BoolX(ctx context.Context) bool {
	v, err := cfs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cfs *CounterFamilySelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range cfs.fields {
		if !counterfamily.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := cfs.sqlQuery().Query()
	if err := cfs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (cfs *CounterFamilySelect) sqlQuery() sql.Querier {
	selector := cfs.sql
	selector.Select(selector.Columns(cfs.fields...)...)
	return selector
}
