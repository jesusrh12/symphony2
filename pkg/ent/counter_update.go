// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/counter"
	"github.com/facebookincubator/symphony/pkg/ent/counterfamily"
	"github.com/facebookincubator/symphony/pkg/ent/counterformula"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/vendor"
)

// CounterUpdate is the builder for updating Counter entities.
type CounterUpdate struct {
	config
	hooks    []Hook
	mutation *CounterMutation
}

// Where adds a new predicate for the builder.
func (cu *CounterUpdate) Where(ps ...predicate.Counter) *CounterUpdate {
	cu.mutation.predicates = append(cu.mutation.predicates, ps...)
	return cu
}

// SetName sets the name field.
func (cu *CounterUpdate) SetName(s string) *CounterUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetExternalId sets the externalId field.
func (cu *CounterUpdate) SetExternalId(s string) *CounterUpdate {
	cu.mutation.SetExternalId(s)
	return cu
}

// SetNetworkManagerSystem sets the networkManagerSystem field.
func (cu *CounterUpdate) SetNetworkManagerSystem(s string) *CounterUpdate {
	cu.mutation.SetNetworkManagerSystem(s)
	return cu
}

// SetCounterfamilyID sets the counterfamily edge to CounterFamily by id.
func (cu *CounterUpdate) SetCounterfamilyID(id int) *CounterUpdate {
	cu.mutation.SetCounterfamilyID(id)
	return cu
}

// SetNillableCounterfamilyID sets the counterfamily edge to CounterFamily by id if the given value is not nil.
func (cu *CounterUpdate) SetNillableCounterfamilyID(id *int) *CounterUpdate {
	if id != nil {
		cu = cu.SetCounterfamilyID(*id)
	}
	return cu
}

// SetCounterfamily sets the counterfamily edge to CounterFamily.
func (cu *CounterUpdate) SetCounterfamily(c *CounterFamily) *CounterUpdate {
	return cu.SetCounterfamilyID(c.ID)
}

// SetVendorID sets the vendor edge to Vendor by id.
func (cu *CounterUpdate) SetVendorID(id int) *CounterUpdate {
	cu.mutation.SetVendorID(id)
	return cu
}

// SetNillableVendorID sets the vendor edge to Vendor by id if the given value is not nil.
func (cu *CounterUpdate) SetNillableVendorID(id *int) *CounterUpdate {
	if id != nil {
		cu = cu.SetVendorID(*id)
	}
	return cu
}

// SetVendor sets the vendor edge to Vendor.
func (cu *CounterUpdate) SetVendor(v *Vendor) *CounterUpdate {
	return cu.SetVendorID(v.ID)
}

// AddCounterFkIDs adds the counter_fk edge to CounterFormula by ids.
func (cu *CounterUpdate) AddCounterFkIDs(ids ...int) *CounterUpdate {
	cu.mutation.AddCounterFkIDs(ids...)
	return cu
}

// AddCounterFk adds the counter_fk edges to CounterFormula.
func (cu *CounterUpdate) AddCounterFk(c ...*CounterFormula) *CounterUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCounterFkIDs(ids...)
}

// Mutation returns the CounterMutation object of the builder.
func (cu *CounterUpdate) Mutation() *CounterMutation {
	return cu.mutation
}

// ClearCounterfamily clears the "counterfamily" edge to type CounterFamily.
func (cu *CounterUpdate) ClearCounterfamily() *CounterUpdate {
	cu.mutation.ClearCounterfamily()
	return cu
}

// ClearVendor clears the "vendor" edge to type Vendor.
func (cu *CounterUpdate) ClearVendor() *CounterUpdate {
	cu.mutation.ClearVendor()
	return cu
}

// ClearCounterFk clears all "counter_fk" edges to type CounterFormula.
func (cu *CounterUpdate) ClearCounterFk() *CounterUpdate {
	cu.mutation.ClearCounterFk()
	return cu
}

// RemoveCounterFkIDs removes the counter_fk edge to CounterFormula by ids.
func (cu *CounterUpdate) RemoveCounterFkIDs(ids ...int) *CounterUpdate {
	cu.mutation.RemoveCounterFkIDs(ids...)
	return cu
}

// RemoveCounterFk removes counter_fk edges to CounterFormula.
func (cu *CounterUpdate) RemoveCounterFk(c ...*CounterFormula) *CounterUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCounterFkIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CounterUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CounterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CounterUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CounterUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CounterUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CounterUpdate) defaults() {
	if _, ok := cu.mutation.UpdateTime(); !ok {
		v := counter.UpdateDefaultUpdateTime()
		cu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CounterUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := counter.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (cu *CounterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   counter.Table,
			Columns: counter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: counter.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: counter.FieldUpdateTime,
		})
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: counter.FieldName,
		})
	}
	if value, ok := cu.mutation.ExternalId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: counter.FieldExternalId,
		})
	}
	if value, ok := cu.mutation.NetworkManagerSystem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: counter.FieldNetworkManagerSystem,
		})
	}
	if cu.mutation.CounterfamilyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   counter.CounterfamilyTable,
			Columns: []string{counter.CounterfamilyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterfamily.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CounterfamilyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   counter.CounterfamilyTable,
			Columns: []string{counter.CounterfamilyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterfamily.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.VendorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   counter.VendorTable,
			Columns: []string{counter.VendorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vendor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.VendorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   counter.VendorTable,
			Columns: []string{counter.VendorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vendor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CounterFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   counter.CounterFkTable,
			Columns: []string{counter.CounterFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterformula.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCounterFkIDs(); len(nodes) > 0 && !cu.mutation.CounterFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   counter.CounterFkTable,
			Columns: []string{counter.CounterFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterformula.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CounterFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   counter.CounterFkTable,
			Columns: []string{counter.CounterFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterformula.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{counter.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CounterUpdateOne is the builder for updating a single Counter entity.
type CounterUpdateOne struct {
	config
	hooks    []Hook
	mutation *CounterMutation
}

// SetName sets the name field.
func (cuo *CounterUpdateOne) SetName(s string) *CounterUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetExternalId sets the externalId field.
func (cuo *CounterUpdateOne) SetExternalId(s string) *CounterUpdateOne {
	cuo.mutation.SetExternalId(s)
	return cuo
}

// SetNetworkManagerSystem sets the networkManagerSystem field.
func (cuo *CounterUpdateOne) SetNetworkManagerSystem(s string) *CounterUpdateOne {
	cuo.mutation.SetNetworkManagerSystem(s)
	return cuo
}

// SetCounterfamilyID sets the counterfamily edge to CounterFamily by id.
func (cuo *CounterUpdateOne) SetCounterfamilyID(id int) *CounterUpdateOne {
	cuo.mutation.SetCounterfamilyID(id)
	return cuo
}

// SetNillableCounterfamilyID sets the counterfamily edge to CounterFamily by id if the given value is not nil.
func (cuo *CounterUpdateOne) SetNillableCounterfamilyID(id *int) *CounterUpdateOne {
	if id != nil {
		cuo = cuo.SetCounterfamilyID(*id)
	}
	return cuo
}

// SetCounterfamily sets the counterfamily edge to CounterFamily.
func (cuo *CounterUpdateOne) SetCounterfamily(c *CounterFamily) *CounterUpdateOne {
	return cuo.SetCounterfamilyID(c.ID)
}

// SetVendorID sets the vendor edge to Vendor by id.
func (cuo *CounterUpdateOne) SetVendorID(id int) *CounterUpdateOne {
	cuo.mutation.SetVendorID(id)
	return cuo
}

// SetNillableVendorID sets the vendor edge to Vendor by id if the given value is not nil.
func (cuo *CounterUpdateOne) SetNillableVendorID(id *int) *CounterUpdateOne {
	if id != nil {
		cuo = cuo.SetVendorID(*id)
	}
	return cuo
}

// SetVendor sets the vendor edge to Vendor.
func (cuo *CounterUpdateOne) SetVendor(v *Vendor) *CounterUpdateOne {
	return cuo.SetVendorID(v.ID)
}

// AddCounterFkIDs adds the counter_fk edge to CounterFormula by ids.
func (cuo *CounterUpdateOne) AddCounterFkIDs(ids ...int) *CounterUpdateOne {
	cuo.mutation.AddCounterFkIDs(ids...)
	return cuo
}

// AddCounterFk adds the counter_fk edges to CounterFormula.
func (cuo *CounterUpdateOne) AddCounterFk(c ...*CounterFormula) *CounterUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCounterFkIDs(ids...)
}

// Mutation returns the CounterMutation object of the builder.
func (cuo *CounterUpdateOne) Mutation() *CounterMutation {
	return cuo.mutation
}

// ClearCounterfamily clears the "counterfamily" edge to type CounterFamily.
func (cuo *CounterUpdateOne) ClearCounterfamily() *CounterUpdateOne {
	cuo.mutation.ClearCounterfamily()
	return cuo
}

// ClearVendor clears the "vendor" edge to type Vendor.
func (cuo *CounterUpdateOne) ClearVendor() *CounterUpdateOne {
	cuo.mutation.ClearVendor()
	return cuo
}

// ClearCounterFk clears all "counter_fk" edges to type CounterFormula.
func (cuo *CounterUpdateOne) ClearCounterFk() *CounterUpdateOne {
	cuo.mutation.ClearCounterFk()
	return cuo
}

// RemoveCounterFkIDs removes the counter_fk edge to CounterFormula by ids.
func (cuo *CounterUpdateOne) RemoveCounterFkIDs(ids ...int) *CounterUpdateOne {
	cuo.mutation.RemoveCounterFkIDs(ids...)
	return cuo
}

// RemoveCounterFk removes counter_fk edges to CounterFormula.
func (cuo *CounterUpdateOne) RemoveCounterFk(c ...*CounterFormula) *CounterUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCounterFkIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (cuo *CounterUpdateOne) Save(ctx context.Context) (*Counter, error) {
	var (
		err  error
		node *Counter
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CounterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CounterUpdateOne) SaveX(ctx context.Context) *Counter {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CounterUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CounterUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CounterUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdateTime(); !ok {
		v := counter.UpdateDefaultUpdateTime()
		cuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CounterUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := counter.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (cuo *CounterUpdateOne) sqlSave(ctx context.Context) (_node *Counter, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   counter.Table,
			Columns: counter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: counter.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Counter.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: counter.FieldUpdateTime,
		})
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: counter.FieldName,
		})
	}
	if value, ok := cuo.mutation.ExternalId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: counter.FieldExternalId,
		})
	}
	if value, ok := cuo.mutation.NetworkManagerSystem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: counter.FieldNetworkManagerSystem,
		})
	}
	if cuo.mutation.CounterfamilyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   counter.CounterfamilyTable,
			Columns: []string{counter.CounterfamilyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterfamily.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CounterfamilyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   counter.CounterfamilyTable,
			Columns: []string{counter.CounterfamilyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterfamily.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.VendorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   counter.VendorTable,
			Columns: []string{counter.VendorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vendor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.VendorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   counter.VendorTable,
			Columns: []string{counter.VendorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vendor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CounterFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   counter.CounterFkTable,
			Columns: []string{counter.CounterFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterformula.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCounterFkIDs(); len(nodes) > 0 && !cuo.mutation.CounterFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   counter.CounterFkTable,
			Columns: []string{counter.CounterFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterformula.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CounterFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   counter.CounterFkTable,
			Columns: []string{counter.CounterFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterformula.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Counter{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{counter.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
