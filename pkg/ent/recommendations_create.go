// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/recommendations"
	"github.com/facebookincubator/symphony/pkg/ent/recommendationscategory"
	"github.com/facebookincubator/symphony/pkg/ent/recommendationssources"
	"github.com/facebookincubator/symphony/pkg/ent/user"
	"github.com/facebookincubator/symphony/pkg/ent/vendor"
)

// RecommendationsCreate is the builder for creating a Recommendations entity.
type RecommendationsCreate struct {
	config
	mutation *RecommendationsMutation
	hooks    []Hook
}

// SetCreateTime sets the create_time field.
func (rc *RecommendationsCreate) SetCreateTime(t time.Time) *RecommendationsCreate {
	rc.mutation.SetCreateTime(t)
	return rc
}

// SetNillableCreateTime sets the create_time field if the given value is not nil.
func (rc *RecommendationsCreate) SetNillableCreateTime(t *time.Time) *RecommendationsCreate {
	if t != nil {
		rc.SetCreateTime(*t)
	}
	return rc
}

// SetUpdateTime sets the update_time field.
func (rc *RecommendationsCreate) SetUpdateTime(t time.Time) *RecommendationsCreate {
	rc.mutation.SetUpdateTime(t)
	return rc
}

// SetNillableUpdateTime sets the update_time field if the given value is not nil.
func (rc *RecommendationsCreate) SetNillableUpdateTime(t *time.Time) *RecommendationsCreate {
	if t != nil {
		rc.SetUpdateTime(*t)
	}
	return rc
}

// SetExternalId sets the externalId field.
func (rc *RecommendationsCreate) SetExternalId(s string) *RecommendationsCreate {
	rc.mutation.SetExternalId(s)
	return rc
}

// SetResource sets the resource field.
func (rc *RecommendationsCreate) SetResource(s string) *RecommendationsCreate {
	rc.mutation.SetResource(s)
	return rc
}

// SetAlarmType sets the alarmType field.
func (rc *RecommendationsCreate) SetAlarmType(s string) *RecommendationsCreate {
	rc.mutation.SetAlarmType(s)
	return rc
}

// SetShortDescription sets the shortDescription field.
func (rc *RecommendationsCreate) SetShortDescription(s string) *RecommendationsCreate {
	rc.mutation.SetShortDescription(s)
	return rc
}

// SetLongDescription sets the longDescription field.
func (rc *RecommendationsCreate) SetLongDescription(s string) *RecommendationsCreate {
	rc.mutation.SetLongDescription(s)
	return rc
}

// SetCommand sets the command field.
func (rc *RecommendationsCreate) SetCommand(s string) *RecommendationsCreate {
	rc.mutation.SetCommand(s)
	return rc
}

// SetNillableCommand sets the command field if the given value is not nil.
func (rc *RecommendationsCreate) SetNillableCommand(s *string) *RecommendationsCreate {
	if s != nil {
		rc.SetCommand(*s)
	}
	return rc
}

// SetPriority sets the priority field.
func (rc *RecommendationsCreate) SetPriority(i int) *RecommendationsCreate {
	rc.mutation.SetPriority(i)
	return rc
}

// SetStatus sets the status field.
func (rc *RecommendationsCreate) SetStatus(b bool) *RecommendationsCreate {
	rc.mutation.SetStatus(b)
	return rc
}

// SetUsed sets the used field.
func (rc *RecommendationsCreate) SetUsed(i int) *RecommendationsCreate {
	rc.mutation.SetUsed(i)
	return rc
}

// SetNillableUsed sets the used field if the given value is not nil.
func (rc *RecommendationsCreate) SetNillableUsed(i *int) *RecommendationsCreate {
	if i != nil {
		rc.SetUsed(*i)
	}
	return rc
}

// SetRunbook sets the runbook field.
func (rc *RecommendationsCreate) SetRunbook(s string) *RecommendationsCreate {
	rc.mutation.SetRunbook(s)
	return rc
}

// SetNillableRunbook sets the runbook field if the given value is not nil.
func (rc *RecommendationsCreate) SetNillableRunbook(s *string) *RecommendationsCreate {
	if s != nil {
		rc.SetRunbook(*s)
	}
	return rc
}

// SetRecomendationSourcesID sets the recomendation_sources edge to RecommendationsSources by id.
func (rc *RecommendationsCreate) SetRecomendationSourcesID(id int) *RecommendationsCreate {
	rc.mutation.SetRecomendationSourcesID(id)
	return rc
}

// SetNillableRecomendationSourcesID sets the recomendation_sources edge to RecommendationsSources by id if the given value is not nil.
func (rc *RecommendationsCreate) SetNillableRecomendationSourcesID(id *int) *RecommendationsCreate {
	if id != nil {
		rc = rc.SetRecomendationSourcesID(*id)
	}
	return rc
}

// SetRecomendationSources sets the recomendation_sources edge to RecommendationsSources.
func (rc *RecommendationsCreate) SetRecomendationSources(r *RecommendationsSources) *RecommendationsCreate {
	return rc.SetRecomendationSourcesID(r.ID)
}

// SetRecomendationCategoryID sets the recomendation_category edge to RecommendationsCategory by id.
func (rc *RecommendationsCreate) SetRecomendationCategoryID(id int) *RecommendationsCreate {
	rc.mutation.SetRecomendationCategoryID(id)
	return rc
}

// SetNillableRecomendationCategoryID sets the recomendation_category edge to RecommendationsCategory by id if the given value is not nil.
func (rc *RecommendationsCreate) SetNillableRecomendationCategoryID(id *int) *RecommendationsCreate {
	if id != nil {
		rc = rc.SetRecomendationCategoryID(*id)
	}
	return rc
}

// SetRecomendationCategory sets the recomendation_category edge to RecommendationsCategory.
func (rc *RecommendationsCreate) SetRecomendationCategory(r *RecommendationsCategory) *RecommendationsCreate {
	return rc.SetRecomendationCategoryID(r.ID)
}

// SetUserCreateID sets the UserCreate edge to User by id.
func (rc *RecommendationsCreate) SetUserCreateID(id int) *RecommendationsCreate {
	rc.mutation.SetUserCreateID(id)
	return rc
}

// SetNillableUserCreateID sets the UserCreate edge to User by id if the given value is not nil.
func (rc *RecommendationsCreate) SetNillableUserCreateID(id *int) *RecommendationsCreate {
	if id != nil {
		rc = rc.SetUserCreateID(*id)
	}
	return rc
}

// SetUserCreate sets the UserCreate edge to User.
func (rc *RecommendationsCreate) SetUserCreate(u *User) *RecommendationsCreate {
	return rc.SetUserCreateID(u.ID)
}

// SetUserApprobedID sets the UserApprobed edge to User by id.
func (rc *RecommendationsCreate) SetUserApprobedID(id int) *RecommendationsCreate {
	rc.mutation.SetUserApprobedID(id)
	return rc
}

// SetNillableUserApprobedID sets the UserApprobed edge to User by id if the given value is not nil.
func (rc *RecommendationsCreate) SetNillableUserApprobedID(id *int) *RecommendationsCreate {
	if id != nil {
		rc = rc.SetUserApprobedID(*id)
	}
	return rc
}

// SetUserApprobed sets the UserApprobed edge to User.
func (rc *RecommendationsCreate) SetUserApprobed(u *User) *RecommendationsCreate {
	return rc.SetUserApprobedID(u.ID)
}

// SetVendorsRecomendationsID sets the vendors_recomendations edge to Vendor by id.
func (rc *RecommendationsCreate) SetVendorsRecomendationsID(id int) *RecommendationsCreate {
	rc.mutation.SetVendorsRecomendationsID(id)
	return rc
}

// SetNillableVendorsRecomendationsID sets the vendors_recomendations edge to Vendor by id if the given value is not nil.
func (rc *RecommendationsCreate) SetNillableVendorsRecomendationsID(id *int) *RecommendationsCreate {
	if id != nil {
		rc = rc.SetVendorsRecomendationsID(*id)
	}
	return rc
}

// SetVendorsRecomendations sets the vendors_recomendations edge to Vendor.
func (rc *RecommendationsCreate) SetVendorsRecomendations(v *Vendor) *RecommendationsCreate {
	return rc.SetVendorsRecomendationsID(v.ID)
}

// Mutation returns the RecommendationsMutation object of the builder.
func (rc *RecommendationsCreate) Mutation() *RecommendationsMutation {
	return rc.mutation
}

// Save creates the Recommendations in the database.
func (rc *RecommendationsCreate) Save(ctx context.Context) (*Recommendations, error) {
	var (
		err  error
		node *Recommendations
	)
	rc.defaults()
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecommendationsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			node, err = rc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RecommendationsCreate) SaveX(ctx context.Context) *Recommendations {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (rc *RecommendationsCreate) defaults() {
	if _, ok := rc.mutation.CreateTime(); !ok {
		v := recommendations.DefaultCreateTime()
		rc.mutation.SetCreateTime(v)
	}
	if _, ok := rc.mutation.UpdateTime(); !ok {
		v := recommendations.DefaultUpdateTime()
		rc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RecommendationsCreate) check() error {
	if _, ok := rc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := rc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := rc.mutation.ExternalId(); !ok {
		return &ValidationError{Name: "externalId", err: errors.New("ent: missing required field \"externalId\"")}
	}
	if _, ok := rc.mutation.Resource(); !ok {
		return &ValidationError{Name: "resource", err: errors.New("ent: missing required field \"resource\"")}
	}
	if _, ok := rc.mutation.AlarmType(); !ok {
		return &ValidationError{Name: "alarmType", err: errors.New("ent: missing required field \"alarmType\"")}
	}
	if _, ok := rc.mutation.ShortDescription(); !ok {
		return &ValidationError{Name: "shortDescription", err: errors.New("ent: missing required field \"shortDescription\"")}
	}
	if _, ok := rc.mutation.LongDescription(); !ok {
		return &ValidationError{Name: "longDescription", err: errors.New("ent: missing required field \"longDescription\"")}
	}
	if _, ok := rc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New("ent: missing required field \"priority\"")}
	}
	if _, ok := rc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	return nil
}

func (rc *RecommendationsCreate) sqlSave(ctx context.Context) (*Recommendations, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rc *RecommendationsCreate) createSpec() (*Recommendations, *sqlgraph.CreateSpec) {
	var (
		_node = &Recommendations{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: recommendations.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: recommendations.FieldID,
			},
		}
	)
	if value, ok := rc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: recommendations.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := rc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: recommendations.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := rc.mutation.ExternalId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recommendations.FieldExternalId,
		})
		_node.ExternalId = value
	}
	if value, ok := rc.mutation.Resource(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recommendations.FieldResource,
		})
		_node.Resource = value
	}
	if value, ok := rc.mutation.AlarmType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recommendations.FieldAlarmType,
		})
		_node.AlarmType = value
	}
	if value, ok := rc.mutation.ShortDescription(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recommendations.FieldShortDescription,
		})
		_node.ShortDescription = value
	}
	if value, ok := rc.mutation.LongDescription(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recommendations.FieldLongDescription,
		})
		_node.LongDescription = value
	}
	if value, ok := rc.mutation.Command(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recommendations.FieldCommand,
		})
		_node.Command = &value
	}
	if value, ok := rc.mutation.Priority(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recommendations.FieldPriority,
		})
		_node.Priority = value
	}
	if value, ok := rc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: recommendations.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := rc.mutation.Used(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recommendations.FieldUsed,
		})
		_node.Used = &value
	}
	if value, ok := rc.mutation.Runbook(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recommendations.FieldRunbook,
		})
		_node.Runbook = &value
	}
	if nodes := rc.mutation.RecomendationSourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendations.RecomendationSourcesTable,
			Columns: []string{recommendations.RecomendationSourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recommendationssources.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.RecomendationCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendations.RecomendationCategoryTable,
			Columns: []string{recommendations.RecomendationCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recommendationscategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.UserCreateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendations.UserCreateTable,
			Columns: []string{recommendations.UserCreateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.UserApprobedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendations.UserApprobedTable,
			Columns: []string{recommendations.UserApprobedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.VendorsRecomendationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendations.VendorsRecomendationsTable,
			Columns: []string{recommendations.VendorsRecomendationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vendor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RecommendationsCreateBulk is the builder for creating a bulk of Recommendations entities.
type RecommendationsCreateBulk struct {
	config
	builders []*RecommendationsCreate
}

// Save creates the Recommendations entities in the database.
func (rcb *RecommendationsCreateBulk) Save(ctx context.Context) ([]*Recommendations, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Recommendations, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RecommendationsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (rcb *RecommendationsCreateBulk) SaveX(ctx context.Context) []*Recommendations {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
