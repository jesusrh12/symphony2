// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/blockinstance"
	"github.com/facebookincubator/symphony/pkg/ent/flow"
	"github.com/facebookincubator/symphony/pkg/ent/flowexecutiontemplate"
	"github.com/facebookincubator/symphony/pkg/ent/flowinstance"
	"github.com/facebookincubator/symphony/pkg/flowengine/flowschema"
)

// FlowInstance is the model entity for the FlowInstance schema.
type FlowInstance struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Status holds the value of the "status" field.
	Status flowinstance.Status `json:"status,omitempty"`
	// OutputParams holds the value of the "output_params" field.
	OutputParams []*flowschema.VariableValue `json:"output_params,omitempty"`
	// IncompletionReason holds the value of the "incompletion_reason" field.
	IncompletionReason string `json:"incompletion_reason,omitempty"`
	// BssCode holds the value of the "bss_code" field.
	BssCode string `json:"bss_code,omitempty"`
	// ServiceInstanceCode holds the value of the "service_instance_code" field.
	ServiceInstanceCode string `json:"service_instance_code,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate *time.Time `json:"end_date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FlowInstanceQuery when eager-loading is set.
	Edges                           FlowInstanceEdges `json:"edges"`
	block_instance_subflow_instance *int
	flow_instance_flow              *int
	flow_instance_template          *int
}

// FlowInstanceEdges holds the relations/edges for other nodes in the graph.
type FlowInstanceEdges struct {
	// Flow holds the value of the flow edge.
	Flow *Flow
	// Template holds the value of the template edge.
	Template *FlowExecutionTemplate
	// Blocks holds the value of the blocks edge.
	Blocks []*BlockInstance
	// ParentSubflowBlock holds the value of the parent_subflow_block edge.
	ParentSubflowBlock *BlockInstance
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// FlowOrErr returns the Flow value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FlowInstanceEdges) FlowOrErr() (*Flow, error) {
	if e.loadedTypes[0] {
		if e.Flow == nil {
			// The edge flow was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: flow.Label}
		}
		return e.Flow, nil
	}
	return nil, &NotLoadedError{edge: "flow"}
}

// TemplateOrErr returns the Template value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FlowInstanceEdges) TemplateOrErr() (*FlowExecutionTemplate, error) {
	if e.loadedTypes[1] {
		if e.Template == nil {
			// The edge template was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: flowexecutiontemplate.Label}
		}
		return e.Template, nil
	}
	return nil, &NotLoadedError{edge: "template"}
}

// BlocksOrErr returns the Blocks value or an error if the edge
// was not loaded in eager-loading.
func (e FlowInstanceEdges) BlocksOrErr() ([]*BlockInstance, error) {
	if e.loadedTypes[2] {
		return e.Blocks, nil
	}
	return nil, &NotLoadedError{edge: "blocks"}
}

// ParentSubflowBlockOrErr returns the ParentSubflowBlock value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FlowInstanceEdges) ParentSubflowBlockOrErr() (*BlockInstance, error) {
	if e.loadedTypes[3] {
		if e.ParentSubflowBlock == nil {
			// The edge parent_subflow_block was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: blockinstance.Label}
		}
		return e.ParentSubflowBlock, nil
	}
	return nil, &NotLoadedError{edge: "parent_subflow_block"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FlowInstance) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // status
		&[]byte{},         // output_params
		&sql.NullString{}, // incompletion_reason
		&sql.NullString{}, // bss_code
		&sql.NullString{}, // service_instance_code
		&sql.NullTime{},   // start_date
		&sql.NullTime{},   // end_date
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*FlowInstance) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // block_instance_subflow_instance
		&sql.NullInt64{}, // flow_instance_flow
		&sql.NullInt64{}, // flow_instance_template
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FlowInstance fields.
func (fi *FlowInstance) assignValues(values ...interface{}) error {
	if m, n := len(values), len(flowinstance.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	fi.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		fi.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		fi.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[2])
	} else if value.Valid {
		fi.Status = flowinstance.Status(value.String)
	}

	if value, ok := values[3].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field output_params", values[3])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &fi.OutputParams); err != nil {
			return fmt.Errorf("unmarshal field output_params: %v", err)
		}
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field incompletion_reason", values[4])
	} else if value.Valid {
		fi.IncompletionReason = value.String
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field bss_code", values[5])
	} else if value.Valid {
		fi.BssCode = value.String
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field service_instance_code", values[6])
	} else if value.Valid {
		fi.ServiceInstanceCode = value.String
	}
	if value, ok := values[7].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field start_date", values[7])
	} else if value.Valid {
		fi.StartDate = value.Time
	}
	if value, ok := values[8].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field end_date", values[8])
	} else if value.Valid {
		fi.EndDate = new(time.Time)
		*fi.EndDate = value.Time
	}
	values = values[9:]
	if len(values) == len(flowinstance.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field block_instance_subflow_instance", value)
		} else if value.Valid {
			fi.block_instance_subflow_instance = new(int)
			*fi.block_instance_subflow_instance = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field flow_instance_flow", value)
		} else if value.Valid {
			fi.flow_instance_flow = new(int)
			*fi.flow_instance_flow = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field flow_instance_template", value)
		} else if value.Valid {
			fi.flow_instance_template = new(int)
			*fi.flow_instance_template = int(value.Int64)
		}
	}
	return nil
}

// QueryFlow queries the flow edge of the FlowInstance.
func (fi *FlowInstance) QueryFlow() *FlowQuery {
	return (&FlowInstanceClient{config: fi.config}).QueryFlow(fi)
}

// QueryTemplate queries the template edge of the FlowInstance.
func (fi *FlowInstance) QueryTemplate() *FlowExecutionTemplateQuery {
	return (&FlowInstanceClient{config: fi.config}).QueryTemplate(fi)
}

// QueryBlocks queries the blocks edge of the FlowInstance.
func (fi *FlowInstance) QueryBlocks() *BlockInstanceQuery {
	return (&FlowInstanceClient{config: fi.config}).QueryBlocks(fi)
}

// QueryParentSubflowBlock queries the parent_subflow_block edge of the FlowInstance.
func (fi *FlowInstance) QueryParentSubflowBlock() *BlockInstanceQuery {
	return (&FlowInstanceClient{config: fi.config}).QueryParentSubflowBlock(fi)
}

// Update returns a builder for updating this FlowInstance.
// Note that, you need to call FlowInstance.Unwrap() before calling this method, if this FlowInstance
// was returned from a transaction, and the transaction was committed or rolled back.
func (fi *FlowInstance) Update() *FlowInstanceUpdateOne {
	return (&FlowInstanceClient{config: fi.config}).UpdateOne(fi)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (fi *FlowInstance) Unwrap() *FlowInstance {
	tx, ok := fi.config.driver.(*txDriver)
	if !ok {
		panic("ent: FlowInstance is not a transactional entity")
	}
	fi.config.driver = tx.drv
	return fi
}

// String implements the fmt.Stringer.
func (fi *FlowInstance) String() string {
	var builder strings.Builder
	builder.WriteString("FlowInstance(")
	builder.WriteString(fmt.Sprintf("id=%v", fi.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(fi.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(fi.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", fi.Status))
	builder.WriteString(", output_params=")
	builder.WriteString(fmt.Sprintf("%v", fi.OutputParams))
	builder.WriteString(", incompletion_reason=")
	builder.WriteString(fi.IncompletionReason)
	builder.WriteString(", bss_code=")
	builder.WriteString(fi.BssCode)
	builder.WriteString(", service_instance_code=")
	builder.WriteString(fi.ServiceInstanceCode)
	builder.WriteString(", start_date=")
	builder.WriteString(fi.StartDate.Format(time.ANSIC))
	if v := fi.EndDate; v != nil {
		builder.WriteString(", end_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// FlowInstances is a parsable slice of FlowInstance.
type FlowInstances []*FlowInstance

func (fi FlowInstances) config(cfg config) {
	for _i := range fi {
		fi[_i].config = cfg
	}
}
