// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/parametercatalog"
)

// ParameterCatalog is the model entity for the ParameterCatalog schema.
type ParameterCatalog struct {
	config `gqlgen:"-" json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Index holds the value of the "index" field.
	Index int `json:"index,omitempty"`
	// Disabled holds the value of the "disabled" field.
	Disabled bool `json:"disabled,omitempty" gqlgen:"isDisabled"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ParameterCatalogQuery when eager-loading is set.
	Edges ParameterCatalogEdges `json:"edges"`
}

// ParameterCatalogEdges holds the relations/edges for other nodes in the graph.
type ParameterCatalogEdges struct {
	// PropertyCategories holds the value of the property_categories edge.
	PropertyCategories []*PropertyCategory
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PropertyCategoriesOrErr returns the PropertyCategories value or an error if the edge
// was not loaded in eager-loading.
func (e ParameterCatalogEdges) PropertyCategoriesOrErr() ([]*PropertyCategory, error) {
	if e.loadedTypes[0] {
		return e.PropertyCategories, nil
	}
	return nil, &NotLoadedError{edge: "property_categories"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ParameterCatalog) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // name
		&sql.NullInt64{},  // index
		&sql.NullBool{},   // disabled
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ParameterCatalog fields.
func (pc *ParameterCatalog) assignValues(values ...interface{}) error {
	if m, n := len(values), len(parametercatalog.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pc.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		pc.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		pc.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[2])
	} else if value.Valid {
		pc.Name = value.String
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field index", values[3])
	} else if value.Valid {
		pc.Index = int(value.Int64)
	}
	if value, ok := values[4].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field disabled", values[4])
	} else if value.Valid {
		pc.Disabled = value.Bool
	}
	return nil
}

// QueryPropertyCategories queries the property_categories edge of the ParameterCatalog.
func (pc *ParameterCatalog) QueryPropertyCategories() *PropertyCategoryQuery {
	return (&ParameterCatalogClient{config: pc.config}).QueryPropertyCategories(pc)
}

// Update returns a builder for updating this ParameterCatalog.
// Note that, you need to call ParameterCatalog.Unwrap() before calling this method, if this ParameterCatalog
// was returned from a transaction, and the transaction was committed or rolled back.
func (pc *ParameterCatalog) Update() *ParameterCatalogUpdateOne {
	return (&ParameterCatalogClient{config: pc.config}).UpdateOne(pc)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pc *ParameterCatalog) Unwrap() *ParameterCatalog {
	tx, ok := pc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ParameterCatalog is not a transactional entity")
	}
	pc.config.driver = tx.drv
	return pc
}

// String implements the fmt.Stringer.
func (pc *ParameterCatalog) String() string {
	var builder strings.Builder
	builder.WriteString("ParameterCatalog(")
	builder.WriteString(fmt.Sprintf("id=%v", pc.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(pc.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(pc.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(pc.Name)
	builder.WriteString(", index=")
	builder.WriteString(fmt.Sprintf("%v", pc.Index))
	builder.WriteString(", disabled=")
	builder.WriteString(fmt.Sprintf("%v", pc.Disabled))
	builder.WriteByte(')')
	return builder.String()
}

// ParameterCatalogs is a parsable slice of ParameterCatalog.
type ParameterCatalogs []*ParameterCatalog

func (pc ParameterCatalogs) config(cfg config) {
	for _i := range pc {
		pc[_i].config = cfg
	}
}
