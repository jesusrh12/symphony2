// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/kpi"
	"github.com/facebookincubator/symphony/pkg/ent/kpicategory"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
)

// KpiCategoryUpdate is the builder for updating KpiCategory entities.
type KpiCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *KpiCategoryMutation
}

// Where adds a new predicate for the builder.
func (kcu *KpiCategoryUpdate) Where(ps ...predicate.KpiCategory) *KpiCategoryUpdate {
	kcu.mutation.predicates = append(kcu.mutation.predicates, ps...)
	return kcu
}

// SetName sets the name field.
func (kcu *KpiCategoryUpdate) SetName(s string) *KpiCategoryUpdate {
	kcu.mutation.SetName(s)
	return kcu
}

// AddKpicategoryIDs adds the kpicategory edge to Kpi by ids.
func (kcu *KpiCategoryUpdate) AddKpicategoryIDs(ids ...int) *KpiCategoryUpdate {
	kcu.mutation.AddKpicategoryIDs(ids...)
	return kcu
}

// AddKpicategory adds the kpicategory edges to Kpi.
func (kcu *KpiCategoryUpdate) AddKpicategory(k ...*Kpi) *KpiCategoryUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcu.AddKpicategoryIDs(ids...)
}

// Mutation returns the KpiCategoryMutation object of the builder.
func (kcu *KpiCategoryUpdate) Mutation() *KpiCategoryMutation {
	return kcu.mutation
}

// ClearKpicategory clears all "kpicategory" edges to type Kpi.
func (kcu *KpiCategoryUpdate) ClearKpicategory() *KpiCategoryUpdate {
	kcu.mutation.ClearKpicategory()
	return kcu
}

// RemoveKpicategoryIDs removes the kpicategory edge to Kpi by ids.
func (kcu *KpiCategoryUpdate) RemoveKpicategoryIDs(ids ...int) *KpiCategoryUpdate {
	kcu.mutation.RemoveKpicategoryIDs(ids...)
	return kcu
}

// RemoveKpicategory removes kpicategory edges to Kpi.
func (kcu *KpiCategoryUpdate) RemoveKpicategory(k ...*Kpi) *KpiCategoryUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcu.RemoveKpicategoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (kcu *KpiCategoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	kcu.defaults()
	if len(kcu.hooks) == 0 {
		if err = kcu.check(); err != nil {
			return 0, err
		}
		affected, err = kcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KpiCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = kcu.check(); err != nil {
				return 0, err
			}
			kcu.mutation = mutation
			affected, err = kcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(kcu.hooks) - 1; i >= 0; i-- {
			mut = kcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (kcu *KpiCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := kcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (kcu *KpiCategoryUpdate) Exec(ctx context.Context) error {
	_, err := kcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcu *KpiCategoryUpdate) ExecX(ctx context.Context) {
	if err := kcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kcu *KpiCategoryUpdate) defaults() {
	if _, ok := kcu.mutation.UpdateTime(); !ok {
		v := kpicategory.UpdateDefaultUpdateTime()
		kcu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kcu *KpiCategoryUpdate) check() error {
	if v, ok := kcu.mutation.Name(); ok {
		if err := kpicategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (kcu *KpiCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kpicategory.Table,
			Columns: kpicategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kpicategory.FieldID,
			},
		},
	}
	if ps := kcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kcu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kpicategory.FieldUpdateTime,
		})
	}
	if value, ok := kcu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kpicategory.FieldName,
		})
	}
	if kcu.mutation.KpicategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kpicategory.KpicategoryTable,
			Columns: []string{kpicategory.KpicategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kpi.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcu.mutation.RemovedKpicategoryIDs(); len(nodes) > 0 && !kcu.mutation.KpicategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kpicategory.KpicategoryTable,
			Columns: []string{kpicategory.KpicategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kpi.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcu.mutation.KpicategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kpicategory.KpicategoryTable,
			Columns: []string{kpicategory.KpicategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kpi.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, kcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kpicategory.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// KpiCategoryUpdateOne is the builder for updating a single KpiCategory entity.
type KpiCategoryUpdateOne struct {
	config
	hooks    []Hook
	mutation *KpiCategoryMutation
}

// SetName sets the name field.
func (kcuo *KpiCategoryUpdateOne) SetName(s string) *KpiCategoryUpdateOne {
	kcuo.mutation.SetName(s)
	return kcuo
}

// AddKpicategoryIDs adds the kpicategory edge to Kpi by ids.
func (kcuo *KpiCategoryUpdateOne) AddKpicategoryIDs(ids ...int) *KpiCategoryUpdateOne {
	kcuo.mutation.AddKpicategoryIDs(ids...)
	return kcuo
}

// AddKpicategory adds the kpicategory edges to Kpi.
func (kcuo *KpiCategoryUpdateOne) AddKpicategory(k ...*Kpi) *KpiCategoryUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcuo.AddKpicategoryIDs(ids...)
}

// Mutation returns the KpiCategoryMutation object of the builder.
func (kcuo *KpiCategoryUpdateOne) Mutation() *KpiCategoryMutation {
	return kcuo.mutation
}

// ClearKpicategory clears all "kpicategory" edges to type Kpi.
func (kcuo *KpiCategoryUpdateOne) ClearKpicategory() *KpiCategoryUpdateOne {
	kcuo.mutation.ClearKpicategory()
	return kcuo
}

// RemoveKpicategoryIDs removes the kpicategory edge to Kpi by ids.
func (kcuo *KpiCategoryUpdateOne) RemoveKpicategoryIDs(ids ...int) *KpiCategoryUpdateOne {
	kcuo.mutation.RemoveKpicategoryIDs(ids...)
	return kcuo
}

// RemoveKpicategory removes kpicategory edges to Kpi.
func (kcuo *KpiCategoryUpdateOne) RemoveKpicategory(k ...*Kpi) *KpiCategoryUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kcuo.RemoveKpicategoryIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (kcuo *KpiCategoryUpdateOne) Save(ctx context.Context) (*KpiCategory, error) {
	var (
		err  error
		node *KpiCategory
	)
	kcuo.defaults()
	if len(kcuo.hooks) == 0 {
		if err = kcuo.check(); err != nil {
			return nil, err
		}
		node, err = kcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KpiCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = kcuo.check(); err != nil {
				return nil, err
			}
			kcuo.mutation = mutation
			node, err = kcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kcuo.hooks) - 1; i >= 0; i-- {
			mut = kcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (kcuo *KpiCategoryUpdateOne) SaveX(ctx context.Context) *KpiCategory {
	node, err := kcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kcuo *KpiCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := kcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcuo *KpiCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := kcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kcuo *KpiCategoryUpdateOne) defaults() {
	if _, ok := kcuo.mutation.UpdateTime(); !ok {
		v := kpicategory.UpdateDefaultUpdateTime()
		kcuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kcuo *KpiCategoryUpdateOne) check() error {
	if v, ok := kcuo.mutation.Name(); ok {
		if err := kpicategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (kcuo *KpiCategoryUpdateOne) sqlSave(ctx context.Context) (_node *KpiCategory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kpicategory.Table,
			Columns: kpicategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kpicategory.FieldID,
			},
		},
	}
	id, ok := kcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing KpiCategory.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := kcuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kpicategory.FieldUpdateTime,
		})
	}
	if value, ok := kcuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kpicategory.FieldName,
		})
	}
	if kcuo.mutation.KpicategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kpicategory.KpicategoryTable,
			Columns: []string{kpicategory.KpicategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kpi.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcuo.mutation.RemovedKpicategoryIDs(); len(nodes) > 0 && !kcuo.mutation.KpicategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kpicategory.KpicategoryTable,
			Columns: []string{kpicategory.KpicategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kpi.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kcuo.mutation.KpicategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kpicategory.KpicategoryTable,
			Columns: []string{kpicategory.KpicategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kpi.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &KpiCategory{config: kcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, kcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kpicategory.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
