// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/domain"
	"github.com/facebookincubator/symphony/pkg/ent/kpi"
	"github.com/facebookincubator/symphony/pkg/ent/kpicategory"
	"github.com/facebookincubator/symphony/pkg/ent/threshold"
)

// Kpi is the model entity for the Kpi schema.
type Kpi struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Status holds the value of the "status" field.
	Status bool `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the KpiQuery when eager-loading is set.
	Edges                    KpiEdges `json:"edges"`
	domain_kpidomain         *int
	kpi_category_kpicategory *int
}

// KpiEdges holds the relations/edges for other nodes in the graph.
type KpiEdges struct {
	// Domain holds the value of the domain edge.
	Domain *Domain
	// KpiCategory holds the value of the KpiCategory edge.
	KpiCategory *KpiCategory
	// Formulakpi holds the value of the formulakpi edge.
	Formulakpi []*Formula
	// Thresholdkpi holds the value of the thresholdkpi edge.
	Thresholdkpi *Threshold
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// DomainOrErr returns the Domain value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KpiEdges) DomainOrErr() (*Domain, error) {
	if e.loadedTypes[0] {
		if e.Domain == nil {
			// The edge domain was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: domain.Label}
		}
		return e.Domain, nil
	}
	return nil, &NotLoadedError{edge: "domain"}
}

// KpiCategoryOrErr returns the KpiCategory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KpiEdges) KpiCategoryOrErr() (*KpiCategory, error) {
	if e.loadedTypes[1] {
		if e.KpiCategory == nil {
			// The edge KpiCategory was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: kpicategory.Label}
		}
		return e.KpiCategory, nil
	}
	return nil, &NotLoadedError{edge: "KpiCategory"}
}

// FormulakpiOrErr returns the Formulakpi value or an error if the edge
// was not loaded in eager-loading.
func (e KpiEdges) FormulakpiOrErr() ([]*Formula, error) {
	if e.loadedTypes[2] {
		return e.Formulakpi, nil
	}
	return nil, &NotLoadedError{edge: "formulakpi"}
}

// ThresholdkpiOrErr returns the Thresholdkpi value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KpiEdges) ThresholdkpiOrErr() (*Threshold, error) {
	if e.loadedTypes[3] {
		if e.Thresholdkpi == nil {
			// The edge thresholdkpi was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: threshold.Label}
		}
		return e.Thresholdkpi, nil
	}
	return nil, &NotLoadedError{edge: "thresholdkpi"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Kpi) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // name
		&sql.NullString{}, // description
		&sql.NullBool{},   // status
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Kpi) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // domain_kpidomain
		&sql.NullInt64{}, // kpi_category_kpicategory
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Kpi fields.
func (k *Kpi) assignValues(values ...interface{}) error {
	if m, n := len(values), len(kpi.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	k.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		k.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		k.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[2])
	} else if value.Valid {
		k.Name = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field description", values[3])
	} else if value.Valid {
		k.Description = value.String
	}
	if value, ok := values[4].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[4])
	} else if value.Valid {
		k.Status = value.Bool
	}
	values = values[5:]
	if len(values) == len(kpi.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field domain_kpidomain", value)
		} else if value.Valid {
			k.domain_kpidomain = new(int)
			*k.domain_kpidomain = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field kpi_category_kpicategory", value)
		} else if value.Valid {
			k.kpi_category_kpicategory = new(int)
			*k.kpi_category_kpicategory = int(value.Int64)
		}
	}
	return nil
}

// QueryDomain queries the domain edge of the Kpi.
func (k *Kpi) QueryDomain() *DomainQuery {
	return (&KpiClient{config: k.config}).QueryDomain(k)
}

// QueryKpiCategory queries the KpiCategory edge of the Kpi.
func (k *Kpi) QueryKpiCategory() *KpiCategoryQuery {
	return (&KpiClient{config: k.config}).QueryKpiCategory(k)
}

// QueryFormulakpi queries the formulakpi edge of the Kpi.
func (k *Kpi) QueryFormulakpi() *FormulaQuery {
	return (&KpiClient{config: k.config}).QueryFormulakpi(k)
}

// QueryThresholdkpi queries the thresholdkpi edge of the Kpi.
func (k *Kpi) QueryThresholdkpi() *ThresholdQuery {
	return (&KpiClient{config: k.config}).QueryThresholdkpi(k)
}

// Update returns a builder for updating this Kpi.
// Note that, you need to call Kpi.Unwrap() before calling this method, if this Kpi
// was returned from a transaction, and the transaction was committed or rolled back.
func (k *Kpi) Update() *KpiUpdateOne {
	return (&KpiClient{config: k.config}).UpdateOne(k)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (k *Kpi) Unwrap() *Kpi {
	tx, ok := k.config.driver.(*txDriver)
	if !ok {
		panic("ent: Kpi is not a transactional entity")
	}
	k.config.driver = tx.drv
	return k
}

// String implements the fmt.Stringer.
func (k *Kpi) String() string {
	var builder strings.Builder
	builder.WriteString("Kpi(")
	builder.WriteString(fmt.Sprintf("id=%v", k.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(k.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(k.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(k.Name)
	builder.WriteString(", description=")
	builder.WriteString(k.Description)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", k.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Kpis is a parsable slice of Kpi.
type Kpis []*Kpi

func (k Kpis) config(cfg config) {
	for _i := range k {
		k[_i].config = cfg
	}
}
