// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/counter"
	"github.com/facebookincubator/symphony/pkg/ent/recommendations"
	"github.com/facebookincubator/symphony/pkg/ent/vendor"
)

// VendorCreate is the builder for creating a Vendor entity.
type VendorCreate struct {
	config
	mutation *VendorMutation
	hooks    []Hook
}

// SetCreateTime sets the create_time field.
func (vc *VendorCreate) SetCreateTime(t time.Time) *VendorCreate {
	vc.mutation.SetCreateTime(t)
	return vc
}

// SetNillableCreateTime sets the create_time field if the given value is not nil.
func (vc *VendorCreate) SetNillableCreateTime(t *time.Time) *VendorCreate {
	if t != nil {
		vc.SetCreateTime(*t)
	}
	return vc
}

// SetUpdateTime sets the update_time field.
func (vc *VendorCreate) SetUpdateTime(t time.Time) *VendorCreate {
	vc.mutation.SetUpdateTime(t)
	return vc
}

// SetNillableUpdateTime sets the update_time field if the given value is not nil.
func (vc *VendorCreate) SetNillableUpdateTime(t *time.Time) *VendorCreate {
	if t != nil {
		vc.SetUpdateTime(*t)
	}
	return vc
}

// SetName sets the name field.
func (vc *VendorCreate) SetName(s string) *VendorCreate {
	vc.mutation.SetName(s)
	return vc
}

// AddVendorFkIDs adds the vendor_fk edge to Counter by ids.
func (vc *VendorCreate) AddVendorFkIDs(ids ...int) *VendorCreate {
	vc.mutation.AddVendorFkIDs(ids...)
	return vc
}

// AddVendorFk adds the vendor_fk edges to Counter.
func (vc *VendorCreate) AddVendorFk(c ...*Counter) *VendorCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vc.AddVendorFkIDs(ids...)
}

// AddVendorsRecomendationIDs adds the vendors_recomendations edge to Recommendations by ids.
func (vc *VendorCreate) AddVendorsRecomendationIDs(ids ...int) *VendorCreate {
	vc.mutation.AddVendorsRecomendationIDs(ids...)
	return vc
}

// AddVendorsRecomendations adds the vendors_recomendations edges to Recommendations.
func (vc *VendorCreate) AddVendorsRecomendations(r ...*Recommendations) *VendorCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return vc.AddVendorsRecomendationIDs(ids...)
}

// Mutation returns the VendorMutation object of the builder.
func (vc *VendorCreate) Mutation() *VendorMutation {
	return vc.mutation
}

// Save creates the Vendor in the database.
func (vc *VendorCreate) Save(ctx context.Context) (*Vendor, error) {
	var (
		err  error
		node *Vendor
	)
	vc.defaults()
	if len(vc.hooks) == 0 {
		if err = vc.check(); err != nil {
			return nil, err
		}
		node, err = vc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VendorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vc.check(); err != nil {
				return nil, err
			}
			vc.mutation = mutation
			node, err = vc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vc.hooks) - 1; i >= 0; i-- {
			mut = vc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VendorCreate) SaveX(ctx context.Context) *Vendor {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (vc *VendorCreate) defaults() {
	if _, ok := vc.mutation.CreateTime(); !ok {
		v := vendor.DefaultCreateTime()
		vc.mutation.SetCreateTime(v)
	}
	if _, ok := vc.mutation.UpdateTime(); !ok {
		v := vendor.DefaultUpdateTime()
		vc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VendorCreate) check() error {
	if _, ok := vc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := vc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := vc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := vc.mutation.Name(); ok {
		if err := vendor.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (vc *VendorCreate) sqlSave(ctx context.Context) (*Vendor, error) {
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (vc *VendorCreate) createSpec() (*Vendor, *sqlgraph.CreateSpec) {
	var (
		_node = &Vendor{config: vc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: vendor.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vendor.FieldID,
			},
		}
	)
	if value, ok := vc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vendor.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := vc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vendor.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := vc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vendor.FieldName,
		})
		_node.Name = value
	}
	if nodes := vc.mutation.VendorFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendor.VendorFkTable,
			Columns: []string{vendor.VendorFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.VendorsRecomendationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vendor.VendorsRecomendationsTable,
			Columns: []string{vendor.VendorsRecomendationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recommendations.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VendorCreateBulk is the builder for creating a bulk of Vendor entities.
type VendorCreateBulk struct {
	config
	builders []*VendorCreate
}

// Save creates the Vendor entities in the database.
func (vcb *VendorCreateBulk) Save(ctx context.Context) ([]*Vendor, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Vendor, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VendorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (vcb *VendorCreateBulk) SaveX(ctx context.Context) []*Vendor {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
