// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/kqi"
	"github.com/facebookincubator/symphony/pkg/ent/kqicategory"
	"github.com/facebookincubator/symphony/pkg/ent/kqiperspective"
	"github.com/facebookincubator/symphony/pkg/ent/kqisource"
	"github.com/facebookincubator/symphony/pkg/ent/kqitarget"
	"github.com/facebookincubator/symphony/pkg/ent/kqitemporalfrequency"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
)

// KqiUpdate is the builder for updating Kqi entities.
type KqiUpdate struct {
	config
	hooks    []Hook
	mutation *KqiMutation
}

// Where adds a new predicate for the builder.
func (ku *KqiUpdate) Where(ps ...predicate.Kqi) *KqiUpdate {
	ku.mutation.predicates = append(ku.mutation.predicates, ps...)
	return ku
}

// SetName sets the name field.
func (ku *KqiUpdate) SetName(s string) *KqiUpdate {
	ku.mutation.SetName(s)
	return ku
}

// SetDescription sets the description field.
func (ku *KqiUpdate) SetDescription(s string) *KqiUpdate {
	ku.mutation.SetDescription(s)
	return ku
}

// SetStartDateTime sets the startDateTime field.
func (ku *KqiUpdate) SetStartDateTime(t time.Time) *KqiUpdate {
	ku.mutation.SetStartDateTime(t)
	return ku
}

// SetEndDateTime sets the endDateTime field.
func (ku *KqiUpdate) SetEndDateTime(t time.Time) *KqiUpdate {
	ku.mutation.SetEndDateTime(t)
	return ku
}

// SetFormula sets the formula field.
func (ku *KqiUpdate) SetFormula(s string) *KqiUpdate {
	ku.mutation.SetFormula(s)
	return ku
}

// SetKqiCategoryFkID sets the kqiCategoryFk edge to KqiCategory by id.
func (ku *KqiUpdate) SetKqiCategoryFkID(id int) *KqiUpdate {
	ku.mutation.SetKqiCategoryFkID(id)
	return ku
}

// SetNillableKqiCategoryFkID sets the kqiCategoryFk edge to KqiCategory by id if the given value is not nil.
func (ku *KqiUpdate) SetNillableKqiCategoryFkID(id *int) *KqiUpdate {
	if id != nil {
		ku = ku.SetKqiCategoryFkID(*id)
	}
	return ku
}

// SetKqiCategoryFk sets the kqiCategoryFk edge to KqiCategory.
func (ku *KqiUpdate) SetKqiCategoryFk(k *KqiCategory) *KqiUpdate {
	return ku.SetKqiCategoryFkID(k.ID)
}

// SetKqiPerspectiveFkID sets the kqiPerspectiveFk edge to KqiPerspective by id.
func (ku *KqiUpdate) SetKqiPerspectiveFkID(id int) *KqiUpdate {
	ku.mutation.SetKqiPerspectiveFkID(id)
	return ku
}

// SetNillableKqiPerspectiveFkID sets the kqiPerspectiveFk edge to KqiPerspective by id if the given value is not nil.
func (ku *KqiUpdate) SetNillableKqiPerspectiveFkID(id *int) *KqiUpdate {
	if id != nil {
		ku = ku.SetKqiPerspectiveFkID(*id)
	}
	return ku
}

// SetKqiPerspectiveFk sets the kqiPerspectiveFk edge to KqiPerspective.
func (ku *KqiUpdate) SetKqiPerspectiveFk(k *KqiPerspective) *KqiUpdate {
	return ku.SetKqiPerspectiveFkID(k.ID)
}

// SetKqiSourceFkID sets the kqiSourceFk edge to KqiSource by id.
func (ku *KqiUpdate) SetKqiSourceFkID(id int) *KqiUpdate {
	ku.mutation.SetKqiSourceFkID(id)
	return ku
}

// SetNillableKqiSourceFkID sets the kqiSourceFk edge to KqiSource by id if the given value is not nil.
func (ku *KqiUpdate) SetNillableKqiSourceFkID(id *int) *KqiUpdate {
	if id != nil {
		ku = ku.SetKqiSourceFkID(*id)
	}
	return ku
}

// SetKqiSourceFk sets the kqiSourceFk edge to KqiSource.
func (ku *KqiUpdate) SetKqiSourceFk(k *KqiSource) *KqiUpdate {
	return ku.SetKqiSourceFkID(k.ID)
}

// SetKqiTemporalFrequencyFkID sets the kqiTemporalFrequencyFk edge to KqiTemporalFrequency by id.
func (ku *KqiUpdate) SetKqiTemporalFrequencyFkID(id int) *KqiUpdate {
	ku.mutation.SetKqiTemporalFrequencyFkID(id)
	return ku
}

// SetNillableKqiTemporalFrequencyFkID sets the kqiTemporalFrequencyFk edge to KqiTemporalFrequency by id if the given value is not nil.
func (ku *KqiUpdate) SetNillableKqiTemporalFrequencyFkID(id *int) *KqiUpdate {
	if id != nil {
		ku = ku.SetKqiTemporalFrequencyFkID(*id)
	}
	return ku
}

// SetKqiTemporalFrequencyFk sets the kqiTemporalFrequencyFk edge to KqiTemporalFrequency.
func (ku *KqiUpdate) SetKqiTemporalFrequencyFk(k *KqiTemporalFrequency) *KqiUpdate {
	return ku.SetKqiTemporalFrequencyFkID(k.ID)
}

// AddKqiTargetFkIDs adds the kqiTargetFk edge to KqiTarget by ids.
func (ku *KqiUpdate) AddKqiTargetFkIDs(ids ...int) *KqiUpdate {
	ku.mutation.AddKqiTargetFkIDs(ids...)
	return ku
}

// AddKqiTargetFk adds the kqiTargetFk edges to KqiTarget.
func (ku *KqiUpdate) AddKqiTargetFk(k ...*KqiTarget) *KqiUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return ku.AddKqiTargetFkIDs(ids...)
}

// Mutation returns the KqiMutation object of the builder.
func (ku *KqiUpdate) Mutation() *KqiMutation {
	return ku.mutation
}

// ClearKqiCategoryFk clears the "kqiCategoryFk" edge to type KqiCategory.
func (ku *KqiUpdate) ClearKqiCategoryFk() *KqiUpdate {
	ku.mutation.ClearKqiCategoryFk()
	return ku
}

// ClearKqiPerspectiveFk clears the "kqiPerspectiveFk" edge to type KqiPerspective.
func (ku *KqiUpdate) ClearKqiPerspectiveFk() *KqiUpdate {
	ku.mutation.ClearKqiPerspectiveFk()
	return ku
}

// ClearKqiSourceFk clears the "kqiSourceFk" edge to type KqiSource.
func (ku *KqiUpdate) ClearKqiSourceFk() *KqiUpdate {
	ku.mutation.ClearKqiSourceFk()
	return ku
}

// ClearKqiTemporalFrequencyFk clears the "kqiTemporalFrequencyFk" edge to type KqiTemporalFrequency.
func (ku *KqiUpdate) ClearKqiTemporalFrequencyFk() *KqiUpdate {
	ku.mutation.ClearKqiTemporalFrequencyFk()
	return ku
}

// ClearKqiTargetFk clears all "kqiTargetFk" edges to type KqiTarget.
func (ku *KqiUpdate) ClearKqiTargetFk() *KqiUpdate {
	ku.mutation.ClearKqiTargetFk()
	return ku
}

// RemoveKqiTargetFkIDs removes the kqiTargetFk edge to KqiTarget by ids.
func (ku *KqiUpdate) RemoveKqiTargetFkIDs(ids ...int) *KqiUpdate {
	ku.mutation.RemoveKqiTargetFkIDs(ids...)
	return ku
}

// RemoveKqiTargetFk removes kqiTargetFk edges to KqiTarget.
func (ku *KqiUpdate) RemoveKqiTargetFk(k ...*KqiTarget) *KqiUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return ku.RemoveKqiTargetFkIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ku *KqiUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ku.defaults()
	if len(ku.hooks) == 0 {
		if err = ku.check(); err != nil {
			return 0, err
		}
		affected, err = ku.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KqiMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ku.check(); err != nil {
				return 0, err
			}
			ku.mutation = mutation
			affected, err = ku.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ku.hooks) - 1; i >= 0; i-- {
			mut = ku.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ku.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ku *KqiUpdate) SaveX(ctx context.Context) int {
	affected, err := ku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ku *KqiUpdate) Exec(ctx context.Context) error {
	_, err := ku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ku *KqiUpdate) ExecX(ctx context.Context) {
	if err := ku.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ku *KqiUpdate) defaults() {
	if _, ok := ku.mutation.UpdateTime(); !ok {
		v := kqi.UpdateDefaultUpdateTime()
		ku.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ku *KqiUpdate) check() error {
	if v, ok := ku.mutation.Name(); ok {
		if err := kqi.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (ku *KqiUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kqi.Table,
			Columns: kqi.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kqi.FieldID,
			},
		},
	}
	if ps := ku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ku.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kqi.FieldUpdateTime,
		})
	}
	if value, ok := ku.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kqi.FieldName,
		})
	}
	if value, ok := ku.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kqi.FieldDescription,
		})
	}
	if value, ok := ku.mutation.StartDateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kqi.FieldStartDateTime,
		})
	}
	if value, ok := ku.mutation.EndDateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kqi.FieldEndDateTime,
		})
	}
	if value, ok := ku.mutation.Formula(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kqi.FieldFormula,
		})
	}
	if ku.mutation.KqiCategoryFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kqi.KqiCategoryFkTable,
			Columns: []string{kqi.KqiCategoryFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqicategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ku.mutation.KqiCategoryFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kqi.KqiCategoryFkTable,
			Columns: []string{kqi.KqiCategoryFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqicategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ku.mutation.KqiPerspectiveFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kqi.KqiPerspectiveFkTable,
			Columns: []string{kqi.KqiPerspectiveFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqiperspective.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ku.mutation.KqiPerspectiveFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kqi.KqiPerspectiveFkTable,
			Columns: []string{kqi.KqiPerspectiveFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqiperspective.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ku.mutation.KqiSourceFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kqi.KqiSourceFkTable,
			Columns: []string{kqi.KqiSourceFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqisource.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ku.mutation.KqiSourceFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kqi.KqiSourceFkTable,
			Columns: []string{kqi.KqiSourceFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqisource.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ku.mutation.KqiTemporalFrequencyFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kqi.KqiTemporalFrequencyFkTable,
			Columns: []string{kqi.KqiTemporalFrequencyFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqitemporalfrequency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ku.mutation.KqiTemporalFrequencyFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kqi.KqiTemporalFrequencyFkTable,
			Columns: []string{kqi.KqiTemporalFrequencyFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqitemporalfrequency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ku.mutation.KqiTargetFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kqi.KqiTargetFkTable,
			Columns: []string{kqi.KqiTargetFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqitarget.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ku.mutation.RemovedKqiTargetFkIDs(); len(nodes) > 0 && !ku.mutation.KqiTargetFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kqi.KqiTargetFkTable,
			Columns: []string{kqi.KqiTargetFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqitarget.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ku.mutation.KqiTargetFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kqi.KqiTargetFkTable,
			Columns: []string{kqi.KqiTargetFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqitarget.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kqi.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// KqiUpdateOne is the builder for updating a single Kqi entity.
type KqiUpdateOne struct {
	config
	hooks    []Hook
	mutation *KqiMutation
}

// SetName sets the name field.
func (kuo *KqiUpdateOne) SetName(s string) *KqiUpdateOne {
	kuo.mutation.SetName(s)
	return kuo
}

// SetDescription sets the description field.
func (kuo *KqiUpdateOne) SetDescription(s string) *KqiUpdateOne {
	kuo.mutation.SetDescription(s)
	return kuo
}

// SetStartDateTime sets the startDateTime field.
func (kuo *KqiUpdateOne) SetStartDateTime(t time.Time) *KqiUpdateOne {
	kuo.mutation.SetStartDateTime(t)
	return kuo
}

// SetEndDateTime sets the endDateTime field.
func (kuo *KqiUpdateOne) SetEndDateTime(t time.Time) *KqiUpdateOne {
	kuo.mutation.SetEndDateTime(t)
	return kuo
}

// SetFormula sets the formula field.
func (kuo *KqiUpdateOne) SetFormula(s string) *KqiUpdateOne {
	kuo.mutation.SetFormula(s)
	return kuo
}

// SetKqiCategoryFkID sets the kqiCategoryFk edge to KqiCategory by id.
func (kuo *KqiUpdateOne) SetKqiCategoryFkID(id int) *KqiUpdateOne {
	kuo.mutation.SetKqiCategoryFkID(id)
	return kuo
}

// SetNillableKqiCategoryFkID sets the kqiCategoryFk edge to KqiCategory by id if the given value is not nil.
func (kuo *KqiUpdateOne) SetNillableKqiCategoryFkID(id *int) *KqiUpdateOne {
	if id != nil {
		kuo = kuo.SetKqiCategoryFkID(*id)
	}
	return kuo
}

// SetKqiCategoryFk sets the kqiCategoryFk edge to KqiCategory.
func (kuo *KqiUpdateOne) SetKqiCategoryFk(k *KqiCategory) *KqiUpdateOne {
	return kuo.SetKqiCategoryFkID(k.ID)
}

// SetKqiPerspectiveFkID sets the kqiPerspectiveFk edge to KqiPerspective by id.
func (kuo *KqiUpdateOne) SetKqiPerspectiveFkID(id int) *KqiUpdateOne {
	kuo.mutation.SetKqiPerspectiveFkID(id)
	return kuo
}

// SetNillableKqiPerspectiveFkID sets the kqiPerspectiveFk edge to KqiPerspective by id if the given value is not nil.
func (kuo *KqiUpdateOne) SetNillableKqiPerspectiveFkID(id *int) *KqiUpdateOne {
	if id != nil {
		kuo = kuo.SetKqiPerspectiveFkID(*id)
	}
	return kuo
}

// SetKqiPerspectiveFk sets the kqiPerspectiveFk edge to KqiPerspective.
func (kuo *KqiUpdateOne) SetKqiPerspectiveFk(k *KqiPerspective) *KqiUpdateOne {
	return kuo.SetKqiPerspectiveFkID(k.ID)
}

// SetKqiSourceFkID sets the kqiSourceFk edge to KqiSource by id.
func (kuo *KqiUpdateOne) SetKqiSourceFkID(id int) *KqiUpdateOne {
	kuo.mutation.SetKqiSourceFkID(id)
	return kuo
}

// SetNillableKqiSourceFkID sets the kqiSourceFk edge to KqiSource by id if the given value is not nil.
func (kuo *KqiUpdateOne) SetNillableKqiSourceFkID(id *int) *KqiUpdateOne {
	if id != nil {
		kuo = kuo.SetKqiSourceFkID(*id)
	}
	return kuo
}

// SetKqiSourceFk sets the kqiSourceFk edge to KqiSource.
func (kuo *KqiUpdateOne) SetKqiSourceFk(k *KqiSource) *KqiUpdateOne {
	return kuo.SetKqiSourceFkID(k.ID)
}

// SetKqiTemporalFrequencyFkID sets the kqiTemporalFrequencyFk edge to KqiTemporalFrequency by id.
func (kuo *KqiUpdateOne) SetKqiTemporalFrequencyFkID(id int) *KqiUpdateOne {
	kuo.mutation.SetKqiTemporalFrequencyFkID(id)
	return kuo
}

// SetNillableKqiTemporalFrequencyFkID sets the kqiTemporalFrequencyFk edge to KqiTemporalFrequency by id if the given value is not nil.
func (kuo *KqiUpdateOne) SetNillableKqiTemporalFrequencyFkID(id *int) *KqiUpdateOne {
	if id != nil {
		kuo = kuo.SetKqiTemporalFrequencyFkID(*id)
	}
	return kuo
}

// SetKqiTemporalFrequencyFk sets the kqiTemporalFrequencyFk edge to KqiTemporalFrequency.
func (kuo *KqiUpdateOne) SetKqiTemporalFrequencyFk(k *KqiTemporalFrequency) *KqiUpdateOne {
	return kuo.SetKqiTemporalFrequencyFkID(k.ID)
}

// AddKqiTargetFkIDs adds the kqiTargetFk edge to KqiTarget by ids.
func (kuo *KqiUpdateOne) AddKqiTargetFkIDs(ids ...int) *KqiUpdateOne {
	kuo.mutation.AddKqiTargetFkIDs(ids...)
	return kuo
}

// AddKqiTargetFk adds the kqiTargetFk edges to KqiTarget.
func (kuo *KqiUpdateOne) AddKqiTargetFk(k ...*KqiTarget) *KqiUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kuo.AddKqiTargetFkIDs(ids...)
}

// Mutation returns the KqiMutation object of the builder.
func (kuo *KqiUpdateOne) Mutation() *KqiMutation {
	return kuo.mutation
}

// ClearKqiCategoryFk clears the "kqiCategoryFk" edge to type KqiCategory.
func (kuo *KqiUpdateOne) ClearKqiCategoryFk() *KqiUpdateOne {
	kuo.mutation.ClearKqiCategoryFk()
	return kuo
}

// ClearKqiPerspectiveFk clears the "kqiPerspectiveFk" edge to type KqiPerspective.
func (kuo *KqiUpdateOne) ClearKqiPerspectiveFk() *KqiUpdateOne {
	kuo.mutation.ClearKqiPerspectiveFk()
	return kuo
}

// ClearKqiSourceFk clears the "kqiSourceFk" edge to type KqiSource.
func (kuo *KqiUpdateOne) ClearKqiSourceFk() *KqiUpdateOne {
	kuo.mutation.ClearKqiSourceFk()
	return kuo
}

// ClearKqiTemporalFrequencyFk clears the "kqiTemporalFrequencyFk" edge to type KqiTemporalFrequency.
func (kuo *KqiUpdateOne) ClearKqiTemporalFrequencyFk() *KqiUpdateOne {
	kuo.mutation.ClearKqiTemporalFrequencyFk()
	return kuo
}

// ClearKqiTargetFk clears all "kqiTargetFk" edges to type KqiTarget.
func (kuo *KqiUpdateOne) ClearKqiTargetFk() *KqiUpdateOne {
	kuo.mutation.ClearKqiTargetFk()
	return kuo
}

// RemoveKqiTargetFkIDs removes the kqiTargetFk edge to KqiTarget by ids.
func (kuo *KqiUpdateOne) RemoveKqiTargetFkIDs(ids ...int) *KqiUpdateOne {
	kuo.mutation.RemoveKqiTargetFkIDs(ids...)
	return kuo
}

// RemoveKqiTargetFk removes kqiTargetFk edges to KqiTarget.
func (kuo *KqiUpdateOne) RemoveKqiTargetFk(k ...*KqiTarget) *KqiUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return kuo.RemoveKqiTargetFkIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (kuo *KqiUpdateOne) Save(ctx context.Context) (*Kqi, error) {
	var (
		err  error
		node *Kqi
	)
	kuo.defaults()
	if len(kuo.hooks) == 0 {
		if err = kuo.check(); err != nil {
			return nil, err
		}
		node, err = kuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KqiMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = kuo.check(); err != nil {
				return nil, err
			}
			kuo.mutation = mutation
			node, err = kuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kuo.hooks) - 1; i >= 0; i-- {
			mut = kuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (kuo *KqiUpdateOne) SaveX(ctx context.Context) *Kqi {
	node, err := kuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kuo *KqiUpdateOne) Exec(ctx context.Context) error {
	_, err := kuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kuo *KqiUpdateOne) ExecX(ctx context.Context) {
	if err := kuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kuo *KqiUpdateOne) defaults() {
	if _, ok := kuo.mutation.UpdateTime(); !ok {
		v := kqi.UpdateDefaultUpdateTime()
		kuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kuo *KqiUpdateOne) check() error {
	if v, ok := kuo.mutation.Name(); ok {
		if err := kqi.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (kuo *KqiUpdateOne) sqlSave(ctx context.Context) (_node *Kqi, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kqi.Table,
			Columns: kqi.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kqi.FieldID,
			},
		},
	}
	id, ok := kuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Kqi.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := kuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kqi.FieldUpdateTime,
		})
	}
	if value, ok := kuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kqi.FieldName,
		})
	}
	if value, ok := kuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kqi.FieldDescription,
		})
	}
	if value, ok := kuo.mutation.StartDateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kqi.FieldStartDateTime,
		})
	}
	if value, ok := kuo.mutation.EndDateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kqi.FieldEndDateTime,
		})
	}
	if value, ok := kuo.mutation.Formula(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kqi.FieldFormula,
		})
	}
	if kuo.mutation.KqiCategoryFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kqi.KqiCategoryFkTable,
			Columns: []string{kqi.KqiCategoryFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqicategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kuo.mutation.KqiCategoryFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kqi.KqiCategoryFkTable,
			Columns: []string{kqi.KqiCategoryFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqicategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kuo.mutation.KqiPerspectiveFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kqi.KqiPerspectiveFkTable,
			Columns: []string{kqi.KqiPerspectiveFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqiperspective.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kuo.mutation.KqiPerspectiveFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kqi.KqiPerspectiveFkTable,
			Columns: []string{kqi.KqiPerspectiveFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqiperspective.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kuo.mutation.KqiSourceFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kqi.KqiSourceFkTable,
			Columns: []string{kqi.KqiSourceFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqisource.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kuo.mutation.KqiSourceFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kqi.KqiSourceFkTable,
			Columns: []string{kqi.KqiSourceFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqisource.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kuo.mutation.KqiTemporalFrequencyFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kqi.KqiTemporalFrequencyFkTable,
			Columns: []string{kqi.KqiTemporalFrequencyFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqitemporalfrequency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kuo.mutation.KqiTemporalFrequencyFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kqi.KqiTemporalFrequencyFkTable,
			Columns: []string{kqi.KqiTemporalFrequencyFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqitemporalfrequency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kuo.mutation.KqiTargetFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kqi.KqiTargetFkTable,
			Columns: []string{kqi.KqiTargetFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqitarget.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kuo.mutation.RemovedKqiTargetFkIDs(); len(nodes) > 0 && !kuo.mutation.KqiTargetFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kqi.KqiTargetFkTable,
			Columns: []string{kqi.KqiTargetFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqitarget.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kuo.mutation.KqiTargetFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kqi.KqiTargetFkTable,
			Columns: []string{kqi.KqiTargetFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqitarget.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Kqi{config: kuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, kuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kqi.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
