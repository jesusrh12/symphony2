// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/appointment"
	"github.com/facebookincubator/symphony/pkg/ent/user"
	"github.com/facebookincubator/symphony/pkg/ent/workorder"
)

// Appointment is the model entity for the Appointment schema.
type Appointment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Start holds the value of the "start" field.
	Start time.Time `json:"start,omitempty"`
	// End holds the value of the "end" field.
	End time.Time `json:"end,omitempty"`
	// Duration holds the value of the "duration" field.
	Duration float64 `json:"duration,omitempty"`
	// Status holds the value of the "status" field.
	Status appointment.Status `json:"status,omitempty"`
	// CreationDate holds the value of the "creation_date" field.
	CreationDate time.Time `json:"creation_date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppointmentQuery when eager-loading is set.
	Edges                  AppointmentEdges `json:"edges"`
	user_appointment       *int
	work_order_appointment *int
}

// AppointmentEdges holds the relations/edges for other nodes in the graph.
type AppointmentEdges struct {
	// Workorder holds the value of the workorder edge.
	Workorder *WorkOrder
	// Assignee holds the value of the assignee edge.
	Assignee *User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// WorkorderOrErr returns the Workorder value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppointmentEdges) WorkorderOrErr() (*WorkOrder, error) {
	if e.loadedTypes[0] {
		if e.Workorder == nil {
			// The edge workorder was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: workorder.Label}
		}
		return e.Workorder, nil
	}
	return nil, &NotLoadedError{edge: "workorder"}
}

// AssigneeOrErr returns the Assignee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppointmentEdges) AssigneeOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Assignee == nil {
			// The edge assignee was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Assignee, nil
	}
	return nil, &NotLoadedError{edge: "assignee"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Appointment) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},   // id
		&sql.NullTime{},    // create_time
		&sql.NullTime{},    // update_time
		&sql.NullTime{},    // start
		&sql.NullTime{},    // end
		&sql.NullFloat64{}, // duration
		&sql.NullString{},  // status
		&sql.NullTime{},    // creation_date
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Appointment) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // user_appointment
		&sql.NullInt64{}, // work_order_appointment
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Appointment fields.
func (a *Appointment) assignValues(values ...interface{}) error {
	if m, n := len(values), len(appointment.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	a.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		a.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		a.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field start", values[2])
	} else if value.Valid {
		a.Start = value.Time
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field end", values[3])
	} else if value.Valid {
		a.End = value.Time
	}
	if value, ok := values[4].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field duration", values[4])
	} else if value.Valid {
		a.Duration = value.Float64
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[5])
	} else if value.Valid {
		a.Status = appointment.Status(value.String)
	}
	if value, ok := values[6].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field creation_date", values[6])
	} else if value.Valid {
		a.CreationDate = value.Time
	}
	values = values[7:]
	if len(values) == len(appointment.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_appointment", value)
		} else if value.Valid {
			a.user_appointment = new(int)
			*a.user_appointment = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field work_order_appointment", value)
		} else if value.Valid {
			a.work_order_appointment = new(int)
			*a.work_order_appointment = int(value.Int64)
		}
	}
	return nil
}

// QueryWorkorder queries the workorder edge of the Appointment.
func (a *Appointment) QueryWorkorder() *WorkOrderQuery {
	return (&AppointmentClient{config: a.config}).QueryWorkorder(a)
}

// QueryAssignee queries the assignee edge of the Appointment.
func (a *Appointment) QueryAssignee() *UserQuery {
	return (&AppointmentClient{config: a.config}).QueryAssignee(a)
}

// Update returns a builder for updating this Appointment.
// Note that, you need to call Appointment.Unwrap() before calling this method, if this Appointment
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Appointment) Update() *AppointmentUpdateOne {
	return (&AppointmentClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (a *Appointment) Unwrap() *Appointment {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Appointment is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Appointment) String() string {
	var builder strings.Builder
	builder.WriteString("Appointment(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(a.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(a.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", start=")
	builder.WriteString(a.Start.Format(time.ANSIC))
	builder.WriteString(", end=")
	builder.WriteString(a.End.Format(time.ANSIC))
	builder.WriteString(", duration=")
	builder.WriteString(fmt.Sprintf("%v", a.Duration))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", a.Status))
	builder.WriteString(", creation_date=")
	builder.WriteString(a.CreationDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Appointments is a parsable slice of Appointment.
type Appointments []*Appointment

func (a Appointments) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
