// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/counter"
	"github.com/facebookincubator/symphony/pkg/ent/counterfamily"
	"github.com/facebookincubator/symphony/pkg/ent/vendor"
)

// Counter is the model entity for the Counter schema.
type Counter struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ExternalId holds the value of the "externalId" field.
	ExternalId string `json:"externalId,omitempty"`
	// NetworkManagerSystem holds the value of the "networkManagerSystem" field.
	NetworkManagerSystem string `json:"networkManagerSystem,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CounterQuery when eager-loading is set.
	Edges                        CounterEdges `json:"edges"`
	counter_family_counterfamily *int
	vendor_vendor_fk             *int
}

// CounterEdges holds the relations/edges for other nodes in the graph.
type CounterEdges struct {
	// Counterfamily holds the value of the counterfamily edge.
	Counterfamily *CounterFamily
	// Vendor holds the value of the vendor edge.
	Vendor *Vendor
	// CounterFk holds the value of the counter_fk edge.
	CounterFk []*CounterFormula
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CounterfamilyOrErr returns the Counterfamily value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CounterEdges) CounterfamilyOrErr() (*CounterFamily, error) {
	if e.loadedTypes[0] {
		if e.Counterfamily == nil {
			// The edge counterfamily was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: counterfamily.Label}
		}
		return e.Counterfamily, nil
	}
	return nil, &NotLoadedError{edge: "counterfamily"}
}

// VendorOrErr returns the Vendor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CounterEdges) VendorOrErr() (*Vendor, error) {
	if e.loadedTypes[1] {
		if e.Vendor == nil {
			// The edge vendor was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: vendor.Label}
		}
		return e.Vendor, nil
	}
	return nil, &NotLoadedError{edge: "vendor"}
}

// CounterFkOrErr returns the CounterFk value or an error if the edge
// was not loaded in eager-loading.
func (e CounterEdges) CounterFkOrErr() ([]*CounterFormula, error) {
	if e.loadedTypes[2] {
		return e.CounterFk, nil
	}
	return nil, &NotLoadedError{edge: "counter_fk"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Counter) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // name
		&sql.NullString{}, // externalId
		&sql.NullString{}, // networkManagerSystem
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Counter) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // counter_family_counterfamily
		&sql.NullInt64{}, // vendor_vendor_fk
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Counter fields.
func (c *Counter) assignValues(values ...interface{}) error {
	if m, n := len(values), len(counter.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		c.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		c.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[2])
	} else if value.Valid {
		c.Name = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field externalId", values[3])
	} else if value.Valid {
		c.ExternalId = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field networkManagerSystem", values[4])
	} else if value.Valid {
		c.NetworkManagerSystem = value.String
	}
	values = values[5:]
	if len(values) == len(counter.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field counter_family_counterfamily", value)
		} else if value.Valid {
			c.counter_family_counterfamily = new(int)
			*c.counter_family_counterfamily = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field vendor_vendor_fk", value)
		} else if value.Valid {
			c.vendor_vendor_fk = new(int)
			*c.vendor_vendor_fk = int(value.Int64)
		}
	}
	return nil
}

// QueryCounterfamily queries the counterfamily edge of the Counter.
func (c *Counter) QueryCounterfamily() *CounterFamilyQuery {
	return (&CounterClient{config: c.config}).QueryCounterfamily(c)
}

// QueryVendor queries the vendor edge of the Counter.
func (c *Counter) QueryVendor() *VendorQuery {
	return (&CounterClient{config: c.config}).QueryVendor(c)
}

// QueryCounterFk queries the counter_fk edge of the Counter.
func (c *Counter) QueryCounterFk() *CounterFormulaQuery {
	return (&CounterClient{config: c.config}).QueryCounterFk(c)
}

// Update returns a builder for updating this Counter.
// Note that, you need to call Counter.Unwrap() before calling this method, if this Counter
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Counter) Update() *CounterUpdateOne {
	return (&CounterClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Counter) Unwrap() *Counter {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Counter is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Counter) String() string {
	var builder strings.Builder
	builder.WriteString("Counter(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(c.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(c.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(c.Name)
	builder.WriteString(", externalId=")
	builder.WriteString(c.ExternalId)
	builder.WriteString(", networkManagerSystem=")
	builder.WriteString(c.NetworkManagerSystem)
	builder.WriteByte(')')
	return builder.String()
}

// Counters is a parsable slice of Counter.
type Counters []*Counter

func (c Counters) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
