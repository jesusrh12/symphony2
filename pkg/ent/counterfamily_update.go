// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/counter"
	"github.com/facebookincubator/symphony/pkg/ent/counterfamily"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
)

// CounterFamilyUpdate is the builder for updating CounterFamily entities.
type CounterFamilyUpdate struct {
	config
	hooks    []Hook
	mutation *CounterFamilyMutation
}

// Where adds a new predicate for the builder.
func (cfu *CounterFamilyUpdate) Where(ps ...predicate.CounterFamily) *CounterFamilyUpdate {
	cfu.mutation.predicates = append(cfu.mutation.predicates, ps...)
	return cfu
}

// SetName sets the name field.
func (cfu *CounterFamilyUpdate) SetName(s string) *CounterFamilyUpdate {
	cfu.mutation.SetName(s)
	return cfu
}

// AddCounterfamilyIDs adds the counterfamily edge to Counter by ids.
func (cfu *CounterFamilyUpdate) AddCounterfamilyIDs(ids ...int) *CounterFamilyUpdate {
	cfu.mutation.AddCounterfamilyIDs(ids...)
	return cfu
}

// AddCounterfamily adds the counterfamily edges to Counter.
func (cfu *CounterFamilyUpdate) AddCounterfamily(c ...*Counter) *CounterFamilyUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cfu.AddCounterfamilyIDs(ids...)
}

// Mutation returns the CounterFamilyMutation object of the builder.
func (cfu *CounterFamilyUpdate) Mutation() *CounterFamilyMutation {
	return cfu.mutation
}

// ClearCounterfamily clears all "counterfamily" edges to type Counter.
func (cfu *CounterFamilyUpdate) ClearCounterfamily() *CounterFamilyUpdate {
	cfu.mutation.ClearCounterfamily()
	return cfu
}

// RemoveCounterfamilyIDs removes the counterfamily edge to Counter by ids.
func (cfu *CounterFamilyUpdate) RemoveCounterfamilyIDs(ids ...int) *CounterFamilyUpdate {
	cfu.mutation.RemoveCounterfamilyIDs(ids...)
	return cfu
}

// RemoveCounterfamily removes counterfamily edges to Counter.
func (cfu *CounterFamilyUpdate) RemoveCounterfamily(c ...*Counter) *CounterFamilyUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cfu.RemoveCounterfamilyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cfu *CounterFamilyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cfu.defaults()
	if len(cfu.hooks) == 0 {
		if err = cfu.check(); err != nil {
			return 0, err
		}
		affected, err = cfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CounterFamilyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cfu.check(); err != nil {
				return 0, err
			}
			cfu.mutation = mutation
			affected, err = cfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cfu.hooks) - 1; i >= 0; i-- {
			mut = cfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cfu *CounterFamilyUpdate) SaveX(ctx context.Context) int {
	affected, err := cfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cfu *CounterFamilyUpdate) Exec(ctx context.Context) error {
	_, err := cfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfu *CounterFamilyUpdate) ExecX(ctx context.Context) {
	if err := cfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cfu *CounterFamilyUpdate) defaults() {
	if _, ok := cfu.mutation.UpdateTime(); !ok {
		v := counterfamily.UpdateDefaultUpdateTime()
		cfu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cfu *CounterFamilyUpdate) check() error {
	if v, ok := cfu.mutation.Name(); ok {
		if err := counterfamily.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (cfu *CounterFamilyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   counterfamily.Table,
			Columns: counterfamily.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: counterfamily.FieldID,
			},
		},
	}
	if ps := cfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cfu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: counterfamily.FieldUpdateTime,
		})
	}
	if value, ok := cfu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: counterfamily.FieldName,
		})
	}
	if cfu.mutation.CounterfamilyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   counterfamily.CounterfamilyTable,
			Columns: []string{counterfamily.CounterfamilyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfu.mutation.RemovedCounterfamilyIDs(); len(nodes) > 0 && !cfu.mutation.CounterfamilyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   counterfamily.CounterfamilyTable,
			Columns: []string{counterfamily.CounterfamilyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfu.mutation.CounterfamilyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   counterfamily.CounterfamilyTable,
			Columns: []string{counterfamily.CounterfamilyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{counterfamily.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CounterFamilyUpdateOne is the builder for updating a single CounterFamily entity.
type CounterFamilyUpdateOne struct {
	config
	hooks    []Hook
	mutation *CounterFamilyMutation
}

// SetName sets the name field.
func (cfuo *CounterFamilyUpdateOne) SetName(s string) *CounterFamilyUpdateOne {
	cfuo.mutation.SetName(s)
	return cfuo
}

// AddCounterfamilyIDs adds the counterfamily edge to Counter by ids.
func (cfuo *CounterFamilyUpdateOne) AddCounterfamilyIDs(ids ...int) *CounterFamilyUpdateOne {
	cfuo.mutation.AddCounterfamilyIDs(ids...)
	return cfuo
}

// AddCounterfamily adds the counterfamily edges to Counter.
func (cfuo *CounterFamilyUpdateOne) AddCounterfamily(c ...*Counter) *CounterFamilyUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cfuo.AddCounterfamilyIDs(ids...)
}

// Mutation returns the CounterFamilyMutation object of the builder.
func (cfuo *CounterFamilyUpdateOne) Mutation() *CounterFamilyMutation {
	return cfuo.mutation
}

// ClearCounterfamily clears all "counterfamily" edges to type Counter.
func (cfuo *CounterFamilyUpdateOne) ClearCounterfamily() *CounterFamilyUpdateOne {
	cfuo.mutation.ClearCounterfamily()
	return cfuo
}

// RemoveCounterfamilyIDs removes the counterfamily edge to Counter by ids.
func (cfuo *CounterFamilyUpdateOne) RemoveCounterfamilyIDs(ids ...int) *CounterFamilyUpdateOne {
	cfuo.mutation.RemoveCounterfamilyIDs(ids...)
	return cfuo
}

// RemoveCounterfamily removes counterfamily edges to Counter.
func (cfuo *CounterFamilyUpdateOne) RemoveCounterfamily(c ...*Counter) *CounterFamilyUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cfuo.RemoveCounterfamilyIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (cfuo *CounterFamilyUpdateOne) Save(ctx context.Context) (*CounterFamily, error) {
	var (
		err  error
		node *CounterFamily
	)
	cfuo.defaults()
	if len(cfuo.hooks) == 0 {
		if err = cfuo.check(); err != nil {
			return nil, err
		}
		node, err = cfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CounterFamilyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cfuo.check(); err != nil {
				return nil, err
			}
			cfuo.mutation = mutation
			node, err = cfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cfuo.hooks) - 1; i >= 0; i-- {
			mut = cfuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cfuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cfuo *CounterFamilyUpdateOne) SaveX(ctx context.Context) *CounterFamily {
	node, err := cfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cfuo *CounterFamilyUpdateOne) Exec(ctx context.Context) error {
	_, err := cfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfuo *CounterFamilyUpdateOne) ExecX(ctx context.Context) {
	if err := cfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cfuo *CounterFamilyUpdateOne) defaults() {
	if _, ok := cfuo.mutation.UpdateTime(); !ok {
		v := counterfamily.UpdateDefaultUpdateTime()
		cfuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cfuo *CounterFamilyUpdateOne) check() error {
	if v, ok := cfuo.mutation.Name(); ok {
		if err := counterfamily.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (cfuo *CounterFamilyUpdateOne) sqlSave(ctx context.Context) (_node *CounterFamily, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   counterfamily.Table,
			Columns: counterfamily.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: counterfamily.FieldID,
			},
		},
	}
	id, ok := cfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CounterFamily.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cfuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: counterfamily.FieldUpdateTime,
		})
	}
	if value, ok := cfuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: counterfamily.FieldName,
		})
	}
	if cfuo.mutation.CounterfamilyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   counterfamily.CounterfamilyTable,
			Columns: []string{counterfamily.CounterfamilyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfuo.mutation.RemovedCounterfamilyIDs(); len(nodes) > 0 && !cfuo.mutation.CounterfamilyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   counterfamily.CounterfamilyTable,
			Columns: []string{counterfamily.CounterfamilyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfuo.mutation.CounterfamilyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   counterfamily.CounterfamilyTable,
			Columns: []string{counterfamily.CounterfamilyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CounterFamily{config: cfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{counterfamily.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
