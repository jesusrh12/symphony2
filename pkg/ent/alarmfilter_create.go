// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/alarmfilter"
	"github.com/facebookincubator/symphony/pkg/ent/alarmstatus"
)

// AlarmFilterCreate is the builder for creating a AlarmFilter entity.
type AlarmFilterCreate struct {
	config
	mutation *AlarmFilterMutation
	hooks    []Hook
}

// SetCreateTime sets the create_time field.
func (afc *AlarmFilterCreate) SetCreateTime(t time.Time) *AlarmFilterCreate {
	afc.mutation.SetCreateTime(t)
	return afc
}

// SetNillableCreateTime sets the create_time field if the given value is not nil.
func (afc *AlarmFilterCreate) SetNillableCreateTime(t *time.Time) *AlarmFilterCreate {
	if t != nil {
		afc.SetCreateTime(*t)
	}
	return afc
}

// SetUpdateTime sets the update_time field.
func (afc *AlarmFilterCreate) SetUpdateTime(t time.Time) *AlarmFilterCreate {
	afc.mutation.SetUpdateTime(t)
	return afc
}

// SetNillableUpdateTime sets the update_time field if the given value is not nil.
func (afc *AlarmFilterCreate) SetNillableUpdateTime(t *time.Time) *AlarmFilterCreate {
	if t != nil {
		afc.SetUpdateTime(*t)
	}
	return afc
}

// SetName sets the name field.
func (afc *AlarmFilterCreate) SetName(s string) *AlarmFilterCreate {
	afc.mutation.SetName(s)
	return afc
}

// SetNetworkResource sets the networkResource field.
func (afc *AlarmFilterCreate) SetNetworkResource(s string) *AlarmFilterCreate {
	afc.mutation.SetNetworkResource(s)
	return afc
}

// SetBeginTime sets the beginTime field.
func (afc *AlarmFilterCreate) SetBeginTime(t time.Time) *AlarmFilterCreate {
	afc.mutation.SetBeginTime(t)
	return afc
}

// SetEndTime sets the endTime field.
func (afc *AlarmFilterCreate) SetEndTime(t time.Time) *AlarmFilterCreate {
	afc.mutation.SetEndTime(t)
	return afc
}

// SetReason sets the reason field.
func (afc *AlarmFilterCreate) SetReason(s string) *AlarmFilterCreate {
	afc.mutation.SetReason(s)
	return afc
}

// SetUser sets the user field.
func (afc *AlarmFilterCreate) SetUser(s string) *AlarmFilterCreate {
	afc.mutation.SetUser(s)
	return afc
}

// SetCreationTime sets the creationTime field.
func (afc *AlarmFilterCreate) SetCreationTime(t time.Time) *AlarmFilterCreate {
	afc.mutation.SetCreationTime(t)
	return afc
}

// SetEnable sets the enable field.
func (afc *AlarmFilterCreate) SetEnable(b bool) *AlarmFilterCreate {
	afc.mutation.SetEnable(b)
	return afc
}

// SetAlarmStatusFkID sets the alarmStatusFk edge to AlarmStatus by id.
func (afc *AlarmFilterCreate) SetAlarmStatusFkID(id int) *AlarmFilterCreate {
	afc.mutation.SetAlarmStatusFkID(id)
	return afc
}

// SetNillableAlarmStatusFkID sets the alarmStatusFk edge to AlarmStatus by id if the given value is not nil.
func (afc *AlarmFilterCreate) SetNillableAlarmStatusFkID(id *int) *AlarmFilterCreate {
	if id != nil {
		afc = afc.SetAlarmStatusFkID(*id)
	}
	return afc
}

// SetAlarmStatusFk sets the alarmStatusFk edge to AlarmStatus.
func (afc *AlarmFilterCreate) SetAlarmStatusFk(a *AlarmStatus) *AlarmFilterCreate {
	return afc.SetAlarmStatusFkID(a.ID)
}

// Mutation returns the AlarmFilterMutation object of the builder.
func (afc *AlarmFilterCreate) Mutation() *AlarmFilterMutation {
	return afc.mutation
}

// Save creates the AlarmFilter in the database.
func (afc *AlarmFilterCreate) Save(ctx context.Context) (*AlarmFilter, error) {
	var (
		err  error
		node *AlarmFilter
	)
	afc.defaults()
	if len(afc.hooks) == 0 {
		if err = afc.check(); err != nil {
			return nil, err
		}
		node, err = afc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AlarmFilterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = afc.check(); err != nil {
				return nil, err
			}
			afc.mutation = mutation
			node, err = afc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(afc.hooks) - 1; i >= 0; i-- {
			mut = afc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, afc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (afc *AlarmFilterCreate) SaveX(ctx context.Context) *AlarmFilter {
	v, err := afc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (afc *AlarmFilterCreate) defaults() {
	if _, ok := afc.mutation.CreateTime(); !ok {
		v := alarmfilter.DefaultCreateTime()
		afc.mutation.SetCreateTime(v)
	}
	if _, ok := afc.mutation.UpdateTime(); !ok {
		v := alarmfilter.DefaultUpdateTime()
		afc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (afc *AlarmFilterCreate) check() error {
	if _, ok := afc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := afc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := afc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := afc.mutation.Name(); ok {
		if err := alarmfilter.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := afc.mutation.NetworkResource(); !ok {
		return &ValidationError{Name: "networkResource", err: errors.New("ent: missing required field \"networkResource\"")}
	}
	if _, ok := afc.mutation.BeginTime(); !ok {
		return &ValidationError{Name: "beginTime", err: errors.New("ent: missing required field \"beginTime\"")}
	}
	if _, ok := afc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "endTime", err: errors.New("ent: missing required field \"endTime\"")}
	}
	if _, ok := afc.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New("ent: missing required field \"reason\"")}
	}
	if _, ok := afc.mutation.User(); !ok {
		return &ValidationError{Name: "user", err: errors.New("ent: missing required field \"user\"")}
	}
	if _, ok := afc.mutation.CreationTime(); !ok {
		return &ValidationError{Name: "creationTime", err: errors.New("ent: missing required field \"creationTime\"")}
	}
	if _, ok := afc.mutation.Enable(); !ok {
		return &ValidationError{Name: "enable", err: errors.New("ent: missing required field \"enable\"")}
	}
	return nil
}

func (afc *AlarmFilterCreate) sqlSave(ctx context.Context) (*AlarmFilter, error) {
	_node, _spec := afc.createSpec()
	if err := sqlgraph.CreateNode(ctx, afc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (afc *AlarmFilterCreate) createSpec() (*AlarmFilter, *sqlgraph.CreateSpec) {
	var (
		_node = &AlarmFilter{config: afc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: alarmfilter.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: alarmfilter.FieldID,
			},
		}
	)
	if value, ok := afc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: alarmfilter.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := afc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: alarmfilter.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := afc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alarmfilter.FieldName,
		})
		_node.Name = value
	}
	if value, ok := afc.mutation.NetworkResource(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alarmfilter.FieldNetworkResource,
		})
		_node.NetworkResource = value
	}
	if value, ok := afc.mutation.BeginTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: alarmfilter.FieldBeginTime,
		})
		_node.BeginTime = value
	}
	if value, ok := afc.mutation.EndTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: alarmfilter.FieldEndTime,
		})
		_node.EndTime = value
	}
	if value, ok := afc.mutation.Reason(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alarmfilter.FieldReason,
		})
		_node.Reason = value
	}
	if value, ok := afc.mutation.User(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alarmfilter.FieldUser,
		})
		_node.User = value
	}
	if value, ok := afc.mutation.CreationTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: alarmfilter.FieldCreationTime,
		})
		_node.CreationTime = value
	}
	if value, ok := afc.mutation.Enable(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: alarmfilter.FieldEnable,
		})
		_node.Enable = value
	}
	if nodes := afc.mutation.AlarmStatusFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   alarmfilter.AlarmStatusFkTable,
			Columns: []string{alarmfilter.AlarmStatusFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: alarmstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AlarmFilterCreateBulk is the builder for creating a bulk of AlarmFilter entities.
type AlarmFilterCreateBulk struct {
	config
	builders []*AlarmFilterCreate
}

// Save creates the AlarmFilter entities in the database.
func (afcb *AlarmFilterCreateBulk) Save(ctx context.Context) ([]*AlarmFilter, error) {
	specs := make([]*sqlgraph.CreateSpec, len(afcb.builders))
	nodes := make([]*AlarmFilter, len(afcb.builders))
	mutators := make([]Mutator, len(afcb.builders))
	for i := range afcb.builders {
		func(i int, root context.Context) {
			builder := afcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AlarmFilterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, afcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, afcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, afcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (afcb *AlarmFilterCreateBulk) SaveX(ctx context.Context) []*AlarmFilter {
	v, err := afcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
