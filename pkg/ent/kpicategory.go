// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/kpicategory"
)

// KpiCategory is the model entity for the KpiCategory schema.
type KpiCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the KpiCategoryQuery when eager-loading is set.
	Edges KpiCategoryEdges `json:"edges"`
}

// KpiCategoryEdges holds the relations/edges for other nodes in the graph.
type KpiCategoryEdges struct {
	// Kpicategory holds the value of the kpicategory edge.
	Kpicategory []*Kpi
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// KpicategoryOrErr returns the Kpicategory value or an error if the edge
// was not loaded in eager-loading.
func (e KpiCategoryEdges) KpicategoryOrErr() ([]*Kpi, error) {
	if e.loadedTypes[0] {
		return e.Kpicategory, nil
	}
	return nil, &NotLoadedError{edge: "kpicategory"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*KpiCategory) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the KpiCategory fields.
func (kc *KpiCategory) assignValues(values ...interface{}) error {
	if m, n := len(values), len(kpicategory.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	kc.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		kc.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		kc.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[2])
	} else if value.Valid {
		kc.Name = value.String
	}
	return nil
}

// QueryKpicategory queries the kpicategory edge of the KpiCategory.
func (kc *KpiCategory) QueryKpicategory() *KpiQuery {
	return (&KpiCategoryClient{config: kc.config}).QueryKpicategory(kc)
}

// Update returns a builder for updating this KpiCategory.
// Note that, you need to call KpiCategory.Unwrap() before calling this method, if this KpiCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (kc *KpiCategory) Update() *KpiCategoryUpdateOne {
	return (&KpiCategoryClient{config: kc.config}).UpdateOne(kc)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (kc *KpiCategory) Unwrap() *KpiCategory {
	tx, ok := kc.config.driver.(*txDriver)
	if !ok {
		panic("ent: KpiCategory is not a transactional entity")
	}
	kc.config.driver = tx.drv
	return kc
}

// String implements the fmt.Stringer.
func (kc *KpiCategory) String() string {
	var builder strings.Builder
	builder.WriteString("KpiCategory(")
	builder.WriteString(fmt.Sprintf("id=%v", kc.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(kc.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(kc.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(kc.Name)
	builder.WriteByte(')')
	return builder.String()
}

// KpiCategories is a parsable slice of KpiCategory.
type KpiCategories []*KpiCategory

func (kc KpiCategories) config(cfg config) {
	for _i := range kc {
		kc[_i].config = cfg
	}
}
