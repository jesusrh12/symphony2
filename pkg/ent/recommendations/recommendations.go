// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package recommendations

import (
	"time"

	"github.com/facebook/ent"
)

const (
	// Label holds the string label denoting the recommendations type in the database.
	Label = "recommendations"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldExternalId holds the string denoting the externalid field in the database.
	FieldExternalId = "external_id"
	// FieldResource holds the string denoting the resource field in the database.
	FieldResource = "resource"
	// FieldAlarmType holds the string denoting the alarmtype field in the database.
	FieldAlarmType = "alarm_type"
	// FieldShortDescription holds the string denoting the shortdescription field in the database.
	FieldShortDescription = "short_description"
	// FieldLongDescription holds the string denoting the longdescription field in the database.
	FieldLongDescription = "long_description"
	// FieldCommand holds the string denoting the command field in the database.
	FieldCommand = "command"
	// FieldPriority holds the string denoting the priority field in the database.
	FieldPriority = "priority"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldUsed holds the string denoting the used field in the database.
	FieldUsed = "used"
	// FieldRunbook holds the string denoting the runbook field in the database.
	FieldRunbook = "runbook"

	// EdgeRecomendationSources holds the string denoting the recomendation_sources edge name in mutations.
	EdgeRecomendationSources = "recomendation_sources"
	// EdgeRecomendationCategory holds the string denoting the recomendation_category edge name in mutations.
	EdgeRecomendationCategory = "recomendation_category"
	// EdgeUserCreate holds the string denoting the usercreate edge name in mutations.
	EdgeUserCreate = "UserCreate"
	// EdgeUserApprobed holds the string denoting the userapprobed edge name in mutations.
	EdgeUserApprobed = "UserApprobed"
	// EdgeVendorsRecomendations holds the string denoting the vendors_recomendations edge name in mutations.
	EdgeVendorsRecomendations = "vendors_recomendations"

	// Table holds the table name of the recommendations in the database.
	Table = "recommendations"
	// RecomendationSourcesTable is the table the holds the recomendation_sources relation/edge.
	RecomendationSourcesTable = "recommendations"
	// RecomendationSourcesInverseTable is the table name for the RecommendationsSources entity.
	// It exists in this package in order to avoid circular dependency with the "recommendationssources" package.
	RecomendationSourcesInverseTable = "recommendations_sources"
	// RecomendationSourcesColumn is the table column denoting the recomendation_sources relation/edge.
	RecomendationSourcesColumn = "recommendations_sources_recommendations"
	// RecomendationCategoryTable is the table the holds the recomendation_category relation/edge.
	RecomendationCategoryTable = "recommendations"
	// RecomendationCategoryInverseTable is the table name for the RecommendationsCategory entity.
	// It exists in this package in order to avoid circular dependency with the "recommendationscategory" package.
	RecomendationCategoryInverseTable = "recommendations_categories"
	// RecomendationCategoryColumn is the table column denoting the recomendation_category relation/edge.
	RecomendationCategoryColumn = "recommendations_category_recommendations"
	// UserCreateTable is the table the holds the UserCreate relation/edge.
	UserCreateTable = "recommendations"
	// UserCreateInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserCreateInverseTable = "users"
	// UserCreateColumn is the table column denoting the UserCreate relation/edge.
	UserCreateColumn = "user_user_create"
	// UserApprobedTable is the table the holds the UserApprobed relation/edge.
	UserApprobedTable = "recommendations"
	// UserApprobedInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserApprobedInverseTable = "users"
	// UserApprobedColumn is the table column denoting the UserApprobed relation/edge.
	UserApprobedColumn = "user_user_approved"
	// VendorsRecomendationsTable is the table the holds the vendors_recomendations relation/edge.
	VendorsRecomendationsTable = "recommendations"
	// VendorsRecomendationsInverseTable is the table name for the Vendor entity.
	// It exists in this package in order to avoid circular dependency with the "vendor" package.
	VendorsRecomendationsInverseTable = "vendors"
	// VendorsRecomendationsColumn is the table column denoting the vendors_recomendations relation/edge.
	VendorsRecomendationsColumn = "vendor_vendors_recomendations"
)

// Columns holds all SQL columns for recommendations fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldExternalId,
	FieldResource,
	FieldAlarmType,
	FieldShortDescription,
	FieldLongDescription,
	FieldCommand,
	FieldPriority,
	FieldStatus,
	FieldUsed,
	FieldRunbook,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Recommendations type.
var ForeignKeys = []string{
	"recommendations_category_recommendations",
	"recommendations_sources_recommendations",
	"user_user_create",
	"user_user_approved",
	"vendor_vendors_recomendations",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/facebookincubator/symphony/pkg/ent/runtime"
//
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultCreateTime holds the default value on creation for the create_time field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the update_time field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	UpdateDefaultUpdateTime func() time.Time
)
