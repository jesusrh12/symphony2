// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/block"
	"github.com/facebookincubator/symphony/pkg/ent/blockinstance"
	"github.com/facebookincubator/symphony/pkg/ent/flowinstance"
	"github.com/facebookincubator/symphony/pkg/flowengine/flowschema"
)

// BlockInstance is the model entity for the BlockInstance schema.
type BlockInstance struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Status holds the value of the "status" field.
	Status blockinstance.Status `json:"status,omitempty"`
	// Inputs holds the value of the "inputs" field.
	Inputs []*flowschema.VariableValue `json:"inputs,omitempty"`
	// Outputs holds the value of the "outputs" field.
	Outputs []*flowschema.VariableValue `json:"outputs,omitempty"`
	// FailureReason holds the value of the "failure_reason" field.
	FailureReason string `json:"failure_reason,omitempty"`
	// BlockInstanceCounter holds the value of the "block_instance_counter" field.
	BlockInstanceCounter int `json:"block_instance_counter,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate *time.Time `json:"end_date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BlockInstanceQuery when eager-loading is set.
	Edges                BlockInstanceEdges `json:"edges"`
	block_instance_block *int
	flow_instance_blocks *int
}

// BlockInstanceEdges holds the relations/edges for other nodes in the graph.
type BlockInstanceEdges struct {
	// FlowInstance holds the value of the flow_instance edge.
	FlowInstance *FlowInstance
	// Block holds the value of the block edge.
	Block *Block
	// SubflowInstance holds the value of the subflow_instance edge.
	SubflowInstance *FlowInstance
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// FlowInstanceOrErr returns the FlowInstance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlockInstanceEdges) FlowInstanceOrErr() (*FlowInstance, error) {
	if e.loadedTypes[0] {
		if e.FlowInstance == nil {
			// The edge flow_instance was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: flowinstance.Label}
		}
		return e.FlowInstance, nil
	}
	return nil, &NotLoadedError{edge: "flow_instance"}
}

// BlockOrErr returns the Block value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlockInstanceEdges) BlockOrErr() (*Block, error) {
	if e.loadedTypes[1] {
		if e.Block == nil {
			// The edge block was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: block.Label}
		}
		return e.Block, nil
	}
	return nil, &NotLoadedError{edge: "block"}
}

// SubflowInstanceOrErr returns the SubflowInstance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlockInstanceEdges) SubflowInstanceOrErr() (*FlowInstance, error) {
	if e.loadedTypes[2] {
		if e.SubflowInstance == nil {
			// The edge subflow_instance was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: flowinstance.Label}
		}
		return e.SubflowInstance, nil
	}
	return nil, &NotLoadedError{edge: "subflow_instance"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BlockInstance) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // status
		&[]byte{},         // inputs
		&[]byte{},         // outputs
		&sql.NullString{}, // failure_reason
		&sql.NullInt64{},  // block_instance_counter
		&sql.NullTime{},   // start_date
		&sql.NullTime{},   // end_date
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*BlockInstance) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // block_instance_block
		&sql.NullInt64{}, // flow_instance_blocks
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BlockInstance fields.
func (bi *BlockInstance) assignValues(values ...interface{}) error {
	if m, n := len(values), len(blockinstance.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	bi.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		bi.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		bi.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[2])
	} else if value.Valid {
		bi.Status = blockinstance.Status(value.String)
	}

	if value, ok := values[3].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field inputs", values[3])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &bi.Inputs); err != nil {
			return fmt.Errorf("unmarshal field inputs: %v", err)
		}
	}

	if value, ok := values[4].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field outputs", values[4])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &bi.Outputs); err != nil {
			return fmt.Errorf("unmarshal field outputs: %v", err)
		}
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field failure_reason", values[5])
	} else if value.Valid {
		bi.FailureReason = value.String
	}
	if value, ok := values[6].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field block_instance_counter", values[6])
	} else if value.Valid {
		bi.BlockInstanceCounter = int(value.Int64)
	}
	if value, ok := values[7].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field start_date", values[7])
	} else if value.Valid {
		bi.StartDate = value.Time
	}
	if value, ok := values[8].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field end_date", values[8])
	} else if value.Valid {
		bi.EndDate = new(time.Time)
		*bi.EndDate = value.Time
	}
	values = values[9:]
	if len(values) == len(blockinstance.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field block_instance_block", value)
		} else if value.Valid {
			bi.block_instance_block = new(int)
			*bi.block_instance_block = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field flow_instance_blocks", value)
		} else if value.Valid {
			bi.flow_instance_blocks = new(int)
			*bi.flow_instance_blocks = int(value.Int64)
		}
	}
	return nil
}

// QueryFlowInstance queries the flow_instance edge of the BlockInstance.
func (bi *BlockInstance) QueryFlowInstance() *FlowInstanceQuery {
	return (&BlockInstanceClient{config: bi.config}).QueryFlowInstance(bi)
}

// QueryBlock queries the block edge of the BlockInstance.
func (bi *BlockInstance) QueryBlock() *BlockQuery {
	return (&BlockInstanceClient{config: bi.config}).QueryBlock(bi)
}

// QuerySubflowInstance queries the subflow_instance edge of the BlockInstance.
func (bi *BlockInstance) QuerySubflowInstance() *FlowInstanceQuery {
	return (&BlockInstanceClient{config: bi.config}).QuerySubflowInstance(bi)
}

// Update returns a builder for updating this BlockInstance.
// Note that, you need to call BlockInstance.Unwrap() before calling this method, if this BlockInstance
// was returned from a transaction, and the transaction was committed or rolled back.
func (bi *BlockInstance) Update() *BlockInstanceUpdateOne {
	return (&BlockInstanceClient{config: bi.config}).UpdateOne(bi)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (bi *BlockInstance) Unwrap() *BlockInstance {
	tx, ok := bi.config.driver.(*txDriver)
	if !ok {
		panic("ent: BlockInstance is not a transactional entity")
	}
	bi.config.driver = tx.drv
	return bi
}

// String implements the fmt.Stringer.
func (bi *BlockInstance) String() string {
	var builder strings.Builder
	builder.WriteString("BlockInstance(")
	builder.WriteString(fmt.Sprintf("id=%v", bi.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(bi.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(bi.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", bi.Status))
	builder.WriteString(", inputs=")
	builder.WriteString(fmt.Sprintf("%v", bi.Inputs))
	builder.WriteString(", outputs=")
	builder.WriteString(fmt.Sprintf("%v", bi.Outputs))
	builder.WriteString(", failure_reason=")
	builder.WriteString(bi.FailureReason)
	builder.WriteString(", block_instance_counter=")
	builder.WriteString(fmt.Sprintf("%v", bi.BlockInstanceCounter))
	builder.WriteString(", start_date=")
	builder.WriteString(bi.StartDate.Format(time.ANSIC))
	if v := bi.EndDate; v != nil {
		builder.WriteString(", end_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// BlockInstances is a parsable slice of BlockInstance.
type BlockInstances []*BlockInstance

func (bi BlockInstances) config(cfg config) {
	for _i := range bi {
		bi[_i].config = cfg
	}
}
