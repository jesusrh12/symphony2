// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package activity

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/facebook/ent"
)

const (
	// Label holds the string label denoting the activity type in the database.
	Label = "activity"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldActivityType holds the string denoting the activity_type field in the database.
	FieldActivityType = "changed_field"
	// FieldIsCreate holds the string denoting the is_create field in the database.
	FieldIsCreate = "is_create"
	// FieldOldValue holds the string denoting the old_value field in the database.
	FieldOldValue = "old_value"
	// FieldNewValue holds the string denoting the new_value field in the database.
	FieldNewValue = "new_value"
	// FieldClockDetails holds the string denoting the clock_details field in the database.
	FieldClockDetails = "clock_details"

	// EdgeAuthor holds the string denoting the author edge name in mutations.
	EdgeAuthor = "author"
	// EdgeWorkOrder holds the string denoting the work_order edge name in mutations.
	EdgeWorkOrder = "work_order"

	// Table holds the table name of the activity in the database.
	Table = "activities"
	// AuthorTable is the table the holds the author relation/edge.
	AuthorTable = "activities"
	// AuthorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AuthorInverseTable = "users"
	// AuthorColumn is the table column denoting the author relation/edge.
	AuthorColumn = "activity_author"
	// WorkOrderTable is the table the holds the work_order relation/edge.
	WorkOrderTable = "activities"
	// WorkOrderInverseTable is the table name for the WorkOrder entity.
	// It exists in this package in order to avoid circular dependency with the "workorder" package.
	WorkOrderInverseTable = "work_orders"
	// WorkOrderColumn is the table column denoting the work_order relation/edge.
	WorkOrderColumn = "work_order_activities"
)

// Columns holds all SQL columns for activity fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldActivityType,
	FieldIsCreate,
	FieldOldValue,
	FieldNewValue,
	FieldClockDetails,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Activity type.
var ForeignKeys = []string{
	"activity_author",
	"work_order_activities",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/facebookincubator/symphony/pkg/ent/runtime"
//
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultCreateTime holds the default value on creation for the create_time field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the update_time field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultIsCreate holds the default value on creation for the is_create field.
	DefaultIsCreate bool
)

// ActivityType defines the type for the activity_type enum field.
type ActivityType string

// ActivityType values.
const (
	ActivityTypeStatusChanged       ActivityType = "STATUS"
	ActivityTypePriorityChanged     ActivityType = "PRIORITY"
	ActivityTypeAssigneeChanged     ActivityType = "ASSIGNEE"
	ActivityTypeCreationDateChanged ActivityType = "CREATION_DATE"
	ActivityTypeOwnerChanged        ActivityType = "OWNER"
	ActivityTypeNameChanged         ActivityType = "NAME"
	ActivityTypeDescriptionChanged  ActivityType = "DESCRIPTION"
	ActivityTypeClockIn             ActivityType = "CLOCK_IN"
	ActivityTypeClockOut            ActivityType = "CLOCK_OUT"
)

func (at ActivityType) String() string {
	return string(at)
}

// ActivityTypeValidator is a validator for the "activity_type" field enum values. It is called by the builders before save.
func ActivityTypeValidator(at ActivityType) error {
	switch at {
	case ActivityTypeStatusChanged, ActivityTypePriorityChanged, ActivityTypeAssigneeChanged, ActivityTypeCreationDateChanged, ActivityTypeOwnerChanged, ActivityTypeNameChanged, ActivityTypeDescriptionChanged, ActivityTypeClockIn, ActivityTypeClockOut:
		return nil
	default:
		return fmt.Errorf("activity: invalid enum value for activity_type field: %q", at)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (at ActivityType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(at.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (at *ActivityType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*at = ActivityType(str)
	if err := ActivityTypeValidator(*at); err != nil {
		return fmt.Errorf("%s is not a valid ActivityType", str)
	}
	return nil
}
