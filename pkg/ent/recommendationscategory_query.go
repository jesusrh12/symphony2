// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/recommendations"
	"github.com/facebookincubator/symphony/pkg/ent/recommendationscategory"
)

// RecommendationsCategoryQuery is the builder for querying RecommendationsCategory entities.
type RecommendationsCategoryQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.RecommendationsCategory
	// eager-loading edges.
	withRecommendations *RecommendationsQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (rcq *RecommendationsCategoryQuery) Where(ps ...predicate.RecommendationsCategory) *RecommendationsCategoryQuery {
	rcq.predicates = append(rcq.predicates, ps...)
	return rcq
}

// Limit adds a limit step to the query.
func (rcq *RecommendationsCategoryQuery) Limit(limit int) *RecommendationsCategoryQuery {
	rcq.limit = &limit
	return rcq
}

// Offset adds an offset step to the query.
func (rcq *RecommendationsCategoryQuery) Offset(offset int) *RecommendationsCategoryQuery {
	rcq.offset = &offset
	return rcq
}

// Order adds an order step to the query.
func (rcq *RecommendationsCategoryQuery) Order(o ...OrderFunc) *RecommendationsCategoryQuery {
	rcq.order = append(rcq.order, o...)
	return rcq
}

// QueryRecommendations chains the current query on the recommendations edge.
func (rcq *RecommendationsCategoryQuery) QueryRecommendations() *RecommendationsQuery {
	query := &RecommendationsQuery{config: rcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(recommendationscategory.Table, recommendationscategory.FieldID, selector),
			sqlgraph.To(recommendations.Table, recommendations.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, recommendationscategory.RecommendationsTable, recommendationscategory.RecommendationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RecommendationsCategory entity in the query. Returns *NotFoundError when no recommendationscategory was found.
func (rcq *RecommendationsCategoryQuery) First(ctx context.Context) (*RecommendationsCategory, error) {
	nodes, err := rcq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{recommendationscategory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rcq *RecommendationsCategoryQuery) FirstX(ctx context.Context) *RecommendationsCategory {
	node, err := rcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RecommendationsCategory id in the query. Returns *NotFoundError when no id was found.
func (rcq *RecommendationsCategoryQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rcq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{recommendationscategory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rcq *RecommendationsCategoryQuery) FirstIDX(ctx context.Context) int {
	id, err := rcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only RecommendationsCategory entity in the query, returns an error if not exactly one entity was returned.
func (rcq *RecommendationsCategoryQuery) Only(ctx context.Context) (*RecommendationsCategory, error) {
	nodes, err := rcq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{recommendationscategory.Label}
	default:
		return nil, &NotSingularError{recommendationscategory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rcq *RecommendationsCategoryQuery) OnlyX(ctx context.Context) *RecommendationsCategory {
	node, err := rcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only RecommendationsCategory id in the query, returns an error if not exactly one id was returned.
func (rcq *RecommendationsCategoryQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rcq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{recommendationscategory.Label}
	default:
		err = &NotSingularError{recommendationscategory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rcq *RecommendationsCategoryQuery) OnlyIDX(ctx context.Context) int {
	id, err := rcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RecommendationsCategories.
func (rcq *RecommendationsCategoryQuery) All(ctx context.Context) ([]*RecommendationsCategory, error) {
	if err := rcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return rcq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (rcq *RecommendationsCategoryQuery) AllX(ctx context.Context) []*RecommendationsCategory {
	nodes, err := rcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RecommendationsCategory ids.
func (rcq *RecommendationsCategoryQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := rcq.Select(recommendationscategory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rcq *RecommendationsCategoryQuery) IDsX(ctx context.Context) []int {
	ids, err := rcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rcq *RecommendationsCategoryQuery) Count(ctx context.Context) (int, error) {
	if err := rcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return rcq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (rcq *RecommendationsCategoryQuery) CountX(ctx context.Context) int {
	count, err := rcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rcq *RecommendationsCategoryQuery) Exist(ctx context.Context) (bool, error) {
	if err := rcq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return rcq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (rcq *RecommendationsCategoryQuery) ExistX(ctx context.Context) bool {
	exist, err := rcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rcq *RecommendationsCategoryQuery) Clone() *RecommendationsCategoryQuery {
	if rcq == nil {
		return nil
	}
	return &RecommendationsCategoryQuery{
		config:              rcq.config,
		limit:               rcq.limit,
		offset:              rcq.offset,
		order:               append([]OrderFunc{}, rcq.order...),
		unique:              append([]string{}, rcq.unique...),
		predicates:          append([]predicate.RecommendationsCategory{}, rcq.predicates...),
		withRecommendations: rcq.withRecommendations.Clone(),
		// clone intermediate query.
		sql:  rcq.sql.Clone(),
		path: rcq.path,
	}
}

//  WithRecommendations tells the query-builder to eager-loads the nodes that are connected to
// the "recommendations" edge. The optional arguments used to configure the query builder of the edge.
func (rcq *RecommendationsCategoryQuery) WithRecommendations(opts ...func(*RecommendationsQuery)) *RecommendationsCategoryQuery {
	query := &RecommendationsQuery{config: rcq.config}
	for _, opt := range opts {
		opt(query)
	}
	rcq.withRecommendations = query
	return rcq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RecommendationsCategory.Query().
//		GroupBy(recommendationscategory.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (rcq *RecommendationsCategoryQuery) GroupBy(field string, fields ...string) *RecommendationsCategoryGroupBy {
	group := &RecommendationsCategoryGroupBy{config: rcq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rcq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.RecommendationsCategory.Query().
//		Select(recommendationscategory.FieldCreateTime).
//		Scan(ctx, &v)
//
func (rcq *RecommendationsCategoryQuery) Select(field string, fields ...string) *RecommendationsCategorySelect {
	selector := &RecommendationsCategorySelect{config: rcq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rcq.sqlQuery(), nil
	}
	return selector
}

func (rcq *RecommendationsCategoryQuery) prepareQuery(ctx context.Context) error {
	if rcq.path != nil {
		prev, err := rcq.path(ctx)
		if err != nil {
			return err
		}
		rcq.sql = prev
	}
	if err := recommendationscategory.Policy.EvalQuery(ctx, rcq); err != nil {
		return err
	}
	return nil
}

func (rcq *RecommendationsCategoryQuery) sqlAll(ctx context.Context) ([]*RecommendationsCategory, error) {
	var (
		nodes       = []*RecommendationsCategory{}
		_spec       = rcq.querySpec()
		loadedTypes = [1]bool{
			rcq.withRecommendations != nil,
		}
	)
	_spec.ScanValues = func() []interface{} {
		node := &RecommendationsCategory{config: rcq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, rcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := rcq.withRecommendations; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*RecommendationsCategory)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Recommendations = []*Recommendations{}
		}
		query.withFKs = true
		query.Where(predicate.Recommendations(func(s *sql.Selector) {
			s.Where(sql.InValues(recommendationscategory.RecommendationsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.recommendations_category_recommendations
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "recommendations_category_recommendations" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "recommendations_category_recommendations" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Recommendations = append(node.Edges.Recommendations, n)
		}
	}

	return nodes, nil
}

func (rcq *RecommendationsCategoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rcq.querySpec()
	return sqlgraph.CountNodes(ctx, rcq.driver, _spec)
}

func (rcq *RecommendationsCategoryQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := rcq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (rcq *RecommendationsCategoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   recommendationscategory.Table,
			Columns: recommendationscategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: recommendationscategory.FieldID,
			},
		},
		From:   rcq.sql,
		Unique: true,
	}
	if ps := rcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rcq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rcq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, recommendationscategory.ValidColumn)
			}
		}
	}
	return _spec
}

func (rcq *RecommendationsCategoryQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(rcq.driver.Dialect())
	t1 := builder.Table(recommendationscategory.Table)
	selector := builder.Select(t1.Columns(recommendationscategory.Columns...)...).From(t1)
	if rcq.sql != nil {
		selector = rcq.sql
		selector.Select(selector.Columns(recommendationscategory.Columns...)...)
	}
	for _, p := range rcq.predicates {
		p(selector)
	}
	for _, p := range rcq.order {
		p(selector, recommendationscategory.ValidColumn)
	}
	if offset := rcq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rcq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RecommendationsCategoryGroupBy is the builder for group-by RecommendationsCategory entities.
type RecommendationsCategoryGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rcgb *RecommendationsCategoryGroupBy) Aggregate(fns ...AggregateFunc) *RecommendationsCategoryGroupBy {
	rcgb.fns = append(rcgb.fns, fns...)
	return rcgb
}

// Scan applies the group-by query and scan the result into the given value.
func (rcgb *RecommendationsCategoryGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := rcgb.path(ctx)
	if err != nil {
		return err
	}
	rcgb.sql = query
	return rcgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rcgb *RecommendationsCategoryGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := rcgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (rcgb *RecommendationsCategoryGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(rcgb.fields) > 1 {
		return nil, errors.New("ent: RecommendationsCategoryGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := rcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rcgb *RecommendationsCategoryGroupBy) StringsX(ctx context.Context) []string {
	v, err := rcgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (rcgb *RecommendationsCategoryGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rcgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{recommendationscategory.Label}
	default:
		err = fmt.Errorf("ent: RecommendationsCategoryGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rcgb *RecommendationsCategoryGroupBy) StringX(ctx context.Context) string {
	v, err := rcgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (rcgb *RecommendationsCategoryGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(rcgb.fields) > 1 {
		return nil, errors.New("ent: RecommendationsCategoryGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := rcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rcgb *RecommendationsCategoryGroupBy) IntsX(ctx context.Context) []int {
	v, err := rcgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (rcgb *RecommendationsCategoryGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rcgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{recommendationscategory.Label}
	default:
		err = fmt.Errorf("ent: RecommendationsCategoryGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rcgb *RecommendationsCategoryGroupBy) IntX(ctx context.Context) int {
	v, err := rcgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (rcgb *RecommendationsCategoryGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(rcgb.fields) > 1 {
		return nil, errors.New("ent: RecommendationsCategoryGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := rcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rcgb *RecommendationsCategoryGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := rcgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (rcgb *RecommendationsCategoryGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rcgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{recommendationscategory.Label}
	default:
		err = fmt.Errorf("ent: RecommendationsCategoryGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rcgb *RecommendationsCategoryGroupBy) Float64X(ctx context.Context) float64 {
	v, err := rcgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (rcgb *RecommendationsCategoryGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(rcgb.fields) > 1 {
		return nil, errors.New("ent: RecommendationsCategoryGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := rcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rcgb *RecommendationsCategoryGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := rcgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (rcgb *RecommendationsCategoryGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rcgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{recommendationscategory.Label}
	default:
		err = fmt.Errorf("ent: RecommendationsCategoryGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rcgb *RecommendationsCategoryGroupBy) BoolX(ctx context.Context) bool {
	v, err := rcgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rcgb *RecommendationsCategoryGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rcgb.fields {
		if !recommendationscategory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := rcgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rcgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rcgb *RecommendationsCategoryGroupBy) sqlQuery() *sql.Selector {
	selector := rcgb.sql
	columns := make([]string, 0, len(rcgb.fields)+len(rcgb.fns))
	columns = append(columns, rcgb.fields...)
	for _, fn := range rcgb.fns {
		columns = append(columns, fn(selector, recommendationscategory.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(rcgb.fields...)
}

// RecommendationsCategorySelect is the builder for select fields of RecommendationsCategory entities.
type RecommendationsCategorySelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (rcs *RecommendationsCategorySelect) Scan(ctx context.Context, v interface{}) error {
	query, err := rcs.path(ctx)
	if err != nil {
		return err
	}
	rcs.sql = query
	return rcs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rcs *RecommendationsCategorySelect) ScanX(ctx context.Context, v interface{}) {
	if err := rcs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (rcs *RecommendationsCategorySelect) Strings(ctx context.Context) ([]string, error) {
	if len(rcs.fields) > 1 {
		return nil, errors.New("ent: RecommendationsCategorySelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := rcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rcs *RecommendationsCategorySelect) StringsX(ctx context.Context) []string {
	v, err := rcs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (rcs *RecommendationsCategorySelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rcs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{recommendationscategory.Label}
	default:
		err = fmt.Errorf("ent: RecommendationsCategorySelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rcs *RecommendationsCategorySelect) StringX(ctx context.Context) string {
	v, err := rcs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (rcs *RecommendationsCategorySelect) Ints(ctx context.Context) ([]int, error) {
	if len(rcs.fields) > 1 {
		return nil, errors.New("ent: RecommendationsCategorySelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := rcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rcs *RecommendationsCategorySelect) IntsX(ctx context.Context) []int {
	v, err := rcs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (rcs *RecommendationsCategorySelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rcs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{recommendationscategory.Label}
	default:
		err = fmt.Errorf("ent: RecommendationsCategorySelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rcs *RecommendationsCategorySelect) IntX(ctx context.Context) int {
	v, err := rcs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (rcs *RecommendationsCategorySelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(rcs.fields) > 1 {
		return nil, errors.New("ent: RecommendationsCategorySelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := rcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rcs *RecommendationsCategorySelect) Float64sX(ctx context.Context) []float64 {
	v, err := rcs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (rcs *RecommendationsCategorySelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rcs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{recommendationscategory.Label}
	default:
		err = fmt.Errorf("ent: RecommendationsCategorySelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rcs *RecommendationsCategorySelect) Float64X(ctx context.Context) float64 {
	v, err := rcs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (rcs *RecommendationsCategorySelect) Bools(ctx context.Context) ([]bool, error) {
	if len(rcs.fields) > 1 {
		return nil, errors.New("ent: RecommendationsCategorySelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := rcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rcs *RecommendationsCategorySelect) BoolsX(ctx context.Context) []bool {
	v, err := rcs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (rcs *RecommendationsCategorySelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rcs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{recommendationscategory.Label}
	default:
		err = fmt.Errorf("ent: RecommendationsCategorySelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rcs *RecommendationsCategorySelect) BoolX(ctx context.Context) bool {
	v, err := rcs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rcs *RecommendationsCategorySelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rcs.fields {
		if !recommendationscategory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := rcs.sqlQuery().Query()
	if err := rcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rcs *RecommendationsCategorySelect) sqlQuery() sql.Querier {
	selector := rcs.sql
	selector.Select(selector.Columns(rcs.fields...)...)
	return selector
}
