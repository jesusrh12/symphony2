// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/block"
	"github.com/facebookincubator/symphony/pkg/ent/blockinstance"
	"github.com/facebookincubator/symphony/pkg/ent/flowinstance"
	"github.com/facebookincubator/symphony/pkg/flowengine/flowschema"
)

// BlockInstanceCreate is the builder for creating a BlockInstance entity.
type BlockInstanceCreate struct {
	config
	mutation *BlockInstanceMutation
	hooks    []Hook
}

// SetCreateTime sets the create_time field.
func (bic *BlockInstanceCreate) SetCreateTime(t time.Time) *BlockInstanceCreate {
	bic.mutation.SetCreateTime(t)
	return bic
}

// SetNillableCreateTime sets the create_time field if the given value is not nil.
func (bic *BlockInstanceCreate) SetNillableCreateTime(t *time.Time) *BlockInstanceCreate {
	if t != nil {
		bic.SetCreateTime(*t)
	}
	return bic
}

// SetUpdateTime sets the update_time field.
func (bic *BlockInstanceCreate) SetUpdateTime(t time.Time) *BlockInstanceCreate {
	bic.mutation.SetUpdateTime(t)
	return bic
}

// SetNillableUpdateTime sets the update_time field if the given value is not nil.
func (bic *BlockInstanceCreate) SetNillableUpdateTime(t *time.Time) *BlockInstanceCreate {
	if t != nil {
		bic.SetUpdateTime(*t)
	}
	return bic
}

// SetStatus sets the status field.
func (bic *BlockInstanceCreate) SetStatus(b blockinstance.Status) *BlockInstanceCreate {
	bic.mutation.SetStatus(b)
	return bic
}

// SetNillableStatus sets the status field if the given value is not nil.
func (bic *BlockInstanceCreate) SetNillableStatus(b *blockinstance.Status) *BlockInstanceCreate {
	if b != nil {
		bic.SetStatus(*b)
	}
	return bic
}

// SetInputs sets the inputs field.
func (bic *BlockInstanceCreate) SetInputs(fv []*flowschema.VariableValue) *BlockInstanceCreate {
	bic.mutation.SetInputs(fv)
	return bic
}

// SetOutputs sets the outputs field.
func (bic *BlockInstanceCreate) SetOutputs(fv []*flowschema.VariableValue) *BlockInstanceCreate {
	bic.mutation.SetOutputs(fv)
	return bic
}

// SetFailureReason sets the failure_reason field.
func (bic *BlockInstanceCreate) SetFailureReason(s string) *BlockInstanceCreate {
	bic.mutation.SetFailureReason(s)
	return bic
}

// SetNillableFailureReason sets the failure_reason field if the given value is not nil.
func (bic *BlockInstanceCreate) SetNillableFailureReason(s *string) *BlockInstanceCreate {
	if s != nil {
		bic.SetFailureReason(*s)
	}
	return bic
}

// SetBlockInstanceCounter sets the block_instance_counter field.
func (bic *BlockInstanceCreate) SetBlockInstanceCounter(i int) *BlockInstanceCreate {
	bic.mutation.SetBlockInstanceCounter(i)
	return bic
}

// SetNillableBlockInstanceCounter sets the block_instance_counter field if the given value is not nil.
func (bic *BlockInstanceCreate) SetNillableBlockInstanceCounter(i *int) *BlockInstanceCreate {
	if i != nil {
		bic.SetBlockInstanceCounter(*i)
	}
	return bic
}

// SetStartDate sets the start_date field.
func (bic *BlockInstanceCreate) SetStartDate(t time.Time) *BlockInstanceCreate {
	bic.mutation.SetStartDate(t)
	return bic
}

// SetEndDate sets the end_date field.
func (bic *BlockInstanceCreate) SetEndDate(t time.Time) *BlockInstanceCreate {
	bic.mutation.SetEndDate(t)
	return bic
}

// SetNillableEndDate sets the end_date field if the given value is not nil.
func (bic *BlockInstanceCreate) SetNillableEndDate(t *time.Time) *BlockInstanceCreate {
	if t != nil {
		bic.SetEndDate(*t)
	}
	return bic
}

// SetFlowInstanceID sets the flow_instance edge to FlowInstance by id.
func (bic *BlockInstanceCreate) SetFlowInstanceID(id int) *BlockInstanceCreate {
	bic.mutation.SetFlowInstanceID(id)
	return bic
}

// SetFlowInstance sets the flow_instance edge to FlowInstance.
func (bic *BlockInstanceCreate) SetFlowInstance(f *FlowInstance) *BlockInstanceCreate {
	return bic.SetFlowInstanceID(f.ID)
}

// SetBlockID sets the block edge to Block by id.
func (bic *BlockInstanceCreate) SetBlockID(id int) *BlockInstanceCreate {
	bic.mutation.SetBlockID(id)
	return bic
}

// SetBlock sets the block edge to Block.
func (bic *BlockInstanceCreate) SetBlock(b *Block) *BlockInstanceCreate {
	return bic.SetBlockID(b.ID)
}

// SetSubflowInstanceID sets the subflow_instance edge to FlowInstance by id.
func (bic *BlockInstanceCreate) SetSubflowInstanceID(id int) *BlockInstanceCreate {
	bic.mutation.SetSubflowInstanceID(id)
	return bic
}

// SetNillableSubflowInstanceID sets the subflow_instance edge to FlowInstance by id if the given value is not nil.
func (bic *BlockInstanceCreate) SetNillableSubflowInstanceID(id *int) *BlockInstanceCreate {
	if id != nil {
		bic = bic.SetSubflowInstanceID(*id)
	}
	return bic
}

// SetSubflowInstance sets the subflow_instance edge to FlowInstance.
func (bic *BlockInstanceCreate) SetSubflowInstance(f *FlowInstance) *BlockInstanceCreate {
	return bic.SetSubflowInstanceID(f.ID)
}

// Mutation returns the BlockInstanceMutation object of the builder.
func (bic *BlockInstanceCreate) Mutation() *BlockInstanceMutation {
	return bic.mutation
}

// Save creates the BlockInstance in the database.
func (bic *BlockInstanceCreate) Save(ctx context.Context) (*BlockInstance, error) {
	var (
		err  error
		node *BlockInstance
	)
	bic.defaults()
	if len(bic.hooks) == 0 {
		if err = bic.check(); err != nil {
			return nil, err
		}
		node, err = bic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlockInstanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bic.check(); err != nil {
				return nil, err
			}
			bic.mutation = mutation
			node, err = bic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bic.hooks) - 1; i >= 0; i-- {
			mut = bic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bic *BlockInstanceCreate) SaveX(ctx context.Context) *BlockInstance {
	v, err := bic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (bic *BlockInstanceCreate) defaults() {
	if _, ok := bic.mutation.CreateTime(); !ok {
		v := blockinstance.DefaultCreateTime()
		bic.mutation.SetCreateTime(v)
	}
	if _, ok := bic.mutation.UpdateTime(); !ok {
		v := blockinstance.DefaultUpdateTime()
		bic.mutation.SetUpdateTime(v)
	}
	if _, ok := bic.mutation.Status(); !ok {
		v := blockinstance.DefaultStatus
		bic.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bic *BlockInstanceCreate) check() error {
	if _, ok := bic.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := bic.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := bic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if v, ok := bic.mutation.Status(); ok {
		if err := blockinstance.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if _, ok := bic.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New("ent: missing required field \"start_date\"")}
	}
	if _, ok := bic.mutation.FlowInstanceID(); !ok {
		return &ValidationError{Name: "flow_instance", err: errors.New("ent: missing required edge \"flow_instance\"")}
	}
	if _, ok := bic.mutation.BlockID(); !ok {
		return &ValidationError{Name: "block", err: errors.New("ent: missing required edge \"block\"")}
	}
	return nil
}

func (bic *BlockInstanceCreate) sqlSave(ctx context.Context) (*BlockInstance, error) {
	_node, _spec := bic.createSpec()
	if err := sqlgraph.CreateNode(ctx, bic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (bic *BlockInstanceCreate) createSpec() (*BlockInstance, *sqlgraph.CreateSpec) {
	var (
		_node = &BlockInstance{config: bic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: blockinstance.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blockinstance.FieldID,
			},
		}
	)
	if value, ok := bic.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blockinstance.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := bic.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blockinstance.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := bic.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: blockinstance.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := bic.mutation.Inputs(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: blockinstance.FieldInputs,
		})
		_node.Inputs = value
	}
	if value, ok := bic.mutation.Outputs(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: blockinstance.FieldOutputs,
		})
		_node.Outputs = value
	}
	if value, ok := bic.mutation.FailureReason(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blockinstance.FieldFailureReason,
		})
		_node.FailureReason = value
	}
	if value, ok := bic.mutation.BlockInstanceCounter(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: blockinstance.FieldBlockInstanceCounter,
		})
		_node.BlockInstanceCounter = value
	}
	if value, ok := bic.mutation.StartDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blockinstance.FieldStartDate,
		})
		_node.StartDate = value
	}
	if value, ok := bic.mutation.EndDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blockinstance.FieldEndDate,
		})
		_node.EndDate = &value
	}
	if nodes := bic.mutation.FlowInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockinstance.FlowInstanceTable,
			Columns: []string{blockinstance.FlowInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bic.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   blockinstance.BlockTable,
			Columns: []string{blockinstance.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bic.mutation.SubflowInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   blockinstance.SubflowInstanceTable,
			Columns: []string{blockinstance.SubflowInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BlockInstanceCreateBulk is the builder for creating a bulk of BlockInstance entities.
type BlockInstanceCreateBulk struct {
	config
	builders []*BlockInstanceCreate
}

// Save creates the BlockInstance entities in the database.
func (bicb *BlockInstanceCreateBulk) Save(ctx context.Context) ([]*BlockInstance, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bicb.builders))
	nodes := make([]*BlockInstance, len(bicb.builders))
	mutators := make([]Mutator, len(bicb.builders))
	for i := range bicb.builders {
		func(i int, root context.Context) {
			builder := bicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlockInstanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bicb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bicb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (bicb *BlockInstanceCreateBulk) SaveX(ctx context.Context) []*BlockInstance {
	v, err := bicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
