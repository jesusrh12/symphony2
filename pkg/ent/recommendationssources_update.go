// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/recommendations"
	"github.com/facebookincubator/symphony/pkg/ent/recommendationssources"
)

// RecommendationsSourcesUpdate is the builder for updating RecommendationsSources entities.
type RecommendationsSourcesUpdate struct {
	config
	hooks    []Hook
	mutation *RecommendationsSourcesMutation
}

// Where adds a new predicate for the builder.
func (rsu *RecommendationsSourcesUpdate) Where(ps ...predicate.RecommendationsSources) *RecommendationsSourcesUpdate {
	rsu.mutation.predicates = append(rsu.mutation.predicates, ps...)
	return rsu
}

// SetName sets the name field.
func (rsu *RecommendationsSourcesUpdate) SetName(s string) *RecommendationsSourcesUpdate {
	rsu.mutation.SetName(s)
	return rsu
}

// AddRecommendationIDs adds the recommendations edge to Recommendations by ids.
func (rsu *RecommendationsSourcesUpdate) AddRecommendationIDs(ids ...int) *RecommendationsSourcesUpdate {
	rsu.mutation.AddRecommendationIDs(ids...)
	return rsu
}

// AddRecommendations adds the recommendations edges to Recommendations.
func (rsu *RecommendationsSourcesUpdate) AddRecommendations(r ...*Recommendations) *RecommendationsSourcesUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rsu.AddRecommendationIDs(ids...)
}

// Mutation returns the RecommendationsSourcesMutation object of the builder.
func (rsu *RecommendationsSourcesUpdate) Mutation() *RecommendationsSourcesMutation {
	return rsu.mutation
}

// ClearRecommendations clears all "recommendations" edges to type Recommendations.
func (rsu *RecommendationsSourcesUpdate) ClearRecommendations() *RecommendationsSourcesUpdate {
	rsu.mutation.ClearRecommendations()
	return rsu
}

// RemoveRecommendationIDs removes the recommendations edge to Recommendations by ids.
func (rsu *RecommendationsSourcesUpdate) RemoveRecommendationIDs(ids ...int) *RecommendationsSourcesUpdate {
	rsu.mutation.RemoveRecommendationIDs(ids...)
	return rsu
}

// RemoveRecommendations removes recommendations edges to Recommendations.
func (rsu *RecommendationsSourcesUpdate) RemoveRecommendations(r ...*Recommendations) *RecommendationsSourcesUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rsu.RemoveRecommendationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rsu *RecommendationsSourcesUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	rsu.defaults()
	if len(rsu.hooks) == 0 {
		if err = rsu.check(); err != nil {
			return 0, err
		}
		affected, err = rsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecommendationsSourcesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rsu.check(); err != nil {
				return 0, err
			}
			rsu.mutation = mutation
			affected, err = rsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rsu.hooks) - 1; i >= 0; i-- {
			mut = rsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rsu *RecommendationsSourcesUpdate) SaveX(ctx context.Context) int {
	affected, err := rsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rsu *RecommendationsSourcesUpdate) Exec(ctx context.Context) error {
	_, err := rsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsu *RecommendationsSourcesUpdate) ExecX(ctx context.Context) {
	if err := rsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rsu *RecommendationsSourcesUpdate) defaults() {
	if _, ok := rsu.mutation.UpdateTime(); !ok {
		v := recommendationssources.UpdateDefaultUpdateTime()
		rsu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rsu *RecommendationsSourcesUpdate) check() error {
	if v, ok := rsu.mutation.Name(); ok {
		if err := recommendationssources.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (rsu *RecommendationsSourcesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   recommendationssources.Table,
			Columns: recommendationssources.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: recommendationssources.FieldID,
			},
		},
	}
	if ps := rsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rsu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: recommendationssources.FieldUpdateTime,
		})
	}
	if value, ok := rsu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recommendationssources.FieldName,
		})
	}
	if rsu.mutation.RecommendationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recommendationssources.RecommendationsTable,
			Columns: []string{recommendationssources.RecommendationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recommendations.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsu.mutation.RemovedRecommendationsIDs(); len(nodes) > 0 && !rsu.mutation.RecommendationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recommendationssources.RecommendationsTable,
			Columns: []string{recommendationssources.RecommendationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recommendations.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsu.mutation.RecommendationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recommendationssources.RecommendationsTable,
			Columns: []string{recommendationssources.RecommendationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recommendations.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recommendationssources.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RecommendationsSourcesUpdateOne is the builder for updating a single RecommendationsSources entity.
type RecommendationsSourcesUpdateOne struct {
	config
	hooks    []Hook
	mutation *RecommendationsSourcesMutation
}

// SetName sets the name field.
func (rsuo *RecommendationsSourcesUpdateOne) SetName(s string) *RecommendationsSourcesUpdateOne {
	rsuo.mutation.SetName(s)
	return rsuo
}

// AddRecommendationIDs adds the recommendations edge to Recommendations by ids.
func (rsuo *RecommendationsSourcesUpdateOne) AddRecommendationIDs(ids ...int) *RecommendationsSourcesUpdateOne {
	rsuo.mutation.AddRecommendationIDs(ids...)
	return rsuo
}

// AddRecommendations adds the recommendations edges to Recommendations.
func (rsuo *RecommendationsSourcesUpdateOne) AddRecommendations(r ...*Recommendations) *RecommendationsSourcesUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rsuo.AddRecommendationIDs(ids...)
}

// Mutation returns the RecommendationsSourcesMutation object of the builder.
func (rsuo *RecommendationsSourcesUpdateOne) Mutation() *RecommendationsSourcesMutation {
	return rsuo.mutation
}

// ClearRecommendations clears all "recommendations" edges to type Recommendations.
func (rsuo *RecommendationsSourcesUpdateOne) ClearRecommendations() *RecommendationsSourcesUpdateOne {
	rsuo.mutation.ClearRecommendations()
	return rsuo
}

// RemoveRecommendationIDs removes the recommendations edge to Recommendations by ids.
func (rsuo *RecommendationsSourcesUpdateOne) RemoveRecommendationIDs(ids ...int) *RecommendationsSourcesUpdateOne {
	rsuo.mutation.RemoveRecommendationIDs(ids...)
	return rsuo
}

// RemoveRecommendations removes recommendations edges to Recommendations.
func (rsuo *RecommendationsSourcesUpdateOne) RemoveRecommendations(r ...*Recommendations) *RecommendationsSourcesUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rsuo.RemoveRecommendationIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (rsuo *RecommendationsSourcesUpdateOne) Save(ctx context.Context) (*RecommendationsSources, error) {
	var (
		err  error
		node *RecommendationsSources
	)
	rsuo.defaults()
	if len(rsuo.hooks) == 0 {
		if err = rsuo.check(); err != nil {
			return nil, err
		}
		node, err = rsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecommendationsSourcesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rsuo.check(); err != nil {
				return nil, err
			}
			rsuo.mutation = mutation
			node, err = rsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rsuo.hooks) - 1; i >= 0; i-- {
			mut = rsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rsuo *RecommendationsSourcesUpdateOne) SaveX(ctx context.Context) *RecommendationsSources {
	node, err := rsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rsuo *RecommendationsSourcesUpdateOne) Exec(ctx context.Context) error {
	_, err := rsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsuo *RecommendationsSourcesUpdateOne) ExecX(ctx context.Context) {
	if err := rsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rsuo *RecommendationsSourcesUpdateOne) defaults() {
	if _, ok := rsuo.mutation.UpdateTime(); !ok {
		v := recommendationssources.UpdateDefaultUpdateTime()
		rsuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rsuo *RecommendationsSourcesUpdateOne) check() error {
	if v, ok := rsuo.mutation.Name(); ok {
		if err := recommendationssources.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (rsuo *RecommendationsSourcesUpdateOne) sqlSave(ctx context.Context) (_node *RecommendationsSources, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   recommendationssources.Table,
			Columns: recommendationssources.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: recommendationssources.FieldID,
			},
		},
	}
	id, ok := rsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing RecommendationsSources.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := rsuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: recommendationssources.FieldUpdateTime,
		})
	}
	if value, ok := rsuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recommendationssources.FieldName,
		})
	}
	if rsuo.mutation.RecommendationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recommendationssources.RecommendationsTable,
			Columns: []string{recommendationssources.RecommendationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recommendations.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsuo.mutation.RemovedRecommendationsIDs(); len(nodes) > 0 && !rsuo.mutation.RecommendationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recommendationssources.RecommendationsTable,
			Columns: []string{recommendationssources.RecommendationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recommendations.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsuo.mutation.RecommendationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   recommendationssources.RecommendationsTable,
			Columns: []string{recommendationssources.RecommendationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recommendations.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RecommendationsSources{config: rsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, rsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recommendationssources.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
