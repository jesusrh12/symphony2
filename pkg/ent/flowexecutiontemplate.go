// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/flowexecutiontemplate"
	"github.com/facebookincubator/symphony/pkg/flowengine/flowschema"
)

// FlowExecutionTemplate is the model entity for the FlowExecutionTemplate schema.
type FlowExecutionTemplate struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// EndParamDefinitions holds the value of the "end_param_definitions" field.
	EndParamDefinitions []*flowschema.VariableDefinition `json:"end_param_definitions,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FlowExecutionTemplateQuery when eager-loading is set.
	Edges FlowExecutionTemplateEdges `json:"edges"`
}

// FlowExecutionTemplateEdges holds the relations/edges for other nodes in the graph.
type FlowExecutionTemplateEdges struct {
	// Blocks holds the value of the blocks edge.
	Blocks []*Block
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BlocksOrErr returns the Blocks value or an error if the edge
// was not loaded in eager-loading.
func (e FlowExecutionTemplateEdges) BlocksOrErr() ([]*Block, error) {
	if e.loadedTypes[0] {
		return e.Blocks, nil
	}
	return nil, &NotLoadedError{edge: "blocks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FlowExecutionTemplate) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // name
		&sql.NullString{}, // description
		&[]byte{},         // end_param_definitions
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FlowExecutionTemplate fields.
func (fet *FlowExecutionTemplate) assignValues(values ...interface{}) error {
	if m, n := len(values), len(flowexecutiontemplate.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	fet.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		fet.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		fet.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[2])
	} else if value.Valid {
		fet.Name = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field description", values[3])
	} else if value.Valid {
		fet.Description = new(string)
		*fet.Description = value.String
	}

	if value, ok := values[4].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field end_param_definitions", values[4])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &fet.EndParamDefinitions); err != nil {
			return fmt.Errorf("unmarshal field end_param_definitions: %v", err)
		}
	}
	return nil
}

// QueryBlocks queries the blocks edge of the FlowExecutionTemplate.
func (fet *FlowExecutionTemplate) QueryBlocks() *BlockQuery {
	return (&FlowExecutionTemplateClient{config: fet.config}).QueryBlocks(fet)
}

// Update returns a builder for updating this FlowExecutionTemplate.
// Note that, you need to call FlowExecutionTemplate.Unwrap() before calling this method, if this FlowExecutionTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (fet *FlowExecutionTemplate) Update() *FlowExecutionTemplateUpdateOne {
	return (&FlowExecutionTemplateClient{config: fet.config}).UpdateOne(fet)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (fet *FlowExecutionTemplate) Unwrap() *FlowExecutionTemplate {
	tx, ok := fet.config.driver.(*txDriver)
	if !ok {
		panic("ent: FlowExecutionTemplate is not a transactional entity")
	}
	fet.config.driver = tx.drv
	return fet
}

// String implements the fmt.Stringer.
func (fet *FlowExecutionTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("FlowExecutionTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v", fet.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(fet.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(fet.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(fet.Name)
	if v := fet.Description; v != nil {
		builder.WriteString(", description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", end_param_definitions=")
	builder.WriteString(fmt.Sprintf("%v", fet.EndParamDefinitions))
	builder.WriteByte(')')
	return builder.String()
}

// FlowExecutionTemplates is a parsable slice of FlowExecutionTemplate.
type FlowExecutionTemplates []*FlowExecutionTemplate

func (fet FlowExecutionTemplates) config(cfg config) {
	for _i := range fet {
		fet[_i].config = cfg
	}
}
