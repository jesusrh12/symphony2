// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/recommendations"
	"github.com/facebookincubator/symphony/pkg/ent/recommendationscategory"
	"github.com/facebookincubator/symphony/pkg/ent/recommendationssources"
	"github.com/facebookincubator/symphony/pkg/ent/user"
	"github.com/facebookincubator/symphony/pkg/ent/vendor"
)

// RecommendationsUpdate is the builder for updating Recommendations entities.
type RecommendationsUpdate struct {
	config
	hooks    []Hook
	mutation *RecommendationsMutation
}

// Where adds a new predicate for the builder.
func (ru *RecommendationsUpdate) Where(ps ...predicate.Recommendations) *RecommendationsUpdate {
	ru.mutation.predicates = append(ru.mutation.predicates, ps...)
	return ru
}

// SetExternalId sets the externalId field.
func (ru *RecommendationsUpdate) SetExternalId(s string) *RecommendationsUpdate {
	ru.mutation.SetExternalId(s)
	return ru
}

// SetResource sets the resource field.
func (ru *RecommendationsUpdate) SetResource(s string) *RecommendationsUpdate {
	ru.mutation.SetResource(s)
	return ru
}

// SetAlarmType sets the alarmType field.
func (ru *RecommendationsUpdate) SetAlarmType(s string) *RecommendationsUpdate {
	ru.mutation.SetAlarmType(s)
	return ru
}

// SetShortDescription sets the shortDescription field.
func (ru *RecommendationsUpdate) SetShortDescription(s string) *RecommendationsUpdate {
	ru.mutation.SetShortDescription(s)
	return ru
}

// SetLongDescription sets the longDescription field.
func (ru *RecommendationsUpdate) SetLongDescription(s string) *RecommendationsUpdate {
	ru.mutation.SetLongDescription(s)
	return ru
}

// SetCommand sets the command field.
func (ru *RecommendationsUpdate) SetCommand(s string) *RecommendationsUpdate {
	ru.mutation.SetCommand(s)
	return ru
}

// SetNillableCommand sets the command field if the given value is not nil.
func (ru *RecommendationsUpdate) SetNillableCommand(s *string) *RecommendationsUpdate {
	if s != nil {
		ru.SetCommand(*s)
	}
	return ru
}

// ClearCommand clears the value of command.
func (ru *RecommendationsUpdate) ClearCommand() *RecommendationsUpdate {
	ru.mutation.ClearCommand()
	return ru
}

// SetPriority sets the priority field.
func (ru *RecommendationsUpdate) SetPriority(i int) *RecommendationsUpdate {
	ru.mutation.ResetPriority()
	ru.mutation.SetPriority(i)
	return ru
}

// AddPriority adds i to priority.
func (ru *RecommendationsUpdate) AddPriority(i int) *RecommendationsUpdate {
	ru.mutation.AddPriority(i)
	return ru
}

// SetStatus sets the status field.
func (ru *RecommendationsUpdate) SetStatus(b bool) *RecommendationsUpdate {
	ru.mutation.SetStatus(b)
	return ru
}

// SetUsed sets the used field.
func (ru *RecommendationsUpdate) SetUsed(i int) *RecommendationsUpdate {
	ru.mutation.ResetUsed()
	ru.mutation.SetUsed(i)
	return ru
}

// SetNillableUsed sets the used field if the given value is not nil.
func (ru *RecommendationsUpdate) SetNillableUsed(i *int) *RecommendationsUpdate {
	if i != nil {
		ru.SetUsed(*i)
	}
	return ru
}

// AddUsed adds i to used.
func (ru *RecommendationsUpdate) AddUsed(i int) *RecommendationsUpdate {
	ru.mutation.AddUsed(i)
	return ru
}

// ClearUsed clears the value of used.
func (ru *RecommendationsUpdate) ClearUsed() *RecommendationsUpdate {
	ru.mutation.ClearUsed()
	return ru
}

// SetRunbook sets the runbook field.
func (ru *RecommendationsUpdate) SetRunbook(s string) *RecommendationsUpdate {
	ru.mutation.SetRunbook(s)
	return ru
}

// SetNillableRunbook sets the runbook field if the given value is not nil.
func (ru *RecommendationsUpdate) SetNillableRunbook(s *string) *RecommendationsUpdate {
	if s != nil {
		ru.SetRunbook(*s)
	}
	return ru
}

// ClearRunbook clears the value of runbook.
func (ru *RecommendationsUpdate) ClearRunbook() *RecommendationsUpdate {
	ru.mutation.ClearRunbook()
	return ru
}

// SetRecomendationSourcesID sets the recomendation_sources edge to RecommendationsSources by id.
func (ru *RecommendationsUpdate) SetRecomendationSourcesID(id int) *RecommendationsUpdate {
	ru.mutation.SetRecomendationSourcesID(id)
	return ru
}

// SetNillableRecomendationSourcesID sets the recomendation_sources edge to RecommendationsSources by id if the given value is not nil.
func (ru *RecommendationsUpdate) SetNillableRecomendationSourcesID(id *int) *RecommendationsUpdate {
	if id != nil {
		ru = ru.SetRecomendationSourcesID(*id)
	}
	return ru
}

// SetRecomendationSources sets the recomendation_sources edge to RecommendationsSources.
func (ru *RecommendationsUpdate) SetRecomendationSources(r *RecommendationsSources) *RecommendationsUpdate {
	return ru.SetRecomendationSourcesID(r.ID)
}

// SetRecomendationCategoryID sets the recomendation_category edge to RecommendationsCategory by id.
func (ru *RecommendationsUpdate) SetRecomendationCategoryID(id int) *RecommendationsUpdate {
	ru.mutation.SetRecomendationCategoryID(id)
	return ru
}

// SetNillableRecomendationCategoryID sets the recomendation_category edge to RecommendationsCategory by id if the given value is not nil.
func (ru *RecommendationsUpdate) SetNillableRecomendationCategoryID(id *int) *RecommendationsUpdate {
	if id != nil {
		ru = ru.SetRecomendationCategoryID(*id)
	}
	return ru
}

// SetRecomendationCategory sets the recomendation_category edge to RecommendationsCategory.
func (ru *RecommendationsUpdate) SetRecomendationCategory(r *RecommendationsCategory) *RecommendationsUpdate {
	return ru.SetRecomendationCategoryID(r.ID)
}

// SetUserCreateID sets the UserCreate edge to User by id.
func (ru *RecommendationsUpdate) SetUserCreateID(id int) *RecommendationsUpdate {
	ru.mutation.SetUserCreateID(id)
	return ru
}

// SetNillableUserCreateID sets the UserCreate edge to User by id if the given value is not nil.
func (ru *RecommendationsUpdate) SetNillableUserCreateID(id *int) *RecommendationsUpdate {
	if id != nil {
		ru = ru.SetUserCreateID(*id)
	}
	return ru
}

// SetUserCreate sets the UserCreate edge to User.
func (ru *RecommendationsUpdate) SetUserCreate(u *User) *RecommendationsUpdate {
	return ru.SetUserCreateID(u.ID)
}

// SetUserApprobedID sets the UserApprobed edge to User by id.
func (ru *RecommendationsUpdate) SetUserApprobedID(id int) *RecommendationsUpdate {
	ru.mutation.SetUserApprobedID(id)
	return ru
}

// SetNillableUserApprobedID sets the UserApprobed edge to User by id if the given value is not nil.
func (ru *RecommendationsUpdate) SetNillableUserApprobedID(id *int) *RecommendationsUpdate {
	if id != nil {
		ru = ru.SetUserApprobedID(*id)
	}
	return ru
}

// SetUserApprobed sets the UserApprobed edge to User.
func (ru *RecommendationsUpdate) SetUserApprobed(u *User) *RecommendationsUpdate {
	return ru.SetUserApprobedID(u.ID)
}

// SetVendorsRecomendationsID sets the vendors_recomendations edge to Vendor by id.
func (ru *RecommendationsUpdate) SetVendorsRecomendationsID(id int) *RecommendationsUpdate {
	ru.mutation.SetVendorsRecomendationsID(id)
	return ru
}

// SetNillableVendorsRecomendationsID sets the vendors_recomendations edge to Vendor by id if the given value is not nil.
func (ru *RecommendationsUpdate) SetNillableVendorsRecomendationsID(id *int) *RecommendationsUpdate {
	if id != nil {
		ru = ru.SetVendorsRecomendationsID(*id)
	}
	return ru
}

// SetVendorsRecomendations sets the vendors_recomendations edge to Vendor.
func (ru *RecommendationsUpdate) SetVendorsRecomendations(v *Vendor) *RecommendationsUpdate {
	return ru.SetVendorsRecomendationsID(v.ID)
}

// Mutation returns the RecommendationsMutation object of the builder.
func (ru *RecommendationsUpdate) Mutation() *RecommendationsMutation {
	return ru.mutation
}

// ClearRecomendationSources clears the "recomendation_sources" edge to type RecommendationsSources.
func (ru *RecommendationsUpdate) ClearRecomendationSources() *RecommendationsUpdate {
	ru.mutation.ClearRecomendationSources()
	return ru
}

// ClearRecomendationCategory clears the "recomendation_category" edge to type RecommendationsCategory.
func (ru *RecommendationsUpdate) ClearRecomendationCategory() *RecommendationsUpdate {
	ru.mutation.ClearRecomendationCategory()
	return ru
}

// ClearUserCreate clears the "UserCreate" edge to type User.
func (ru *RecommendationsUpdate) ClearUserCreate() *RecommendationsUpdate {
	ru.mutation.ClearUserCreate()
	return ru
}

// ClearUserApprobed clears the "UserApprobed" edge to type User.
func (ru *RecommendationsUpdate) ClearUserApprobed() *RecommendationsUpdate {
	ru.mutation.ClearUserApprobed()
	return ru
}

// ClearVendorsRecomendations clears the "vendors_recomendations" edge to type Vendor.
func (ru *RecommendationsUpdate) ClearVendorsRecomendations() *RecommendationsUpdate {
	ru.mutation.ClearVendorsRecomendations()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RecommendationsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ru.defaults()
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecommendationsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RecommendationsUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RecommendationsUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RecommendationsUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RecommendationsUpdate) defaults() {
	if _, ok := ru.mutation.UpdateTime(); !ok {
		v := recommendations.UpdateDefaultUpdateTime()
		ru.mutation.SetUpdateTime(v)
	}
}

func (ru *RecommendationsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   recommendations.Table,
			Columns: recommendations.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: recommendations.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: recommendations.FieldUpdateTime,
		})
	}
	if value, ok := ru.mutation.ExternalId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recommendations.FieldExternalId,
		})
	}
	if value, ok := ru.mutation.Resource(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recommendations.FieldResource,
		})
	}
	if value, ok := ru.mutation.AlarmType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recommendations.FieldAlarmType,
		})
	}
	if value, ok := ru.mutation.ShortDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recommendations.FieldShortDescription,
		})
	}
	if value, ok := ru.mutation.LongDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recommendations.FieldLongDescription,
		})
	}
	if value, ok := ru.mutation.Command(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recommendations.FieldCommand,
		})
	}
	if ru.mutation.CommandCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: recommendations.FieldCommand,
		})
	}
	if value, ok := ru.mutation.Priority(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recommendations.FieldPriority,
		})
	}
	if value, ok := ru.mutation.AddedPriority(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recommendations.FieldPriority,
		})
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: recommendations.FieldStatus,
		})
	}
	if value, ok := ru.mutation.Used(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recommendations.FieldUsed,
		})
	}
	if value, ok := ru.mutation.AddedUsed(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recommendations.FieldUsed,
		})
	}
	if ru.mutation.UsedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: recommendations.FieldUsed,
		})
	}
	if value, ok := ru.mutation.Runbook(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recommendations.FieldRunbook,
		})
	}
	if ru.mutation.RunbookCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: recommendations.FieldRunbook,
		})
	}
	if ru.mutation.RecomendationSourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendations.RecomendationSourcesTable,
			Columns: []string{recommendations.RecomendationSourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recommendationssources.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RecomendationSourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendations.RecomendationSourcesTable,
			Columns: []string{recommendations.RecomendationSourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recommendationssources.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.RecomendationCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendations.RecomendationCategoryTable,
			Columns: []string{recommendations.RecomendationCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recommendationscategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RecomendationCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendations.RecomendationCategoryTable,
			Columns: []string{recommendations.RecomendationCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recommendationscategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.UserCreateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendations.UserCreateTable,
			Columns: []string{recommendations.UserCreateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.UserCreateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendations.UserCreateTable,
			Columns: []string{recommendations.UserCreateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.UserApprobedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendations.UserApprobedTable,
			Columns: []string{recommendations.UserApprobedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.UserApprobedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendations.UserApprobedTable,
			Columns: []string{recommendations.UserApprobedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.VendorsRecomendationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendations.VendorsRecomendationsTable,
			Columns: []string{recommendations.VendorsRecomendationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vendor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.VendorsRecomendationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendations.VendorsRecomendationsTable,
			Columns: []string{recommendations.VendorsRecomendationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vendor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recommendations.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RecommendationsUpdateOne is the builder for updating a single Recommendations entity.
type RecommendationsUpdateOne struct {
	config
	hooks    []Hook
	mutation *RecommendationsMutation
}

// SetExternalId sets the externalId field.
func (ruo *RecommendationsUpdateOne) SetExternalId(s string) *RecommendationsUpdateOne {
	ruo.mutation.SetExternalId(s)
	return ruo
}

// SetResource sets the resource field.
func (ruo *RecommendationsUpdateOne) SetResource(s string) *RecommendationsUpdateOne {
	ruo.mutation.SetResource(s)
	return ruo
}

// SetAlarmType sets the alarmType field.
func (ruo *RecommendationsUpdateOne) SetAlarmType(s string) *RecommendationsUpdateOne {
	ruo.mutation.SetAlarmType(s)
	return ruo
}

// SetShortDescription sets the shortDescription field.
func (ruo *RecommendationsUpdateOne) SetShortDescription(s string) *RecommendationsUpdateOne {
	ruo.mutation.SetShortDescription(s)
	return ruo
}

// SetLongDescription sets the longDescription field.
func (ruo *RecommendationsUpdateOne) SetLongDescription(s string) *RecommendationsUpdateOne {
	ruo.mutation.SetLongDescription(s)
	return ruo
}

// SetCommand sets the command field.
func (ruo *RecommendationsUpdateOne) SetCommand(s string) *RecommendationsUpdateOne {
	ruo.mutation.SetCommand(s)
	return ruo
}

// SetNillableCommand sets the command field if the given value is not nil.
func (ruo *RecommendationsUpdateOne) SetNillableCommand(s *string) *RecommendationsUpdateOne {
	if s != nil {
		ruo.SetCommand(*s)
	}
	return ruo
}

// ClearCommand clears the value of command.
func (ruo *RecommendationsUpdateOne) ClearCommand() *RecommendationsUpdateOne {
	ruo.mutation.ClearCommand()
	return ruo
}

// SetPriority sets the priority field.
func (ruo *RecommendationsUpdateOne) SetPriority(i int) *RecommendationsUpdateOne {
	ruo.mutation.ResetPriority()
	ruo.mutation.SetPriority(i)
	return ruo
}

// AddPriority adds i to priority.
func (ruo *RecommendationsUpdateOne) AddPriority(i int) *RecommendationsUpdateOne {
	ruo.mutation.AddPriority(i)
	return ruo
}

// SetStatus sets the status field.
func (ruo *RecommendationsUpdateOne) SetStatus(b bool) *RecommendationsUpdateOne {
	ruo.mutation.SetStatus(b)
	return ruo
}

// SetUsed sets the used field.
func (ruo *RecommendationsUpdateOne) SetUsed(i int) *RecommendationsUpdateOne {
	ruo.mutation.ResetUsed()
	ruo.mutation.SetUsed(i)
	return ruo
}

// SetNillableUsed sets the used field if the given value is not nil.
func (ruo *RecommendationsUpdateOne) SetNillableUsed(i *int) *RecommendationsUpdateOne {
	if i != nil {
		ruo.SetUsed(*i)
	}
	return ruo
}

// AddUsed adds i to used.
func (ruo *RecommendationsUpdateOne) AddUsed(i int) *RecommendationsUpdateOne {
	ruo.mutation.AddUsed(i)
	return ruo
}

// ClearUsed clears the value of used.
func (ruo *RecommendationsUpdateOne) ClearUsed() *RecommendationsUpdateOne {
	ruo.mutation.ClearUsed()
	return ruo
}

// SetRunbook sets the runbook field.
func (ruo *RecommendationsUpdateOne) SetRunbook(s string) *RecommendationsUpdateOne {
	ruo.mutation.SetRunbook(s)
	return ruo
}

// SetNillableRunbook sets the runbook field if the given value is not nil.
func (ruo *RecommendationsUpdateOne) SetNillableRunbook(s *string) *RecommendationsUpdateOne {
	if s != nil {
		ruo.SetRunbook(*s)
	}
	return ruo
}

// ClearRunbook clears the value of runbook.
func (ruo *RecommendationsUpdateOne) ClearRunbook() *RecommendationsUpdateOne {
	ruo.mutation.ClearRunbook()
	return ruo
}

// SetRecomendationSourcesID sets the recomendation_sources edge to RecommendationsSources by id.
func (ruo *RecommendationsUpdateOne) SetRecomendationSourcesID(id int) *RecommendationsUpdateOne {
	ruo.mutation.SetRecomendationSourcesID(id)
	return ruo
}

// SetNillableRecomendationSourcesID sets the recomendation_sources edge to RecommendationsSources by id if the given value is not nil.
func (ruo *RecommendationsUpdateOne) SetNillableRecomendationSourcesID(id *int) *RecommendationsUpdateOne {
	if id != nil {
		ruo = ruo.SetRecomendationSourcesID(*id)
	}
	return ruo
}

// SetRecomendationSources sets the recomendation_sources edge to RecommendationsSources.
func (ruo *RecommendationsUpdateOne) SetRecomendationSources(r *RecommendationsSources) *RecommendationsUpdateOne {
	return ruo.SetRecomendationSourcesID(r.ID)
}

// SetRecomendationCategoryID sets the recomendation_category edge to RecommendationsCategory by id.
func (ruo *RecommendationsUpdateOne) SetRecomendationCategoryID(id int) *RecommendationsUpdateOne {
	ruo.mutation.SetRecomendationCategoryID(id)
	return ruo
}

// SetNillableRecomendationCategoryID sets the recomendation_category edge to RecommendationsCategory by id if the given value is not nil.
func (ruo *RecommendationsUpdateOne) SetNillableRecomendationCategoryID(id *int) *RecommendationsUpdateOne {
	if id != nil {
		ruo = ruo.SetRecomendationCategoryID(*id)
	}
	return ruo
}

// SetRecomendationCategory sets the recomendation_category edge to RecommendationsCategory.
func (ruo *RecommendationsUpdateOne) SetRecomendationCategory(r *RecommendationsCategory) *RecommendationsUpdateOne {
	return ruo.SetRecomendationCategoryID(r.ID)
}

// SetUserCreateID sets the UserCreate edge to User by id.
func (ruo *RecommendationsUpdateOne) SetUserCreateID(id int) *RecommendationsUpdateOne {
	ruo.mutation.SetUserCreateID(id)
	return ruo
}

// SetNillableUserCreateID sets the UserCreate edge to User by id if the given value is not nil.
func (ruo *RecommendationsUpdateOne) SetNillableUserCreateID(id *int) *RecommendationsUpdateOne {
	if id != nil {
		ruo = ruo.SetUserCreateID(*id)
	}
	return ruo
}

// SetUserCreate sets the UserCreate edge to User.
func (ruo *RecommendationsUpdateOne) SetUserCreate(u *User) *RecommendationsUpdateOne {
	return ruo.SetUserCreateID(u.ID)
}

// SetUserApprobedID sets the UserApprobed edge to User by id.
func (ruo *RecommendationsUpdateOne) SetUserApprobedID(id int) *RecommendationsUpdateOne {
	ruo.mutation.SetUserApprobedID(id)
	return ruo
}

// SetNillableUserApprobedID sets the UserApprobed edge to User by id if the given value is not nil.
func (ruo *RecommendationsUpdateOne) SetNillableUserApprobedID(id *int) *RecommendationsUpdateOne {
	if id != nil {
		ruo = ruo.SetUserApprobedID(*id)
	}
	return ruo
}

// SetUserApprobed sets the UserApprobed edge to User.
func (ruo *RecommendationsUpdateOne) SetUserApprobed(u *User) *RecommendationsUpdateOne {
	return ruo.SetUserApprobedID(u.ID)
}

// SetVendorsRecomendationsID sets the vendors_recomendations edge to Vendor by id.
func (ruo *RecommendationsUpdateOne) SetVendorsRecomendationsID(id int) *RecommendationsUpdateOne {
	ruo.mutation.SetVendorsRecomendationsID(id)
	return ruo
}

// SetNillableVendorsRecomendationsID sets the vendors_recomendations edge to Vendor by id if the given value is not nil.
func (ruo *RecommendationsUpdateOne) SetNillableVendorsRecomendationsID(id *int) *RecommendationsUpdateOne {
	if id != nil {
		ruo = ruo.SetVendorsRecomendationsID(*id)
	}
	return ruo
}

// SetVendorsRecomendations sets the vendors_recomendations edge to Vendor.
func (ruo *RecommendationsUpdateOne) SetVendorsRecomendations(v *Vendor) *RecommendationsUpdateOne {
	return ruo.SetVendorsRecomendationsID(v.ID)
}

// Mutation returns the RecommendationsMutation object of the builder.
func (ruo *RecommendationsUpdateOne) Mutation() *RecommendationsMutation {
	return ruo.mutation
}

// ClearRecomendationSources clears the "recomendation_sources" edge to type RecommendationsSources.
func (ruo *RecommendationsUpdateOne) ClearRecomendationSources() *RecommendationsUpdateOne {
	ruo.mutation.ClearRecomendationSources()
	return ruo
}

// ClearRecomendationCategory clears the "recomendation_category" edge to type RecommendationsCategory.
func (ruo *RecommendationsUpdateOne) ClearRecomendationCategory() *RecommendationsUpdateOne {
	ruo.mutation.ClearRecomendationCategory()
	return ruo
}

// ClearUserCreate clears the "UserCreate" edge to type User.
func (ruo *RecommendationsUpdateOne) ClearUserCreate() *RecommendationsUpdateOne {
	ruo.mutation.ClearUserCreate()
	return ruo
}

// ClearUserApprobed clears the "UserApprobed" edge to type User.
func (ruo *RecommendationsUpdateOne) ClearUserApprobed() *RecommendationsUpdateOne {
	ruo.mutation.ClearUserApprobed()
	return ruo
}

// ClearVendorsRecomendations clears the "vendors_recomendations" edge to type Vendor.
func (ruo *RecommendationsUpdateOne) ClearVendorsRecomendations() *RecommendationsUpdateOne {
	ruo.mutation.ClearVendorsRecomendations()
	return ruo
}

// Save executes the query and returns the updated entity.
func (ruo *RecommendationsUpdateOne) Save(ctx context.Context) (*Recommendations, error) {
	var (
		err  error
		node *Recommendations
	)
	ruo.defaults()
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecommendationsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RecommendationsUpdateOne) SaveX(ctx context.Context) *Recommendations {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RecommendationsUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RecommendationsUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RecommendationsUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdateTime(); !ok {
		v := recommendations.UpdateDefaultUpdateTime()
		ruo.mutation.SetUpdateTime(v)
	}
}

func (ruo *RecommendationsUpdateOne) sqlSave(ctx context.Context) (_node *Recommendations, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   recommendations.Table,
			Columns: recommendations.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: recommendations.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Recommendations.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ruo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: recommendations.FieldUpdateTime,
		})
	}
	if value, ok := ruo.mutation.ExternalId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recommendations.FieldExternalId,
		})
	}
	if value, ok := ruo.mutation.Resource(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recommendations.FieldResource,
		})
	}
	if value, ok := ruo.mutation.AlarmType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recommendations.FieldAlarmType,
		})
	}
	if value, ok := ruo.mutation.ShortDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recommendations.FieldShortDescription,
		})
	}
	if value, ok := ruo.mutation.LongDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recommendations.FieldLongDescription,
		})
	}
	if value, ok := ruo.mutation.Command(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recommendations.FieldCommand,
		})
	}
	if ruo.mutation.CommandCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: recommendations.FieldCommand,
		})
	}
	if value, ok := ruo.mutation.Priority(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recommendations.FieldPriority,
		})
	}
	if value, ok := ruo.mutation.AddedPriority(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recommendations.FieldPriority,
		})
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: recommendations.FieldStatus,
		})
	}
	if value, ok := ruo.mutation.Used(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recommendations.FieldUsed,
		})
	}
	if value, ok := ruo.mutation.AddedUsed(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recommendations.FieldUsed,
		})
	}
	if ruo.mutation.UsedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: recommendations.FieldUsed,
		})
	}
	if value, ok := ruo.mutation.Runbook(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recommendations.FieldRunbook,
		})
	}
	if ruo.mutation.RunbookCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: recommendations.FieldRunbook,
		})
	}
	if ruo.mutation.RecomendationSourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendations.RecomendationSourcesTable,
			Columns: []string{recommendations.RecomendationSourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recommendationssources.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RecomendationSourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendations.RecomendationSourcesTable,
			Columns: []string{recommendations.RecomendationSourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recommendationssources.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.RecomendationCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendations.RecomendationCategoryTable,
			Columns: []string{recommendations.RecomendationCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recommendationscategory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RecomendationCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendations.RecomendationCategoryTable,
			Columns: []string{recommendations.RecomendationCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recommendationscategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.UserCreateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendations.UserCreateTable,
			Columns: []string{recommendations.UserCreateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.UserCreateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendations.UserCreateTable,
			Columns: []string{recommendations.UserCreateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.UserApprobedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendations.UserApprobedTable,
			Columns: []string{recommendations.UserApprobedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.UserApprobedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendations.UserApprobedTable,
			Columns: []string{recommendations.UserApprobedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.VendorsRecomendationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendations.VendorsRecomendationsTable,
			Columns: []string{recommendations.VendorsRecomendationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vendor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.VendorsRecomendationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recommendations.VendorsRecomendationsTable,
			Columns: []string{recommendations.VendorsRecomendationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vendor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Recommendations{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recommendations.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
