// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/counterformula"
	"github.com/facebookincubator/symphony/pkg/ent/formula"
	"github.com/facebookincubator/symphony/pkg/ent/kpi"
	"github.com/facebookincubator/symphony/pkg/ent/networktype"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/tech"
)

// FormulaUpdate is the builder for updating Formula entities.
type FormulaUpdate struct {
	config
	hooks    []Hook
	mutation *FormulaMutation
}

// Where adds a new predicate for the builder.
func (fu *FormulaUpdate) Where(ps ...predicate.Formula) *FormulaUpdate {
	fu.mutation.predicates = append(fu.mutation.predicates, ps...)
	return fu
}

// SetTextFormula sets the textFormula field.
func (fu *FormulaUpdate) SetTextFormula(s string) *FormulaUpdate {
	fu.mutation.SetTextFormula(s)
	return fu
}

// SetStatus sets the status field.
func (fu *FormulaUpdate) SetStatus(b bool) *FormulaUpdate {
	fu.mutation.SetStatus(b)
	return fu
}

// SetNetworkTypeID sets the networkType edge to NetworkType by id.
func (fu *FormulaUpdate) SetNetworkTypeID(id int) *FormulaUpdate {
	fu.mutation.SetNetworkTypeID(id)
	return fu
}

// SetNillableNetworkTypeID sets the networkType edge to NetworkType by id if the given value is not nil.
func (fu *FormulaUpdate) SetNillableNetworkTypeID(id *int) *FormulaUpdate {
	if id != nil {
		fu = fu.SetNetworkTypeID(*id)
	}
	return fu
}

// SetNetworkType sets the networkType edge to NetworkType.
func (fu *FormulaUpdate) SetNetworkType(n *NetworkType) *FormulaUpdate {
	return fu.SetNetworkTypeID(n.ID)
}

// SetTechID sets the tech edge to Tech by id.
func (fu *FormulaUpdate) SetTechID(id int) *FormulaUpdate {
	fu.mutation.SetTechID(id)
	return fu
}

// SetNillableTechID sets the tech edge to Tech by id if the given value is not nil.
func (fu *FormulaUpdate) SetNillableTechID(id *int) *FormulaUpdate {
	if id != nil {
		fu = fu.SetTechID(*id)
	}
	return fu
}

// SetTech sets the tech edge to Tech.
func (fu *FormulaUpdate) SetTech(t *Tech) *FormulaUpdate {
	return fu.SetTechID(t.ID)
}

// SetKpiID sets the kpi edge to Kpi by id.
func (fu *FormulaUpdate) SetKpiID(id int) *FormulaUpdate {
	fu.mutation.SetKpiID(id)
	return fu
}

// SetNillableKpiID sets the kpi edge to Kpi by id if the given value is not nil.
func (fu *FormulaUpdate) SetNillableKpiID(id *int) *FormulaUpdate {
	if id != nil {
		fu = fu.SetKpiID(*id)
	}
	return fu
}

// SetKpi sets the kpi edge to Kpi.
func (fu *FormulaUpdate) SetKpi(k *Kpi) *FormulaUpdate {
	return fu.SetKpiID(k.ID)
}

// AddCounterformulaIDs adds the counterformula edge to CounterFormula by ids.
func (fu *FormulaUpdate) AddCounterformulaIDs(ids ...int) *FormulaUpdate {
	fu.mutation.AddCounterformulaIDs(ids...)
	return fu
}

// AddCounterformula adds the counterformula edges to CounterFormula.
func (fu *FormulaUpdate) AddCounterformula(c ...*CounterFormula) *FormulaUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fu.AddCounterformulaIDs(ids...)
}

// Mutation returns the FormulaMutation object of the builder.
func (fu *FormulaUpdate) Mutation() *FormulaMutation {
	return fu.mutation
}

// ClearNetworkType clears the "networkType" edge to type NetworkType.
func (fu *FormulaUpdate) ClearNetworkType() *FormulaUpdate {
	fu.mutation.ClearNetworkType()
	return fu
}

// ClearTech clears the "tech" edge to type Tech.
func (fu *FormulaUpdate) ClearTech() *FormulaUpdate {
	fu.mutation.ClearTech()
	return fu
}

// ClearKpi clears the "kpi" edge to type Kpi.
func (fu *FormulaUpdate) ClearKpi() *FormulaUpdate {
	fu.mutation.ClearKpi()
	return fu
}

// ClearCounterformula clears all "counterformula" edges to type CounterFormula.
func (fu *FormulaUpdate) ClearCounterformula() *FormulaUpdate {
	fu.mutation.ClearCounterformula()
	return fu
}

// RemoveCounterformulaIDs removes the counterformula edge to CounterFormula by ids.
func (fu *FormulaUpdate) RemoveCounterformulaIDs(ids ...int) *FormulaUpdate {
	fu.mutation.RemoveCounterformulaIDs(ids...)
	return fu
}

// RemoveCounterformula removes counterformula edges to CounterFormula.
func (fu *FormulaUpdate) RemoveCounterformula(c ...*CounterFormula) *FormulaUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fu.RemoveCounterformulaIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FormulaUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	fu.defaults()
	if len(fu.hooks) == 0 {
		if err = fu.check(); err != nil {
			return 0, err
		}
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FormulaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fu.check(); err != nil {
				return 0, err
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FormulaUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FormulaUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FormulaUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FormulaUpdate) defaults() {
	if _, ok := fu.mutation.UpdateTime(); !ok {
		v := formula.UpdateDefaultUpdateTime()
		fu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FormulaUpdate) check() error {
	if v, ok := fu.mutation.TextFormula(); ok {
		if err := formula.TextFormulaValidator(v); err != nil {
			return &ValidationError{Name: "textFormula", err: fmt.Errorf("ent: validator failed for field \"textFormula\": %w", err)}
		}
	}
	return nil
}

func (fu *FormulaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   formula.Table,
			Columns: formula.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: formula.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: formula.FieldUpdateTime,
		})
	}
	if value, ok := fu.mutation.TextFormula(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: formula.FieldTextFormula,
		})
	}
	if value, ok := fu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: formula.FieldStatus,
		})
	}
	if fu.mutation.NetworkTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   formula.NetworkTypeTable,
			Columns: []string{formula.NetworkTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: networktype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.NetworkTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   formula.NetworkTypeTable,
			Columns: []string{formula.NetworkTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: networktype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.TechCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   formula.TechTable,
			Columns: []string{formula.TechColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tech.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.TechIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   formula.TechTable,
			Columns: []string{formula.TechColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tech.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.KpiCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   formula.KpiTable,
			Columns: []string{formula.KpiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kpi.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.KpiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   formula.KpiTable,
			Columns: []string{formula.KpiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kpi.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.CounterformulaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   formula.CounterformulaTable,
			Columns: []string{formula.CounterformulaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterformula.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedCounterformulaIDs(); len(nodes) > 0 && !fu.mutation.CounterformulaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   formula.CounterformulaTable,
			Columns: []string{formula.CounterformulaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterformula.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.CounterformulaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   formula.CounterformulaTable,
			Columns: []string{formula.CounterformulaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterformula.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{formula.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// FormulaUpdateOne is the builder for updating a single Formula entity.
type FormulaUpdateOne struct {
	config
	hooks    []Hook
	mutation *FormulaMutation
}

// SetTextFormula sets the textFormula field.
func (fuo *FormulaUpdateOne) SetTextFormula(s string) *FormulaUpdateOne {
	fuo.mutation.SetTextFormula(s)
	return fuo
}

// SetStatus sets the status field.
func (fuo *FormulaUpdateOne) SetStatus(b bool) *FormulaUpdateOne {
	fuo.mutation.SetStatus(b)
	return fuo
}

// SetNetworkTypeID sets the networkType edge to NetworkType by id.
func (fuo *FormulaUpdateOne) SetNetworkTypeID(id int) *FormulaUpdateOne {
	fuo.mutation.SetNetworkTypeID(id)
	return fuo
}

// SetNillableNetworkTypeID sets the networkType edge to NetworkType by id if the given value is not nil.
func (fuo *FormulaUpdateOne) SetNillableNetworkTypeID(id *int) *FormulaUpdateOne {
	if id != nil {
		fuo = fuo.SetNetworkTypeID(*id)
	}
	return fuo
}

// SetNetworkType sets the networkType edge to NetworkType.
func (fuo *FormulaUpdateOne) SetNetworkType(n *NetworkType) *FormulaUpdateOne {
	return fuo.SetNetworkTypeID(n.ID)
}

// SetTechID sets the tech edge to Tech by id.
func (fuo *FormulaUpdateOne) SetTechID(id int) *FormulaUpdateOne {
	fuo.mutation.SetTechID(id)
	return fuo
}

// SetNillableTechID sets the tech edge to Tech by id if the given value is not nil.
func (fuo *FormulaUpdateOne) SetNillableTechID(id *int) *FormulaUpdateOne {
	if id != nil {
		fuo = fuo.SetTechID(*id)
	}
	return fuo
}

// SetTech sets the tech edge to Tech.
func (fuo *FormulaUpdateOne) SetTech(t *Tech) *FormulaUpdateOne {
	return fuo.SetTechID(t.ID)
}

// SetKpiID sets the kpi edge to Kpi by id.
func (fuo *FormulaUpdateOne) SetKpiID(id int) *FormulaUpdateOne {
	fuo.mutation.SetKpiID(id)
	return fuo
}

// SetNillableKpiID sets the kpi edge to Kpi by id if the given value is not nil.
func (fuo *FormulaUpdateOne) SetNillableKpiID(id *int) *FormulaUpdateOne {
	if id != nil {
		fuo = fuo.SetKpiID(*id)
	}
	return fuo
}

// SetKpi sets the kpi edge to Kpi.
func (fuo *FormulaUpdateOne) SetKpi(k *Kpi) *FormulaUpdateOne {
	return fuo.SetKpiID(k.ID)
}

// AddCounterformulaIDs adds the counterformula edge to CounterFormula by ids.
func (fuo *FormulaUpdateOne) AddCounterformulaIDs(ids ...int) *FormulaUpdateOne {
	fuo.mutation.AddCounterformulaIDs(ids...)
	return fuo
}

// AddCounterformula adds the counterformula edges to CounterFormula.
func (fuo *FormulaUpdateOne) AddCounterformula(c ...*CounterFormula) *FormulaUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fuo.AddCounterformulaIDs(ids...)
}

// Mutation returns the FormulaMutation object of the builder.
func (fuo *FormulaUpdateOne) Mutation() *FormulaMutation {
	return fuo.mutation
}

// ClearNetworkType clears the "networkType" edge to type NetworkType.
func (fuo *FormulaUpdateOne) ClearNetworkType() *FormulaUpdateOne {
	fuo.mutation.ClearNetworkType()
	return fuo
}

// ClearTech clears the "tech" edge to type Tech.
func (fuo *FormulaUpdateOne) ClearTech() *FormulaUpdateOne {
	fuo.mutation.ClearTech()
	return fuo
}

// ClearKpi clears the "kpi" edge to type Kpi.
func (fuo *FormulaUpdateOne) ClearKpi() *FormulaUpdateOne {
	fuo.mutation.ClearKpi()
	return fuo
}

// ClearCounterformula clears all "counterformula" edges to type CounterFormula.
func (fuo *FormulaUpdateOne) ClearCounterformula() *FormulaUpdateOne {
	fuo.mutation.ClearCounterformula()
	return fuo
}

// RemoveCounterformulaIDs removes the counterformula edge to CounterFormula by ids.
func (fuo *FormulaUpdateOne) RemoveCounterformulaIDs(ids ...int) *FormulaUpdateOne {
	fuo.mutation.RemoveCounterformulaIDs(ids...)
	return fuo
}

// RemoveCounterformula removes counterformula edges to CounterFormula.
func (fuo *FormulaUpdateOne) RemoveCounterformula(c ...*CounterFormula) *FormulaUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fuo.RemoveCounterformulaIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (fuo *FormulaUpdateOne) Save(ctx context.Context) (*Formula, error) {
	var (
		err  error
		node *Formula
	)
	fuo.defaults()
	if len(fuo.hooks) == 0 {
		if err = fuo.check(); err != nil {
			return nil, err
		}
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FormulaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fuo.check(); err != nil {
				return nil, err
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			mut = fuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FormulaUpdateOne) SaveX(ctx context.Context) *Formula {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FormulaUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FormulaUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FormulaUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdateTime(); !ok {
		v := formula.UpdateDefaultUpdateTime()
		fuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FormulaUpdateOne) check() error {
	if v, ok := fuo.mutation.TextFormula(); ok {
		if err := formula.TextFormulaValidator(v); err != nil {
			return &ValidationError{Name: "textFormula", err: fmt.Errorf("ent: validator failed for field \"textFormula\": %w", err)}
		}
	}
	return nil
}

func (fuo *FormulaUpdateOne) sqlSave(ctx context.Context) (_node *Formula, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   formula.Table,
			Columns: formula.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: formula.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Formula.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := fuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: formula.FieldUpdateTime,
		})
	}
	if value, ok := fuo.mutation.TextFormula(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: formula.FieldTextFormula,
		})
	}
	if value, ok := fuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: formula.FieldStatus,
		})
	}
	if fuo.mutation.NetworkTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   formula.NetworkTypeTable,
			Columns: []string{formula.NetworkTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: networktype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.NetworkTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   formula.NetworkTypeTable,
			Columns: []string{formula.NetworkTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: networktype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.TechCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   formula.TechTable,
			Columns: []string{formula.TechColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tech.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.TechIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   formula.TechTable,
			Columns: []string{formula.TechColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tech.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.KpiCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   formula.KpiTable,
			Columns: []string{formula.KpiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kpi.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.KpiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   formula.KpiTable,
			Columns: []string{formula.KpiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kpi.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.CounterformulaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   formula.CounterformulaTable,
			Columns: []string{formula.CounterformulaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterformula.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedCounterformulaIDs(); len(nodes) > 0 && !fuo.mutation.CounterformulaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   formula.CounterformulaTable,
			Columns: []string{formula.CounterformulaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterformula.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.CounterformulaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   formula.CounterformulaTable,
			Columns: []string{formula.CounterformulaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counterformula.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Formula{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{formula.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
