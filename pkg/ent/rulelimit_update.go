// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/comparator"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/rule"
	"github.com/facebookincubator/symphony/pkg/ent/rulelimit"
)

// RuleLimitUpdate is the builder for updating RuleLimit entities.
type RuleLimitUpdate struct {
	config
	hooks    []Hook
	mutation *RuleLimitMutation
}

// Where adds a new predicate for the builder.
func (rlu *RuleLimitUpdate) Where(ps ...predicate.RuleLimit) *RuleLimitUpdate {
	rlu.mutation.predicates = append(rlu.mutation.predicates, ps...)
	return rlu
}

// SetNumber sets the number field.
func (rlu *RuleLimitUpdate) SetNumber(i int) *RuleLimitUpdate {
	rlu.mutation.ResetNumber()
	rlu.mutation.SetNumber(i)
	return rlu
}

// AddNumber adds i to number.
func (rlu *RuleLimitUpdate) AddNumber(i int) *RuleLimitUpdate {
	rlu.mutation.AddNumber(i)
	return rlu
}

// SetLimitType sets the limitType field.
func (rlu *RuleLimitUpdate) SetLimitType(s string) *RuleLimitUpdate {
	rlu.mutation.SetLimitType(s)
	return rlu
}

// SetComparatorID sets the comparator edge to Comparator by id.
func (rlu *RuleLimitUpdate) SetComparatorID(id int) *RuleLimitUpdate {
	rlu.mutation.SetComparatorID(id)
	return rlu
}

// SetNillableComparatorID sets the comparator edge to Comparator by id if the given value is not nil.
func (rlu *RuleLimitUpdate) SetNillableComparatorID(id *int) *RuleLimitUpdate {
	if id != nil {
		rlu = rlu.SetComparatorID(*id)
	}
	return rlu
}

// SetComparator sets the comparator edge to Comparator.
func (rlu *RuleLimitUpdate) SetComparator(c *Comparator) *RuleLimitUpdate {
	return rlu.SetComparatorID(c.ID)
}

// SetRuleID sets the rule edge to Rule by id.
func (rlu *RuleLimitUpdate) SetRuleID(id int) *RuleLimitUpdate {
	rlu.mutation.SetRuleID(id)
	return rlu
}

// SetNillableRuleID sets the rule edge to Rule by id if the given value is not nil.
func (rlu *RuleLimitUpdate) SetNillableRuleID(id *int) *RuleLimitUpdate {
	if id != nil {
		rlu = rlu.SetRuleID(*id)
	}
	return rlu
}

// SetRule sets the rule edge to Rule.
func (rlu *RuleLimitUpdate) SetRule(r *Rule) *RuleLimitUpdate {
	return rlu.SetRuleID(r.ID)
}

// Mutation returns the RuleLimitMutation object of the builder.
func (rlu *RuleLimitUpdate) Mutation() *RuleLimitMutation {
	return rlu.mutation
}

// ClearComparator clears the "comparator" edge to type Comparator.
func (rlu *RuleLimitUpdate) ClearComparator() *RuleLimitUpdate {
	rlu.mutation.ClearComparator()
	return rlu
}

// ClearRule clears the "rule" edge to type Rule.
func (rlu *RuleLimitUpdate) ClearRule() *RuleLimitUpdate {
	rlu.mutation.ClearRule()
	return rlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rlu *RuleLimitUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	rlu.defaults()
	if len(rlu.hooks) == 0 {
		if err = rlu.check(); err != nil {
			return 0, err
		}
		affected, err = rlu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RuleLimitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rlu.check(); err != nil {
				return 0, err
			}
			rlu.mutation = mutation
			affected, err = rlu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rlu.hooks) - 1; i >= 0; i-- {
			mut = rlu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rlu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rlu *RuleLimitUpdate) SaveX(ctx context.Context) int {
	affected, err := rlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rlu *RuleLimitUpdate) Exec(ctx context.Context) error {
	_, err := rlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rlu *RuleLimitUpdate) ExecX(ctx context.Context) {
	if err := rlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rlu *RuleLimitUpdate) defaults() {
	if _, ok := rlu.mutation.UpdateTime(); !ok {
		v := rulelimit.UpdateDefaultUpdateTime()
		rlu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rlu *RuleLimitUpdate) check() error {
	if v, ok := rlu.mutation.LimitType(); ok {
		if err := rulelimit.LimitTypeValidator(v); err != nil {
			return &ValidationError{Name: "limitType", err: fmt.Errorf("ent: validator failed for field \"limitType\": %w", err)}
		}
	}
	return nil
}

func (rlu *RuleLimitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rulelimit.Table,
			Columns: rulelimit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rulelimit.FieldID,
			},
		},
	}
	if ps := rlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rlu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rulelimit.FieldUpdateTime,
		})
	}
	if value, ok := rlu.mutation.Number(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rulelimit.FieldNumber,
		})
	}
	if value, ok := rlu.mutation.AddedNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rulelimit.FieldNumber,
		})
	}
	if value, ok := rlu.mutation.LimitType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rulelimit.FieldLimitType,
		})
	}
	if rlu.mutation.ComparatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rulelimit.ComparatorTable,
			Columns: []string{rulelimit.ComparatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comparator.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rlu.mutation.ComparatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rulelimit.ComparatorTable,
			Columns: []string{rulelimit.ComparatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comparator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rlu.mutation.RuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rulelimit.RuleTable,
			Columns: []string{rulelimit.RuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rule.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rlu.mutation.RuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rulelimit.RuleTable,
			Columns: []string{rulelimit.RuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rulelimit.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RuleLimitUpdateOne is the builder for updating a single RuleLimit entity.
type RuleLimitUpdateOne struct {
	config
	hooks    []Hook
	mutation *RuleLimitMutation
}

// SetNumber sets the number field.
func (rluo *RuleLimitUpdateOne) SetNumber(i int) *RuleLimitUpdateOne {
	rluo.mutation.ResetNumber()
	rluo.mutation.SetNumber(i)
	return rluo
}

// AddNumber adds i to number.
func (rluo *RuleLimitUpdateOne) AddNumber(i int) *RuleLimitUpdateOne {
	rluo.mutation.AddNumber(i)
	return rluo
}

// SetLimitType sets the limitType field.
func (rluo *RuleLimitUpdateOne) SetLimitType(s string) *RuleLimitUpdateOne {
	rluo.mutation.SetLimitType(s)
	return rluo
}

// SetComparatorID sets the comparator edge to Comparator by id.
func (rluo *RuleLimitUpdateOne) SetComparatorID(id int) *RuleLimitUpdateOne {
	rluo.mutation.SetComparatorID(id)
	return rluo
}

// SetNillableComparatorID sets the comparator edge to Comparator by id if the given value is not nil.
func (rluo *RuleLimitUpdateOne) SetNillableComparatorID(id *int) *RuleLimitUpdateOne {
	if id != nil {
		rluo = rluo.SetComparatorID(*id)
	}
	return rluo
}

// SetComparator sets the comparator edge to Comparator.
func (rluo *RuleLimitUpdateOne) SetComparator(c *Comparator) *RuleLimitUpdateOne {
	return rluo.SetComparatorID(c.ID)
}

// SetRuleID sets the rule edge to Rule by id.
func (rluo *RuleLimitUpdateOne) SetRuleID(id int) *RuleLimitUpdateOne {
	rluo.mutation.SetRuleID(id)
	return rluo
}

// SetNillableRuleID sets the rule edge to Rule by id if the given value is not nil.
func (rluo *RuleLimitUpdateOne) SetNillableRuleID(id *int) *RuleLimitUpdateOne {
	if id != nil {
		rluo = rluo.SetRuleID(*id)
	}
	return rluo
}

// SetRule sets the rule edge to Rule.
func (rluo *RuleLimitUpdateOne) SetRule(r *Rule) *RuleLimitUpdateOne {
	return rluo.SetRuleID(r.ID)
}

// Mutation returns the RuleLimitMutation object of the builder.
func (rluo *RuleLimitUpdateOne) Mutation() *RuleLimitMutation {
	return rluo.mutation
}

// ClearComparator clears the "comparator" edge to type Comparator.
func (rluo *RuleLimitUpdateOne) ClearComparator() *RuleLimitUpdateOne {
	rluo.mutation.ClearComparator()
	return rluo
}

// ClearRule clears the "rule" edge to type Rule.
func (rluo *RuleLimitUpdateOne) ClearRule() *RuleLimitUpdateOne {
	rluo.mutation.ClearRule()
	return rluo
}

// Save executes the query and returns the updated entity.
func (rluo *RuleLimitUpdateOne) Save(ctx context.Context) (*RuleLimit, error) {
	var (
		err  error
		node *RuleLimit
	)
	rluo.defaults()
	if len(rluo.hooks) == 0 {
		if err = rluo.check(); err != nil {
			return nil, err
		}
		node, err = rluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RuleLimitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rluo.check(); err != nil {
				return nil, err
			}
			rluo.mutation = mutation
			node, err = rluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rluo.hooks) - 1; i >= 0; i-- {
			mut = rluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rluo *RuleLimitUpdateOne) SaveX(ctx context.Context) *RuleLimit {
	node, err := rluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rluo *RuleLimitUpdateOne) Exec(ctx context.Context) error {
	_, err := rluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rluo *RuleLimitUpdateOne) ExecX(ctx context.Context) {
	if err := rluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rluo *RuleLimitUpdateOne) defaults() {
	if _, ok := rluo.mutation.UpdateTime(); !ok {
		v := rulelimit.UpdateDefaultUpdateTime()
		rluo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rluo *RuleLimitUpdateOne) check() error {
	if v, ok := rluo.mutation.LimitType(); ok {
		if err := rulelimit.LimitTypeValidator(v); err != nil {
			return &ValidationError{Name: "limitType", err: fmt.Errorf("ent: validator failed for field \"limitType\": %w", err)}
		}
	}
	return nil
}

func (rluo *RuleLimitUpdateOne) sqlSave(ctx context.Context) (_node *RuleLimit, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rulelimit.Table,
			Columns: rulelimit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rulelimit.FieldID,
			},
		},
	}
	id, ok := rluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing RuleLimit.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := rluo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rulelimit.FieldUpdateTime,
		})
	}
	if value, ok := rluo.mutation.Number(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rulelimit.FieldNumber,
		})
	}
	if value, ok := rluo.mutation.AddedNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rulelimit.FieldNumber,
		})
	}
	if value, ok := rluo.mutation.LimitType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rulelimit.FieldLimitType,
		})
	}
	if rluo.mutation.ComparatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rulelimit.ComparatorTable,
			Columns: []string{rulelimit.ComparatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comparator.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rluo.mutation.ComparatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rulelimit.ComparatorTable,
			Columns: []string{rulelimit.ComparatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comparator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rluo.mutation.RuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rulelimit.RuleTable,
			Columns: []string{rulelimit.RuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rule.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rluo.mutation.RuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rulelimit.RuleTable,
			Columns: []string{rulelimit.RuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RuleLimit{config: rluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, rluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rulelimit.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
