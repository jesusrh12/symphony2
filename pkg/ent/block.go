// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/block"
	"github.com/facebookincubator/symphony/pkg/ent/entrypoint"
	"github.com/facebookincubator/symphony/pkg/ent/flow"
	"github.com/facebookincubator/symphony/pkg/ent/flowdraft"
	"github.com/facebookincubator/symphony/pkg/ent/flowexecutiontemplate"
	"github.com/facebookincubator/symphony/pkg/flowengine/flowschema"
)

// Block is the model entity for the Block schema.
type Block struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Cid holds the value of the "cid" field.
	Cid string `json:"cid,omitempty"`
	// Type holds the value of the "type" field.
	Type block.Type `json:"type,omitempty"`
	// ActionType holds the value of the "action_type" field.
	ActionType *flowschema.ActionTypeID `json:"action_type,omitempty"`
	// TriggerType holds the value of the "trigger_type" field.
	TriggerType *flowschema.TriggerTypeID `json:"trigger_type,omitempty"`
	// StartParamDefinitions holds the value of the "start_param_definitions" field.
	StartParamDefinitions []*flowschema.VariableDefinition `json:"start_param_definitions,omitempty"`
	// InputParams holds the value of the "input_params" field.
	InputParams []*flowschema.VariableExpression `json:"input_params,omitempty"`
	// UIRepresentation holds the value of the "ui_representation" field.
	UIRepresentation *flowschema.BlockUIRepresentation `json:"ui_representation,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BlockQuery when eager-loading is set.
	Edges                          BlockEdges `json:"edges"`
	block_sub_flow                 *int
	block_goto_block               *int
	flow_blocks                    *int
	flow_draft_blocks              *int
	flow_execution_template_blocks *int
}

// BlockEdges holds the relations/edges for other nodes in the graph.
type BlockEdges struct {
	// Flow holds the value of the flow edge.
	Flow *Flow
	// FlowTemplate holds the value of the flow_template edge.
	FlowTemplate *FlowExecutionTemplate
	// FlowDraft holds the value of the flow_draft edge.
	FlowDraft *FlowDraft
	// SubFlow holds the value of the sub_flow edge.
	SubFlow *Flow
	// SourceBlock holds the value of the source_block edge.
	SourceBlock []*Block
	// GotoBlock holds the value of the goto_block edge.
	GotoBlock *Block
	// Instances holds the value of the instances edge.
	Instances []*BlockInstance
	// EntryPoint holds the value of the entry_point edge.
	EntryPoint *EntryPoint
	// ExitPoints holds the value of the exit_points edge.
	ExitPoints []*ExitPoint
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
}

// FlowOrErr returns the Flow value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlockEdges) FlowOrErr() (*Flow, error) {
	if e.loadedTypes[0] {
		if e.Flow == nil {
			// The edge flow was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: flow.Label}
		}
		return e.Flow, nil
	}
	return nil, &NotLoadedError{edge: "flow"}
}

// FlowTemplateOrErr returns the FlowTemplate value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlockEdges) FlowTemplateOrErr() (*FlowExecutionTemplate, error) {
	if e.loadedTypes[1] {
		if e.FlowTemplate == nil {
			// The edge flow_template was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: flowexecutiontemplate.Label}
		}
		return e.FlowTemplate, nil
	}
	return nil, &NotLoadedError{edge: "flow_template"}
}

// FlowDraftOrErr returns the FlowDraft value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlockEdges) FlowDraftOrErr() (*FlowDraft, error) {
	if e.loadedTypes[2] {
		if e.FlowDraft == nil {
			// The edge flow_draft was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: flowdraft.Label}
		}
		return e.FlowDraft, nil
	}
	return nil, &NotLoadedError{edge: "flow_draft"}
}

// SubFlowOrErr returns the SubFlow value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlockEdges) SubFlowOrErr() (*Flow, error) {
	if e.loadedTypes[3] {
		if e.SubFlow == nil {
			// The edge sub_flow was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: flow.Label}
		}
		return e.SubFlow, nil
	}
	return nil, &NotLoadedError{edge: "sub_flow"}
}

// SourceBlockOrErr returns the SourceBlock value or an error if the edge
// was not loaded in eager-loading.
func (e BlockEdges) SourceBlockOrErr() ([]*Block, error) {
	if e.loadedTypes[4] {
		return e.SourceBlock, nil
	}
	return nil, &NotLoadedError{edge: "source_block"}
}

// GotoBlockOrErr returns the GotoBlock value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlockEdges) GotoBlockOrErr() (*Block, error) {
	if e.loadedTypes[5] {
		if e.GotoBlock == nil {
			// The edge goto_block was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: block.Label}
		}
		return e.GotoBlock, nil
	}
	return nil, &NotLoadedError{edge: "goto_block"}
}

// InstancesOrErr returns the Instances value or an error if the edge
// was not loaded in eager-loading.
func (e BlockEdges) InstancesOrErr() ([]*BlockInstance, error) {
	if e.loadedTypes[6] {
		return e.Instances, nil
	}
	return nil, &NotLoadedError{edge: "instances"}
}

// EntryPointOrErr returns the EntryPoint value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BlockEdges) EntryPointOrErr() (*EntryPoint, error) {
	if e.loadedTypes[7] {
		if e.EntryPoint == nil {
			// The edge entry_point was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: entrypoint.Label}
		}
		return e.EntryPoint, nil
	}
	return nil, &NotLoadedError{edge: "entry_point"}
}

// ExitPointsOrErr returns the ExitPoints value or an error if the edge
// was not loaded in eager-loading.
func (e BlockEdges) ExitPointsOrErr() ([]*ExitPoint, error) {
	if e.loadedTypes[8] {
		return e.ExitPoints, nil
	}
	return nil, &NotLoadedError{edge: "exit_points"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Block) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // cid
		&sql.NullString{}, // type
		&sql.NullString{}, // action_type
		&sql.NullString{}, // trigger_type
		&[]byte{},         // start_param_definitions
		&[]byte{},         // input_params
		&[]byte{},         // ui_representation
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Block) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // block_sub_flow
		&sql.NullInt64{}, // block_goto_block
		&sql.NullInt64{}, // flow_blocks
		&sql.NullInt64{}, // flow_draft_blocks
		&sql.NullInt64{}, // flow_execution_template_blocks
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Block fields.
func (b *Block) assignValues(values ...interface{}) error {
	if m, n := len(values), len(block.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	b.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		b.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		b.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field cid", values[2])
	} else if value.Valid {
		b.Cid = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field type", values[3])
	} else if value.Valid {
		b.Type = block.Type(value.String)
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field action_type", values[4])
	} else if value.Valid {
		b.ActionType = new(flowschema.ActionTypeID)
		*b.ActionType = flowschema.ActionTypeID(value.String)
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field trigger_type", values[5])
	} else if value.Valid {
		b.TriggerType = new(flowschema.TriggerTypeID)
		*b.TriggerType = flowschema.TriggerTypeID(value.String)
	}

	if value, ok := values[6].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field start_param_definitions", values[6])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &b.StartParamDefinitions); err != nil {
			return fmt.Errorf("unmarshal field start_param_definitions: %v", err)
		}
	}

	if value, ok := values[7].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field input_params", values[7])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &b.InputParams); err != nil {
			return fmt.Errorf("unmarshal field input_params: %v", err)
		}
	}

	if value, ok := values[8].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field ui_representation", values[8])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &b.UIRepresentation); err != nil {
			return fmt.Errorf("unmarshal field ui_representation: %v", err)
		}
	}
	values = values[9:]
	if len(values) == len(block.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field block_sub_flow", value)
		} else if value.Valid {
			b.block_sub_flow = new(int)
			*b.block_sub_flow = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field block_goto_block", value)
		} else if value.Valid {
			b.block_goto_block = new(int)
			*b.block_goto_block = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field flow_blocks", value)
		} else if value.Valid {
			b.flow_blocks = new(int)
			*b.flow_blocks = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field flow_draft_blocks", value)
		} else if value.Valid {
			b.flow_draft_blocks = new(int)
			*b.flow_draft_blocks = int(value.Int64)
		}
		if value, ok := values[4].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field flow_execution_template_blocks", value)
		} else if value.Valid {
			b.flow_execution_template_blocks = new(int)
			*b.flow_execution_template_blocks = int(value.Int64)
		}
	}
	return nil
}

// QueryFlow queries the flow edge of the Block.
func (b *Block) QueryFlow() *FlowQuery {
	return (&BlockClient{config: b.config}).QueryFlow(b)
}

// QueryFlowTemplate queries the flow_template edge of the Block.
func (b *Block) QueryFlowTemplate() *FlowExecutionTemplateQuery {
	return (&BlockClient{config: b.config}).QueryFlowTemplate(b)
}

// QueryFlowDraft queries the flow_draft edge of the Block.
func (b *Block) QueryFlowDraft() *FlowDraftQuery {
	return (&BlockClient{config: b.config}).QueryFlowDraft(b)
}

// QuerySubFlow queries the sub_flow edge of the Block.
func (b *Block) QuerySubFlow() *FlowQuery {
	return (&BlockClient{config: b.config}).QuerySubFlow(b)
}

// QuerySourceBlock queries the source_block edge of the Block.
func (b *Block) QuerySourceBlock() *BlockQuery {
	return (&BlockClient{config: b.config}).QuerySourceBlock(b)
}

// QueryGotoBlock queries the goto_block edge of the Block.
func (b *Block) QueryGotoBlock() *BlockQuery {
	return (&BlockClient{config: b.config}).QueryGotoBlock(b)
}

// QueryInstances queries the instances edge of the Block.
func (b *Block) QueryInstances() *BlockInstanceQuery {
	return (&BlockClient{config: b.config}).QueryInstances(b)
}

// QueryEntryPoint queries the entry_point edge of the Block.
func (b *Block) QueryEntryPoint() *EntryPointQuery {
	return (&BlockClient{config: b.config}).QueryEntryPoint(b)
}

// QueryExitPoints queries the exit_points edge of the Block.
func (b *Block) QueryExitPoints() *ExitPointQuery {
	return (&BlockClient{config: b.config}).QueryExitPoints(b)
}

// Update returns a builder for updating this Block.
// Note that, you need to call Block.Unwrap() before calling this method, if this Block
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Block) Update() *BlockUpdateOne {
	return (&BlockClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (b *Block) Unwrap() *Block {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Block is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Block) String() string {
	var builder strings.Builder
	builder.WriteString("Block(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(b.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(b.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", cid=")
	builder.WriteString(b.Cid)
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", b.Type))
	if v := b.ActionType; v != nil {
		builder.WriteString(", action_type=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := b.TriggerType; v != nil {
		builder.WriteString(", trigger_type=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", start_param_definitions=")
	builder.WriteString(fmt.Sprintf("%v", b.StartParamDefinitions))
	builder.WriteString(", input_params=")
	builder.WriteString(fmt.Sprintf("%v", b.InputParams))
	builder.WriteString(", ui_representation=")
	builder.WriteString(fmt.Sprintf("%v", b.UIRepresentation))
	builder.WriteByte(')')
	return builder.String()
}

// Blocks is a parsable slice of Block.
type Blocks []*Block

func (b Blocks) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
