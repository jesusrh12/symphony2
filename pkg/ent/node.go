// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"fmt"
	"sync"
	"sync/atomic"

	"github.com/facebook/ent/dialect"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/schema"
	"github.com/facebookincubator/ent-contrib/entgql"
	"github.com/facebookincubator/symphony/pkg/ent/activity"
	"github.com/facebookincubator/symphony/pkg/ent/alarmfilter"
	"github.com/facebookincubator/symphony/pkg/ent/alarmstatus"
	"github.com/facebookincubator/symphony/pkg/ent/appointment"
	"github.com/facebookincubator/symphony/pkg/ent/block"
	"github.com/facebookincubator/symphony/pkg/ent/blockinstance"
	"github.com/facebookincubator/symphony/pkg/ent/checklistcategory"
	"github.com/facebookincubator/symphony/pkg/ent/checklistcategorydefinition"
	"github.com/facebookincubator/symphony/pkg/ent/checklistitem"
	"github.com/facebookincubator/symphony/pkg/ent/checklistitemdefinition"
	"github.com/facebookincubator/symphony/pkg/ent/comment"
	"github.com/facebookincubator/symphony/pkg/ent/comparator"
	"github.com/facebookincubator/symphony/pkg/ent/counter"
	"github.com/facebookincubator/symphony/pkg/ent/counterfamily"
	"github.com/facebookincubator/symphony/pkg/ent/counterformula"
	"github.com/facebookincubator/symphony/pkg/ent/customer"
	"github.com/facebookincubator/symphony/pkg/ent/documentcategory"
	"github.com/facebookincubator/symphony/pkg/ent/domain"
	"github.com/facebookincubator/symphony/pkg/ent/entrypoint"
	"github.com/facebookincubator/symphony/pkg/ent/equipment"
	"github.com/facebookincubator/symphony/pkg/ent/equipmentcategory"
	"github.com/facebookincubator/symphony/pkg/ent/equipmentport"
	"github.com/facebookincubator/symphony/pkg/ent/equipmentportdefinition"
	"github.com/facebookincubator/symphony/pkg/ent/equipmentporttype"
	"github.com/facebookincubator/symphony/pkg/ent/equipmentposition"
	"github.com/facebookincubator/symphony/pkg/ent/equipmentpositiondefinition"
	"github.com/facebookincubator/symphony/pkg/ent/equipmenttype"
	"github.com/facebookincubator/symphony/pkg/ent/eventseverity"
	"github.com/facebookincubator/symphony/pkg/ent/exitpoint"
	"github.com/facebookincubator/symphony/pkg/ent/exporttask"
	"github.com/facebookincubator/symphony/pkg/ent/feature"
	"github.com/facebookincubator/symphony/pkg/ent/file"
	"github.com/facebookincubator/symphony/pkg/ent/floorplan"
	"github.com/facebookincubator/symphony/pkg/ent/floorplanreferencepoint"
	"github.com/facebookincubator/symphony/pkg/ent/floorplanscale"
	"github.com/facebookincubator/symphony/pkg/ent/flow"
	"github.com/facebookincubator/symphony/pkg/ent/flowdraft"
	"github.com/facebookincubator/symphony/pkg/ent/flowexecutiontemplate"
	"github.com/facebookincubator/symphony/pkg/ent/flowinstance"
	"github.com/facebookincubator/symphony/pkg/ent/formula"
	"github.com/facebookincubator/symphony/pkg/ent/hyperlink"
	"github.com/facebookincubator/symphony/pkg/ent/kpi"
	"github.com/facebookincubator/symphony/pkg/ent/kpicategory"
	"github.com/facebookincubator/symphony/pkg/ent/kqi"
	"github.com/facebookincubator/symphony/pkg/ent/kqicategory"
	"github.com/facebookincubator/symphony/pkg/ent/kqicomparator"
	"github.com/facebookincubator/symphony/pkg/ent/kqiperspective"
	"github.com/facebookincubator/symphony/pkg/ent/kqisource"
	"github.com/facebookincubator/symphony/pkg/ent/kqitarget"
	"github.com/facebookincubator/symphony/pkg/ent/kqitemporalfrequency"
	"github.com/facebookincubator/symphony/pkg/ent/link"
	"github.com/facebookincubator/symphony/pkg/ent/location"
	"github.com/facebookincubator/symphony/pkg/ent/locationtype"
	"github.com/facebookincubator/symphony/pkg/ent/networktype"
	"github.com/facebookincubator/symphony/pkg/ent/organization"
	"github.com/facebookincubator/symphony/pkg/ent/parametercatalog"
	"github.com/facebookincubator/symphony/pkg/ent/permissionspolicy"
	"github.com/facebookincubator/symphony/pkg/ent/project"
	"github.com/facebookincubator/symphony/pkg/ent/projecttemplate"
	"github.com/facebookincubator/symphony/pkg/ent/projecttype"
	"github.com/facebookincubator/symphony/pkg/ent/property"
	"github.com/facebookincubator/symphony/pkg/ent/propertycategory"
	"github.com/facebookincubator/symphony/pkg/ent/propertytype"
	"github.com/facebookincubator/symphony/pkg/ent/recommendations"
	"github.com/facebookincubator/symphony/pkg/ent/recommendationscategory"
	"github.com/facebookincubator/symphony/pkg/ent/recommendationssources"
	"github.com/facebookincubator/symphony/pkg/ent/reportfilter"
	"github.com/facebookincubator/symphony/pkg/ent/rule"
	"github.com/facebookincubator/symphony/pkg/ent/rulelimit"
	"github.com/facebookincubator/symphony/pkg/ent/ruletype"
	"github.com/facebookincubator/symphony/pkg/ent/service"
	"github.com/facebookincubator/symphony/pkg/ent/serviceendpoint"
	"github.com/facebookincubator/symphony/pkg/ent/serviceendpointdefinition"
	"github.com/facebookincubator/symphony/pkg/ent/servicetype"
	"github.com/facebookincubator/symphony/pkg/ent/survey"
	"github.com/facebookincubator/symphony/pkg/ent/surveycellscan"
	"github.com/facebookincubator/symphony/pkg/ent/surveyquestion"
	"github.com/facebookincubator/symphony/pkg/ent/surveytemplatecategory"
	"github.com/facebookincubator/symphony/pkg/ent/surveytemplatequestion"
	"github.com/facebookincubator/symphony/pkg/ent/surveywifiscan"
	"github.com/facebookincubator/symphony/pkg/ent/tech"
	"github.com/facebookincubator/symphony/pkg/ent/threshold"
	"github.com/facebookincubator/symphony/pkg/ent/user"
	"github.com/facebookincubator/symphony/pkg/ent/usersgroup"
	"github.com/facebookincubator/symphony/pkg/ent/vendor"
	"github.com/facebookincubator/symphony/pkg/ent/workertype"
	"github.com/facebookincubator/symphony/pkg/ent/workorder"
	"github.com/facebookincubator/symphony/pkg/ent/workorderdefinition"
	"github.com/facebookincubator/symphony/pkg/ent/workordertemplate"
	"github.com/facebookincubator/symphony/pkg/ent/workordertype"
	"github.com/hashicorp/go-multierror"
	"golang.org/x/sync/semaphore"
)

// Noder wraps the basic Node method.
type Noder interface {
	Node(context.Context) (*Node, error)
}

// Node in the graph.
type Node struct {
	ID     int      `json:"id,omitemty"`      // node id.
	Type   string   `json:"type,omitempty"`   // node type.
	Fields []*Field `json:"fields,omitempty"` // node fields.
	Edges  []*Edge  `json:"edges,omitempty"`  // node edges.
}

// Field of a node.
type Field struct {
	Type  string `json:"type,omitempty"`  // field type.
	Name  string `json:"name,omitempty"`  // field name (as in struct).
	Value string `json:"value,omitempty"` // stringified value.
}

// Edges between two nodes.
type Edge struct {
	Type string `json:"type,omitempty"` // edge type.
	Name string `json:"name,omitempty"` // edge name.
	IDs  []int  `json:"ids,omitempty"`  // node ids (where this edge point to).
}

func (a *Activity) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     a.ID,
		Type:   "Activity",
		Fields: make([]*Field, 7),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(a.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.ActivityType); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "activity.ActivityType",
		Name:  "activity_type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.IsCreate); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "bool",
		Name:  "is_create",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.OldValue); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "old_value",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.NewValue); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "new_value",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.ClockDetails); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "activity.ClockDetails",
		Name:  "clock_details",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "User",
		Name: "author",
	}
	node.Edges[0].IDs, err = a.QueryAuthor().
		Select(user.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "WorkOrder",
		Name: "work_order",
	}
	node.Edges[1].IDs, err = a.QueryWorkOrder().
		Select(workorder.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (af *AlarmFilter) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     af.ID,
		Type:   "AlarmFilter",
		Fields: make([]*Field, 10),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(af.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(af.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(af.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(af.NetworkResource); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "networkResource",
		Value: string(buf),
	}
	if buf, err = json.Marshal(af.BeginTime); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "time.Time",
		Name:  "beginTime",
		Value: string(buf),
	}
	if buf, err = json.Marshal(af.EndTime); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "time.Time",
		Name:  "endTime",
		Value: string(buf),
	}
	if buf, err = json.Marshal(af.Reason); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "reason",
		Value: string(buf),
	}
	if buf, err = json.Marshal(af.User); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "user",
		Value: string(buf),
	}
	if buf, err = json.Marshal(af.CreationTime); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "time.Time",
		Name:  "creationTime",
		Value: string(buf),
	}
	if buf, err = json.Marshal(af.Enable); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "bool",
		Name:  "enable",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "AlarmStatus",
		Name: "alarmStatusFk",
	}
	node.Edges[0].IDs, err = af.QueryAlarmStatusFk().
		Select(alarmstatus.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (as *AlarmStatus) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     as.ID,
		Type:   "AlarmStatus",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(as.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(as.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(as.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "AlarmFilter",
		Name: "alarmStatusFk",
	}
	node.Edges[0].IDs, err = as.QueryAlarmStatusFk().
		Select(alarmfilter.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (a *Appointment) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     a.ID,
		Type:   "Appointment",
		Fields: make([]*Field, 7),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(a.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.Start); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "start",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.End); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "time.Time",
		Name:  "end",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.Duration); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "float64",
		Name:  "duration",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.Status); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "appointment.Status",
		Name:  "status",
		Value: string(buf),
	}
	if buf, err = json.Marshal(a.CreationDate); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "time.Time",
		Name:  "creation_date",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "WorkOrder",
		Name: "workorder",
	}
	node.Edges[0].IDs, err = a.QueryWorkorder().
		Select(workorder.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "User",
		Name: "assignee",
	}
	node.Edges[1].IDs, err = a.QueryAssignee().
		Select(user.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (b *Block) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     b.ID,
		Type:   "Block",
		Fields: make([]*Field, 9),
		Edges:  make([]*Edge, 9),
	}
	var buf []byte
	if buf, err = json.Marshal(b.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(b.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(b.Cid); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "cid",
		Value: string(buf),
	}
	if buf, err = json.Marshal(b.Type); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "block.Type",
		Name:  "type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(b.ActionType); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "flowschema.ActionTypeID",
		Name:  "action_type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(b.TriggerType); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "flowschema.TriggerTypeID",
		Name:  "trigger_type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(b.StartParamDefinitions); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "[]*flowschema.VariableDefinition",
		Name:  "start_param_definitions",
		Value: string(buf),
	}
	if buf, err = json.Marshal(b.InputParams); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "[]*flowschema.VariableExpression",
		Name:  "input_params",
		Value: string(buf),
	}
	if buf, err = json.Marshal(b.UIRepresentation); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "*flowschema.BlockUIRepresentation",
		Name:  "ui_representation",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Flow",
		Name: "flow",
	}
	node.Edges[0].IDs, err = b.QueryFlow().
		Select(flow.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "FlowExecutionTemplate",
		Name: "flow_template",
	}
	node.Edges[1].IDs, err = b.QueryFlowTemplate().
		Select(flowexecutiontemplate.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "FlowDraft",
		Name: "flow_draft",
	}
	node.Edges[2].IDs, err = b.QueryFlowDraft().
		Select(flowdraft.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Flow",
		Name: "sub_flow",
	}
	node.Edges[3].IDs, err = b.QuerySubFlow().
		Select(flow.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "Block",
		Name: "source_block",
	}
	node.Edges[4].IDs, err = b.QuerySourceBlock().
		Select(block.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "Block",
		Name: "goto_block",
	}
	node.Edges[5].IDs, err = b.QueryGotoBlock().
		Select(block.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[6] = &Edge{
		Type: "BlockInstance",
		Name: "instances",
	}
	node.Edges[6].IDs, err = b.QueryInstances().
		Select(blockinstance.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[7] = &Edge{
		Type: "EntryPoint",
		Name: "entry_point",
	}
	node.Edges[7].IDs, err = b.QueryEntryPoint().
		Select(entrypoint.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[8] = &Edge{
		Type: "ExitPoint",
		Name: "exit_points",
	}
	node.Edges[8].IDs, err = b.QueryExitPoints().
		Select(exitpoint.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (bi *BlockInstance) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     bi.ID,
		Type:   "BlockInstance",
		Fields: make([]*Field, 9),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(bi.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(bi.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(bi.Status); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "blockinstance.Status",
		Name:  "status",
		Value: string(buf),
	}
	if buf, err = json.Marshal(bi.Inputs); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "[]*flowschema.VariableValue",
		Name:  "inputs",
		Value: string(buf),
	}
	if buf, err = json.Marshal(bi.Outputs); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "[]*flowschema.VariableValue",
		Name:  "outputs",
		Value: string(buf),
	}
	if buf, err = json.Marshal(bi.FailureReason); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "failure_reason",
		Value: string(buf),
	}
	if buf, err = json.Marshal(bi.BlockInstanceCounter); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "int",
		Name:  "block_instance_counter",
		Value: string(buf),
	}
	if buf, err = json.Marshal(bi.StartDate); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "time.Time",
		Name:  "start_date",
		Value: string(buf),
	}
	if buf, err = json.Marshal(bi.EndDate); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "time.Time",
		Name:  "end_date",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "FlowInstance",
		Name: "flow_instance",
	}
	node.Edges[0].IDs, err = bi.QueryFlowInstance().
		Select(flowinstance.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Block",
		Name: "block",
	}
	node.Edges[1].IDs, err = bi.QueryBlock().
		Select(block.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "FlowInstance",
		Name: "subflow_instance",
	}
	node.Edges[2].IDs, err = bi.QuerySubflowInstance().
		Select(flowinstance.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (clc *CheckListCategory) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     clc.ID,
		Type:   "CheckListCategory",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(clc.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(clc.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(clc.Title); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "title",
		Value: string(buf),
	}
	if buf, err = json.Marshal(clc.Description); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "CheckListItem",
		Name: "check_list_items",
	}
	node.Edges[0].IDs, err = clc.QueryCheckListItems().
		Select(checklistitem.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "WorkOrder",
		Name: "work_order",
	}
	node.Edges[1].IDs, err = clc.QueryWorkOrder().
		Select(workorder.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (clcd *CheckListCategoryDefinition) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     clcd.ID,
		Type:   "CheckListCategoryDefinition",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(clcd.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(clcd.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(clcd.Title); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "title",
		Value: string(buf),
	}
	if buf, err = json.Marshal(clcd.Description); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "CheckListItemDefinition",
		Name: "check_list_item_definitions",
	}
	node.Edges[0].IDs, err = clcd.QueryCheckListItemDefinitions().
		Select(checklistitemdefinition.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "WorkOrderType",
		Name: "work_order_type",
	}
	node.Edges[1].IDs, err = clcd.QueryWorkOrderType().
		Select(workordertype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "WorkOrderTemplate",
		Name: "work_order_template",
	}
	node.Edges[2].IDs, err = clcd.QueryWorkOrderTemplate().
		Select(workordertemplate.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (cli *CheckListItem) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     cli.ID,
		Type:   "CheckListItem",
		Fields: make([]*Field, 11),
		Edges:  make([]*Edge, 4),
	}
	var buf []byte
	if buf, err = json.Marshal(cli.Title); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "title",
		Value: string(buf),
	}
	if buf, err = json.Marshal(cli.Type); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "enum.CheckListItemType",
		Name:  "type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(cli.Index); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "int",
		Name:  "index",
		Value: string(buf),
	}
	if buf, err = json.Marshal(cli.IsMandatory); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "bool",
		Name:  "is_mandatory",
		Value: string(buf),
	}
	if buf, err = json.Marshal(cli.Checked); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "bool",
		Name:  "checked",
		Value: string(buf),
	}
	if buf, err = json.Marshal(cli.StringVal); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "string_val",
		Value: string(buf),
	}
	if buf, err = json.Marshal(cli.EnumValues); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "enum_values",
		Value: string(buf),
	}
	if buf, err = json.Marshal(cli.EnumSelectionModeValue); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "enum.CheckListItemEnumSelectionMode",
		Name:  "enum_selection_mode_value",
		Value: string(buf),
	}
	if buf, err = json.Marshal(cli.SelectedEnumValues); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "selected_enum_values",
		Value: string(buf),
	}
	if buf, err = json.Marshal(cli.YesNoVal); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "checklistitem.YesNoVal",
		Name:  "yes_no_val",
		Value: string(buf),
	}
	if buf, err = json.Marshal(cli.HelpText); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "string",
		Name:  "help_text",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "File",
		Name: "files",
	}
	node.Edges[0].IDs, err = cli.QueryFiles().
		Select(file.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "SurveyWiFiScan",
		Name: "wifi_scan",
	}
	node.Edges[1].IDs, err = cli.QueryWifiScan().
		Select(surveywifiscan.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "SurveyCellScan",
		Name: "cell_scan",
	}
	node.Edges[2].IDs, err = cli.QueryCellScan().
		Select(surveycellscan.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "CheckListCategory",
		Name: "check_list_category",
	}
	node.Edges[3].IDs, err = cli.QueryCheckListCategory().
		Select(checklistcategory.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (clid *CheckListItemDefinition) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     clid.ID,
		Type:   "CheckListItemDefinition",
		Fields: make([]*Field, 9),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(clid.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(clid.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(clid.Title); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "title",
		Value: string(buf),
	}
	if buf, err = json.Marshal(clid.Type); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "enum.CheckListItemType",
		Name:  "type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(clid.Index); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "index",
		Value: string(buf),
	}
	if buf, err = json.Marshal(clid.IsMandatory); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "bool",
		Name:  "is_mandatory",
		Value: string(buf),
	}
	if buf, err = json.Marshal(clid.EnumValues); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "enum_values",
		Value: string(buf),
	}
	if buf, err = json.Marshal(clid.EnumSelectionModeValue); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "enum.CheckListItemEnumSelectionMode",
		Name:  "enum_selection_mode_value",
		Value: string(buf),
	}
	if buf, err = json.Marshal(clid.HelpText); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "help_text",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "CheckListCategoryDefinition",
		Name: "check_list_category_definition",
	}
	node.Edges[0].IDs, err = clid.QueryCheckListCategoryDefinition().
		Select(checklistcategorydefinition.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (c *Comment) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     c.ID,
		Type:   "Comment",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(c.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Text); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "text",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "User",
		Name: "author",
	}
	node.Edges[0].IDs, err = c.QueryAuthor().
		Select(user.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "WorkOrder",
		Name: "work_order",
	}
	node.Edges[1].IDs, err = c.QueryWorkOrder().
		Select(workorder.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Project",
		Name: "project",
	}
	node.Edges[2].IDs, err = c.QueryProject().
		Select(project.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (c *Comparator) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     c.ID,
		Type:   "Comparator",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(c.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "RuleLimit",
		Name: "comparatorrulelimit",
	}
	node.Edges[0].IDs, err = c.QueryComparatorrulelimit().
		Select(rulelimit.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "KqiComparator",
		Name: "comparatorkqitargetfk",
	}
	node.Edges[1].IDs, err = c.QueryComparatorkqitargetfk().
		Select(kqicomparator.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (c *Counter) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     c.ID,
		Type:   "Counter",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(c.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.ExternalId); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "externalId",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.NetworkManagerSystem); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "networkManagerSystem",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "CounterFamily",
		Name: "counterfamily",
	}
	node.Edges[0].IDs, err = c.QueryCounterfamily().
		Select(counterfamily.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Vendor",
		Name: "vendor",
	}
	node.Edges[1].IDs, err = c.QueryVendor().
		Select(vendor.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "CounterFormula",
		Name: "counter_fk",
	}
	node.Edges[2].IDs, err = c.QueryCounterFk().
		Select(counterformula.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (cf *CounterFamily) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     cf.ID,
		Type:   "CounterFamily",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(cf.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(cf.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(cf.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Counter",
		Name: "counterfamily",
	}
	node.Edges[0].IDs, err = cf.QueryCounterfamily().
		Select(counter.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (cf *CounterFormula) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     cf.ID,
		Type:   "CounterFormula",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(cf.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(cf.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(cf.Mandatory); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "bool",
		Name:  "mandatory",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Formula",
		Name: "formula",
	}
	node.Edges[0].IDs, err = cf.QueryFormula().
		Select(formula.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Counter",
		Name: "counter",
	}
	node.Edges[1].IDs, err = cf.QueryCounter().
		Select(counter.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (c *Customer) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     c.ID,
		Type:   "Customer",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(c.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.ExternalID); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "external_id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Service",
		Name: "services",
	}
	node.Edges[0].IDs, err = c.QueryServices().
		Select(service.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (dc *DocumentCategory) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     dc.ID,
		Type:   "DocumentCategory",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(dc.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dc.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dc.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(dc.Index); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "int",
		Name:  "index",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "LocationType",
		Name: "location_type",
	}
	node.Edges[0].IDs, err = dc.QueryLocationType().
		Select(locationtype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "File",
		Name: "files",
	}
	node.Edges[1].IDs, err = dc.QueryFiles().
		Select(file.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Hyperlink",
		Name: "hyperlinks",
	}
	node.Edges[2].IDs, err = dc.QueryHyperlinks().
		Select(hyperlink.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (d *Domain) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     d.ID,
		Type:   "Domain",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(d.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(d.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(d.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Tech",
		Name: "techdomain",
	}
	node.Edges[0].IDs, err = d.QueryTechdomain().
		Select(tech.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Kpi",
		Name: "kpidomain",
	}
	node.Edges[1].IDs, err = d.QueryKpidomain().
		Select(kpi.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (ep *EntryPoint) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     ep.ID,
		Type:   "EntryPoint",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(ep.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ep.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ep.Role); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "flowschema.EntryPointRole",
		Name:  "role",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ep.Cid); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "cid",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "ExitPoint",
		Name: "prev_exit_points",
	}
	node.Edges[0].IDs, err = ep.QueryPrevExitPoints().
		Select(exitpoint.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Block",
		Name: "parent_block",
	}
	node.Edges[1].IDs, err = ep.QueryParentBlock().
		Select(block.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (e *Equipment) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     e.ID,
		Type:   "Equipment",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 10),
	}
	var buf []byte
	if buf, err = json.Marshal(e.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.FutureState); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "enum.FutureState",
		Name:  "future_state",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.DeviceID); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "device_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.ExternalID); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "external_id",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "EquipmentType",
		Name: "type",
	}
	node.Edges[0].IDs, err = e.QueryType().
		Select(equipmenttype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Location",
		Name: "location",
	}
	node.Edges[1].IDs, err = e.QueryLocation().
		Select(location.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "EquipmentPosition",
		Name: "parent_position",
	}
	node.Edges[2].IDs, err = e.QueryParentPosition().
		Select(equipmentposition.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "EquipmentPosition",
		Name: "positions",
	}
	node.Edges[3].IDs, err = e.QueryPositions().
		Select(equipmentposition.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "EquipmentPort",
		Name: "ports",
	}
	node.Edges[4].IDs, err = e.QueryPorts().
		Select(equipmentport.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "WorkOrder",
		Name: "work_order",
	}
	node.Edges[5].IDs, err = e.QueryWorkOrder().
		Select(workorder.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[6] = &Edge{
		Type: "Property",
		Name: "properties",
	}
	node.Edges[6].IDs, err = e.QueryProperties().
		Select(property.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[7] = &Edge{
		Type: "File",
		Name: "files",
	}
	node.Edges[7].IDs, err = e.QueryFiles().
		Select(file.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[8] = &Edge{
		Type: "Hyperlink",
		Name: "hyperlinks",
	}
	node.Edges[8].IDs, err = e.QueryHyperlinks().
		Select(hyperlink.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[9] = &Edge{
		Type: "ServiceEndpoint",
		Name: "endpoints",
	}
	node.Edges[9].IDs, err = e.QueryEndpoints().
		Select(serviceendpoint.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (ec *EquipmentCategory) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     ec.ID,
		Type:   "EquipmentCategory",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(ec.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ec.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ec.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "EquipmentType",
		Name: "types",
	}
	node.Edges[0].IDs, err = ec.QueryTypes().
		Select(equipmenttype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (ep *EquipmentPort) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     ep.ID,
		Type:   "EquipmentPort",
		Fields: make([]*Field, 2),
		Edges:  make([]*Edge, 6),
	}
	var buf []byte
	if buf, err = json.Marshal(ep.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ep.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "EquipmentPortDefinition",
		Name: "definition",
	}
	node.Edges[0].IDs, err = ep.QueryDefinition().
		Select(equipmentportdefinition.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Equipment",
		Name: "parent",
	}
	node.Edges[1].IDs, err = ep.QueryParent().
		Select(equipment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Link",
		Name: "link",
	}
	node.Edges[2].IDs, err = ep.QueryLink().
		Select(link.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Property",
		Name: "properties",
	}
	node.Edges[3].IDs, err = ep.QueryProperties().
		Select(property.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "ServiceEndpoint",
		Name: "endpoints",
	}
	node.Edges[4].IDs, err = ep.QueryEndpoints().
		Select(serviceendpoint.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "Service",
		Name: "service",
	}
	node.Edges[5].IDs, err = ep.QueryService().
		Select(service.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (epd *EquipmentPortDefinition) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     epd.ID,
		Type:   "EquipmentPortDefinition",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 4),
	}
	var buf []byte
	if buf, err = json.Marshal(epd.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(epd.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(epd.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(epd.Index); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "int",
		Name:  "index",
		Value: string(buf),
	}
	if buf, err = json.Marshal(epd.Bandwidth); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "bandwidth",
		Value: string(buf),
	}
	if buf, err = json.Marshal(epd.VisibilityLabel); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "visibility_label",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "EquipmentPortType",
		Name: "equipment_port_type",
	}
	node.Edges[0].IDs, err = epd.QueryEquipmentPortType().
		Select(equipmentporttype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "EquipmentPort",
		Name: "ports",
	}
	node.Edges[1].IDs, err = epd.QueryPorts().
		Select(equipmentport.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "EquipmentType",
		Name: "equipment_type",
	}
	node.Edges[2].IDs, err = epd.QueryEquipmentType().
		Select(equipmenttype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "EquipmentPortDefinition",
		Name: "connected_ports",
	}
	node.Edges[3].IDs, err = epd.QueryConnectedPorts().
		Select(equipmentportdefinition.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (ept *EquipmentPortType) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     ept.ID,
		Type:   "EquipmentPortType",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(ept.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ept.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ept.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "PropertyType",
		Name: "property_types",
	}
	node.Edges[0].IDs, err = ept.QueryPropertyTypes().
		Select(propertytype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "PropertyType",
		Name: "link_property_types",
	}
	node.Edges[1].IDs, err = ept.QueryLinkPropertyTypes().
		Select(propertytype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "EquipmentPortDefinition",
		Name: "port_definitions",
	}
	node.Edges[2].IDs, err = ept.QueryPortDefinitions().
		Select(equipmentportdefinition.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (ep *EquipmentPosition) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     ep.ID,
		Type:   "EquipmentPosition",
		Fields: make([]*Field, 2),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(ep.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ep.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "EquipmentPositionDefinition",
		Name: "definition",
	}
	node.Edges[0].IDs, err = ep.QueryDefinition().
		Select(equipmentpositiondefinition.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Equipment",
		Name: "parent",
	}
	node.Edges[1].IDs, err = ep.QueryParent().
		Select(equipment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Equipment",
		Name: "attachment",
	}
	node.Edges[2].IDs, err = ep.QueryAttachment().
		Select(equipment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (epd *EquipmentPositionDefinition) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     epd.ID,
		Type:   "EquipmentPositionDefinition",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(epd.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(epd.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(epd.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(epd.Index); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "int",
		Name:  "index",
		Value: string(buf),
	}
	if buf, err = json.Marshal(epd.VisibilityLabel); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "visibility_label",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "EquipmentPosition",
		Name: "positions",
	}
	node.Edges[0].IDs, err = epd.QueryPositions().
		Select(equipmentposition.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "EquipmentType",
		Name: "equipment_type",
	}
	node.Edges[1].IDs, err = epd.QueryEquipmentType().
		Select(equipmenttype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (et *EquipmentType) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     et.ID,
		Type:   "EquipmentType",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 6),
	}
	var buf []byte
	if buf, err = json.Marshal(et.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(et.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(et.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "EquipmentPortDefinition",
		Name: "port_definitions",
	}
	node.Edges[0].IDs, err = et.QueryPortDefinitions().
		Select(equipmentportdefinition.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "EquipmentPositionDefinition",
		Name: "position_definitions",
	}
	node.Edges[1].IDs, err = et.QueryPositionDefinitions().
		Select(equipmentpositiondefinition.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "PropertyType",
		Name: "property_types",
	}
	node.Edges[2].IDs, err = et.QueryPropertyTypes().
		Select(propertytype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Equipment",
		Name: "equipment",
	}
	node.Edges[3].IDs, err = et.QueryEquipment().
		Select(equipment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "EquipmentCategory",
		Name: "category",
	}
	node.Edges[4].IDs, err = et.QueryCategory().
		Select(equipmentcategory.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "ServiceEndpointDefinition",
		Name: "service_endpoint_definitions",
	}
	node.Edges[5].IDs, err = et.QueryServiceEndpointDefinitions().
		Select(serviceendpointdefinition.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (es *EventSeverity) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     es.ID,
		Type:   "EventSeverity",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(es.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(es.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(es.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Rule",
		Name: "eventseverityrule",
	}
	node.Edges[0].IDs, err = es.QueryEventseverityrule().
		Select(rule.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (ep *ExitPoint) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     ep.ID,
		Type:   "ExitPoint",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(ep.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ep.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ep.Role); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "flowschema.ExitPointRole",
		Name:  "role",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ep.Cid); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "cid",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ep.Condition); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "*flowschema.VariableExpression",
		Name:  "condition",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "EntryPoint",
		Name: "next_entry_points",
	}
	node.Edges[0].IDs, err = ep.QueryNextEntryPoints().
		Select(entrypoint.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Block",
		Name: "parent_block",
	}
	node.Edges[1].IDs, err = ep.QueryParentBlock().
		Select(block.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (et *ExportTask) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     et.ID,
		Type:   "ExportTask",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 0),
	}
	var buf []byte
	if buf, err = json.Marshal(et.Type); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "exporttask.Type",
		Name:  "type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(et.Status); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "exporttask.Status",
		Name:  "status",
		Value: string(buf),
	}
	if buf, err = json.Marshal(et.Progress); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "float64",
		Name:  "progress",
		Value: string(buf),
	}
	if buf, err = json.Marshal(et.Filters); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "filters",
		Value: string(buf),
	}
	if buf, err = json.Marshal(et.StoreKey); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "store_key",
		Value: string(buf),
	}
	if buf, err = json.Marshal(et.WoIDToExport); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "int",
		Name:  "wo_id_to_export",
		Value: string(buf),
	}
	return node, nil
}

func (f *Feature) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     f.ID,
		Type:   "Feature",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(f.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.Global); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "bool",
		Name:  "global",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.Enabled); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "bool",
		Name:  "enabled",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.Description); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "User",
		Name: "users",
	}
	node.Edges[0].IDs, err = f.QueryUsers().
		Select(user.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "UsersGroup",
		Name: "groups",
	}
	node.Edges[1].IDs, err = f.QueryGroups().
		Select(usersgroup.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (f *File) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     f.ID,
		Type:   "File",
		Fields: make([]*Field, 11),
		Edges:  make([]*Edge, 10),
	}
	var buf []byte
	if buf, err = json.Marshal(f.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.Type); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "file.Type",
		Name:  "type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.Name); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.Size); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "size",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.ModifiedAt); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "time.Time",
		Name:  "modified_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.UploadedAt); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "time.Time",
		Name:  "uploaded_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.ContentType); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "content_type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.StoreKey); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "store_key",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.Category); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "string",
		Name:  "category",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.Annotation); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "string",
		Name:  "annotation",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Location",
		Name: "location",
	}
	node.Edges[0].IDs, err = f.QueryLocation().
		Select(location.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Equipment",
		Name: "equipment",
	}
	node.Edges[1].IDs, err = f.QueryEquipment().
		Select(equipment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "User",
		Name: "user",
	}
	node.Edges[2].IDs, err = f.QueryUser().
		Select(user.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "WorkOrder",
		Name: "work_order",
	}
	node.Edges[3].IDs, err = f.QueryWorkOrder().
		Select(workorder.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "CheckListItem",
		Name: "checklist_item",
	}
	node.Edges[4].IDs, err = f.QueryChecklistItem().
		Select(checklistitem.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "Survey",
		Name: "survey",
	}
	node.Edges[5].IDs, err = f.QuerySurvey().
		Select(survey.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[6] = &Edge{
		Type: "FloorPlan",
		Name: "floor_plan",
	}
	node.Edges[6].IDs, err = f.QueryFloorPlan().
		Select(floorplan.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[7] = &Edge{
		Type: "SurveyQuestion",
		Name: "photo_survey_question",
	}
	node.Edges[7].IDs, err = f.QueryPhotoSurveyQuestion().
		Select(surveyquestion.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[8] = &Edge{
		Type: "SurveyQuestion",
		Name: "survey_question",
	}
	node.Edges[8].IDs, err = f.QuerySurveyQuestion().
		Select(surveyquestion.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[9] = &Edge{
		Type: "DocumentCategory",
		Name: "document_category",
	}
	node.Edges[9].IDs, err = f.QueryDocumentCategory().
		Select(documentcategory.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (fp *FloorPlan) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     fp.ID,
		Type:   "FloorPlan",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 4),
	}
	var buf []byte
	if buf, err = json.Marshal(fp.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fp.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fp.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Location",
		Name: "location",
	}
	node.Edges[0].IDs, err = fp.QueryLocation().
		Select(location.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "FloorPlanReferencePoint",
		Name: "reference_point",
	}
	node.Edges[1].IDs, err = fp.QueryReferencePoint().
		Select(floorplanreferencepoint.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "FloorPlanScale",
		Name: "scale",
	}
	node.Edges[2].IDs, err = fp.QueryScale().
		Select(floorplanscale.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "File",
		Name: "image",
	}
	node.Edges[3].IDs, err = fp.QueryImage().
		Select(file.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (fprp *FloorPlanReferencePoint) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     fprp.ID,
		Type:   "FloorPlanReferencePoint",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 0),
	}
	var buf []byte
	if buf, err = json.Marshal(fprp.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fprp.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fprp.X); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "int",
		Name:  "x",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fprp.Y); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "int",
		Name:  "y",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fprp.Latitude); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "float64",
		Name:  "latitude",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fprp.Longitude); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "float64",
		Name:  "longitude",
		Value: string(buf),
	}
	return node, nil
}

func (fps *FloorPlanScale) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     fps.ID,
		Type:   "FloorPlanScale",
		Fields: make([]*Field, 7),
		Edges:  make([]*Edge, 0),
	}
	var buf []byte
	if buf, err = json.Marshal(fps.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fps.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fps.ReferencePoint1X); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "int",
		Name:  "reference_point1_x",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fps.ReferencePoint1Y); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "int",
		Name:  "reference_point1_y",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fps.ReferencePoint2X); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "reference_point2_x",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fps.ReferencePoint2Y); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "int",
		Name:  "reference_point2_y",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fps.ScaleInMeters); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "float64",
		Name:  "scale_in_meters",
		Value: string(buf),
	}
	return node, nil
}

func (f *Flow) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     f.ID,
		Type:   "Flow",
		Fields: make([]*Field, 7),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(f.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.Description); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.EndParamDefinitions); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "[]*flowschema.VariableDefinition",
		Name:  "end_param_definitions",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.Status); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "flow.Status",
		Name:  "status",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.NewInstancesPolicy); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "flow.NewInstancesPolicy",
		Name:  "newInstancesPolicy",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Block",
		Name: "blocks",
	}
	node.Edges[0].IDs, err = f.QueryBlocks().
		Select(block.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "FlowDraft",
		Name: "draft",
	}
	node.Edges[1].IDs, err = f.QueryDraft().
		Select(flowdraft.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (fd *FlowDraft) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     fd.ID,
		Type:   "FlowDraft",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(fd.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fd.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fd.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fd.Description); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fd.EndParamDefinitions); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "[]*flowschema.VariableDefinition",
		Name:  "end_param_definitions",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fd.SameAsFlow); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "bool",
		Name:  "sameAsFlow",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Block",
		Name: "blocks",
	}
	node.Edges[0].IDs, err = fd.QueryBlocks().
		Select(block.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Flow",
		Name: "flow",
	}
	node.Edges[1].IDs, err = fd.QueryFlow().
		Select(flow.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (fet *FlowExecutionTemplate) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     fet.ID,
		Type:   "FlowExecutionTemplate",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(fet.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fet.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fet.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fet.Description); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fet.EndParamDefinitions); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "[]*flowschema.VariableDefinition",
		Name:  "end_param_definitions",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Block",
		Name: "blocks",
	}
	node.Edges[0].IDs, err = fet.QueryBlocks().
		Select(block.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (fi *FlowInstance) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     fi.ID,
		Type:   "FlowInstance",
		Fields: make([]*Field, 9),
		Edges:  make([]*Edge, 4),
	}
	var buf []byte
	if buf, err = json.Marshal(fi.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fi.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fi.Status); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "flowinstance.Status",
		Name:  "status",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fi.OutputParams); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "[]*flowschema.VariableValue",
		Name:  "output_params",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fi.IncompletionReason); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "incompletion_reason",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fi.BssCode); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "bss_code",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fi.ServiceInstanceCode); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "service_instance_code",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fi.StartDate); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "time.Time",
		Name:  "start_date",
		Value: string(buf),
	}
	if buf, err = json.Marshal(fi.EndDate); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "time.Time",
		Name:  "end_date",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Flow",
		Name: "flow",
	}
	node.Edges[0].IDs, err = fi.QueryFlow().
		Select(flow.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "FlowExecutionTemplate",
		Name: "template",
	}
	node.Edges[1].IDs, err = fi.QueryTemplate().
		Select(flowexecutiontemplate.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "BlockInstance",
		Name: "blocks",
	}
	node.Edges[2].IDs, err = fi.QueryBlocks().
		Select(blockinstance.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "BlockInstance",
		Name: "parent_subflow_block",
	}
	node.Edges[3].IDs, err = fi.QueryParentSubflowBlock().
		Select(blockinstance.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (f *Formula) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     f.ID,
		Type:   "Formula",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 4),
	}
	var buf []byte
	if buf, err = json.Marshal(f.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.TextFormula); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "textFormula",
		Value: string(buf),
	}
	if buf, err = json.Marshal(f.Status); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "bool",
		Name:  "status",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "NetworkType",
		Name: "networkType",
	}
	node.Edges[0].IDs, err = f.QueryNetworkType().
		Select(networktype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Tech",
		Name: "tech",
	}
	node.Edges[1].IDs, err = f.QueryTech().
		Select(tech.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Kpi",
		Name: "kpi",
	}
	node.Edges[2].IDs, err = f.QueryKpi().
		Select(kpi.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "CounterFormula",
		Name: "counterformula",
	}
	node.Edges[3].IDs, err = f.QueryCounterformula().
		Select(counterformula.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (h *Hyperlink) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     h.ID,
		Type:   "Hyperlink",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 4),
	}
	var buf []byte
	if buf, err = json.Marshal(h.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.URL); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "url",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.Name); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(h.Category); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "category",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Equipment",
		Name: "equipment",
	}
	node.Edges[0].IDs, err = h.QueryEquipment().
		Select(equipment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Location",
		Name: "location",
	}
	node.Edges[1].IDs, err = h.QueryLocation().
		Select(location.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "WorkOrder",
		Name: "work_order",
	}
	node.Edges[2].IDs, err = h.QueryWorkOrder().
		Select(workorder.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "DocumentCategory",
		Name: "document_category",
	}
	node.Edges[3].IDs, err = h.QueryDocumentCategory().
		Select(documentcategory.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (k *Kpi) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     k.ID,
		Type:   "Kpi",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 4),
	}
	var buf []byte
	if buf, err = json.Marshal(k.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(k.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(k.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(k.Description); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(k.Status); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "bool",
		Name:  "status",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Domain",
		Name: "domain",
	}
	node.Edges[0].IDs, err = k.QueryDomain().
		Select(domain.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "KpiCategory",
		Name: "KpiCategory",
	}
	node.Edges[1].IDs, err = k.QueryKpiCategory().
		Select(kpicategory.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Formula",
		Name: "formulakpi",
	}
	node.Edges[2].IDs, err = k.QueryFormulakpi().
		Select(formula.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Threshold",
		Name: "thresholdkpi",
	}
	node.Edges[3].IDs, err = k.QueryThresholdkpi().
		Select(threshold.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (kc *KpiCategory) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     kc.ID,
		Type:   "KpiCategory",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(kc.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(kc.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(kc.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Kpi",
		Name: "kpicategory",
	}
	node.Edges[0].IDs, err = kc.QueryKpicategory().
		Select(kpi.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (k *Kqi) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     k.ID,
		Type:   "Kqi",
		Fields: make([]*Field, 7),
		Edges:  make([]*Edge, 5),
	}
	var buf []byte
	if buf, err = json.Marshal(k.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(k.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(k.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(k.Description); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(k.StartDateTime); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "time.Time",
		Name:  "startDateTime",
		Value: string(buf),
	}
	if buf, err = json.Marshal(k.EndDateTime); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "time.Time",
		Name:  "endDateTime",
		Value: string(buf),
	}
	if buf, err = json.Marshal(k.Formula); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "formula",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "KqiCategory",
		Name: "kqiCategoryFk",
	}
	node.Edges[0].IDs, err = k.QueryKqiCategoryFk().
		Select(kqicategory.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "KqiPerspective",
		Name: "kqiPerspectiveFk",
	}
	node.Edges[1].IDs, err = k.QueryKqiPerspectiveFk().
		Select(kqiperspective.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "KqiSource",
		Name: "kqiSourceFk",
	}
	node.Edges[2].IDs, err = k.QueryKqiSourceFk().
		Select(kqisource.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "KqiTemporalFrequency",
		Name: "kqiTemporalFrequencyFk",
	}
	node.Edges[3].IDs, err = k.QueryKqiTemporalFrequencyFk().
		Select(kqitemporalfrequency.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "KqiTarget",
		Name: "kqiTargetFk",
	}
	node.Edges[4].IDs, err = k.QueryKqiTargetFk().
		Select(kqitarget.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (kc *KqiCategory) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     kc.ID,
		Type:   "KqiCategory",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(kc.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(kc.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(kc.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Kqi",
		Name: "kqiCategoryFk",
	}
	node.Edges[0].IDs, err = kc.QueryKqiCategoryFk().
		Select(kqi.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (kc *KqiComparator) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     kc.ID,
		Type:   "KqiComparator",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(kc.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(kc.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(kc.Number); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "float64",
		Name:  "number",
		Value: string(buf),
	}
	if buf, err = json.Marshal(kc.ComparatorType); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "comparatorType",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Comparator",
		Name: "comparatorkqitargetfk",
	}
	node.Edges[0].IDs, err = kc.QueryComparatorkqitargetfk().
		Select(comparator.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "KqiTarget",
		Name: "kqitargetcomparatorfk",
	}
	node.Edges[1].IDs, err = kc.QueryKqitargetcomparatorfk().
		Select(kqitarget.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (kp *KqiPerspective) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     kp.ID,
		Type:   "KqiPerspective",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(kp.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(kp.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(kp.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Kqi",
		Name: "kqiPerspectiveFk",
	}
	node.Edges[0].IDs, err = kp.QueryKqiPerspectiveFk().
		Select(kqi.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (ks *KqiSource) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     ks.ID,
		Type:   "KqiSource",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(ks.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ks.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ks.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Kqi",
		Name: "kqiSourceFk",
	}
	node.Edges[0].IDs, err = ks.QueryKqiSourceFk().
		Select(kqi.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (kt *KqiTarget) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     kt.ID,
		Type:   "KqiTarget",
		Fields: make([]*Field, 9),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(kt.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(kt.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(kt.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(kt.Period); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "float64",
		Name:  "period",
		Value: string(buf),
	}
	if buf, err = json.Marshal(kt.AllowedVariation); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "float64",
		Name:  "allowedVariation",
		Value: string(buf),
	}
	if buf, err = json.Marshal(kt.InitTime); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "time.Time",
		Name:  "initTime",
		Value: string(buf),
	}
	if buf, err = json.Marshal(kt.EndTime); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "time.Time",
		Name:  "endTime",
		Value: string(buf),
	}
	if buf, err = json.Marshal(kt.Impact); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "impact",
		Value: string(buf),
	}
	if buf, err = json.Marshal(kt.Status); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "bool",
		Name:  "status",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Kqi",
		Name: "kqiTargetFk",
	}
	node.Edges[0].IDs, err = kt.QueryKqiTargetFk().
		Select(kqi.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "KqiComparator",
		Name: "kqitargetcomparatorfk",
	}
	node.Edges[1].IDs, err = kt.QueryKqitargetcomparatorfk().
		Select(kqicomparator.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (ktf *KqiTemporalFrequency) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     ktf.ID,
		Type:   "KqiTemporalFrequency",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(ktf.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ktf.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ktf.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Kqi",
		Name: "kqiTemporalFrequencyFk",
	}
	node.Edges[0].IDs, err = ktf.QueryKqiTemporalFrequencyFk().
		Select(kqi.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (l *Link) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     l.ID,
		Type:   "Link",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 4),
	}
	var buf []byte
	if buf, err = json.Marshal(l.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(l.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(l.FutureState); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "enum.FutureState",
		Name:  "future_state",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "EquipmentPort",
		Name: "ports",
	}
	node.Edges[0].IDs, err = l.QueryPorts().
		Select(equipmentport.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "WorkOrder",
		Name: "work_order",
	}
	node.Edges[1].IDs, err = l.QueryWorkOrder().
		Select(workorder.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Property",
		Name: "properties",
	}
	node.Edges[2].IDs, err = l.QueryProperties().
		Select(property.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Service",
		Name: "service",
	}
	node.Edges[3].IDs, err = l.QueryService().
		Select(service.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (l *Location) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     l.ID,
		Type:   "Location",
		Fields: make([]*Field, 7),
		Edges:  make([]*Edge, 12),
	}
	var buf []byte
	if buf, err = json.Marshal(l.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(l.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(l.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(l.ExternalID); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "external_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(l.Latitude); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "float64",
		Name:  "latitude",
		Value: string(buf),
	}
	if buf, err = json.Marshal(l.Longitude); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "float64",
		Name:  "longitude",
		Value: string(buf),
	}
	if buf, err = json.Marshal(l.SiteSurveyNeeded); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "bool",
		Name:  "site_survey_needed",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "LocationType",
		Name: "type",
	}
	node.Edges[0].IDs, err = l.QueryType().
		Select(locationtype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Location",
		Name: "parent",
	}
	node.Edges[1].IDs, err = l.QueryParent().
		Select(location.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Location",
		Name: "children",
	}
	node.Edges[2].IDs, err = l.QueryChildren().
		Select(location.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "File",
		Name: "files",
	}
	node.Edges[3].IDs, err = l.QueryFiles().
		Select(file.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "Hyperlink",
		Name: "hyperlinks",
	}
	node.Edges[4].IDs, err = l.QueryHyperlinks().
		Select(hyperlink.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "Equipment",
		Name: "equipment",
	}
	node.Edges[5].IDs, err = l.QueryEquipment().
		Select(equipment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[6] = &Edge{
		Type: "Property",
		Name: "properties",
	}
	node.Edges[6].IDs, err = l.QueryProperties().
		Select(property.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[7] = &Edge{
		Type: "Survey",
		Name: "survey",
	}
	node.Edges[7].IDs, err = l.QuerySurvey().
		Select(survey.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[8] = &Edge{
		Type: "SurveyWiFiScan",
		Name: "wifi_scan",
	}
	node.Edges[8].IDs, err = l.QueryWifiScan().
		Select(surveywifiscan.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[9] = &Edge{
		Type: "SurveyCellScan",
		Name: "cell_scan",
	}
	node.Edges[9].IDs, err = l.QueryCellScan().
		Select(surveycellscan.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[10] = &Edge{
		Type: "WorkOrder",
		Name: "work_orders",
	}
	node.Edges[10].IDs, err = l.QueryWorkOrders().
		Select(workorder.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[11] = &Edge{
		Type: "FloorPlan",
		Name: "floor_plans",
	}
	node.Edges[11].IDs, err = l.QueryFloorPlans().
		Select(floorplan.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (lt *LocationType) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     lt.ID,
		Type:   "LocationType",
		Fields: make([]*Field, 7),
		Edges:  make([]*Edge, 4),
	}
	var buf []byte
	if buf, err = json.Marshal(lt.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(lt.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(lt.Site); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "bool",
		Name:  "site",
		Value: string(buf),
	}
	if buf, err = json.Marshal(lt.Name); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(lt.MapType); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "map_type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(lt.MapZoomLevel); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "int",
		Name:  "map_zoom_level",
		Value: string(buf),
	}
	if buf, err = json.Marshal(lt.Index); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "int",
		Name:  "index",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Location",
		Name: "locations",
	}
	node.Edges[0].IDs, err = lt.QueryLocations().
		Select(location.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "PropertyType",
		Name: "property_types",
	}
	node.Edges[1].IDs, err = lt.QueryPropertyTypes().
		Select(propertytype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "SurveyTemplateCategory",
		Name: "survey_template_categories",
	}
	node.Edges[2].IDs, err = lt.QuerySurveyTemplateCategories().
		Select(surveytemplatecategory.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "DocumentCategory",
		Name: "document_category",
	}
	node.Edges[3].IDs, err = lt.QueryDocumentCategory().
		Select(documentcategory.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (nt *NetworkType) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     nt.ID,
		Type:   "NetworkType",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(nt.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(nt.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(nt.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Formula",
		Name: "formulaNetworkType_FK",
	}
	node.Edges[0].IDs, err = nt.QueryFormulaNetworkTypeFK().
		Select(formula.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (o *Organization) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     o.ID,
		Type:   "Organization",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(o.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(o.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(o.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(o.Description); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "User",
		Name: "user_fk",
	}
	node.Edges[0].IDs, err = o.QueryUserFk().
		Select(user.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "WorkOrder",
		Name: "work_order_fk",
	}
	node.Edges[1].IDs, err = o.QueryWorkOrderFk().
		Select(workorder.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "PermissionsPolicy",
		Name: "policies",
	}
	node.Edges[2].IDs, err = o.QueryPolicies().
		Select(permissionspolicy.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (pc *ParameterCatalog) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     pc.ID,
		Type:   "ParameterCatalog",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(pc.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pc.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pc.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pc.Index); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "int",
		Name:  "index",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pc.Disabled); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "bool",
		Name:  "disabled",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "PropertyCategory",
		Name: "property_categories",
	}
	node.Edges[0].IDs, err = pc.QueryPropertyCategories().
		Select(propertycategory.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (pp *PermissionsPolicy) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     pp.ID,
		Type:   "PermissionsPolicy",
		Fields: make([]*Field, 9),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(pp.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pp.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pp.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pp.Description); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pp.IsGlobal); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "bool",
		Name:  "is_global",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pp.InventoryPolicy); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "*models.InventoryPolicyInput",
		Name:  "inventory_policy",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pp.WorkforcePolicy); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "*models.WorkforcePolicyInput",
		Name:  "workforce_policy",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pp.AutomationPolicy); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "*models.AutomationPolicyInput",
		Name:  "automation_policy",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pp.AssurancePolicy); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "*models.AssurancePolicyInput",
		Name:  "assurance_policy",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "UsersGroup",
		Name: "groups",
	}
	node.Edges[0].IDs, err = pp.QueryGroups().
		Select(usersgroup.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Organization",
		Name: "organization",
	}
	node.Edges[1].IDs, err = pp.QueryOrganization().
		Select(organization.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (pr *Project) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     pr.ID,
		Type:   "Project",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 7),
	}
	var buf []byte
	if buf, err = json.Marshal(pr.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.Description); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.Priority); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "project.Priority",
		Name:  "priority",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "ProjectType",
		Name: "type",
	}
	node.Edges[0].IDs, err = pr.QueryType().
		Select(projecttype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "ProjectTemplate",
		Name: "template",
	}
	node.Edges[1].IDs, err = pr.QueryTemplate().
		Select(projecttemplate.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Location",
		Name: "location",
	}
	node.Edges[2].IDs, err = pr.QueryLocation().
		Select(location.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Comment",
		Name: "comments",
	}
	node.Edges[3].IDs, err = pr.QueryComments().
		Select(comment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "WorkOrder",
		Name: "work_orders",
	}
	node.Edges[4].IDs, err = pr.QueryWorkOrders().
		Select(workorder.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "Property",
		Name: "properties",
	}
	node.Edges[5].IDs, err = pr.QueryProperties().
		Select(property.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[6] = &Edge{
		Type: "User",
		Name: "creator",
	}
	node.Edges[6].IDs, err = pr.QueryCreator().
		Select(user.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (pt *ProjectTemplate) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     pt.ID,
		Type:   "ProjectTemplate",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(pt.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pt.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pt.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pt.Description); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "PropertyType",
		Name: "properties",
	}
	node.Edges[0].IDs, err = pt.QueryProperties().
		Select(propertytype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "WorkOrderDefinition",
		Name: "work_orders",
	}
	node.Edges[1].IDs, err = pt.QueryWorkOrders().
		Select(workorderdefinition.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "ProjectType",
		Name: "type",
	}
	node.Edges[2].IDs, err = pt.QueryType().
		Select(projecttype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (pt *ProjectType) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     pt.ID,
		Type:   "ProjectType",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(pt.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pt.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pt.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pt.Description); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "PropertyType",
		Name: "properties",
	}
	node.Edges[0].IDs, err = pt.QueryProperties().
		Select(propertytype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "WorkOrderDefinition",
		Name: "work_orders",
	}
	node.Edges[1].IDs, err = pt.QueryWorkOrders().
		Select(workorderdefinition.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Project",
		Name: "projects",
	}
	node.Edges[2].IDs, err = pt.QueryProjects().
		Select(project.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (pr *Property) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     pr.ID,
		Type:   "Property",
		Fields: make([]*Field, 10),
		Edges:  make([]*Edge, 14),
	}
	var buf []byte
	if buf, err = json.Marshal(pr.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.IntVal); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "int",
		Name:  "int_val",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.BoolVal); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "bool",
		Name:  "bool_val",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.FloatVal); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "float64",
		Name:  "float_val",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.LatitudeVal); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "float64",
		Name:  "latitude_val",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.LongitudeVal); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "float64",
		Name:  "longitude_val",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.RangeFromVal); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "float64",
		Name:  "range_from_val",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.RangeToVal); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "float64",
		Name:  "range_to_val",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pr.StringVal); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "string",
		Name:  "string_val",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "PropertyType",
		Name: "type",
	}
	node.Edges[0].IDs, err = pr.QueryType().
		Select(propertytype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Location",
		Name: "location",
	}
	node.Edges[1].IDs, err = pr.QueryLocation().
		Select(location.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Equipment",
		Name: "equipment",
	}
	node.Edges[2].IDs, err = pr.QueryEquipment().
		Select(equipment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Service",
		Name: "service",
	}
	node.Edges[3].IDs, err = pr.QueryService().
		Select(service.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "EquipmentPort",
		Name: "equipment_port",
	}
	node.Edges[4].IDs, err = pr.QueryEquipmentPort().
		Select(equipmentport.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "Link",
		Name: "link",
	}
	node.Edges[5].IDs, err = pr.QueryLink().
		Select(link.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[6] = &Edge{
		Type: "WorkOrder",
		Name: "work_order",
	}
	node.Edges[6].IDs, err = pr.QueryWorkOrder().
		Select(workorder.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[7] = &Edge{
		Type: "Project",
		Name: "project",
	}
	node.Edges[7].IDs, err = pr.QueryProject().
		Select(project.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[8] = &Edge{
		Type: "Equipment",
		Name: "equipment_value",
	}
	node.Edges[8].IDs, err = pr.QueryEquipmentValue().
		Select(equipment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[9] = &Edge{
		Type: "Location",
		Name: "location_value",
	}
	node.Edges[9].IDs, err = pr.QueryLocationValue().
		Select(location.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[10] = &Edge{
		Type: "Service",
		Name: "service_value",
	}
	node.Edges[10].IDs, err = pr.QueryServiceValue().
		Select(service.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[11] = &Edge{
		Type: "WorkOrder",
		Name: "work_order_value",
	}
	node.Edges[11].IDs, err = pr.QueryWorkOrderValue().
		Select(workorder.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[12] = &Edge{
		Type: "User",
		Name: "user_value",
	}
	node.Edges[12].IDs, err = pr.QueryUserValue().
		Select(user.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[13] = &Edge{
		Type: "Project",
		Name: "project_value",
	}
	node.Edges[13].IDs, err = pr.QueryProjectValue().
		Select(project.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (pc *PropertyCategory) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     pc.ID,
		Type:   "PropertyCategory",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(pc.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pc.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pc.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pc.Index); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "int",
		Name:  "index",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "PropertyType",
		Name: "properties_type",
	}
	node.Edges[0].IDs, err = pc.QueryPropertiesType().
		Select(propertytype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "ParameterCatalog",
		Name: "parameter_catalog",
	}
	node.Edges[1].IDs, err = pc.QueryParameterCatalog().
		Select(parametercatalog.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (pt *PropertyType) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     pt.ID,
		Type:   "PropertyType",
		Fields: make([]*Field, 21),
		Edges:  make([]*Edge, 12),
	}
	var buf []byte
	if buf, err = json.Marshal(pt.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pt.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pt.Type); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "propertytype.Type",
		Name:  "type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pt.Name); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pt.ExternalID); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "external_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pt.Index); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "int",
		Name:  "index",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pt.Category); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "category",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pt.IntVal); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "int",
		Name:  "int_val",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pt.BoolVal); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "bool",
		Name:  "bool_val",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pt.FloatVal); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "float64",
		Name:  "float_val",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pt.LatitudeVal); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "float64",
		Name:  "latitude_val",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pt.LongitudeVal); err != nil {
		return nil, err
	}
	node.Fields[11] = &Field{
		Type:  "float64",
		Name:  "longitude_val",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pt.StringVal); err != nil {
		return nil, err
	}
	node.Fields[12] = &Field{
		Type:  "string",
		Name:  "string_val",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pt.RangeFromVal); err != nil {
		return nil, err
	}
	node.Fields[13] = &Field{
		Type:  "float64",
		Name:  "range_from_val",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pt.RangeToVal); err != nil {
		return nil, err
	}
	node.Fields[14] = &Field{
		Type:  "float64",
		Name:  "range_to_val",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pt.IsInstanceProperty); err != nil {
		return nil, err
	}
	node.Fields[15] = &Field{
		Type:  "bool",
		Name:  "is_instance_property",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pt.Editable); err != nil {
		return nil, err
	}
	node.Fields[16] = &Field{
		Type:  "bool",
		Name:  "editable",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pt.Mandatory); err != nil {
		return nil, err
	}
	node.Fields[17] = &Field{
		Type:  "bool",
		Name:  "mandatory",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pt.Deleted); err != nil {
		return nil, err
	}
	node.Fields[18] = &Field{
		Type:  "bool",
		Name:  "deleted",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pt.Listable); err != nil {
		return nil, err
	}
	node.Fields[19] = &Field{
		Type:  "bool",
		Name:  "listable",
		Value: string(buf),
	}
	if buf, err = json.Marshal(pt.NodeType); err != nil {
		return nil, err
	}
	node.Fields[20] = &Field{
		Type:  "string",
		Name:  "nodeType",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Property",
		Name: "properties",
	}
	node.Edges[0].IDs, err = pt.QueryProperties().
		Select(property.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "LocationType",
		Name: "location_type",
	}
	node.Edges[1].IDs, err = pt.QueryLocationType().
		Select(locationtype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "EquipmentPortType",
		Name: "equipment_port_type",
	}
	node.Edges[2].IDs, err = pt.QueryEquipmentPortType().
		Select(equipmentporttype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "EquipmentPortType",
		Name: "link_equipment_port_type",
	}
	node.Edges[3].IDs, err = pt.QueryLinkEquipmentPortType().
		Select(equipmentporttype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "EquipmentType",
		Name: "equipment_type",
	}
	node.Edges[4].IDs, err = pt.QueryEquipmentType().
		Select(equipmenttype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "ServiceType",
		Name: "service_type",
	}
	node.Edges[5].IDs, err = pt.QueryServiceType().
		Select(servicetype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[6] = &Edge{
		Type: "WorkOrderType",
		Name: "work_order_type",
	}
	node.Edges[6].IDs, err = pt.QueryWorkOrderType().
		Select(workordertype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[7] = &Edge{
		Type: "WorkOrderTemplate",
		Name: "work_order_template",
	}
	node.Edges[7].IDs, err = pt.QueryWorkOrderTemplate().
		Select(workordertemplate.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[8] = &Edge{
		Type: "ProjectType",
		Name: "project_type",
	}
	node.Edges[8].IDs, err = pt.QueryProjectType().
		Select(projecttype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[9] = &Edge{
		Type: "ProjectTemplate",
		Name: "project_template",
	}
	node.Edges[9].IDs, err = pt.QueryProjectTemplate().
		Select(projecttemplate.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[10] = &Edge{
		Type: "WorkerType",
		Name: "worker_type",
	}
	node.Edges[10].IDs, err = pt.QueryWorkerType().
		Select(workertype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[11] = &Edge{
		Type: "PropertyCategory",
		Name: "property_category",
	}
	node.Edges[11].IDs, err = pt.QueryPropertyCategory().
		Select(propertycategory.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (r *Recommendations) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     r.ID,
		Type:   "Recommendations",
		Fields: make([]*Field, 12),
		Edges:  make([]*Edge, 5),
	}
	var buf []byte
	if buf, err = json.Marshal(r.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.ExternalId); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "externalId",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.Resource); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "resource",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.AlarmType); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "alarmType",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.ShortDescription); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "shortDescription",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.LongDescription); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "longDescription",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.Command); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "command",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.Priority); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "int",
		Name:  "priority",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.Status); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "bool",
		Name:  "status",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.Used); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "int",
		Name:  "used",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.Runbook); err != nil {
		return nil, err
	}
	node.Fields[11] = &Field{
		Type:  "string",
		Name:  "runbook",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "RecommendationsSources",
		Name: "recomendation_sources",
	}
	node.Edges[0].IDs, err = r.QueryRecomendationSources().
		Select(recommendationssources.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "RecommendationsCategory",
		Name: "recomendation_category",
	}
	node.Edges[1].IDs, err = r.QueryRecomendationCategory().
		Select(recommendationscategory.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "User",
		Name: "UserCreate",
	}
	node.Edges[2].IDs, err = r.QueryUserCreate().
		Select(user.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "User",
		Name: "UserApprobed",
	}
	node.Edges[3].IDs, err = r.QueryUserApprobed().
		Select(user.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "Vendor",
		Name: "vendors_recomendations",
	}
	node.Edges[4].IDs, err = r.QueryVendorsRecomendations().
		Select(vendor.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (rc *RecommendationsCategory) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     rc.ID,
		Type:   "RecommendationsCategory",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(rc.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(rc.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(rc.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Recommendations",
		Name: "recommendations",
	}
	node.Edges[0].IDs, err = rc.QueryRecommendations().
		Select(recommendations.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (rs *RecommendationsSources) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     rs.ID,
		Type:   "RecommendationsSources",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(rs.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(rs.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(rs.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Recommendations",
		Name: "recommendations",
	}
	node.Edges[0].IDs, err = rs.QueryRecommendations().
		Select(recommendations.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (rf *ReportFilter) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     rf.ID,
		Type:   "ReportFilter",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 0),
	}
	var buf []byte
	if buf, err = json.Marshal(rf.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(rf.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(rf.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(rf.Entity); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "reportfilter.Entity",
		Name:  "entity",
		Value: string(buf),
	}
	if buf, err = json.Marshal(rf.Filters); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "filters",
		Value: string(buf),
	}
	return node, nil
}

func (r *Rule) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     r.ID,
		Type:   "Rule",
		Fields: make([]*Field, 10),
		Edges:  make([]*Edge, 4),
	}
	var buf []byte
	if buf, err = json.Marshal(r.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.GracePeriod); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "int",
		Name:  "gracePeriod",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.StartDateTime); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "time.Time",
		Name:  "startDateTime",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.EndDateTime); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "time.Time",
		Name:  "endDateTime",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.Status); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "bool",
		Name:  "status",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.EventTypeName); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "eventTypeName",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.SpecificProblem); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "specificProblem",
		Value: string(buf),
	}
	if buf, err = json.Marshal(r.AdditionalInfo); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "string",
		Name:  "additionalInfo",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "RuleType",
		Name: "ruletype",
	}
	node.Edges[0].IDs, err = r.QueryRuletype().
		Select(ruletype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "EventSeverity",
		Name: "eventseverity",
	}
	node.Edges[1].IDs, err = r.QueryEventseverity().
		Select(eventseverity.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Threshold",
		Name: "threshold",
	}
	node.Edges[2].IDs, err = r.QueryThreshold().
		Select(threshold.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "RuleLimit",
		Name: "rulelimitrule",
	}
	node.Edges[3].IDs, err = r.QueryRulelimitrule().
		Select(rulelimit.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (rl *RuleLimit) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     rl.ID,
		Type:   "RuleLimit",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(rl.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(rl.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(rl.Number); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "int",
		Name:  "number",
		Value: string(buf),
	}
	if buf, err = json.Marshal(rl.LimitType); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "limitType",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Comparator",
		Name: "comparator",
	}
	node.Edges[0].IDs, err = rl.QueryComparator().
		Select(comparator.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Rule",
		Name: "rule",
	}
	node.Edges[1].IDs, err = rl.QueryRule().
		Select(rule.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (rt *RuleType) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     rt.ID,
		Type:   "RuleType",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(rt.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(rt.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(rt.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Rule",
		Name: "ruletyperule",
	}
	node.Edges[0].IDs, err = rt.QueryRuletyperule().
		Select(rule.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (s *Service) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     s.ID,
		Type:   "Service",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 8),
	}
	var buf []byte
	if buf, err = json.Marshal(s.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.ExternalID); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "external_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Status); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "service.Status",
		Name:  "status",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "ServiceType",
		Name: "type",
	}
	node.Edges[0].IDs, err = s.QueryType().
		Select(servicetype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Service",
		Name: "downstream",
	}
	node.Edges[1].IDs, err = s.QueryDownstream().
		Select(service.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Service",
		Name: "upstream",
	}
	node.Edges[2].IDs, err = s.QueryUpstream().
		Select(service.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Property",
		Name: "properties",
	}
	node.Edges[3].IDs, err = s.QueryProperties().
		Select(property.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "Link",
		Name: "links",
	}
	node.Edges[4].IDs, err = s.QueryLinks().
		Select(link.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "EquipmentPort",
		Name: "ports",
	}
	node.Edges[5].IDs, err = s.QueryPorts().
		Select(equipmentport.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[6] = &Edge{
		Type: "Customer",
		Name: "customer",
	}
	node.Edges[6].IDs, err = s.QueryCustomer().
		Select(customer.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[7] = &Edge{
		Type: "ServiceEndpoint",
		Name: "endpoints",
	}
	node.Edges[7].IDs, err = s.QueryEndpoints().
		Select(serviceendpoint.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (se *ServiceEndpoint) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     se.ID,
		Type:   "ServiceEndpoint",
		Fields: make([]*Field, 2),
		Edges:  make([]*Edge, 4),
	}
	var buf []byte
	if buf, err = json.Marshal(se.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(se.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "EquipmentPort",
		Name: "port",
	}
	node.Edges[0].IDs, err = se.QueryPort().
		Select(equipmentport.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Equipment",
		Name: "equipment",
	}
	node.Edges[1].IDs, err = se.QueryEquipment().
		Select(equipment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Service",
		Name: "service",
	}
	node.Edges[2].IDs, err = se.QueryService().
		Select(service.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "ServiceEndpointDefinition",
		Name: "definition",
	}
	node.Edges[3].IDs, err = se.QueryDefinition().
		Select(serviceendpointdefinition.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (sed *ServiceEndpointDefinition) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     sed.ID,
		Type:   "ServiceEndpointDefinition",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(sed.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(sed.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(sed.Role); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "role",
		Value: string(buf),
	}
	if buf, err = json.Marshal(sed.Name); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(sed.Index); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "index",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "ServiceEndpoint",
		Name: "endpoints",
	}
	node.Edges[0].IDs, err = sed.QueryEndpoints().
		Select(serviceendpoint.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "ServiceType",
		Name: "service_type",
	}
	node.Edges[1].IDs, err = sed.QueryServiceType().
		Select(servicetype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "EquipmentType",
		Name: "equipment_type",
	}
	node.Edges[2].IDs, err = sed.QueryEquipmentType().
		Select(equipmenttype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (st *ServiceType) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     st.ID,
		Type:   "ServiceType",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(st.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(st.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(st.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(st.HasCustomer); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "bool",
		Name:  "has_customer",
		Value: string(buf),
	}
	if buf, err = json.Marshal(st.IsDeleted); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "bool",
		Name:  "is_deleted",
		Value: string(buf),
	}
	if buf, err = json.Marshal(st.DiscoveryMethod); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "servicetype.DiscoveryMethod",
		Name:  "discovery_method",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Service",
		Name: "services",
	}
	node.Edges[0].IDs, err = st.QueryServices().
		Select(service.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "PropertyType",
		Name: "property_types",
	}
	node.Edges[1].IDs, err = st.QueryPropertyTypes().
		Select(propertytype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "ServiceEndpointDefinition",
		Name: "endpoint_definitions",
	}
	node.Edges[2].IDs, err = st.QueryEndpointDefinitions().
		Select(serviceendpointdefinition.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (s *Survey) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     s.ID,
		Type:   "Survey",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(s.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.OwnerName); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "owner_name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.CreationTimestamp); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "time.Time",
		Name:  "creation_timestamp",
		Value: string(buf),
	}
	if buf, err = json.Marshal(s.CompletionTimestamp); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "time.Time",
		Name:  "completion_timestamp",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Location",
		Name: "location",
	}
	node.Edges[0].IDs, err = s.QueryLocation().
		Select(location.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "File",
		Name: "source_file",
	}
	node.Edges[1].IDs, err = s.QuerySourceFile().
		Select(file.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "SurveyQuestion",
		Name: "questions",
	}
	node.Edges[2].IDs, err = s.QueryQuestions().
		Select(surveyquestion.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (scs *SurveyCellScan) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     scs.ID,
		Type:   "SurveyCellScan",
		Fields: make([]*Field, 25),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(scs.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(scs.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(scs.NetworkType); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "surveycellscan.NetworkType",
		Name:  "network_type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(scs.SignalStrength); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "int",
		Name:  "signal_strength",
		Value: string(buf),
	}
	if buf, err = json.Marshal(scs.Timestamp); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "time.Time",
		Name:  "timestamp",
		Value: string(buf),
	}
	if buf, err = json.Marshal(scs.BaseStationID); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "base_station_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(scs.NetworkID); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "network_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(scs.SystemID); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "system_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(scs.CellID); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "string",
		Name:  "cell_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(scs.LocationAreaCode); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "string",
		Name:  "location_area_code",
		Value: string(buf),
	}
	if buf, err = json.Marshal(scs.MobileCountryCode); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "string",
		Name:  "mobile_country_code",
		Value: string(buf),
	}
	if buf, err = json.Marshal(scs.MobileNetworkCode); err != nil {
		return nil, err
	}
	node.Fields[11] = &Field{
		Type:  "string",
		Name:  "mobile_network_code",
		Value: string(buf),
	}
	if buf, err = json.Marshal(scs.PrimaryScramblingCode); err != nil {
		return nil, err
	}
	node.Fields[12] = &Field{
		Type:  "string",
		Name:  "primary_scrambling_code",
		Value: string(buf),
	}
	if buf, err = json.Marshal(scs.Operator); err != nil {
		return nil, err
	}
	node.Fields[13] = &Field{
		Type:  "string",
		Name:  "operator",
		Value: string(buf),
	}
	if buf, err = json.Marshal(scs.Arfcn); err != nil {
		return nil, err
	}
	node.Fields[14] = &Field{
		Type:  "int",
		Name:  "arfcn",
		Value: string(buf),
	}
	if buf, err = json.Marshal(scs.PhysicalCellID); err != nil {
		return nil, err
	}
	node.Fields[15] = &Field{
		Type:  "string",
		Name:  "physical_cell_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(scs.TrackingAreaCode); err != nil {
		return nil, err
	}
	node.Fields[16] = &Field{
		Type:  "string",
		Name:  "tracking_area_code",
		Value: string(buf),
	}
	if buf, err = json.Marshal(scs.TimingAdvance); err != nil {
		return nil, err
	}
	node.Fields[17] = &Field{
		Type:  "int",
		Name:  "timing_advance",
		Value: string(buf),
	}
	if buf, err = json.Marshal(scs.Earfcn); err != nil {
		return nil, err
	}
	node.Fields[18] = &Field{
		Type:  "int",
		Name:  "earfcn",
		Value: string(buf),
	}
	if buf, err = json.Marshal(scs.Uarfcn); err != nil {
		return nil, err
	}
	node.Fields[19] = &Field{
		Type:  "int",
		Name:  "uarfcn",
		Value: string(buf),
	}
	if buf, err = json.Marshal(scs.Latitude); err != nil {
		return nil, err
	}
	node.Fields[20] = &Field{
		Type:  "float64",
		Name:  "latitude",
		Value: string(buf),
	}
	if buf, err = json.Marshal(scs.Longitude); err != nil {
		return nil, err
	}
	node.Fields[21] = &Field{
		Type:  "float64",
		Name:  "longitude",
		Value: string(buf),
	}
	if buf, err = json.Marshal(scs.Altitude); err != nil {
		return nil, err
	}
	node.Fields[22] = &Field{
		Type:  "float64",
		Name:  "altitude",
		Value: string(buf),
	}
	if buf, err = json.Marshal(scs.Heading); err != nil {
		return nil, err
	}
	node.Fields[23] = &Field{
		Type:  "float64",
		Name:  "heading",
		Value: string(buf),
	}
	if buf, err = json.Marshal(scs.Rssi); err != nil {
		return nil, err
	}
	node.Fields[24] = &Field{
		Type:  "float64",
		Name:  "rssi",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "CheckListItem",
		Name: "checklist_item",
	}
	node.Edges[0].IDs, err = scs.QueryChecklistItem().
		Select(checklistitem.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "SurveyQuestion",
		Name: "survey_question",
	}
	node.Edges[1].IDs, err = scs.QuerySurveyQuestion().
		Select(surveyquestion.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Location",
		Name: "location",
	}
	node.Edges[2].IDs, err = scs.QueryLocation().
		Select(location.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (sq *SurveyQuestion) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     sq.ID,
		Type:   "SurveyQuestion",
		Fields: make([]*Field, 20),
		Edges:  make([]*Edge, 5),
	}
	var buf []byte
	if buf, err = json.Marshal(sq.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(sq.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(sq.FormName); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "form_name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(sq.FormDescription); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "form_description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(sq.FormIndex); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "int",
		Name:  "form_index",
		Value: string(buf),
	}
	if buf, err = json.Marshal(sq.QuestionType); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "question_type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(sq.QuestionFormat); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "question_format",
		Value: string(buf),
	}
	if buf, err = json.Marshal(sq.QuestionText); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "question_text",
		Value: string(buf),
	}
	if buf, err = json.Marshal(sq.QuestionIndex); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "int",
		Name:  "question_index",
		Value: string(buf),
	}
	if buf, err = json.Marshal(sq.BoolData); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "bool",
		Name:  "bool_data",
		Value: string(buf),
	}
	if buf, err = json.Marshal(sq.EmailData); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "string",
		Name:  "email_data",
		Value: string(buf),
	}
	if buf, err = json.Marshal(sq.Latitude); err != nil {
		return nil, err
	}
	node.Fields[11] = &Field{
		Type:  "float64",
		Name:  "latitude",
		Value: string(buf),
	}
	if buf, err = json.Marshal(sq.Longitude); err != nil {
		return nil, err
	}
	node.Fields[12] = &Field{
		Type:  "float64",
		Name:  "longitude",
		Value: string(buf),
	}
	if buf, err = json.Marshal(sq.LocationAccuracy); err != nil {
		return nil, err
	}
	node.Fields[13] = &Field{
		Type:  "float64",
		Name:  "location_accuracy",
		Value: string(buf),
	}
	if buf, err = json.Marshal(sq.Altitude); err != nil {
		return nil, err
	}
	node.Fields[14] = &Field{
		Type:  "float64",
		Name:  "altitude",
		Value: string(buf),
	}
	if buf, err = json.Marshal(sq.PhoneData); err != nil {
		return nil, err
	}
	node.Fields[15] = &Field{
		Type:  "string",
		Name:  "phone_data",
		Value: string(buf),
	}
	if buf, err = json.Marshal(sq.TextData); err != nil {
		return nil, err
	}
	node.Fields[16] = &Field{
		Type:  "string",
		Name:  "text_data",
		Value: string(buf),
	}
	if buf, err = json.Marshal(sq.FloatData); err != nil {
		return nil, err
	}
	node.Fields[17] = &Field{
		Type:  "float64",
		Name:  "float_data",
		Value: string(buf),
	}
	if buf, err = json.Marshal(sq.IntData); err != nil {
		return nil, err
	}
	node.Fields[18] = &Field{
		Type:  "int",
		Name:  "int_data",
		Value: string(buf),
	}
	if buf, err = json.Marshal(sq.DateData); err != nil {
		return nil, err
	}
	node.Fields[19] = &Field{
		Type:  "time.Time",
		Name:  "date_data",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Survey",
		Name: "survey",
	}
	node.Edges[0].IDs, err = sq.QuerySurvey().
		Select(survey.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "SurveyWiFiScan",
		Name: "wifi_scan",
	}
	node.Edges[1].IDs, err = sq.QueryWifiScan().
		Select(surveywifiscan.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "SurveyCellScan",
		Name: "cell_scan",
	}
	node.Edges[2].IDs, err = sq.QueryCellScan().
		Select(surveycellscan.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "File",
		Name: "photo_data",
	}
	node.Edges[3].IDs, err = sq.QueryPhotoData().
		Select(file.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "File",
		Name: "images",
	}
	node.Edges[4].IDs, err = sq.QueryImages().
		Select(file.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (stc *SurveyTemplateCategory) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     stc.ID,
		Type:   "SurveyTemplateCategory",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(stc.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(stc.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(stc.CategoryTitle); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "category_title",
		Value: string(buf),
	}
	if buf, err = json.Marshal(stc.CategoryDescription); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "category_description",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "SurveyTemplateQuestion",
		Name: "survey_template_questions",
	}
	node.Edges[0].IDs, err = stc.QuerySurveyTemplateQuestions().
		Select(surveytemplatequestion.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "LocationType",
		Name: "location_type",
	}
	node.Edges[1].IDs, err = stc.QueryLocationType().
		Select(locationtype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (stq *SurveyTemplateQuestion) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     stq.ID,
		Type:   "SurveyTemplateQuestion",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(stq.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(stq.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(stq.QuestionTitle); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "question_title",
		Value: string(buf),
	}
	if buf, err = json.Marshal(stq.QuestionDescription); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "question_description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(stq.QuestionType); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "question_type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(stq.Index); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "int",
		Name:  "index",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "SurveyTemplateCategory",
		Name: "category",
	}
	node.Edges[0].IDs, err = stq.QueryCategory().
		Select(surveytemplatecategory.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (swfs *SurveyWiFiScan) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     swfs.ID,
		Type:   "SurveyWiFiScan",
		Fields: make([]*Field, 16),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(swfs.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(swfs.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(swfs.Ssid); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "ssid",
		Value: string(buf),
	}
	if buf, err = json.Marshal(swfs.Bssid); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "bssid",
		Value: string(buf),
	}
	if buf, err = json.Marshal(swfs.Timestamp); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "time.Time",
		Name:  "timestamp",
		Value: string(buf),
	}
	if buf, err = json.Marshal(swfs.Frequency); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "int",
		Name:  "frequency",
		Value: string(buf),
	}
	if buf, err = json.Marshal(swfs.Channel); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "int",
		Name:  "channel",
		Value: string(buf),
	}
	if buf, err = json.Marshal(swfs.Band); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "band",
		Value: string(buf),
	}
	if buf, err = json.Marshal(swfs.ChannelWidth); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "int",
		Name:  "channel_width",
		Value: string(buf),
	}
	if buf, err = json.Marshal(swfs.Capabilities); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "string",
		Name:  "capabilities",
		Value: string(buf),
	}
	if buf, err = json.Marshal(swfs.Strength); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "int",
		Name:  "strength",
		Value: string(buf),
	}
	if buf, err = json.Marshal(swfs.Latitude); err != nil {
		return nil, err
	}
	node.Fields[11] = &Field{
		Type:  "float64",
		Name:  "latitude",
		Value: string(buf),
	}
	if buf, err = json.Marshal(swfs.Longitude); err != nil {
		return nil, err
	}
	node.Fields[12] = &Field{
		Type:  "float64",
		Name:  "longitude",
		Value: string(buf),
	}
	if buf, err = json.Marshal(swfs.Altitude); err != nil {
		return nil, err
	}
	node.Fields[13] = &Field{
		Type:  "float64",
		Name:  "altitude",
		Value: string(buf),
	}
	if buf, err = json.Marshal(swfs.Heading); err != nil {
		return nil, err
	}
	node.Fields[14] = &Field{
		Type:  "float64",
		Name:  "heading",
		Value: string(buf),
	}
	if buf, err = json.Marshal(swfs.Rssi); err != nil {
		return nil, err
	}
	node.Fields[15] = &Field{
		Type:  "float64",
		Name:  "rssi",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "CheckListItem",
		Name: "checklist_item",
	}
	node.Edges[0].IDs, err = swfs.QueryChecklistItem().
		Select(checklistitem.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "SurveyQuestion",
		Name: "survey_question",
	}
	node.Edges[1].IDs, err = swfs.QuerySurveyQuestion().
		Select(surveyquestion.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Location",
		Name: "location",
	}
	node.Edges[2].IDs, err = swfs.QueryLocation().
		Select(location.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (t *Tech) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     t.ID,
		Type:   "Tech",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(t.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Domain",
		Name: "domain",
	}
	node.Edges[0].IDs, err = t.QueryDomain().
		Select(domain.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Formula",
		Name: "formulatech",
	}
	node.Edges[1].IDs, err = t.QueryFormulatech().
		Select(formula.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (t *Threshold) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     t.ID,
		Type:   "Threshold",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(t.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.Description); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.Status); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "bool",
		Name:  "status",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Kpi",
		Name: "kpi",
	}
	node.Edges[0].IDs, err = t.QueryKpi().
		Select(kpi.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Rule",
		Name: "rulethreshold",
	}
	node.Edges[1].IDs, err = t.QueryRulethreshold().
		Select(rule.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (u *User) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     u.ID,
		Type:   "User",
		Fields: make([]*Field, 9),
		Edges:  make([]*Edge, 10),
	}
	var buf []byte
	if buf, err = json.Marshal(u.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.AuthID); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "auth_id",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.FirstName); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "first_name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.LastName); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "last_name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.Email); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "email",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.Status); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "user.Status",
		Name:  "status",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.Role); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "user.Role",
		Name:  "role",
		Value: string(buf),
	}
	if buf, err = json.Marshal(u.DistanceUnit); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "user.DistanceUnit",
		Name:  "distance_unit",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "File",
		Name: "profile_photo",
	}
	node.Edges[0].IDs, err = u.QueryProfilePhoto().
		Select(file.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Recommendations",
		Name: "User_create",
	}
	node.Edges[1].IDs, err = u.QueryUserCreate().
		Select(recommendations.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Recommendations",
		Name: "User_approved",
	}
	node.Edges[2].IDs, err = u.QueryUserApproved().
		Select(recommendations.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "UsersGroup",
		Name: "groups",
	}
	node.Edges[3].IDs, err = u.QueryGroups().
		Select(usersgroup.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "Organization",
		Name: "organization",
	}
	node.Edges[4].IDs, err = u.QueryOrganization().
		Select(organization.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "WorkOrder",
		Name: "owned_work_orders",
	}
	node.Edges[5].IDs, err = u.QueryOwnedWorkOrders().
		Select(workorder.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[6] = &Edge{
		Type: "WorkOrder",
		Name: "assigned_work_orders",
	}
	node.Edges[6].IDs, err = u.QueryAssignedWorkOrders().
		Select(workorder.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[7] = &Edge{
		Type: "Project",
		Name: "created_projects",
	}
	node.Edges[7].IDs, err = u.QueryCreatedProjects().
		Select(project.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[8] = &Edge{
		Type: "Feature",
		Name: "features",
	}
	node.Edges[8].IDs, err = u.QueryFeatures().
		Select(feature.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[9] = &Edge{
		Type: "Appointment",
		Name: "appointment",
	}
	node.Edges[9].IDs, err = u.QueryAppointment().
		Select(appointment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (ug *UsersGroup) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     ug.ID,
		Type:   "UsersGroup",
		Fields: make([]*Field, 5),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(ug.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ug.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ug.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ug.Description); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(ug.Status); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "usersgroup.Status",
		Name:  "status",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "User",
		Name: "members",
	}
	node.Edges[0].IDs, err = ug.QueryMembers().
		Select(user.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "PermissionsPolicy",
		Name: "policies",
	}
	node.Edges[1].IDs, err = ug.QueryPolicies().
		Select(permissionspolicy.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Feature",
		Name: "features",
	}
	node.Edges[2].IDs, err = ug.QueryFeatures().
		Select(feature.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (v *Vendor) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     v.ID,
		Type:   "Vendor",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(v.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(v.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(v.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Counter",
		Name: "vendor_fk",
	}
	node.Edges[0].IDs, err = v.QueryVendorFk().
		Select(counter.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Recommendations",
		Name: "vendors_recomendations",
	}
	node.Edges[1].IDs, err = v.QueryVendorsRecomendations().
		Select(recommendations.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (wo *WorkOrder) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     wo.ID,
		Type:   "WorkOrder",
		Fields: make([]*Field, 13),
		Edges:  make([]*Edge, 16),
	}
	var buf []byte
	if buf, err = json.Marshal(wo.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(wo.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(wo.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(wo.Status); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "workorder.Status",
		Name:  "status",
		Value: string(buf),
	}
	if buf, err = json.Marshal(wo.Priority); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "workorder.Priority",
		Name:  "priority",
		Value: string(buf),
	}
	if buf, err = json.Marshal(wo.Description); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(wo.InstallDate); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "time.Time",
		Name:  "install_date",
		Value: string(buf),
	}
	if buf, err = json.Marshal(wo.CreationDate); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "time.Time",
		Name:  "creation_date",
		Value: string(buf),
	}
	if buf, err = json.Marshal(wo.Index); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "int",
		Name:  "index",
		Value: string(buf),
	}
	if buf, err = json.Marshal(wo.CloseDate); err != nil {
		return nil, err
	}
	node.Fields[9] = &Field{
		Type:  "time.Time",
		Name:  "close_date",
		Value: string(buf),
	}
	if buf, err = json.Marshal(wo.Duration); err != nil {
		return nil, err
	}
	node.Fields[10] = &Field{
		Type:  "float64",
		Name:  "duration",
		Value: string(buf),
	}
	if buf, err = json.Marshal(wo.SchedulledAt); err != nil {
		return nil, err
	}
	node.Fields[11] = &Field{
		Type:  "time.Time",
		Name:  "schedulled_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(wo.DueDate); err != nil {
		return nil, err
	}
	node.Fields[12] = &Field{
		Type:  "time.Time",
		Name:  "due_date",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "WorkOrderType",
		Name: "type",
	}
	node.Edges[0].IDs, err = wo.QueryType().
		Select(workordertype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "WorkOrderTemplate",
		Name: "template",
	}
	node.Edges[1].IDs, err = wo.QueryTemplate().
		Select(workordertemplate.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Equipment",
		Name: "equipment",
	}
	node.Edges[2].IDs, err = wo.QueryEquipment().
		Select(equipment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "Link",
		Name: "links",
	}
	node.Edges[3].IDs, err = wo.QueryLinks().
		Select(link.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[4] = &Edge{
		Type: "Organization",
		Name: "organization",
	}
	node.Edges[4].IDs, err = wo.QueryOrganization().
		Select(organization.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[5] = &Edge{
		Type: "File",
		Name: "files",
	}
	node.Edges[5].IDs, err = wo.QueryFiles().
		Select(file.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[6] = &Edge{
		Type: "Hyperlink",
		Name: "hyperlinks",
	}
	node.Edges[6].IDs, err = wo.QueryHyperlinks().
		Select(hyperlink.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[7] = &Edge{
		Type: "Location",
		Name: "location",
	}
	node.Edges[7].IDs, err = wo.QueryLocation().
		Select(location.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[8] = &Edge{
		Type: "Comment",
		Name: "comments",
	}
	node.Edges[8].IDs, err = wo.QueryComments().
		Select(comment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[9] = &Edge{
		Type: "Activity",
		Name: "activities",
	}
	node.Edges[9].IDs, err = wo.QueryActivities().
		Select(activity.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[10] = &Edge{
		Type: "Property",
		Name: "properties",
	}
	node.Edges[10].IDs, err = wo.QueryProperties().
		Select(property.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[11] = &Edge{
		Type: "CheckListCategory",
		Name: "check_list_categories",
	}
	node.Edges[11].IDs, err = wo.QueryCheckListCategories().
		Select(checklistcategory.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[12] = &Edge{
		Type: "Project",
		Name: "project",
	}
	node.Edges[12].IDs, err = wo.QueryProject().
		Select(project.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[13] = &Edge{
		Type: "User",
		Name: "owner",
	}
	node.Edges[13].IDs, err = wo.QueryOwner().
		Select(user.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[14] = &Edge{
		Type: "User",
		Name: "assignee",
	}
	node.Edges[14].IDs, err = wo.QueryAssignee().
		Select(user.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[15] = &Edge{
		Type: "Appointment",
		Name: "appointment",
	}
	node.Edges[15].IDs, err = wo.QueryAppointment().
		Select(appointment.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (wod *WorkOrderDefinition) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     wod.ID,
		Type:   "WorkOrderDefinition",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(wod.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(wod.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(wod.Index); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "int",
		Name:  "index",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "WorkOrderType",
		Name: "type",
	}
	node.Edges[0].IDs, err = wod.QueryType().
		Select(workordertype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "ProjectType",
		Name: "project_type",
	}
	node.Edges[1].IDs, err = wod.QueryProjectType().
		Select(projecttype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "ProjectTemplate",
		Name: "project_template",
	}
	node.Edges[2].IDs, err = wod.QueryProjectTemplate().
		Select(projecttemplate.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (wot *WorkOrderTemplate) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     wot.ID,
		Type:   "WorkOrderTemplate",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(wot.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(wot.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(wot.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(wot.Description); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(wot.AssigneeCanCompleteWorkOrder); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "bool",
		Name:  "assignee_can_complete_work_order",
		Value: string(buf),
	}
	if buf, err = json.Marshal(wot.Duration); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "float64",
		Name:  "duration",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "PropertyType",
		Name: "property_types",
	}
	node.Edges[0].IDs, err = wot.QueryPropertyTypes().
		Select(propertytype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "CheckListCategoryDefinition",
		Name: "check_list_category_definitions",
	}
	node.Edges[1].IDs, err = wot.QueryCheckListCategoryDefinitions().
		Select(checklistcategorydefinition.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "WorkOrderType",
		Name: "type",
	}
	node.Edges[2].IDs, err = wot.QueryType().
		Select(workordertype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (wot *WorkOrderType) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     wot.ID,
		Type:   "WorkOrderType",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 4),
	}
	var buf []byte
	if buf, err = json.Marshal(wot.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(wot.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(wot.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(wot.Description); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(wot.AssigneeCanCompleteWorkOrder); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "bool",
		Name:  "assignee_can_complete_work_order",
		Value: string(buf),
	}
	if buf, err = json.Marshal(wot.Duration); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "float64",
		Name:  "duration",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "PropertyType",
		Name: "property_types",
	}
	node.Edges[0].IDs, err = wot.QueryPropertyTypes().
		Select(propertytype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "CheckListCategoryDefinition",
		Name: "check_list_category_definitions",
	}
	node.Edges[1].IDs, err = wot.QueryCheckListCategoryDefinitions().
		Select(checklistcategorydefinition.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "WorkOrder",
		Name: "work_orders",
	}
	node.Edges[2].IDs, err = wot.QueryWorkOrders().
		Select(workorder.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	node.Edges[3] = &Edge{
		Type: "WorkOrderDefinition",
		Name: "definitions",
	}
	node.Edges[3].IDs, err = wot.QueryDefinitions().
		Select(workorderdefinition.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (wt *WorkerType) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     wt.ID,
		Type:   "WorkerType",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(wt.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(wt.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(wt.Name); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(wt.Description); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "PropertyType",
		Name: "property_types",
	}
	node.Edges[0].IDs, err = wt.QueryPropertyTypes().
		Select(propertytype.FieldID).
		Ints(ctx)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (c *Client) Node(ctx context.Context, id int) (*Node, error) {
	n, err := c.Noder(ctx, id)
	if err != nil {
		return nil, err
	}
	return n.Node(ctx)
}

var errNodeInvalidID = &NotFoundError{"node"}

// NodeOption allows configuring the Noder execution using functional options.
type NodeOption func(*NodeOptions)

// WithNodeType sets the Type of the node (i.e. the table to query).
// If was not provided, the table will be derived from the universal-id
// configuration as described in: https://entgo.io/docs/migrate/#universal-ids.
func WithNodeType(t string) NodeOption {
	return func(o *NodeOptions) {
		o.Type = t
	}
}

// NodeOptions holds the configuration for Noder execution.
type NodeOptions struct {
	// Type of the node (schema table).
	Type string
}

// Noder returns a Node by its id. If the NodeType was not provided, it will
// be derived from the id value according to the universal-id configuration.
//
//		c.Noder(ctx, id)
//		c.Noder(ctx, id, ent.WithNodeType(pet.Table))
//
func (c *Client) Noder(ctx context.Context, id int, opts ...NodeOption) (_ Noder, err error) {
	defer func() {
		if IsNotFound(err) {
			err = multierror.Append(err, entgql.ErrNodeNotFound(id))
		}
	}()
	options := &NodeOptions{}
	for _, opt := range opts {
		opt(options)
	}
	if options.Type == "" {
		options.Type, err = c.tables.nodeType(ctx, c.driver, id)
		if err != nil {
			return nil, err
		}
	}
	return c.noder(ctx, options.Type, id)
}

func (c *Client) noder(ctx context.Context, tbl string, id int) (Noder, error) {
	switch tbl {
	case activity.Table:
		n, err := c.Activity.Query().
			Where(activity.ID(id)).
			CollectFields(ctx, "Activity").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case alarmfilter.Table:
		n, err := c.AlarmFilter.Query().
			Where(alarmfilter.ID(id)).
			CollectFields(ctx, "AlarmFilter").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case alarmstatus.Table:
		n, err := c.AlarmStatus.Query().
			Where(alarmstatus.ID(id)).
			CollectFields(ctx, "AlarmStatus").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case appointment.Table:
		n, err := c.Appointment.Query().
			Where(appointment.ID(id)).
			CollectFields(ctx, "Appointment").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case block.Table:
		n, err := c.Block.Query().
			Where(block.ID(id)).
			CollectFields(ctx, "Block").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case blockinstance.Table:
		n, err := c.BlockInstance.Query().
			Where(blockinstance.ID(id)).
			CollectFields(ctx, "BlockInstance").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case checklistcategory.Table:
		n, err := c.CheckListCategory.Query().
			Where(checklistcategory.ID(id)).
			CollectFields(ctx, "CheckListCategory").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case checklistcategorydefinition.Table:
		n, err := c.CheckListCategoryDefinition.Query().
			Where(checklistcategorydefinition.ID(id)).
			CollectFields(ctx, "CheckListCategoryDefinition").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case checklistitem.Table:
		n, err := c.CheckListItem.Query().
			Where(checklistitem.ID(id)).
			CollectFields(ctx, "CheckListItem").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case checklistitemdefinition.Table:
		n, err := c.CheckListItemDefinition.Query().
			Where(checklistitemdefinition.ID(id)).
			CollectFields(ctx, "CheckListItemDefinition").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case comment.Table:
		n, err := c.Comment.Query().
			Where(comment.ID(id)).
			CollectFields(ctx, "Comment").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case comparator.Table:
		n, err := c.Comparator.Query().
			Where(comparator.ID(id)).
			CollectFields(ctx, "Comparator").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case counter.Table:
		n, err := c.Counter.Query().
			Where(counter.ID(id)).
			CollectFields(ctx, "Counter").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case counterfamily.Table:
		n, err := c.CounterFamily.Query().
			Where(counterfamily.ID(id)).
			CollectFields(ctx, "CounterFamily").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case counterformula.Table:
		n, err := c.CounterFormula.Query().
			Where(counterformula.ID(id)).
			CollectFields(ctx, "CounterFormula").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case customer.Table:
		n, err := c.Customer.Query().
			Where(customer.ID(id)).
			CollectFields(ctx, "Customer").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case documentcategory.Table:
		n, err := c.DocumentCategory.Query().
			Where(documentcategory.ID(id)).
			CollectFields(ctx, "DocumentCategory").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case domain.Table:
		n, err := c.Domain.Query().
			Where(domain.ID(id)).
			CollectFields(ctx, "Domain").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case entrypoint.Table:
		n, err := c.EntryPoint.Query().
			Where(entrypoint.ID(id)).
			CollectFields(ctx, "EntryPoint").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case equipment.Table:
		n, err := c.Equipment.Query().
			Where(equipment.ID(id)).
			CollectFields(ctx, "Equipment").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case equipmentcategory.Table:
		n, err := c.EquipmentCategory.Query().
			Where(equipmentcategory.ID(id)).
			CollectFields(ctx, "EquipmentCategory").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case equipmentport.Table:
		n, err := c.EquipmentPort.Query().
			Where(equipmentport.ID(id)).
			CollectFields(ctx, "EquipmentPort").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case equipmentportdefinition.Table:
		n, err := c.EquipmentPortDefinition.Query().
			Where(equipmentportdefinition.ID(id)).
			CollectFields(ctx, "EquipmentPortDefinition").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case equipmentporttype.Table:
		n, err := c.EquipmentPortType.Query().
			Where(equipmentporttype.ID(id)).
			CollectFields(ctx, "EquipmentPortType").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case equipmentposition.Table:
		n, err := c.EquipmentPosition.Query().
			Where(equipmentposition.ID(id)).
			CollectFields(ctx, "EquipmentPosition").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case equipmentpositiondefinition.Table:
		n, err := c.EquipmentPositionDefinition.Query().
			Where(equipmentpositiondefinition.ID(id)).
			CollectFields(ctx, "EquipmentPositionDefinition").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case equipmenttype.Table:
		n, err := c.EquipmentType.Query().
			Where(equipmenttype.ID(id)).
			CollectFields(ctx, "EquipmentType").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case eventseverity.Table:
		n, err := c.EventSeverity.Query().
			Where(eventseverity.ID(id)).
			CollectFields(ctx, "EventSeverity").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case exitpoint.Table:
		n, err := c.ExitPoint.Query().
			Where(exitpoint.ID(id)).
			CollectFields(ctx, "ExitPoint").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case exporttask.Table:
		n, err := c.ExportTask.Query().
			Where(exporttask.ID(id)).
			CollectFields(ctx, "ExportTask").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case feature.Table:
		n, err := c.Feature.Query().
			Where(feature.ID(id)).
			CollectFields(ctx, "Feature").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case file.Table:
		n, err := c.File.Query().
			Where(file.ID(id)).
			CollectFields(ctx, "File").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case floorplan.Table:
		n, err := c.FloorPlan.Query().
			Where(floorplan.ID(id)).
			CollectFields(ctx, "FloorPlan").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case floorplanreferencepoint.Table:
		n, err := c.FloorPlanReferencePoint.Query().
			Where(floorplanreferencepoint.ID(id)).
			CollectFields(ctx, "FloorPlanReferencePoint").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case floorplanscale.Table:
		n, err := c.FloorPlanScale.Query().
			Where(floorplanscale.ID(id)).
			CollectFields(ctx, "FloorPlanScale").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case flow.Table:
		n, err := c.Flow.Query().
			Where(flow.ID(id)).
			CollectFields(ctx, "Flow").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case flowdraft.Table:
		n, err := c.FlowDraft.Query().
			Where(flowdraft.ID(id)).
			CollectFields(ctx, "FlowDraft").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case flowexecutiontemplate.Table:
		n, err := c.FlowExecutionTemplate.Query().
			Where(flowexecutiontemplate.ID(id)).
			CollectFields(ctx, "FlowExecutionTemplate").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case flowinstance.Table:
		n, err := c.FlowInstance.Query().
			Where(flowinstance.ID(id)).
			CollectFields(ctx, "FlowInstance").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case formula.Table:
		n, err := c.Formula.Query().
			Where(formula.ID(id)).
			CollectFields(ctx, "Formula").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case hyperlink.Table:
		n, err := c.Hyperlink.Query().
			Where(hyperlink.ID(id)).
			CollectFields(ctx, "Hyperlink").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case kpi.Table:
		n, err := c.Kpi.Query().
			Where(kpi.ID(id)).
			CollectFields(ctx, "Kpi").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case kpicategory.Table:
		n, err := c.KpiCategory.Query().
			Where(kpicategory.ID(id)).
			CollectFields(ctx, "KpiCategory").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case kqi.Table:
		n, err := c.Kqi.Query().
			Where(kqi.ID(id)).
			CollectFields(ctx, "Kqi").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case kqicategory.Table:
		n, err := c.KqiCategory.Query().
			Where(kqicategory.ID(id)).
			CollectFields(ctx, "KqiCategory").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case kqicomparator.Table:
		n, err := c.KqiComparator.Query().
			Where(kqicomparator.ID(id)).
			CollectFields(ctx, "KqiComparator").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case kqiperspective.Table:
		n, err := c.KqiPerspective.Query().
			Where(kqiperspective.ID(id)).
			CollectFields(ctx, "KqiPerspective").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case kqisource.Table:
		n, err := c.KqiSource.Query().
			Where(kqisource.ID(id)).
			CollectFields(ctx, "KqiSource").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case kqitarget.Table:
		n, err := c.KqiTarget.Query().
			Where(kqitarget.ID(id)).
			CollectFields(ctx, "KqiTarget").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case kqitemporalfrequency.Table:
		n, err := c.KqiTemporalFrequency.Query().
			Where(kqitemporalfrequency.ID(id)).
			CollectFields(ctx, "KqiTemporalFrequency").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case link.Table:
		n, err := c.Link.Query().
			Where(link.ID(id)).
			CollectFields(ctx, "Link").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case location.Table:
		n, err := c.Location.Query().
			Where(location.ID(id)).
			CollectFields(ctx, "Location").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case locationtype.Table:
		n, err := c.LocationType.Query().
			Where(locationtype.ID(id)).
			CollectFields(ctx, "LocationType").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case networktype.Table:
		n, err := c.NetworkType.Query().
			Where(networktype.ID(id)).
			CollectFields(ctx, "NetworkType").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case organization.Table:
		n, err := c.Organization.Query().
			Where(organization.ID(id)).
			CollectFields(ctx, "Organization").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case parametercatalog.Table:
		n, err := c.ParameterCatalog.Query().
			Where(parametercatalog.ID(id)).
			CollectFields(ctx, "ParameterCatalog").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case permissionspolicy.Table:
		n, err := c.PermissionsPolicy.Query().
			Where(permissionspolicy.ID(id)).
			CollectFields(ctx, "PermissionsPolicy").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case project.Table:
		n, err := c.Project.Query().
			Where(project.ID(id)).
			CollectFields(ctx, "Project").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case projecttemplate.Table:
		n, err := c.ProjectTemplate.Query().
			Where(projecttemplate.ID(id)).
			CollectFields(ctx, "ProjectTemplate").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case projecttype.Table:
		n, err := c.ProjectType.Query().
			Where(projecttype.ID(id)).
			CollectFields(ctx, "ProjectType").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case property.Table:
		n, err := c.Property.Query().
			Where(property.ID(id)).
			CollectFields(ctx, "Property").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case propertycategory.Table:
		n, err := c.PropertyCategory.Query().
			Where(propertycategory.ID(id)).
			CollectFields(ctx, "PropertyCategory").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case propertytype.Table:
		n, err := c.PropertyType.Query().
			Where(propertytype.ID(id)).
			CollectFields(ctx, "PropertyType").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case recommendations.Table:
		n, err := c.Recommendations.Query().
			Where(recommendations.ID(id)).
			CollectFields(ctx, "Recommendations").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case recommendationscategory.Table:
		n, err := c.RecommendationsCategory.Query().
			Where(recommendationscategory.ID(id)).
			CollectFields(ctx, "RecommendationsCategory").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case recommendationssources.Table:
		n, err := c.RecommendationsSources.Query().
			Where(recommendationssources.ID(id)).
			CollectFields(ctx, "RecommendationsSources").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case reportfilter.Table:
		n, err := c.ReportFilter.Query().
			Where(reportfilter.ID(id)).
			CollectFields(ctx, "ReportFilter").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case rule.Table:
		n, err := c.Rule.Query().
			Where(rule.ID(id)).
			CollectFields(ctx, "Rule").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case rulelimit.Table:
		n, err := c.RuleLimit.Query().
			Where(rulelimit.ID(id)).
			CollectFields(ctx, "RuleLimit").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case ruletype.Table:
		n, err := c.RuleType.Query().
			Where(ruletype.ID(id)).
			CollectFields(ctx, "RuleType").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case service.Table:
		n, err := c.Service.Query().
			Where(service.ID(id)).
			CollectFields(ctx, "Service").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case serviceendpoint.Table:
		n, err := c.ServiceEndpoint.Query().
			Where(serviceendpoint.ID(id)).
			CollectFields(ctx, "ServiceEndpoint").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case serviceendpointdefinition.Table:
		n, err := c.ServiceEndpointDefinition.Query().
			Where(serviceendpointdefinition.ID(id)).
			CollectFields(ctx, "ServiceEndpointDefinition").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case servicetype.Table:
		n, err := c.ServiceType.Query().
			Where(servicetype.ID(id)).
			CollectFields(ctx, "ServiceType").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case survey.Table:
		n, err := c.Survey.Query().
			Where(survey.ID(id)).
			CollectFields(ctx, "Survey").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case surveycellscan.Table:
		n, err := c.SurveyCellScan.Query().
			Where(surveycellscan.ID(id)).
			CollectFields(ctx, "SurveyCellScan").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case surveyquestion.Table:
		n, err := c.SurveyQuestion.Query().
			Where(surveyquestion.ID(id)).
			CollectFields(ctx, "SurveyQuestion").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case surveytemplatecategory.Table:
		n, err := c.SurveyTemplateCategory.Query().
			Where(surveytemplatecategory.ID(id)).
			CollectFields(ctx, "SurveyTemplateCategory").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case surveytemplatequestion.Table:
		n, err := c.SurveyTemplateQuestion.Query().
			Where(surveytemplatequestion.ID(id)).
			CollectFields(ctx, "SurveyTemplateQuestion").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case surveywifiscan.Table:
		n, err := c.SurveyWiFiScan.Query().
			Where(surveywifiscan.ID(id)).
			CollectFields(ctx, "SurveyWiFiScan").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case tech.Table:
		n, err := c.Tech.Query().
			Where(tech.ID(id)).
			CollectFields(ctx, "Tech").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case threshold.Table:
		n, err := c.Threshold.Query().
			Where(threshold.ID(id)).
			CollectFields(ctx, "Threshold").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case user.Table:
		n, err := c.User.Query().
			Where(user.ID(id)).
			CollectFields(ctx, "User").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case usersgroup.Table:
		n, err := c.UsersGroup.Query().
			Where(usersgroup.ID(id)).
			CollectFields(ctx, "UsersGroup").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case vendor.Table:
		n, err := c.Vendor.Query().
			Where(vendor.ID(id)).
			CollectFields(ctx, "Vendor").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case workorder.Table:
		n, err := c.WorkOrder.Query().
			Where(workorder.ID(id)).
			CollectFields(ctx, "WorkOrder").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case workorderdefinition.Table:
		n, err := c.WorkOrderDefinition.Query().
			Where(workorderdefinition.ID(id)).
			CollectFields(ctx, "WorkOrderDefinition").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case workordertemplate.Table:
		n, err := c.WorkOrderTemplate.Query().
			Where(workordertemplate.ID(id)).
			CollectFields(ctx, "WorkOrderTemplate").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case workordertype.Table:
		n, err := c.WorkOrderType.Query().
			Where(workordertype.ID(id)).
			CollectFields(ctx, "WorkOrderType").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case workertype.Table:
		n, err := c.WorkerType.Query().
			Where(workertype.ID(id)).
			CollectFields(ctx, "WorkerType").
			Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	default:
		return nil, fmt.Errorf("cannot resolve Noder from table %q: %w", tbl, errNodeInvalidID)
	}
}

type tables struct {
	once  sync.Once
	sem   *semaphore.Weighted
	value atomic.Value
}

func (t *tables) nodeType(ctx context.Context, drv dialect.Driver, id int) (string, error) {
	tables, err := t.Load(ctx, drv)
	if err != nil {
		return "", err
	}
	idx := int(id / (1<<32 - 1))
	if idx < 0 || idx >= len(tables) {
		return "", fmt.Errorf("cannot resolve table from id %v: %w", id, errNodeInvalidID)
	}
	return tables[idx], nil
}

func (t *tables) Load(ctx context.Context, drv dialect.Driver) ([]string, error) {
	if tables := t.value.Load(); tables != nil {
		return tables.([]string), nil
	}
	t.once.Do(func() { t.sem = semaphore.NewWeighted(1) })
	if err := t.sem.Acquire(ctx, 1); err != nil {
		return nil, err
	}
	defer t.sem.Release(1)
	if tables := t.value.Load(); tables != nil {
		return tables.([]string), nil
	}
	tables, err := t.load(ctx, drv)
	if err == nil {
		t.value.Store(tables)
	}
	return tables, err
}

func (tables) load(ctx context.Context, drv dialect.Driver) ([]string, error) {
	rows := &sql.Rows{}
	query, args := sql.Dialect(drv.Dialect()).
		Select("type").
		From(sql.Table(schema.TypeTable)).
		OrderBy(sql.Asc("id")).
		Query()
	if err := drv.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var tables []string
	return tables, sql.ScanSlice(rows, &tables)
}
