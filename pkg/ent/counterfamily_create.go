// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/counter"
	"github.com/facebookincubator/symphony/pkg/ent/counterfamily"
)

// CounterFamilyCreate is the builder for creating a CounterFamily entity.
type CounterFamilyCreate struct {
	config
	mutation *CounterFamilyMutation
	hooks    []Hook
}

// SetCreateTime sets the create_time field.
func (cfc *CounterFamilyCreate) SetCreateTime(t time.Time) *CounterFamilyCreate {
	cfc.mutation.SetCreateTime(t)
	return cfc
}

// SetNillableCreateTime sets the create_time field if the given value is not nil.
func (cfc *CounterFamilyCreate) SetNillableCreateTime(t *time.Time) *CounterFamilyCreate {
	if t != nil {
		cfc.SetCreateTime(*t)
	}
	return cfc
}

// SetUpdateTime sets the update_time field.
func (cfc *CounterFamilyCreate) SetUpdateTime(t time.Time) *CounterFamilyCreate {
	cfc.mutation.SetUpdateTime(t)
	return cfc
}

// SetNillableUpdateTime sets the update_time field if the given value is not nil.
func (cfc *CounterFamilyCreate) SetNillableUpdateTime(t *time.Time) *CounterFamilyCreate {
	if t != nil {
		cfc.SetUpdateTime(*t)
	}
	return cfc
}

// SetName sets the name field.
func (cfc *CounterFamilyCreate) SetName(s string) *CounterFamilyCreate {
	cfc.mutation.SetName(s)
	return cfc
}

// AddCounterfamilyIDs adds the counterfamily edge to Counter by ids.
func (cfc *CounterFamilyCreate) AddCounterfamilyIDs(ids ...int) *CounterFamilyCreate {
	cfc.mutation.AddCounterfamilyIDs(ids...)
	return cfc
}

// AddCounterfamily adds the counterfamily edges to Counter.
func (cfc *CounterFamilyCreate) AddCounterfamily(c ...*Counter) *CounterFamilyCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cfc.AddCounterfamilyIDs(ids...)
}

// Mutation returns the CounterFamilyMutation object of the builder.
func (cfc *CounterFamilyCreate) Mutation() *CounterFamilyMutation {
	return cfc.mutation
}

// Save creates the CounterFamily in the database.
func (cfc *CounterFamilyCreate) Save(ctx context.Context) (*CounterFamily, error) {
	var (
		err  error
		node *CounterFamily
	)
	cfc.defaults()
	if len(cfc.hooks) == 0 {
		if err = cfc.check(); err != nil {
			return nil, err
		}
		node, err = cfc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CounterFamilyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cfc.check(); err != nil {
				return nil, err
			}
			cfc.mutation = mutation
			node, err = cfc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cfc.hooks) - 1; i >= 0; i-- {
			mut = cfc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cfc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cfc *CounterFamilyCreate) SaveX(ctx context.Context) *CounterFamily {
	v, err := cfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (cfc *CounterFamilyCreate) defaults() {
	if _, ok := cfc.mutation.CreateTime(); !ok {
		v := counterfamily.DefaultCreateTime()
		cfc.mutation.SetCreateTime(v)
	}
	if _, ok := cfc.mutation.UpdateTime(); !ok {
		v := counterfamily.DefaultUpdateTime()
		cfc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cfc *CounterFamilyCreate) check() error {
	if _, ok := cfc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := cfc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := cfc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := cfc.mutation.Name(); ok {
		if err := counterfamily.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (cfc *CounterFamilyCreate) sqlSave(ctx context.Context) (*CounterFamily, error) {
	_node, _spec := cfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cfc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cfc *CounterFamilyCreate) createSpec() (*CounterFamily, *sqlgraph.CreateSpec) {
	var (
		_node = &CounterFamily{config: cfc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: counterfamily.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: counterfamily.FieldID,
			},
		}
	)
	if value, ok := cfc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: counterfamily.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := cfc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: counterfamily.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := cfc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: counterfamily.FieldName,
		})
		_node.Name = value
	}
	if nodes := cfc.mutation.CounterfamilyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   counterfamily.CounterfamilyTable,
			Columns: []string{counterfamily.CounterfamilyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CounterFamilyCreateBulk is the builder for creating a bulk of CounterFamily entities.
type CounterFamilyCreateBulk struct {
	config
	builders []*CounterFamilyCreate
}

// Save creates the CounterFamily entities in the database.
func (cfcb *CounterFamilyCreateBulk) Save(ctx context.Context) ([]*CounterFamily, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cfcb.builders))
	nodes := make([]*CounterFamily, len(cfcb.builders))
	mutators := make([]Mutator, len(cfcb.builders))
	for i := range cfcb.builders {
		func(i int, root context.Context) {
			builder := cfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CounterFamilyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cfcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cfcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (cfcb *CounterFamilyCreateBulk) SaveX(ctx context.Context) []*CounterFamily {
	v, err := cfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
