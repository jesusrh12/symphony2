// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/rule"
	"github.com/facebookincubator/symphony/pkg/ent/ruletype"
)

// RuleTypeUpdate is the builder for updating RuleType entities.
type RuleTypeUpdate struct {
	config
	hooks    []Hook
	mutation *RuleTypeMutation
}

// Where adds a new predicate for the builder.
func (rtu *RuleTypeUpdate) Where(ps ...predicate.RuleType) *RuleTypeUpdate {
	rtu.mutation.predicates = append(rtu.mutation.predicates, ps...)
	return rtu
}

// SetName sets the name field.
func (rtu *RuleTypeUpdate) SetName(s string) *RuleTypeUpdate {
	rtu.mutation.SetName(s)
	return rtu
}

// AddRuletyperuleIDs adds the ruletyperule edge to Rule by ids.
func (rtu *RuleTypeUpdate) AddRuletyperuleIDs(ids ...int) *RuleTypeUpdate {
	rtu.mutation.AddRuletyperuleIDs(ids...)
	return rtu
}

// AddRuletyperule adds the ruletyperule edges to Rule.
func (rtu *RuleTypeUpdate) AddRuletyperule(r ...*Rule) *RuleTypeUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtu.AddRuletyperuleIDs(ids...)
}

// Mutation returns the RuleTypeMutation object of the builder.
func (rtu *RuleTypeUpdate) Mutation() *RuleTypeMutation {
	return rtu.mutation
}

// ClearRuletyperule clears all "ruletyperule" edges to type Rule.
func (rtu *RuleTypeUpdate) ClearRuletyperule() *RuleTypeUpdate {
	rtu.mutation.ClearRuletyperule()
	return rtu
}

// RemoveRuletyperuleIDs removes the ruletyperule edge to Rule by ids.
func (rtu *RuleTypeUpdate) RemoveRuletyperuleIDs(ids ...int) *RuleTypeUpdate {
	rtu.mutation.RemoveRuletyperuleIDs(ids...)
	return rtu
}

// RemoveRuletyperule removes ruletyperule edges to Rule.
func (rtu *RuleTypeUpdate) RemoveRuletyperule(r ...*Rule) *RuleTypeUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtu.RemoveRuletyperuleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rtu *RuleTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	rtu.defaults()
	if len(rtu.hooks) == 0 {
		if err = rtu.check(); err != nil {
			return 0, err
		}
		affected, err = rtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RuleTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rtu.check(); err != nil {
				return 0, err
			}
			rtu.mutation = mutation
			affected, err = rtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rtu.hooks) - 1; i >= 0; i-- {
			mut = rtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rtu *RuleTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := rtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rtu *RuleTypeUpdate) Exec(ctx context.Context) error {
	_, err := rtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtu *RuleTypeUpdate) ExecX(ctx context.Context) {
	if err := rtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rtu *RuleTypeUpdate) defaults() {
	if _, ok := rtu.mutation.UpdateTime(); !ok {
		v := ruletype.UpdateDefaultUpdateTime()
		rtu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtu *RuleTypeUpdate) check() error {
	if v, ok := rtu.mutation.Name(); ok {
		if err := ruletype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (rtu *RuleTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ruletype.Table,
			Columns: ruletype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ruletype.FieldID,
			},
		},
	}
	if ps := rtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rtu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ruletype.FieldUpdateTime,
		})
	}
	if value, ok := rtu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ruletype.FieldName,
		})
	}
	if rtu.mutation.RuletyperuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ruletype.RuletyperuleTable,
			Columns: []string{ruletype.RuletyperuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rule.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.RemovedRuletyperuleIDs(); len(nodes) > 0 && !rtu.mutation.RuletyperuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ruletype.RuletyperuleTable,
			Columns: []string{ruletype.RuletyperuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.RuletyperuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ruletype.RuletyperuleTable,
			Columns: []string{ruletype.RuletyperuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ruletype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RuleTypeUpdateOne is the builder for updating a single RuleType entity.
type RuleTypeUpdateOne struct {
	config
	hooks    []Hook
	mutation *RuleTypeMutation
}

// SetName sets the name field.
func (rtuo *RuleTypeUpdateOne) SetName(s string) *RuleTypeUpdateOne {
	rtuo.mutation.SetName(s)
	return rtuo
}

// AddRuletyperuleIDs adds the ruletyperule edge to Rule by ids.
func (rtuo *RuleTypeUpdateOne) AddRuletyperuleIDs(ids ...int) *RuleTypeUpdateOne {
	rtuo.mutation.AddRuletyperuleIDs(ids...)
	return rtuo
}

// AddRuletyperule adds the ruletyperule edges to Rule.
func (rtuo *RuleTypeUpdateOne) AddRuletyperule(r ...*Rule) *RuleTypeUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtuo.AddRuletyperuleIDs(ids...)
}

// Mutation returns the RuleTypeMutation object of the builder.
func (rtuo *RuleTypeUpdateOne) Mutation() *RuleTypeMutation {
	return rtuo.mutation
}

// ClearRuletyperule clears all "ruletyperule" edges to type Rule.
func (rtuo *RuleTypeUpdateOne) ClearRuletyperule() *RuleTypeUpdateOne {
	rtuo.mutation.ClearRuletyperule()
	return rtuo
}

// RemoveRuletyperuleIDs removes the ruletyperule edge to Rule by ids.
func (rtuo *RuleTypeUpdateOne) RemoveRuletyperuleIDs(ids ...int) *RuleTypeUpdateOne {
	rtuo.mutation.RemoveRuletyperuleIDs(ids...)
	return rtuo
}

// RemoveRuletyperule removes ruletyperule edges to Rule.
func (rtuo *RuleTypeUpdateOne) RemoveRuletyperule(r ...*Rule) *RuleTypeUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rtuo.RemoveRuletyperuleIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (rtuo *RuleTypeUpdateOne) Save(ctx context.Context) (*RuleType, error) {
	var (
		err  error
		node *RuleType
	)
	rtuo.defaults()
	if len(rtuo.hooks) == 0 {
		if err = rtuo.check(); err != nil {
			return nil, err
		}
		node, err = rtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RuleTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rtuo.check(); err != nil {
				return nil, err
			}
			rtuo.mutation = mutation
			node, err = rtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rtuo.hooks) - 1; i >= 0; i-- {
			mut = rtuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rtuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rtuo *RuleTypeUpdateOne) SaveX(ctx context.Context) *RuleType {
	node, err := rtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rtuo *RuleTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := rtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtuo *RuleTypeUpdateOne) ExecX(ctx context.Context) {
	if err := rtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rtuo *RuleTypeUpdateOne) defaults() {
	if _, ok := rtuo.mutation.UpdateTime(); !ok {
		v := ruletype.UpdateDefaultUpdateTime()
		rtuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtuo *RuleTypeUpdateOne) check() error {
	if v, ok := rtuo.mutation.Name(); ok {
		if err := ruletype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (rtuo *RuleTypeUpdateOne) sqlSave(ctx context.Context) (_node *RuleType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ruletype.Table,
			Columns: ruletype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ruletype.FieldID,
			},
		},
	}
	id, ok := rtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing RuleType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := rtuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ruletype.FieldUpdateTime,
		})
	}
	if value, ok := rtuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ruletype.FieldName,
		})
	}
	if rtuo.mutation.RuletyperuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ruletype.RuletyperuleTable,
			Columns: []string{ruletype.RuletyperuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rule.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.RemovedRuletyperuleIDs(); len(nodes) > 0 && !rtuo.mutation.RuletyperuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ruletype.RuletyperuleTable,
			Columns: []string{ruletype.RuletyperuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.RuletyperuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ruletype.RuletyperuleTable,
			Columns: []string{ruletype.RuletyperuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RuleType{config: rtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, rtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ruletype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
