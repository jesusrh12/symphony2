// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/counter"
	"github.com/facebookincubator/symphony/pkg/ent/counterformula"
	"github.com/facebookincubator/symphony/pkg/ent/formula"
)

// CounterFormula is the model entity for the CounterFormula schema.
type CounterFormula struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Mandatory holds the value of the "mandatory" field.
	Mandatory bool `json:"mandatory,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CounterFormulaQuery when eager-loading is set.
	Edges                  CounterFormulaEdges `json:"edges"`
	counter_counter_fk     *int
	formula_counterformula *int
}

// CounterFormulaEdges holds the relations/edges for other nodes in the graph.
type CounterFormulaEdges struct {
	// Formula holds the value of the formula edge.
	Formula *Formula
	// Counter holds the value of the counter edge.
	Counter *Counter
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FormulaOrErr returns the Formula value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CounterFormulaEdges) FormulaOrErr() (*Formula, error) {
	if e.loadedTypes[0] {
		if e.Formula == nil {
			// The edge formula was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: formula.Label}
		}
		return e.Formula, nil
	}
	return nil, &NotLoadedError{edge: "formula"}
}

// CounterOrErr returns the Counter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CounterFormulaEdges) CounterOrErr() (*Counter, error) {
	if e.loadedTypes[1] {
		if e.Counter == nil {
			// The edge counter was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: counter.Label}
		}
		return e.Counter, nil
	}
	return nil, &NotLoadedError{edge: "counter"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CounterFormula) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // create_time
		&sql.NullTime{},  // update_time
		&sql.NullBool{},  // mandatory
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*CounterFormula) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // counter_counter_fk
		&sql.NullInt64{}, // formula_counterformula
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CounterFormula fields.
func (cf *CounterFormula) assignValues(values ...interface{}) error {
	if m, n := len(values), len(counterformula.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	cf.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		cf.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		cf.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field mandatory", values[2])
	} else if value.Valid {
		cf.Mandatory = value.Bool
	}
	values = values[3:]
	if len(values) == len(counterformula.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field counter_counter_fk", value)
		} else if value.Valid {
			cf.counter_counter_fk = new(int)
			*cf.counter_counter_fk = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field formula_counterformula", value)
		} else if value.Valid {
			cf.formula_counterformula = new(int)
			*cf.formula_counterformula = int(value.Int64)
		}
	}
	return nil
}

// QueryFormula queries the formula edge of the CounterFormula.
func (cf *CounterFormula) QueryFormula() *FormulaQuery {
	return (&CounterFormulaClient{config: cf.config}).QueryFormula(cf)
}

// QueryCounter queries the counter edge of the CounterFormula.
func (cf *CounterFormula) QueryCounter() *CounterQuery {
	return (&CounterFormulaClient{config: cf.config}).QueryCounter(cf)
}

// Update returns a builder for updating this CounterFormula.
// Note that, you need to call CounterFormula.Unwrap() before calling this method, if this CounterFormula
// was returned from a transaction, and the transaction was committed or rolled back.
func (cf *CounterFormula) Update() *CounterFormulaUpdateOne {
	return (&CounterFormulaClient{config: cf.config}).UpdateOne(cf)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (cf *CounterFormula) Unwrap() *CounterFormula {
	tx, ok := cf.config.driver.(*txDriver)
	if !ok {
		panic("ent: CounterFormula is not a transactional entity")
	}
	cf.config.driver = tx.drv
	return cf
}

// String implements the fmt.Stringer.
func (cf *CounterFormula) String() string {
	var builder strings.Builder
	builder.WriteString("CounterFormula(")
	builder.WriteString(fmt.Sprintf("id=%v", cf.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(cf.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(cf.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", mandatory=")
	builder.WriteString(fmt.Sprintf("%v", cf.Mandatory))
	builder.WriteByte(')')
	return builder.String()
}

// CounterFormulas is a parsable slice of CounterFormula.
type CounterFormulas []*CounterFormula

func (cf CounterFormulas) config(cfg config) {
	for _i := range cf {
		cf[_i].config = cfg
	}
}
