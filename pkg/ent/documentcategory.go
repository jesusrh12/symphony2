// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/documentcategory"
	"github.com/facebookincubator/symphony/pkg/ent/locationtype"
)

// DocumentCategory is the model entity for the DocumentCategory schema.
type DocumentCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Index holds the value of the "index" field.
	Index int `json:"index,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DocumentCategoryQuery when eager-loading is set.
	Edges                           DocumentCategoryEdges `json:"edges"`
	location_type_document_category *int
}

// DocumentCategoryEdges holds the relations/edges for other nodes in the graph.
type DocumentCategoryEdges struct {
	// LocationType holds the value of the location_type edge.
	LocationType *LocationType
	// Files holds the value of the files edge.
	Files []*File
	// Hyperlinks holds the value of the hyperlinks edge.
	Hyperlinks []*Hyperlink
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// LocationTypeOrErr returns the LocationType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DocumentCategoryEdges) LocationTypeOrErr() (*LocationType, error) {
	if e.loadedTypes[0] {
		if e.LocationType == nil {
			// The edge location_type was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: locationtype.Label}
		}
		return e.LocationType, nil
	}
	return nil, &NotLoadedError{edge: "location_type"}
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e DocumentCategoryEdges) FilesOrErr() ([]*File, error) {
	if e.loadedTypes[1] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// HyperlinksOrErr returns the Hyperlinks value or an error if the edge
// was not loaded in eager-loading.
func (e DocumentCategoryEdges) HyperlinksOrErr() ([]*Hyperlink, error) {
	if e.loadedTypes[2] {
		return e.Hyperlinks, nil
	}
	return nil, &NotLoadedError{edge: "hyperlinks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DocumentCategory) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // name
		&sql.NullInt64{},  // index
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*DocumentCategory) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // location_type_document_category
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DocumentCategory fields.
func (dc *DocumentCategory) assignValues(values ...interface{}) error {
	if m, n := len(values), len(documentcategory.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	dc.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		dc.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		dc.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[2])
	} else if value.Valid {
		dc.Name = value.String
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field index", values[3])
	} else if value.Valid {
		dc.Index = int(value.Int64)
	}
	values = values[4:]
	if len(values) == len(documentcategory.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field location_type_document_category", value)
		} else if value.Valid {
			dc.location_type_document_category = new(int)
			*dc.location_type_document_category = int(value.Int64)
		}
	}
	return nil
}

// QueryLocationType queries the location_type edge of the DocumentCategory.
func (dc *DocumentCategory) QueryLocationType() *LocationTypeQuery {
	return (&DocumentCategoryClient{config: dc.config}).QueryLocationType(dc)
}

// QueryFiles queries the files edge of the DocumentCategory.
func (dc *DocumentCategory) QueryFiles() *FileQuery {
	return (&DocumentCategoryClient{config: dc.config}).QueryFiles(dc)
}

// QueryHyperlinks queries the hyperlinks edge of the DocumentCategory.
func (dc *DocumentCategory) QueryHyperlinks() *HyperlinkQuery {
	return (&DocumentCategoryClient{config: dc.config}).QueryHyperlinks(dc)
}

// Update returns a builder for updating this DocumentCategory.
// Note that, you need to call DocumentCategory.Unwrap() before calling this method, if this DocumentCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (dc *DocumentCategory) Update() *DocumentCategoryUpdateOne {
	return (&DocumentCategoryClient{config: dc.config}).UpdateOne(dc)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (dc *DocumentCategory) Unwrap() *DocumentCategory {
	tx, ok := dc.config.driver.(*txDriver)
	if !ok {
		panic("ent: DocumentCategory is not a transactional entity")
	}
	dc.config.driver = tx.drv
	return dc
}

// String implements the fmt.Stringer.
func (dc *DocumentCategory) String() string {
	var builder strings.Builder
	builder.WriteString("DocumentCategory(")
	builder.WriteString(fmt.Sprintf("id=%v", dc.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(dc.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(dc.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(dc.Name)
	builder.WriteString(", index=")
	builder.WriteString(fmt.Sprintf("%v", dc.Index))
	builder.WriteByte(')')
	return builder.String()
}

// DocumentCategories is a parsable slice of DocumentCategory.
type DocumentCategories []*DocumentCategory

func (dc DocumentCategories) config(cfg config) {
	for _i := range dc {
		dc[_i].config = cfg
	}
}
