// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package equipmentportdefinition

import (
	"time"

	"github.com/facebook/ent"
)

const (
	// Label holds the string label denoting the equipmentportdefinition type in the database.
	Label = "equipment_port_definition"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldIndex holds the string denoting the index field in the database.
	FieldIndex = "index"
	// FieldBandwidth holds the string denoting the bandwidth field in the database.
	FieldBandwidth = "bandwidth"
	// FieldVisibilityLabel holds the string denoting the visibility_label field in the database.
	FieldVisibilityLabel = "visibility_label"

	// EdgeEquipmentPortType holds the string denoting the equipment_port_type edge name in mutations.
	EdgeEquipmentPortType = "equipment_port_type"
	// EdgePorts holds the string denoting the ports edge name in mutations.
	EdgePorts = "ports"
	// EdgeEquipmentType holds the string denoting the equipment_type edge name in mutations.
	EdgeEquipmentType = "equipment_type"
	// EdgeConnectedPorts holds the string denoting the connected_ports edge name in mutations.
	EdgeConnectedPorts = "connected_ports"

	// Table holds the table name of the equipmentportdefinition in the database.
	Table = "equipment_port_definitions"
	// EquipmentPortTypeTable is the table the holds the equipment_port_type relation/edge.
	EquipmentPortTypeTable = "equipment_port_definitions"
	// EquipmentPortTypeInverseTable is the table name for the EquipmentPortType entity.
	// It exists in this package in order to avoid circular dependency with the "equipmentporttype" package.
	EquipmentPortTypeInverseTable = "equipment_port_types"
	// EquipmentPortTypeColumn is the table column denoting the equipment_port_type relation/edge.
	EquipmentPortTypeColumn = "equipment_port_definition_equipment_port_type"
	// PortsTable is the table the holds the ports relation/edge.
	PortsTable = "equipment_ports"
	// PortsInverseTable is the table name for the EquipmentPort entity.
	// It exists in this package in order to avoid circular dependency with the "equipmentport" package.
	PortsInverseTable = "equipment_ports"
	// PortsColumn is the table column denoting the ports relation/edge.
	PortsColumn = "equipment_port_definition"
	// EquipmentTypeTable is the table the holds the equipment_type relation/edge.
	EquipmentTypeTable = "equipment_port_definitions"
	// EquipmentTypeInverseTable is the table name for the EquipmentType entity.
	// It exists in this package in order to avoid circular dependency with the "equipmenttype" package.
	EquipmentTypeInverseTable = "equipment_types"
	// EquipmentTypeColumn is the table column denoting the equipment_type relation/edge.
	EquipmentTypeColumn = "equipment_type_port_definitions"
	// ConnectedPortsTable is the table the holds the connected_ports relation/edge. The primary key declared below.
	ConnectedPortsTable = "equipment_port_definition_connected_ports"
)

// Columns holds all SQL columns for equipmentportdefinition fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldName,
	FieldIndex,
	FieldBandwidth,
	FieldVisibilityLabel,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the EquipmentPortDefinition type.
var ForeignKeys = []string{
	"equipment_port_definition_equipment_port_type",
	"equipment_type_port_definitions",
}

var (
	// ConnectedPortsPrimaryKey and ConnectedPortsColumn2 are the table columns denoting the
	// primary key for the connected_ports relation (M2M).
	ConnectedPortsPrimaryKey = []string{"equipment_port_definition_id", "connected_port_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/facebookincubator/symphony/pkg/ent/runtime"
//
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultCreateTime holds the default value on creation for the create_time field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the update_time field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	UpdateDefaultUpdateTime func() time.Time
)
