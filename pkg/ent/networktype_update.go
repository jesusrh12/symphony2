// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/formula"
	"github.com/facebookincubator/symphony/pkg/ent/networktype"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
)

// NetworkTypeUpdate is the builder for updating NetworkType entities.
type NetworkTypeUpdate struct {
	config
	hooks    []Hook
	mutation *NetworkTypeMutation
}

// Where adds a new predicate for the builder.
func (ntu *NetworkTypeUpdate) Where(ps ...predicate.NetworkType) *NetworkTypeUpdate {
	ntu.mutation.predicates = append(ntu.mutation.predicates, ps...)
	return ntu
}

// SetName sets the name field.
func (ntu *NetworkTypeUpdate) SetName(s string) *NetworkTypeUpdate {
	ntu.mutation.SetName(s)
	return ntu
}

// AddFormulaNetworkTypeFKIDs adds the formulaNetworkType_FK edge to Formula by ids.
func (ntu *NetworkTypeUpdate) AddFormulaNetworkTypeFKIDs(ids ...int) *NetworkTypeUpdate {
	ntu.mutation.AddFormulaNetworkTypeFKIDs(ids...)
	return ntu
}

// AddFormulaNetworkTypeFK adds the formulaNetworkType_FK edges to Formula.
func (ntu *NetworkTypeUpdate) AddFormulaNetworkTypeFK(f ...*Formula) *NetworkTypeUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ntu.AddFormulaNetworkTypeFKIDs(ids...)
}

// Mutation returns the NetworkTypeMutation object of the builder.
func (ntu *NetworkTypeUpdate) Mutation() *NetworkTypeMutation {
	return ntu.mutation
}

// ClearFormulaNetworkTypeFK clears all "formulaNetworkType_FK" edges to type Formula.
func (ntu *NetworkTypeUpdate) ClearFormulaNetworkTypeFK() *NetworkTypeUpdate {
	ntu.mutation.ClearFormulaNetworkTypeFK()
	return ntu
}

// RemoveFormulaNetworkTypeFKIDs removes the formulaNetworkType_FK edge to Formula by ids.
func (ntu *NetworkTypeUpdate) RemoveFormulaNetworkTypeFKIDs(ids ...int) *NetworkTypeUpdate {
	ntu.mutation.RemoveFormulaNetworkTypeFKIDs(ids...)
	return ntu
}

// RemoveFormulaNetworkTypeFK removes formulaNetworkType_FK edges to Formula.
func (ntu *NetworkTypeUpdate) RemoveFormulaNetworkTypeFK(f ...*Formula) *NetworkTypeUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ntu.RemoveFormulaNetworkTypeFKIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ntu *NetworkTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ntu.defaults()
	if len(ntu.hooks) == 0 {
		if err = ntu.check(); err != nil {
			return 0, err
		}
		affected, err = ntu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NetworkTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ntu.check(); err != nil {
				return 0, err
			}
			ntu.mutation = mutation
			affected, err = ntu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ntu.hooks) - 1; i >= 0; i-- {
			mut = ntu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ntu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ntu *NetworkTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ntu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ntu *NetworkTypeUpdate) Exec(ctx context.Context) error {
	_, err := ntu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ntu *NetworkTypeUpdate) ExecX(ctx context.Context) {
	if err := ntu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ntu *NetworkTypeUpdate) defaults() {
	if _, ok := ntu.mutation.UpdateTime(); !ok {
		v := networktype.UpdateDefaultUpdateTime()
		ntu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ntu *NetworkTypeUpdate) check() error {
	if v, ok := ntu.mutation.Name(); ok {
		if err := networktype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (ntu *NetworkTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   networktype.Table,
			Columns: networktype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: networktype.FieldID,
			},
		},
	}
	if ps := ntu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ntu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: networktype.FieldUpdateTime,
		})
	}
	if value, ok := ntu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: networktype.FieldName,
		})
	}
	if ntu.mutation.FormulaNetworkTypeFKCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networktype.FormulaNetworkTypeFKTable,
			Columns: []string{networktype.FormulaNetworkTypeFKColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: formula.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ntu.mutation.RemovedFormulaNetworkTypeFKIDs(); len(nodes) > 0 && !ntu.mutation.FormulaNetworkTypeFKCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networktype.FormulaNetworkTypeFKTable,
			Columns: []string{networktype.FormulaNetworkTypeFKColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: formula.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ntu.mutation.FormulaNetworkTypeFKIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networktype.FormulaNetworkTypeFKTable,
			Columns: []string{networktype.FormulaNetworkTypeFKColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: formula.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ntu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{networktype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// NetworkTypeUpdateOne is the builder for updating a single NetworkType entity.
type NetworkTypeUpdateOne struct {
	config
	hooks    []Hook
	mutation *NetworkTypeMutation
}

// SetName sets the name field.
func (ntuo *NetworkTypeUpdateOne) SetName(s string) *NetworkTypeUpdateOne {
	ntuo.mutation.SetName(s)
	return ntuo
}

// AddFormulaNetworkTypeFKIDs adds the formulaNetworkType_FK edge to Formula by ids.
func (ntuo *NetworkTypeUpdateOne) AddFormulaNetworkTypeFKIDs(ids ...int) *NetworkTypeUpdateOne {
	ntuo.mutation.AddFormulaNetworkTypeFKIDs(ids...)
	return ntuo
}

// AddFormulaNetworkTypeFK adds the formulaNetworkType_FK edges to Formula.
func (ntuo *NetworkTypeUpdateOne) AddFormulaNetworkTypeFK(f ...*Formula) *NetworkTypeUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ntuo.AddFormulaNetworkTypeFKIDs(ids...)
}

// Mutation returns the NetworkTypeMutation object of the builder.
func (ntuo *NetworkTypeUpdateOne) Mutation() *NetworkTypeMutation {
	return ntuo.mutation
}

// ClearFormulaNetworkTypeFK clears all "formulaNetworkType_FK" edges to type Formula.
func (ntuo *NetworkTypeUpdateOne) ClearFormulaNetworkTypeFK() *NetworkTypeUpdateOne {
	ntuo.mutation.ClearFormulaNetworkTypeFK()
	return ntuo
}

// RemoveFormulaNetworkTypeFKIDs removes the formulaNetworkType_FK edge to Formula by ids.
func (ntuo *NetworkTypeUpdateOne) RemoveFormulaNetworkTypeFKIDs(ids ...int) *NetworkTypeUpdateOne {
	ntuo.mutation.RemoveFormulaNetworkTypeFKIDs(ids...)
	return ntuo
}

// RemoveFormulaNetworkTypeFK removes formulaNetworkType_FK edges to Formula.
func (ntuo *NetworkTypeUpdateOne) RemoveFormulaNetworkTypeFK(f ...*Formula) *NetworkTypeUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ntuo.RemoveFormulaNetworkTypeFKIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (ntuo *NetworkTypeUpdateOne) Save(ctx context.Context) (*NetworkType, error) {
	var (
		err  error
		node *NetworkType
	)
	ntuo.defaults()
	if len(ntuo.hooks) == 0 {
		if err = ntuo.check(); err != nil {
			return nil, err
		}
		node, err = ntuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NetworkTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ntuo.check(); err != nil {
				return nil, err
			}
			ntuo.mutation = mutation
			node, err = ntuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ntuo.hooks) - 1; i >= 0; i-- {
			mut = ntuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ntuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ntuo *NetworkTypeUpdateOne) SaveX(ctx context.Context) *NetworkType {
	node, err := ntuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ntuo *NetworkTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ntuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ntuo *NetworkTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ntuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ntuo *NetworkTypeUpdateOne) defaults() {
	if _, ok := ntuo.mutation.UpdateTime(); !ok {
		v := networktype.UpdateDefaultUpdateTime()
		ntuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ntuo *NetworkTypeUpdateOne) check() error {
	if v, ok := ntuo.mutation.Name(); ok {
		if err := networktype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (ntuo *NetworkTypeUpdateOne) sqlSave(ctx context.Context) (_node *NetworkType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   networktype.Table,
			Columns: networktype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: networktype.FieldID,
			},
		},
	}
	id, ok := ntuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing NetworkType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ntuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: networktype.FieldUpdateTime,
		})
	}
	if value, ok := ntuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: networktype.FieldName,
		})
	}
	if ntuo.mutation.FormulaNetworkTypeFKCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networktype.FormulaNetworkTypeFKTable,
			Columns: []string{networktype.FormulaNetworkTypeFKColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: formula.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ntuo.mutation.RemovedFormulaNetworkTypeFKIDs(); len(nodes) > 0 && !ntuo.mutation.FormulaNetworkTypeFKCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networktype.FormulaNetworkTypeFKTable,
			Columns: []string{networktype.FormulaNetworkTypeFKColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: formula.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ntuo.mutation.FormulaNetworkTypeFKIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   networktype.FormulaNetworkTypeFKTable,
			Columns: []string{networktype.FormulaNetworkTypeFKColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: formula.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NetworkType{config: ntuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ntuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{networktype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
