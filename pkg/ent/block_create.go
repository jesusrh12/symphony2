// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/block"
	"github.com/facebookincubator/symphony/pkg/ent/blockinstance"
	"github.com/facebookincubator/symphony/pkg/ent/entrypoint"
	"github.com/facebookincubator/symphony/pkg/ent/exitpoint"
	"github.com/facebookincubator/symphony/pkg/ent/flow"
	"github.com/facebookincubator/symphony/pkg/ent/flowdraft"
	"github.com/facebookincubator/symphony/pkg/ent/flowexecutiontemplate"
	"github.com/facebookincubator/symphony/pkg/flowengine/flowschema"
)

// BlockCreate is the builder for creating a Block entity.
type BlockCreate struct {
	config
	mutation *BlockMutation
	hooks    []Hook
}

// SetCreateTime sets the create_time field.
func (bc *BlockCreate) SetCreateTime(t time.Time) *BlockCreate {
	bc.mutation.SetCreateTime(t)
	return bc
}

// SetNillableCreateTime sets the create_time field if the given value is not nil.
func (bc *BlockCreate) SetNillableCreateTime(t *time.Time) *BlockCreate {
	if t != nil {
		bc.SetCreateTime(*t)
	}
	return bc
}

// SetUpdateTime sets the update_time field.
func (bc *BlockCreate) SetUpdateTime(t time.Time) *BlockCreate {
	bc.mutation.SetUpdateTime(t)
	return bc
}

// SetNillableUpdateTime sets the update_time field if the given value is not nil.
func (bc *BlockCreate) SetNillableUpdateTime(t *time.Time) *BlockCreate {
	if t != nil {
		bc.SetUpdateTime(*t)
	}
	return bc
}

// SetCid sets the cid field.
func (bc *BlockCreate) SetCid(s string) *BlockCreate {
	bc.mutation.SetCid(s)
	return bc
}

// SetType sets the type field.
func (bc *BlockCreate) SetType(b block.Type) *BlockCreate {
	bc.mutation.SetType(b)
	return bc
}

// SetActionType sets the action_type field.
func (bc *BlockCreate) SetActionType(fti flowschema.ActionTypeID) *BlockCreate {
	bc.mutation.SetActionType(fti)
	return bc
}

// SetNillableActionType sets the action_type field if the given value is not nil.
func (bc *BlockCreate) SetNillableActionType(fti *flowschema.ActionTypeID) *BlockCreate {
	if fti != nil {
		bc.SetActionType(*fti)
	}
	return bc
}

// SetTriggerType sets the trigger_type field.
func (bc *BlockCreate) SetTriggerType(fti flowschema.TriggerTypeID) *BlockCreate {
	bc.mutation.SetTriggerType(fti)
	return bc
}

// SetNillableTriggerType sets the trigger_type field if the given value is not nil.
func (bc *BlockCreate) SetNillableTriggerType(fti *flowschema.TriggerTypeID) *BlockCreate {
	if fti != nil {
		bc.SetTriggerType(*fti)
	}
	return bc
}

// SetStartParamDefinitions sets the start_param_definitions field.
func (bc *BlockCreate) SetStartParamDefinitions(fd []*flowschema.VariableDefinition) *BlockCreate {
	bc.mutation.SetStartParamDefinitions(fd)
	return bc
}

// SetInputParams sets the input_params field.
func (bc *BlockCreate) SetInputParams(fe []*flowschema.VariableExpression) *BlockCreate {
	bc.mutation.SetInputParams(fe)
	return bc
}

// SetUIRepresentation sets the ui_representation field.
func (bc *BlockCreate) SetUIRepresentation(fur *flowschema.BlockUIRepresentation) *BlockCreate {
	bc.mutation.SetUIRepresentation(fur)
	return bc
}

// SetFlowID sets the flow edge to Flow by id.
func (bc *BlockCreate) SetFlowID(id int) *BlockCreate {
	bc.mutation.SetFlowID(id)
	return bc
}

// SetNillableFlowID sets the flow edge to Flow by id if the given value is not nil.
func (bc *BlockCreate) SetNillableFlowID(id *int) *BlockCreate {
	if id != nil {
		bc = bc.SetFlowID(*id)
	}
	return bc
}

// SetFlow sets the flow edge to Flow.
func (bc *BlockCreate) SetFlow(f *Flow) *BlockCreate {
	return bc.SetFlowID(f.ID)
}

// SetFlowTemplateID sets the flow_template edge to FlowExecutionTemplate by id.
func (bc *BlockCreate) SetFlowTemplateID(id int) *BlockCreate {
	bc.mutation.SetFlowTemplateID(id)
	return bc
}

// SetNillableFlowTemplateID sets the flow_template edge to FlowExecutionTemplate by id if the given value is not nil.
func (bc *BlockCreate) SetNillableFlowTemplateID(id *int) *BlockCreate {
	if id != nil {
		bc = bc.SetFlowTemplateID(*id)
	}
	return bc
}

// SetFlowTemplate sets the flow_template edge to FlowExecutionTemplate.
func (bc *BlockCreate) SetFlowTemplate(f *FlowExecutionTemplate) *BlockCreate {
	return bc.SetFlowTemplateID(f.ID)
}

// SetFlowDraftID sets the flow_draft edge to FlowDraft by id.
func (bc *BlockCreate) SetFlowDraftID(id int) *BlockCreate {
	bc.mutation.SetFlowDraftID(id)
	return bc
}

// SetNillableFlowDraftID sets the flow_draft edge to FlowDraft by id if the given value is not nil.
func (bc *BlockCreate) SetNillableFlowDraftID(id *int) *BlockCreate {
	if id != nil {
		bc = bc.SetFlowDraftID(*id)
	}
	return bc
}

// SetFlowDraft sets the flow_draft edge to FlowDraft.
func (bc *BlockCreate) SetFlowDraft(f *FlowDraft) *BlockCreate {
	return bc.SetFlowDraftID(f.ID)
}

// SetSubFlowID sets the sub_flow edge to Flow by id.
func (bc *BlockCreate) SetSubFlowID(id int) *BlockCreate {
	bc.mutation.SetSubFlowID(id)
	return bc
}

// SetNillableSubFlowID sets the sub_flow edge to Flow by id if the given value is not nil.
func (bc *BlockCreate) SetNillableSubFlowID(id *int) *BlockCreate {
	if id != nil {
		bc = bc.SetSubFlowID(*id)
	}
	return bc
}

// SetSubFlow sets the sub_flow edge to Flow.
func (bc *BlockCreate) SetSubFlow(f *Flow) *BlockCreate {
	return bc.SetSubFlowID(f.ID)
}

// AddSourceBlockIDs adds the source_block edge to Block by ids.
func (bc *BlockCreate) AddSourceBlockIDs(ids ...int) *BlockCreate {
	bc.mutation.AddSourceBlockIDs(ids...)
	return bc
}

// AddSourceBlock adds the source_block edges to Block.
func (bc *BlockCreate) AddSourceBlock(b ...*Block) *BlockCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bc.AddSourceBlockIDs(ids...)
}

// SetGotoBlockID sets the goto_block edge to Block by id.
func (bc *BlockCreate) SetGotoBlockID(id int) *BlockCreate {
	bc.mutation.SetGotoBlockID(id)
	return bc
}

// SetNillableGotoBlockID sets the goto_block edge to Block by id if the given value is not nil.
func (bc *BlockCreate) SetNillableGotoBlockID(id *int) *BlockCreate {
	if id != nil {
		bc = bc.SetGotoBlockID(*id)
	}
	return bc
}

// SetGotoBlock sets the goto_block edge to Block.
func (bc *BlockCreate) SetGotoBlock(b *Block) *BlockCreate {
	return bc.SetGotoBlockID(b.ID)
}

// AddInstanceIDs adds the instances edge to BlockInstance by ids.
func (bc *BlockCreate) AddInstanceIDs(ids ...int) *BlockCreate {
	bc.mutation.AddInstanceIDs(ids...)
	return bc
}

// AddInstances adds the instances edges to BlockInstance.
func (bc *BlockCreate) AddInstances(b ...*BlockInstance) *BlockCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bc.AddInstanceIDs(ids...)
}

// SetEntryPointID sets the entry_point edge to EntryPoint by id.
func (bc *BlockCreate) SetEntryPointID(id int) *BlockCreate {
	bc.mutation.SetEntryPointID(id)
	return bc
}

// SetNillableEntryPointID sets the entry_point edge to EntryPoint by id if the given value is not nil.
func (bc *BlockCreate) SetNillableEntryPointID(id *int) *BlockCreate {
	if id != nil {
		bc = bc.SetEntryPointID(*id)
	}
	return bc
}

// SetEntryPoint sets the entry_point edge to EntryPoint.
func (bc *BlockCreate) SetEntryPoint(e *EntryPoint) *BlockCreate {
	return bc.SetEntryPointID(e.ID)
}

// AddExitPointIDs adds the exit_points edge to ExitPoint by ids.
func (bc *BlockCreate) AddExitPointIDs(ids ...int) *BlockCreate {
	bc.mutation.AddExitPointIDs(ids...)
	return bc
}

// AddExitPoints adds the exit_points edges to ExitPoint.
func (bc *BlockCreate) AddExitPoints(e ...*ExitPoint) *BlockCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return bc.AddExitPointIDs(ids...)
}

// Mutation returns the BlockMutation object of the builder.
func (bc *BlockCreate) Mutation() *BlockMutation {
	return bc.mutation
}

// Save creates the Block in the database.
func (bc *BlockCreate) Save(ctx context.Context) (*Block, error) {
	var (
		err  error
		node *Block
	)
	bc.defaults()
	if len(bc.hooks) == 0 {
		if err = bc.check(); err != nil {
			return nil, err
		}
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlockMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bc.check(); err != nil {
				return nil, err
			}
			bc.mutation = mutation
			node, err = bc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			mut = bc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BlockCreate) SaveX(ctx context.Context) *Block {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (bc *BlockCreate) defaults() {
	if _, ok := bc.mutation.CreateTime(); !ok {
		v := block.DefaultCreateTime()
		bc.mutation.SetCreateTime(v)
	}
	if _, ok := bc.mutation.UpdateTime(); !ok {
		v := block.DefaultUpdateTime()
		bc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BlockCreate) check() error {
	if _, ok := bc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := bc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := bc.mutation.Cid(); !ok {
		return &ValidationError{Name: "cid", err: errors.New("ent: missing required field \"cid\"")}
	}
	if v, ok := bc.mutation.Cid(); ok {
		if err := block.CidValidator(v); err != nil {
			return &ValidationError{Name: "cid", err: fmt.Errorf("ent: validator failed for field \"cid\": %w", err)}
		}
	}
	if _, ok := bc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if v, ok := bc.mutation.GetType(); ok {
		if err := block.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if v, ok := bc.mutation.ActionType(); ok {
		if err := block.ActionTypeValidator(v); err != nil {
			return &ValidationError{Name: "action_type", err: fmt.Errorf("ent: validator failed for field \"action_type\": %w", err)}
		}
	}
	if v, ok := bc.mutation.TriggerType(); ok {
		if err := block.TriggerTypeValidator(v); err != nil {
			return &ValidationError{Name: "trigger_type", err: fmt.Errorf("ent: validator failed for field \"trigger_type\": %w", err)}
		}
	}
	return nil
}

func (bc *BlockCreate) sqlSave(ctx context.Context) (*Block, error) {
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (bc *BlockCreate) createSpec() (*Block, *sqlgraph.CreateSpec) {
	var (
		_node = &Block{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: block.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: block.FieldID,
			},
		}
	)
	if value, ok := bc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: block.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := bc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: block.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := bc.mutation.Cid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: block.FieldCid,
		})
		_node.Cid = value
	}
	if value, ok := bc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: block.FieldType,
		})
		_node.Type = value
	}
	if value, ok := bc.mutation.ActionType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: block.FieldActionType,
		})
		_node.ActionType = &value
	}
	if value, ok := bc.mutation.TriggerType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: block.FieldTriggerType,
		})
		_node.TriggerType = &value
	}
	if value, ok := bc.mutation.StartParamDefinitions(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: block.FieldStartParamDefinitions,
		})
		_node.StartParamDefinitions = value
	}
	if value, ok := bc.mutation.InputParams(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: block.FieldInputParams,
		})
		_node.InputParams = value
	}
	if value, ok := bc.mutation.UIRepresentation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: block.FieldUIRepresentation,
		})
		_node.UIRepresentation = value
	}
	if nodes := bc.mutation.FlowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   block.FlowTable,
			Columns: []string{block.FlowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.FlowTemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   block.FlowTemplateTable,
			Columns: []string{block.FlowTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowexecutiontemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.FlowDraftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   block.FlowDraftTable,
			Columns: []string{block.FlowDraftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowdraft.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.SubFlowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   block.SubFlowTable,
			Columns: []string{block.SubFlowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.SourceBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   block.SourceBlockTable,
			Columns: []string{block.SourceBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.GotoBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   block.GotoBlockTable,
			Columns: []string{block.GotoBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.InstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   block.InstancesTable,
			Columns: []string{block.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: blockinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.EntryPointIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   block.EntryPointTable,
			Columns: []string{block.EntryPointColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entrypoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.ExitPointsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   block.ExitPointsTable,
			Columns: []string{block.ExitPointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: exitpoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BlockCreateBulk is the builder for creating a bulk of Block entities.
type BlockCreateBulk struct {
	config
	builders []*BlockCreate
}

// Save creates the Block entities in the database.
func (bcb *BlockCreateBulk) Save(ctx context.Context) ([]*Block, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Block, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlockMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (bcb *BlockCreateBulk) SaveX(ctx context.Context) []*Block {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
