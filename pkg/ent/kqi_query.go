// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/kqi"
	"github.com/facebookincubator/symphony/pkg/ent/kqicategory"
	"github.com/facebookincubator/symphony/pkg/ent/kqiperspective"
	"github.com/facebookincubator/symphony/pkg/ent/kqisource"
	"github.com/facebookincubator/symphony/pkg/ent/kqitarget"
	"github.com/facebookincubator/symphony/pkg/ent/kqitemporalfrequency"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
)

// KqiQuery is the builder for querying Kqi entities.
type KqiQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.Kqi
	// eager-loading edges.
	withKqiCategoryFk          *KqiCategoryQuery
	withKqiPerspectiveFk       *KqiPerspectiveQuery
	withKqiSourceFk            *KqiSourceQuery
	withKqiTemporalFrequencyFk *KqiTemporalFrequencyQuery
	withKqiTargetFk            *KqiTargetQuery
	withFKs                    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (kq *KqiQuery) Where(ps ...predicate.Kqi) *KqiQuery {
	kq.predicates = append(kq.predicates, ps...)
	return kq
}

// Limit adds a limit step to the query.
func (kq *KqiQuery) Limit(limit int) *KqiQuery {
	kq.limit = &limit
	return kq
}

// Offset adds an offset step to the query.
func (kq *KqiQuery) Offset(offset int) *KqiQuery {
	kq.offset = &offset
	return kq
}

// Order adds an order step to the query.
func (kq *KqiQuery) Order(o ...OrderFunc) *KqiQuery {
	kq.order = append(kq.order, o...)
	return kq
}

// QueryKqiCategoryFk chains the current query on the kqiCategoryFk edge.
func (kq *KqiQuery) QueryKqiCategoryFk() *KqiCategoryQuery {
	query := &KqiCategoryQuery{config: kq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kqi.Table, kqi.FieldID, selector),
			sqlgraph.To(kqicategory.Table, kqicategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kqi.KqiCategoryFkTable, kqi.KqiCategoryFkColumn),
		)
		fromU = sqlgraph.SetNeighbors(kq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryKqiPerspectiveFk chains the current query on the kqiPerspectiveFk edge.
func (kq *KqiQuery) QueryKqiPerspectiveFk() *KqiPerspectiveQuery {
	query := &KqiPerspectiveQuery{config: kq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kqi.Table, kqi.FieldID, selector),
			sqlgraph.To(kqiperspective.Table, kqiperspective.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kqi.KqiPerspectiveFkTable, kqi.KqiPerspectiveFkColumn),
		)
		fromU = sqlgraph.SetNeighbors(kq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryKqiSourceFk chains the current query on the kqiSourceFk edge.
func (kq *KqiQuery) QueryKqiSourceFk() *KqiSourceQuery {
	query := &KqiSourceQuery{config: kq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kqi.Table, kqi.FieldID, selector),
			sqlgraph.To(kqisource.Table, kqisource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kqi.KqiSourceFkTable, kqi.KqiSourceFkColumn),
		)
		fromU = sqlgraph.SetNeighbors(kq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryKqiTemporalFrequencyFk chains the current query on the kqiTemporalFrequencyFk edge.
func (kq *KqiQuery) QueryKqiTemporalFrequencyFk() *KqiTemporalFrequencyQuery {
	query := &KqiTemporalFrequencyQuery{config: kq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kqi.Table, kqi.FieldID, selector),
			sqlgraph.To(kqitemporalfrequency.Table, kqitemporalfrequency.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, kqi.KqiTemporalFrequencyFkTable, kqi.KqiTemporalFrequencyFkColumn),
		)
		fromU = sqlgraph.SetNeighbors(kq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryKqiTargetFk chains the current query on the kqiTargetFk edge.
func (kq *KqiQuery) QueryKqiTargetFk() *KqiTargetQuery {
	query := &KqiTargetQuery{config: kq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(kqi.Table, kqi.FieldID, selector),
			sqlgraph.To(kqitarget.Table, kqitarget.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, kqi.KqiTargetFkTable, kqi.KqiTargetFkColumn),
		)
		fromU = sqlgraph.SetNeighbors(kq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Kqi entity in the query. Returns *NotFoundError when no kqi was found.
func (kq *KqiQuery) First(ctx context.Context) (*Kqi, error) {
	nodes, err := kq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{kqi.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (kq *KqiQuery) FirstX(ctx context.Context) *Kqi {
	node, err := kq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Kqi id in the query. Returns *NotFoundError when no id was found.
func (kq *KqiQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = kq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{kqi.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (kq *KqiQuery) FirstIDX(ctx context.Context) int {
	id, err := kq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only Kqi entity in the query, returns an error if not exactly one entity was returned.
func (kq *KqiQuery) Only(ctx context.Context) (*Kqi, error) {
	nodes, err := kq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{kqi.Label}
	default:
		return nil, &NotSingularError{kqi.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (kq *KqiQuery) OnlyX(ctx context.Context) *Kqi {
	node, err := kq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only Kqi id in the query, returns an error if not exactly one id was returned.
func (kq *KqiQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = kq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{kqi.Label}
	default:
		err = &NotSingularError{kqi.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (kq *KqiQuery) OnlyIDX(ctx context.Context) int {
	id, err := kq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Kqis.
func (kq *KqiQuery) All(ctx context.Context) ([]*Kqi, error) {
	if err := kq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return kq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (kq *KqiQuery) AllX(ctx context.Context) []*Kqi {
	nodes, err := kq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Kqi ids.
func (kq *KqiQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := kq.Select(kqi.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (kq *KqiQuery) IDsX(ctx context.Context) []int {
	ids, err := kq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (kq *KqiQuery) Count(ctx context.Context) (int, error) {
	if err := kq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return kq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (kq *KqiQuery) CountX(ctx context.Context) int {
	count, err := kq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (kq *KqiQuery) Exist(ctx context.Context) (bool, error) {
	if err := kq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return kq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (kq *KqiQuery) ExistX(ctx context.Context) bool {
	exist, err := kq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (kq *KqiQuery) Clone() *KqiQuery {
	if kq == nil {
		return nil
	}
	return &KqiQuery{
		config:                     kq.config,
		limit:                      kq.limit,
		offset:                     kq.offset,
		order:                      append([]OrderFunc{}, kq.order...),
		unique:                     append([]string{}, kq.unique...),
		predicates:                 append([]predicate.Kqi{}, kq.predicates...),
		withKqiCategoryFk:          kq.withKqiCategoryFk.Clone(),
		withKqiPerspectiveFk:       kq.withKqiPerspectiveFk.Clone(),
		withKqiSourceFk:            kq.withKqiSourceFk.Clone(),
		withKqiTemporalFrequencyFk: kq.withKqiTemporalFrequencyFk.Clone(),
		withKqiTargetFk:            kq.withKqiTargetFk.Clone(),
		// clone intermediate query.
		sql:  kq.sql.Clone(),
		path: kq.path,
	}
}

//  WithKqiCategoryFk tells the query-builder to eager-loads the nodes that are connected to
// the "kqiCategoryFk" edge. The optional arguments used to configure the query builder of the edge.
func (kq *KqiQuery) WithKqiCategoryFk(opts ...func(*KqiCategoryQuery)) *KqiQuery {
	query := &KqiCategoryQuery{config: kq.config}
	for _, opt := range opts {
		opt(query)
	}
	kq.withKqiCategoryFk = query
	return kq
}

//  WithKqiPerspectiveFk tells the query-builder to eager-loads the nodes that are connected to
// the "kqiPerspectiveFk" edge. The optional arguments used to configure the query builder of the edge.
func (kq *KqiQuery) WithKqiPerspectiveFk(opts ...func(*KqiPerspectiveQuery)) *KqiQuery {
	query := &KqiPerspectiveQuery{config: kq.config}
	for _, opt := range opts {
		opt(query)
	}
	kq.withKqiPerspectiveFk = query
	return kq
}

//  WithKqiSourceFk tells the query-builder to eager-loads the nodes that are connected to
// the "kqiSourceFk" edge. The optional arguments used to configure the query builder of the edge.
func (kq *KqiQuery) WithKqiSourceFk(opts ...func(*KqiSourceQuery)) *KqiQuery {
	query := &KqiSourceQuery{config: kq.config}
	for _, opt := range opts {
		opt(query)
	}
	kq.withKqiSourceFk = query
	return kq
}

//  WithKqiTemporalFrequencyFk tells the query-builder to eager-loads the nodes that are connected to
// the "kqiTemporalFrequencyFk" edge. The optional arguments used to configure the query builder of the edge.
func (kq *KqiQuery) WithKqiTemporalFrequencyFk(opts ...func(*KqiTemporalFrequencyQuery)) *KqiQuery {
	query := &KqiTemporalFrequencyQuery{config: kq.config}
	for _, opt := range opts {
		opt(query)
	}
	kq.withKqiTemporalFrequencyFk = query
	return kq
}

//  WithKqiTargetFk tells the query-builder to eager-loads the nodes that are connected to
// the "kqiTargetFk" edge. The optional arguments used to configure the query builder of the edge.
func (kq *KqiQuery) WithKqiTargetFk(opts ...func(*KqiTargetQuery)) *KqiQuery {
	query := &KqiTargetQuery{config: kq.config}
	for _, opt := range opts {
		opt(query)
	}
	kq.withKqiTargetFk = query
	return kq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Kqi.Query().
//		GroupBy(kqi.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (kq *KqiQuery) GroupBy(field string, fields ...string) *KqiGroupBy {
	group := &KqiGroupBy{config: kq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := kq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return kq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.Kqi.Query().
//		Select(kqi.FieldCreateTime).
//		Scan(ctx, &v)
//
func (kq *KqiQuery) Select(field string, fields ...string) *KqiSelect {
	selector := &KqiSelect{config: kq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := kq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return kq.sqlQuery(), nil
	}
	return selector
}

func (kq *KqiQuery) prepareQuery(ctx context.Context) error {
	if kq.path != nil {
		prev, err := kq.path(ctx)
		if err != nil {
			return err
		}
		kq.sql = prev
	}
	if err := kqi.Policy.EvalQuery(ctx, kq); err != nil {
		return err
	}
	return nil
}

func (kq *KqiQuery) sqlAll(ctx context.Context) ([]*Kqi, error) {
	var (
		nodes       = []*Kqi{}
		withFKs     = kq.withFKs
		_spec       = kq.querySpec()
		loadedTypes = [5]bool{
			kq.withKqiCategoryFk != nil,
			kq.withKqiPerspectiveFk != nil,
			kq.withKqiSourceFk != nil,
			kq.withKqiTemporalFrequencyFk != nil,
			kq.withKqiTargetFk != nil,
		}
	)
	if kq.withKqiCategoryFk != nil || kq.withKqiPerspectiveFk != nil || kq.withKqiSourceFk != nil || kq.withKqiTemporalFrequencyFk != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, kqi.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &Kqi{config: kq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, kq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := kq.withKqiCategoryFk; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Kqi)
		for i := range nodes {
			if fk := nodes[i].kqi_category_kqi_category_fk; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(kqicategory.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "kqi_category_kqi_category_fk" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.KqiCategoryFk = n
			}
		}
	}

	if query := kq.withKqiPerspectiveFk; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Kqi)
		for i := range nodes {
			if fk := nodes[i].kqi_perspective_kqi_perspective_fk; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(kqiperspective.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "kqi_perspective_kqi_perspective_fk" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.KqiPerspectiveFk = n
			}
		}
	}

	if query := kq.withKqiSourceFk; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Kqi)
		for i := range nodes {
			if fk := nodes[i].kqi_source_kqi_source_fk; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(kqisource.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "kqi_source_kqi_source_fk" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.KqiSourceFk = n
			}
		}
	}

	if query := kq.withKqiTemporalFrequencyFk; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Kqi)
		for i := range nodes {
			if fk := nodes[i].kqi_temporal_frequency_kqi_temporal_frequency_fk; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(kqitemporalfrequency.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "kqi_temporal_frequency_kqi_temporal_frequency_fk" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.KqiTemporalFrequencyFk = n
			}
		}
	}

	if query := kq.withKqiTargetFk; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Kqi)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.KqiTargetFk = []*KqiTarget{}
		}
		query.withFKs = true
		query.Where(predicate.KqiTarget(func(s *sql.Selector) {
			s.Where(sql.InValues(kqi.KqiTargetFkColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.kqi_kqi_target_fk
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "kqi_kqi_target_fk" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "kqi_kqi_target_fk" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.KqiTargetFk = append(node.Edges.KqiTargetFk, n)
		}
	}

	return nodes, nil
}

func (kq *KqiQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := kq.querySpec()
	return sqlgraph.CountNodes(ctx, kq.driver, _spec)
}

func (kq *KqiQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := kq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (kq *KqiQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kqi.Table,
			Columns: kqi.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kqi.FieldID,
			},
		},
		From:   kq.sql,
		Unique: true,
	}
	if ps := kq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := kq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := kq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := kq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, kqi.ValidColumn)
			}
		}
	}
	return _spec
}

func (kq *KqiQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(kq.driver.Dialect())
	t1 := builder.Table(kqi.Table)
	selector := builder.Select(t1.Columns(kqi.Columns...)...).From(t1)
	if kq.sql != nil {
		selector = kq.sql
		selector.Select(selector.Columns(kqi.Columns...)...)
	}
	for _, p := range kq.predicates {
		p(selector)
	}
	for _, p := range kq.order {
		p(selector, kqi.ValidColumn)
	}
	if offset := kq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := kq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// KqiGroupBy is the builder for group-by Kqi entities.
type KqiGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (kgb *KqiGroupBy) Aggregate(fns ...AggregateFunc) *KqiGroupBy {
	kgb.fns = append(kgb.fns, fns...)
	return kgb
}

// Scan applies the group-by query and scan the result into the given value.
func (kgb *KqiGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := kgb.path(ctx)
	if err != nil {
		return err
	}
	kgb.sql = query
	return kgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (kgb *KqiGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := kgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (kgb *KqiGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(kgb.fields) > 1 {
		return nil, errors.New("ent: KqiGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := kgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (kgb *KqiGroupBy) StringsX(ctx context.Context) []string {
	v, err := kgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (kgb *KqiGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = kgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kqi.Label}
	default:
		err = fmt.Errorf("ent: KqiGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (kgb *KqiGroupBy) StringX(ctx context.Context) string {
	v, err := kgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (kgb *KqiGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(kgb.fields) > 1 {
		return nil, errors.New("ent: KqiGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := kgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (kgb *KqiGroupBy) IntsX(ctx context.Context) []int {
	v, err := kgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (kgb *KqiGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = kgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kqi.Label}
	default:
		err = fmt.Errorf("ent: KqiGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (kgb *KqiGroupBy) IntX(ctx context.Context) int {
	v, err := kgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (kgb *KqiGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(kgb.fields) > 1 {
		return nil, errors.New("ent: KqiGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := kgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (kgb *KqiGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := kgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (kgb *KqiGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = kgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kqi.Label}
	default:
		err = fmt.Errorf("ent: KqiGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (kgb *KqiGroupBy) Float64X(ctx context.Context) float64 {
	v, err := kgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (kgb *KqiGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(kgb.fields) > 1 {
		return nil, errors.New("ent: KqiGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := kgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (kgb *KqiGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := kgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (kgb *KqiGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = kgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kqi.Label}
	default:
		err = fmt.Errorf("ent: KqiGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (kgb *KqiGroupBy) BoolX(ctx context.Context) bool {
	v, err := kgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (kgb *KqiGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range kgb.fields {
		if !kqi.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := kgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := kgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (kgb *KqiGroupBy) sqlQuery() *sql.Selector {
	selector := kgb.sql
	columns := make([]string, 0, len(kgb.fields)+len(kgb.fns))
	columns = append(columns, kgb.fields...)
	for _, fn := range kgb.fns {
		columns = append(columns, fn(selector, kqi.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(kgb.fields...)
}

// KqiSelect is the builder for select fields of Kqi entities.
type KqiSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (ks *KqiSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := ks.path(ctx)
	if err != nil {
		return err
	}
	ks.sql = query
	return ks.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ks *KqiSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ks.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (ks *KqiSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ks.fields) > 1 {
		return nil, errors.New("ent: KqiSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ks.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ks *KqiSelect) StringsX(ctx context.Context) []string {
	v, err := ks.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (ks *KqiSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ks.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kqi.Label}
	default:
		err = fmt.Errorf("ent: KqiSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ks *KqiSelect) StringX(ctx context.Context) string {
	v, err := ks.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (ks *KqiSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ks.fields) > 1 {
		return nil, errors.New("ent: KqiSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ks.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ks *KqiSelect) IntsX(ctx context.Context) []int {
	v, err := ks.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (ks *KqiSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ks.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kqi.Label}
	default:
		err = fmt.Errorf("ent: KqiSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ks *KqiSelect) IntX(ctx context.Context) int {
	v, err := ks.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (ks *KqiSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ks.fields) > 1 {
		return nil, errors.New("ent: KqiSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ks.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ks *KqiSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ks.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (ks *KqiSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ks.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kqi.Label}
	default:
		err = fmt.Errorf("ent: KqiSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ks *KqiSelect) Float64X(ctx context.Context) float64 {
	v, err := ks.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (ks *KqiSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ks.fields) > 1 {
		return nil, errors.New("ent: KqiSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ks.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ks *KqiSelect) BoolsX(ctx context.Context) []bool {
	v, err := ks.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (ks *KqiSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ks.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{kqi.Label}
	default:
		err = fmt.Errorf("ent: KqiSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ks *KqiSelect) BoolX(ctx context.Context) bool {
	v, err := ks.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ks *KqiSelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ks.fields {
		if !kqi.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := ks.sqlQuery().Query()
	if err := ks.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ks *KqiSelect) sqlQuery() sql.Querier {
	selector := ks.sql
	selector.Select(selector.Columns(ks.fields...)...)
	return selector
}
