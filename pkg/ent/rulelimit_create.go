// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/comparator"
	"github.com/facebookincubator/symphony/pkg/ent/rule"
	"github.com/facebookincubator/symphony/pkg/ent/rulelimit"
)

// RuleLimitCreate is the builder for creating a RuleLimit entity.
type RuleLimitCreate struct {
	config
	mutation *RuleLimitMutation
	hooks    []Hook
}

// SetCreateTime sets the create_time field.
func (rlc *RuleLimitCreate) SetCreateTime(t time.Time) *RuleLimitCreate {
	rlc.mutation.SetCreateTime(t)
	return rlc
}

// SetNillableCreateTime sets the create_time field if the given value is not nil.
func (rlc *RuleLimitCreate) SetNillableCreateTime(t *time.Time) *RuleLimitCreate {
	if t != nil {
		rlc.SetCreateTime(*t)
	}
	return rlc
}

// SetUpdateTime sets the update_time field.
func (rlc *RuleLimitCreate) SetUpdateTime(t time.Time) *RuleLimitCreate {
	rlc.mutation.SetUpdateTime(t)
	return rlc
}

// SetNillableUpdateTime sets the update_time field if the given value is not nil.
func (rlc *RuleLimitCreate) SetNillableUpdateTime(t *time.Time) *RuleLimitCreate {
	if t != nil {
		rlc.SetUpdateTime(*t)
	}
	return rlc
}

// SetNumber sets the number field.
func (rlc *RuleLimitCreate) SetNumber(i int) *RuleLimitCreate {
	rlc.mutation.SetNumber(i)
	return rlc
}

// SetLimitType sets the limitType field.
func (rlc *RuleLimitCreate) SetLimitType(s string) *RuleLimitCreate {
	rlc.mutation.SetLimitType(s)
	return rlc
}

// SetComparatorID sets the comparator edge to Comparator by id.
func (rlc *RuleLimitCreate) SetComparatorID(id int) *RuleLimitCreate {
	rlc.mutation.SetComparatorID(id)
	return rlc
}

// SetNillableComparatorID sets the comparator edge to Comparator by id if the given value is not nil.
func (rlc *RuleLimitCreate) SetNillableComparatorID(id *int) *RuleLimitCreate {
	if id != nil {
		rlc = rlc.SetComparatorID(*id)
	}
	return rlc
}

// SetComparator sets the comparator edge to Comparator.
func (rlc *RuleLimitCreate) SetComparator(c *Comparator) *RuleLimitCreate {
	return rlc.SetComparatorID(c.ID)
}

// SetRuleID sets the rule edge to Rule by id.
func (rlc *RuleLimitCreate) SetRuleID(id int) *RuleLimitCreate {
	rlc.mutation.SetRuleID(id)
	return rlc
}

// SetNillableRuleID sets the rule edge to Rule by id if the given value is not nil.
func (rlc *RuleLimitCreate) SetNillableRuleID(id *int) *RuleLimitCreate {
	if id != nil {
		rlc = rlc.SetRuleID(*id)
	}
	return rlc
}

// SetRule sets the rule edge to Rule.
func (rlc *RuleLimitCreate) SetRule(r *Rule) *RuleLimitCreate {
	return rlc.SetRuleID(r.ID)
}

// Mutation returns the RuleLimitMutation object of the builder.
func (rlc *RuleLimitCreate) Mutation() *RuleLimitMutation {
	return rlc.mutation
}

// Save creates the RuleLimit in the database.
func (rlc *RuleLimitCreate) Save(ctx context.Context) (*RuleLimit, error) {
	var (
		err  error
		node *RuleLimit
	)
	rlc.defaults()
	if len(rlc.hooks) == 0 {
		if err = rlc.check(); err != nil {
			return nil, err
		}
		node, err = rlc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RuleLimitMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rlc.check(); err != nil {
				return nil, err
			}
			rlc.mutation = mutation
			node, err = rlc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rlc.hooks) - 1; i >= 0; i-- {
			mut = rlc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rlc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rlc *RuleLimitCreate) SaveX(ctx context.Context) *RuleLimit {
	v, err := rlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (rlc *RuleLimitCreate) defaults() {
	if _, ok := rlc.mutation.CreateTime(); !ok {
		v := rulelimit.DefaultCreateTime()
		rlc.mutation.SetCreateTime(v)
	}
	if _, ok := rlc.mutation.UpdateTime(); !ok {
		v := rulelimit.DefaultUpdateTime()
		rlc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rlc *RuleLimitCreate) check() error {
	if _, ok := rlc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := rlc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := rlc.mutation.Number(); !ok {
		return &ValidationError{Name: "number", err: errors.New("ent: missing required field \"number\"")}
	}
	if _, ok := rlc.mutation.LimitType(); !ok {
		return &ValidationError{Name: "limitType", err: errors.New("ent: missing required field \"limitType\"")}
	}
	if v, ok := rlc.mutation.LimitType(); ok {
		if err := rulelimit.LimitTypeValidator(v); err != nil {
			return &ValidationError{Name: "limitType", err: fmt.Errorf("ent: validator failed for field \"limitType\": %w", err)}
		}
	}
	return nil
}

func (rlc *RuleLimitCreate) sqlSave(ctx context.Context) (*RuleLimit, error) {
	_node, _spec := rlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rlc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rlc *RuleLimitCreate) createSpec() (*RuleLimit, *sqlgraph.CreateSpec) {
	var (
		_node = &RuleLimit{config: rlc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: rulelimit.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rulelimit.FieldID,
			},
		}
	)
	if value, ok := rlc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rulelimit.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := rlc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rulelimit.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := rlc.mutation.Number(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rulelimit.FieldNumber,
		})
		_node.Number = value
	}
	if value, ok := rlc.mutation.LimitType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rulelimit.FieldLimitType,
		})
		_node.LimitType = value
	}
	if nodes := rlc.mutation.ComparatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rulelimit.ComparatorTable,
			Columns: []string{rulelimit.ComparatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comparator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rlc.mutation.RuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rulelimit.RuleTable,
			Columns: []string{rulelimit.RuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RuleLimitCreateBulk is the builder for creating a bulk of RuleLimit entities.
type RuleLimitCreateBulk struct {
	config
	builders []*RuleLimitCreate
}

// Save creates the RuleLimit entities in the database.
func (rlcb *RuleLimitCreateBulk) Save(ctx context.Context) ([]*RuleLimit, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rlcb.builders))
	nodes := make([]*RuleLimit, len(rlcb.builders))
	mutators := make([]Mutator, len(rlcb.builders))
	for i := range rlcb.builders {
		func(i int, root context.Context) {
			builder := rlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RuleLimitMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rlcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rlcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (rlcb *RuleLimitCreateBulk) SaveX(ctx context.Context) []*RuleLimit {
	v, err := rlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
