// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/comparator"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/rule"
	"github.com/facebookincubator/symphony/pkg/ent/rulelimit"
)

// RuleLimitQuery is the builder for querying RuleLimit entities.
type RuleLimitQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.RuleLimit
	// eager-loading edges.
	withComparator *ComparatorQuery
	withRule       *RuleQuery
	withFKs        bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (rlq *RuleLimitQuery) Where(ps ...predicate.RuleLimit) *RuleLimitQuery {
	rlq.predicates = append(rlq.predicates, ps...)
	return rlq
}

// Limit adds a limit step to the query.
func (rlq *RuleLimitQuery) Limit(limit int) *RuleLimitQuery {
	rlq.limit = &limit
	return rlq
}

// Offset adds an offset step to the query.
func (rlq *RuleLimitQuery) Offset(offset int) *RuleLimitQuery {
	rlq.offset = &offset
	return rlq
}

// Order adds an order step to the query.
func (rlq *RuleLimitQuery) Order(o ...OrderFunc) *RuleLimitQuery {
	rlq.order = append(rlq.order, o...)
	return rlq
}

// QueryComparator chains the current query on the comparator edge.
func (rlq *RuleLimitQuery) QueryComparator() *ComparatorQuery {
	query := &ComparatorQuery{config: rlq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rlq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rulelimit.Table, rulelimit.FieldID, selector),
			sqlgraph.To(comparator.Table, comparator.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rulelimit.ComparatorTable, rulelimit.ComparatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(rlq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRule chains the current query on the rule edge.
func (rlq *RuleLimitQuery) QueryRule() *RuleQuery {
	query := &RuleQuery{config: rlq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rlq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rulelimit.Table, rulelimit.FieldID, selector),
			sqlgraph.To(rule.Table, rule.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rulelimit.RuleTable, rulelimit.RuleColumn),
		)
		fromU = sqlgraph.SetNeighbors(rlq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RuleLimit entity in the query. Returns *NotFoundError when no rulelimit was found.
func (rlq *RuleLimitQuery) First(ctx context.Context) (*RuleLimit, error) {
	nodes, err := rlq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{rulelimit.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rlq *RuleLimitQuery) FirstX(ctx context.Context) *RuleLimit {
	node, err := rlq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RuleLimit id in the query. Returns *NotFoundError when no id was found.
func (rlq *RuleLimitQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rlq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{rulelimit.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rlq *RuleLimitQuery) FirstIDX(ctx context.Context) int {
	id, err := rlq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only RuleLimit entity in the query, returns an error if not exactly one entity was returned.
func (rlq *RuleLimitQuery) Only(ctx context.Context) (*RuleLimit, error) {
	nodes, err := rlq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{rulelimit.Label}
	default:
		return nil, &NotSingularError{rulelimit.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rlq *RuleLimitQuery) OnlyX(ctx context.Context) *RuleLimit {
	node, err := rlq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only RuleLimit id in the query, returns an error if not exactly one id was returned.
func (rlq *RuleLimitQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rlq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{rulelimit.Label}
	default:
		err = &NotSingularError{rulelimit.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rlq *RuleLimitQuery) OnlyIDX(ctx context.Context) int {
	id, err := rlq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RuleLimits.
func (rlq *RuleLimitQuery) All(ctx context.Context) ([]*RuleLimit, error) {
	if err := rlq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return rlq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (rlq *RuleLimitQuery) AllX(ctx context.Context) []*RuleLimit {
	nodes, err := rlq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RuleLimit ids.
func (rlq *RuleLimitQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := rlq.Select(rulelimit.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rlq *RuleLimitQuery) IDsX(ctx context.Context) []int {
	ids, err := rlq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rlq *RuleLimitQuery) Count(ctx context.Context) (int, error) {
	if err := rlq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return rlq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (rlq *RuleLimitQuery) CountX(ctx context.Context) int {
	count, err := rlq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rlq *RuleLimitQuery) Exist(ctx context.Context) (bool, error) {
	if err := rlq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return rlq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (rlq *RuleLimitQuery) ExistX(ctx context.Context) bool {
	exist, err := rlq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rlq *RuleLimitQuery) Clone() *RuleLimitQuery {
	if rlq == nil {
		return nil
	}
	return &RuleLimitQuery{
		config:         rlq.config,
		limit:          rlq.limit,
		offset:         rlq.offset,
		order:          append([]OrderFunc{}, rlq.order...),
		unique:         append([]string{}, rlq.unique...),
		predicates:     append([]predicate.RuleLimit{}, rlq.predicates...),
		withComparator: rlq.withComparator.Clone(),
		withRule:       rlq.withRule.Clone(),
		// clone intermediate query.
		sql:  rlq.sql.Clone(),
		path: rlq.path,
	}
}

//  WithComparator tells the query-builder to eager-loads the nodes that are connected to
// the "comparator" edge. The optional arguments used to configure the query builder of the edge.
func (rlq *RuleLimitQuery) WithComparator(opts ...func(*ComparatorQuery)) *RuleLimitQuery {
	query := &ComparatorQuery{config: rlq.config}
	for _, opt := range opts {
		opt(query)
	}
	rlq.withComparator = query
	return rlq
}

//  WithRule tells the query-builder to eager-loads the nodes that are connected to
// the "rule" edge. The optional arguments used to configure the query builder of the edge.
func (rlq *RuleLimitQuery) WithRule(opts ...func(*RuleQuery)) *RuleLimitQuery {
	query := &RuleQuery{config: rlq.config}
	for _, opt := range opts {
		opt(query)
	}
	rlq.withRule = query
	return rlq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RuleLimit.Query().
//		GroupBy(rulelimit.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (rlq *RuleLimitQuery) GroupBy(field string, fields ...string) *RuleLimitGroupBy {
	group := &RuleLimitGroupBy{config: rlq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rlq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.RuleLimit.Query().
//		Select(rulelimit.FieldCreateTime).
//		Scan(ctx, &v)
//
func (rlq *RuleLimitQuery) Select(field string, fields ...string) *RuleLimitSelect {
	selector := &RuleLimitSelect{config: rlq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rlq.sqlQuery(), nil
	}
	return selector
}

func (rlq *RuleLimitQuery) prepareQuery(ctx context.Context) error {
	if rlq.path != nil {
		prev, err := rlq.path(ctx)
		if err != nil {
			return err
		}
		rlq.sql = prev
	}
	if err := rulelimit.Policy.EvalQuery(ctx, rlq); err != nil {
		return err
	}
	return nil
}

func (rlq *RuleLimitQuery) sqlAll(ctx context.Context) ([]*RuleLimit, error) {
	var (
		nodes       = []*RuleLimit{}
		withFKs     = rlq.withFKs
		_spec       = rlq.querySpec()
		loadedTypes = [2]bool{
			rlq.withComparator != nil,
			rlq.withRule != nil,
		}
	)
	if rlq.withComparator != nil || rlq.withRule != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, rulelimit.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &RuleLimit{config: rlq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, rlq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := rlq.withComparator; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*RuleLimit)
		for i := range nodes {
			if fk := nodes[i].comparator_comparatorrulelimit; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(comparator.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "comparator_comparatorrulelimit" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Comparator = n
			}
		}
	}

	if query := rlq.withRule; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*RuleLimit)
		for i := range nodes {
			if fk := nodes[i].rule_rulelimitrule; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(rule.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "rule_rulelimitrule" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Rule = n
			}
		}
	}

	return nodes, nil
}

func (rlq *RuleLimitQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rlq.querySpec()
	return sqlgraph.CountNodes(ctx, rlq.driver, _spec)
}

func (rlq *RuleLimitQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := rlq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (rlq *RuleLimitQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rulelimit.Table,
			Columns: rulelimit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rulelimit.FieldID,
			},
		},
		From:   rlq.sql,
		Unique: true,
	}
	if ps := rlq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rlq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rlq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rlq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, rulelimit.ValidColumn)
			}
		}
	}
	return _spec
}

func (rlq *RuleLimitQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(rlq.driver.Dialect())
	t1 := builder.Table(rulelimit.Table)
	selector := builder.Select(t1.Columns(rulelimit.Columns...)...).From(t1)
	if rlq.sql != nil {
		selector = rlq.sql
		selector.Select(selector.Columns(rulelimit.Columns...)...)
	}
	for _, p := range rlq.predicates {
		p(selector)
	}
	for _, p := range rlq.order {
		p(selector, rulelimit.ValidColumn)
	}
	if offset := rlq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rlq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RuleLimitGroupBy is the builder for group-by RuleLimit entities.
type RuleLimitGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rlgb *RuleLimitGroupBy) Aggregate(fns ...AggregateFunc) *RuleLimitGroupBy {
	rlgb.fns = append(rlgb.fns, fns...)
	return rlgb
}

// Scan applies the group-by query and scan the result into the given value.
func (rlgb *RuleLimitGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := rlgb.path(ctx)
	if err != nil {
		return err
	}
	rlgb.sql = query
	return rlgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rlgb *RuleLimitGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := rlgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (rlgb *RuleLimitGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(rlgb.fields) > 1 {
		return nil, errors.New("ent: RuleLimitGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := rlgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rlgb *RuleLimitGroupBy) StringsX(ctx context.Context) []string {
	v, err := rlgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (rlgb *RuleLimitGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rlgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{rulelimit.Label}
	default:
		err = fmt.Errorf("ent: RuleLimitGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rlgb *RuleLimitGroupBy) StringX(ctx context.Context) string {
	v, err := rlgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (rlgb *RuleLimitGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(rlgb.fields) > 1 {
		return nil, errors.New("ent: RuleLimitGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := rlgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rlgb *RuleLimitGroupBy) IntsX(ctx context.Context) []int {
	v, err := rlgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (rlgb *RuleLimitGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rlgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{rulelimit.Label}
	default:
		err = fmt.Errorf("ent: RuleLimitGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rlgb *RuleLimitGroupBy) IntX(ctx context.Context) int {
	v, err := rlgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (rlgb *RuleLimitGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(rlgb.fields) > 1 {
		return nil, errors.New("ent: RuleLimitGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := rlgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rlgb *RuleLimitGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := rlgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (rlgb *RuleLimitGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rlgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{rulelimit.Label}
	default:
		err = fmt.Errorf("ent: RuleLimitGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rlgb *RuleLimitGroupBy) Float64X(ctx context.Context) float64 {
	v, err := rlgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (rlgb *RuleLimitGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(rlgb.fields) > 1 {
		return nil, errors.New("ent: RuleLimitGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := rlgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rlgb *RuleLimitGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := rlgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (rlgb *RuleLimitGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rlgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{rulelimit.Label}
	default:
		err = fmt.Errorf("ent: RuleLimitGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rlgb *RuleLimitGroupBy) BoolX(ctx context.Context) bool {
	v, err := rlgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rlgb *RuleLimitGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rlgb.fields {
		if !rulelimit.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := rlgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rlgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rlgb *RuleLimitGroupBy) sqlQuery() *sql.Selector {
	selector := rlgb.sql
	columns := make([]string, 0, len(rlgb.fields)+len(rlgb.fns))
	columns = append(columns, rlgb.fields...)
	for _, fn := range rlgb.fns {
		columns = append(columns, fn(selector, rulelimit.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(rlgb.fields...)
}

// RuleLimitSelect is the builder for select fields of RuleLimit entities.
type RuleLimitSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (rls *RuleLimitSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := rls.path(ctx)
	if err != nil {
		return err
	}
	rls.sql = query
	return rls.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rls *RuleLimitSelect) ScanX(ctx context.Context, v interface{}) {
	if err := rls.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (rls *RuleLimitSelect) Strings(ctx context.Context) ([]string, error) {
	if len(rls.fields) > 1 {
		return nil, errors.New("ent: RuleLimitSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := rls.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rls *RuleLimitSelect) StringsX(ctx context.Context) []string {
	v, err := rls.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (rls *RuleLimitSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rls.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{rulelimit.Label}
	default:
		err = fmt.Errorf("ent: RuleLimitSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rls *RuleLimitSelect) StringX(ctx context.Context) string {
	v, err := rls.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (rls *RuleLimitSelect) Ints(ctx context.Context) ([]int, error) {
	if len(rls.fields) > 1 {
		return nil, errors.New("ent: RuleLimitSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := rls.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rls *RuleLimitSelect) IntsX(ctx context.Context) []int {
	v, err := rls.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (rls *RuleLimitSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rls.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{rulelimit.Label}
	default:
		err = fmt.Errorf("ent: RuleLimitSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rls *RuleLimitSelect) IntX(ctx context.Context) int {
	v, err := rls.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (rls *RuleLimitSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(rls.fields) > 1 {
		return nil, errors.New("ent: RuleLimitSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := rls.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rls *RuleLimitSelect) Float64sX(ctx context.Context) []float64 {
	v, err := rls.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (rls *RuleLimitSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rls.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{rulelimit.Label}
	default:
		err = fmt.Errorf("ent: RuleLimitSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rls *RuleLimitSelect) Float64X(ctx context.Context) float64 {
	v, err := rls.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (rls *RuleLimitSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(rls.fields) > 1 {
		return nil, errors.New("ent: RuleLimitSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := rls.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rls *RuleLimitSelect) BoolsX(ctx context.Context) []bool {
	v, err := rls.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (rls *RuleLimitSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rls.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{rulelimit.Label}
	default:
		err = fmt.Errorf("ent: RuleLimitSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rls *RuleLimitSelect) BoolX(ctx context.Context) bool {
	v, err := rls.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rls *RuleLimitSelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rls.fields {
		if !rulelimit.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := rls.sqlQuery().Query()
	if err := rls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rls *RuleLimitSelect) sqlQuery() sql.Querier {
	selector := rls.sql
	selector.Select(selector.Columns(rls.fields...)...)
	return selector
}
