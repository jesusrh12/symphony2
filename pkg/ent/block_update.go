// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/block"
	"github.com/facebookincubator/symphony/pkg/ent/blockinstance"
	"github.com/facebookincubator/symphony/pkg/ent/entrypoint"
	"github.com/facebookincubator/symphony/pkg/ent/exitpoint"
	"github.com/facebookincubator/symphony/pkg/ent/flow"
	"github.com/facebookincubator/symphony/pkg/ent/flowdraft"
	"github.com/facebookincubator/symphony/pkg/ent/flowexecutiontemplate"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/flowengine/flowschema"
)

// BlockUpdate is the builder for updating Block entities.
type BlockUpdate struct {
	config
	hooks    []Hook
	mutation *BlockMutation
}

// Where adds a new predicate for the builder.
func (bu *BlockUpdate) Where(ps ...predicate.Block) *BlockUpdate {
	bu.mutation.predicates = append(bu.mutation.predicates, ps...)
	return bu
}

// SetCid sets the cid field.
func (bu *BlockUpdate) SetCid(s string) *BlockUpdate {
	bu.mutation.SetCid(s)
	return bu
}

// SetType sets the type field.
func (bu *BlockUpdate) SetType(b block.Type) *BlockUpdate {
	bu.mutation.SetType(b)
	return bu
}

// SetActionType sets the action_type field.
func (bu *BlockUpdate) SetActionType(fti flowschema.ActionTypeID) *BlockUpdate {
	bu.mutation.SetActionType(fti)
	return bu
}

// SetNillableActionType sets the action_type field if the given value is not nil.
func (bu *BlockUpdate) SetNillableActionType(fti *flowschema.ActionTypeID) *BlockUpdate {
	if fti != nil {
		bu.SetActionType(*fti)
	}
	return bu
}

// ClearActionType clears the value of action_type.
func (bu *BlockUpdate) ClearActionType() *BlockUpdate {
	bu.mutation.ClearActionType()
	return bu
}

// SetTriggerType sets the trigger_type field.
func (bu *BlockUpdate) SetTriggerType(fti flowschema.TriggerTypeID) *BlockUpdate {
	bu.mutation.SetTriggerType(fti)
	return bu
}

// SetNillableTriggerType sets the trigger_type field if the given value is not nil.
func (bu *BlockUpdate) SetNillableTriggerType(fti *flowschema.TriggerTypeID) *BlockUpdate {
	if fti != nil {
		bu.SetTriggerType(*fti)
	}
	return bu
}

// ClearTriggerType clears the value of trigger_type.
func (bu *BlockUpdate) ClearTriggerType() *BlockUpdate {
	bu.mutation.ClearTriggerType()
	return bu
}

// SetStartParamDefinitions sets the start_param_definitions field.
func (bu *BlockUpdate) SetStartParamDefinitions(fd []*flowschema.VariableDefinition) *BlockUpdate {
	bu.mutation.SetStartParamDefinitions(fd)
	return bu
}

// ClearStartParamDefinitions clears the value of start_param_definitions.
func (bu *BlockUpdate) ClearStartParamDefinitions() *BlockUpdate {
	bu.mutation.ClearStartParamDefinitions()
	return bu
}

// SetInputParams sets the input_params field.
func (bu *BlockUpdate) SetInputParams(fe []*flowschema.VariableExpression) *BlockUpdate {
	bu.mutation.SetInputParams(fe)
	return bu
}

// ClearInputParams clears the value of input_params.
func (bu *BlockUpdate) ClearInputParams() *BlockUpdate {
	bu.mutation.ClearInputParams()
	return bu
}

// SetUIRepresentation sets the ui_representation field.
func (bu *BlockUpdate) SetUIRepresentation(fur *flowschema.BlockUIRepresentation) *BlockUpdate {
	bu.mutation.SetUIRepresentation(fur)
	return bu
}

// ClearUIRepresentation clears the value of ui_representation.
func (bu *BlockUpdate) ClearUIRepresentation() *BlockUpdate {
	bu.mutation.ClearUIRepresentation()
	return bu
}

// SetFlowID sets the flow edge to Flow by id.
func (bu *BlockUpdate) SetFlowID(id int) *BlockUpdate {
	bu.mutation.SetFlowID(id)
	return bu
}

// SetNillableFlowID sets the flow edge to Flow by id if the given value is not nil.
func (bu *BlockUpdate) SetNillableFlowID(id *int) *BlockUpdate {
	if id != nil {
		bu = bu.SetFlowID(*id)
	}
	return bu
}

// SetFlow sets the flow edge to Flow.
func (bu *BlockUpdate) SetFlow(f *Flow) *BlockUpdate {
	return bu.SetFlowID(f.ID)
}

// SetFlowTemplateID sets the flow_template edge to FlowExecutionTemplate by id.
func (bu *BlockUpdate) SetFlowTemplateID(id int) *BlockUpdate {
	bu.mutation.SetFlowTemplateID(id)
	return bu
}

// SetNillableFlowTemplateID sets the flow_template edge to FlowExecutionTemplate by id if the given value is not nil.
func (bu *BlockUpdate) SetNillableFlowTemplateID(id *int) *BlockUpdate {
	if id != nil {
		bu = bu.SetFlowTemplateID(*id)
	}
	return bu
}

// SetFlowTemplate sets the flow_template edge to FlowExecutionTemplate.
func (bu *BlockUpdate) SetFlowTemplate(f *FlowExecutionTemplate) *BlockUpdate {
	return bu.SetFlowTemplateID(f.ID)
}

// SetFlowDraftID sets the flow_draft edge to FlowDraft by id.
func (bu *BlockUpdate) SetFlowDraftID(id int) *BlockUpdate {
	bu.mutation.SetFlowDraftID(id)
	return bu
}

// SetNillableFlowDraftID sets the flow_draft edge to FlowDraft by id if the given value is not nil.
func (bu *BlockUpdate) SetNillableFlowDraftID(id *int) *BlockUpdate {
	if id != nil {
		bu = bu.SetFlowDraftID(*id)
	}
	return bu
}

// SetFlowDraft sets the flow_draft edge to FlowDraft.
func (bu *BlockUpdate) SetFlowDraft(f *FlowDraft) *BlockUpdate {
	return bu.SetFlowDraftID(f.ID)
}

// SetSubFlowID sets the sub_flow edge to Flow by id.
func (bu *BlockUpdate) SetSubFlowID(id int) *BlockUpdate {
	bu.mutation.SetSubFlowID(id)
	return bu
}

// SetNillableSubFlowID sets the sub_flow edge to Flow by id if the given value is not nil.
func (bu *BlockUpdate) SetNillableSubFlowID(id *int) *BlockUpdate {
	if id != nil {
		bu = bu.SetSubFlowID(*id)
	}
	return bu
}

// SetSubFlow sets the sub_flow edge to Flow.
func (bu *BlockUpdate) SetSubFlow(f *Flow) *BlockUpdate {
	return bu.SetSubFlowID(f.ID)
}

// AddSourceBlockIDs adds the source_block edge to Block by ids.
func (bu *BlockUpdate) AddSourceBlockIDs(ids ...int) *BlockUpdate {
	bu.mutation.AddSourceBlockIDs(ids...)
	return bu
}

// AddSourceBlock adds the source_block edges to Block.
func (bu *BlockUpdate) AddSourceBlock(b ...*Block) *BlockUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.AddSourceBlockIDs(ids...)
}

// SetGotoBlockID sets the goto_block edge to Block by id.
func (bu *BlockUpdate) SetGotoBlockID(id int) *BlockUpdate {
	bu.mutation.SetGotoBlockID(id)
	return bu
}

// SetNillableGotoBlockID sets the goto_block edge to Block by id if the given value is not nil.
func (bu *BlockUpdate) SetNillableGotoBlockID(id *int) *BlockUpdate {
	if id != nil {
		bu = bu.SetGotoBlockID(*id)
	}
	return bu
}

// SetGotoBlock sets the goto_block edge to Block.
func (bu *BlockUpdate) SetGotoBlock(b *Block) *BlockUpdate {
	return bu.SetGotoBlockID(b.ID)
}

// AddInstanceIDs adds the instances edge to BlockInstance by ids.
func (bu *BlockUpdate) AddInstanceIDs(ids ...int) *BlockUpdate {
	bu.mutation.AddInstanceIDs(ids...)
	return bu
}

// AddInstances adds the instances edges to BlockInstance.
func (bu *BlockUpdate) AddInstances(b ...*BlockInstance) *BlockUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.AddInstanceIDs(ids...)
}

// SetEntryPointID sets the entry_point edge to EntryPoint by id.
func (bu *BlockUpdate) SetEntryPointID(id int) *BlockUpdate {
	bu.mutation.SetEntryPointID(id)
	return bu
}

// SetNillableEntryPointID sets the entry_point edge to EntryPoint by id if the given value is not nil.
func (bu *BlockUpdate) SetNillableEntryPointID(id *int) *BlockUpdate {
	if id != nil {
		bu = bu.SetEntryPointID(*id)
	}
	return bu
}

// SetEntryPoint sets the entry_point edge to EntryPoint.
func (bu *BlockUpdate) SetEntryPoint(e *EntryPoint) *BlockUpdate {
	return bu.SetEntryPointID(e.ID)
}

// AddExitPointIDs adds the exit_points edge to ExitPoint by ids.
func (bu *BlockUpdate) AddExitPointIDs(ids ...int) *BlockUpdate {
	bu.mutation.AddExitPointIDs(ids...)
	return bu
}

// AddExitPoints adds the exit_points edges to ExitPoint.
func (bu *BlockUpdate) AddExitPoints(e ...*ExitPoint) *BlockUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return bu.AddExitPointIDs(ids...)
}

// Mutation returns the BlockMutation object of the builder.
func (bu *BlockUpdate) Mutation() *BlockMutation {
	return bu.mutation
}

// ClearFlow clears the "flow" edge to type Flow.
func (bu *BlockUpdate) ClearFlow() *BlockUpdate {
	bu.mutation.ClearFlow()
	return bu
}

// ClearFlowTemplate clears the "flow_template" edge to type FlowExecutionTemplate.
func (bu *BlockUpdate) ClearFlowTemplate() *BlockUpdate {
	bu.mutation.ClearFlowTemplate()
	return bu
}

// ClearFlowDraft clears the "flow_draft" edge to type FlowDraft.
func (bu *BlockUpdate) ClearFlowDraft() *BlockUpdate {
	bu.mutation.ClearFlowDraft()
	return bu
}

// ClearSubFlow clears the "sub_flow" edge to type Flow.
func (bu *BlockUpdate) ClearSubFlow() *BlockUpdate {
	bu.mutation.ClearSubFlow()
	return bu
}

// ClearSourceBlock clears all "source_block" edges to type Block.
func (bu *BlockUpdate) ClearSourceBlock() *BlockUpdate {
	bu.mutation.ClearSourceBlock()
	return bu
}

// RemoveSourceBlockIDs removes the source_block edge to Block by ids.
func (bu *BlockUpdate) RemoveSourceBlockIDs(ids ...int) *BlockUpdate {
	bu.mutation.RemoveSourceBlockIDs(ids...)
	return bu
}

// RemoveSourceBlock removes source_block edges to Block.
func (bu *BlockUpdate) RemoveSourceBlock(b ...*Block) *BlockUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.RemoveSourceBlockIDs(ids...)
}

// ClearGotoBlock clears the "goto_block" edge to type Block.
func (bu *BlockUpdate) ClearGotoBlock() *BlockUpdate {
	bu.mutation.ClearGotoBlock()
	return bu
}

// ClearInstances clears all "instances" edges to type BlockInstance.
func (bu *BlockUpdate) ClearInstances() *BlockUpdate {
	bu.mutation.ClearInstances()
	return bu
}

// RemoveInstanceIDs removes the instances edge to BlockInstance by ids.
func (bu *BlockUpdate) RemoveInstanceIDs(ids ...int) *BlockUpdate {
	bu.mutation.RemoveInstanceIDs(ids...)
	return bu
}

// RemoveInstances removes instances edges to BlockInstance.
func (bu *BlockUpdate) RemoveInstances(b ...*BlockInstance) *BlockUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.RemoveInstanceIDs(ids...)
}

// ClearEntryPoint clears the "entry_point" edge to type EntryPoint.
func (bu *BlockUpdate) ClearEntryPoint() *BlockUpdate {
	bu.mutation.ClearEntryPoint()
	return bu
}

// ClearExitPoints clears all "exit_points" edges to type ExitPoint.
func (bu *BlockUpdate) ClearExitPoints() *BlockUpdate {
	bu.mutation.ClearExitPoints()
	return bu
}

// RemoveExitPointIDs removes the exit_points edge to ExitPoint by ids.
func (bu *BlockUpdate) RemoveExitPointIDs(ids ...int) *BlockUpdate {
	bu.mutation.RemoveExitPointIDs(ids...)
	return bu
}

// RemoveExitPoints removes exit_points edges to ExitPoint.
func (bu *BlockUpdate) RemoveExitPoints(e ...*ExitPoint) *BlockUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return bu.RemoveExitPointIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BlockUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	bu.defaults()
	if len(bu.hooks) == 0 {
		if err = bu.check(); err != nil {
			return 0, err
		}
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlockMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bu.check(); err != nil {
				return 0, err
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BlockUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BlockUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BlockUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BlockUpdate) defaults() {
	if _, ok := bu.mutation.UpdateTime(); !ok {
		v := block.UpdateDefaultUpdateTime()
		bu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BlockUpdate) check() error {
	if v, ok := bu.mutation.Cid(); ok {
		if err := block.CidValidator(v); err != nil {
			return &ValidationError{Name: "cid", err: fmt.Errorf("ent: validator failed for field \"cid\": %w", err)}
		}
	}
	if v, ok := bu.mutation.GetType(); ok {
		if err := block.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if v, ok := bu.mutation.ActionType(); ok {
		if err := block.ActionTypeValidator(v); err != nil {
			return &ValidationError{Name: "action_type", err: fmt.Errorf("ent: validator failed for field \"action_type\": %w", err)}
		}
	}
	if v, ok := bu.mutation.TriggerType(); ok {
		if err := block.TriggerTypeValidator(v); err != nil {
			return &ValidationError{Name: "trigger_type", err: fmt.Errorf("ent: validator failed for field \"trigger_type\": %w", err)}
		}
	}
	return nil
}

func (bu *BlockUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   block.Table,
			Columns: block.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: block.FieldID,
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: block.FieldUpdateTime,
		})
	}
	if value, ok := bu.mutation.Cid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: block.FieldCid,
		})
	}
	if value, ok := bu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: block.FieldType,
		})
	}
	if value, ok := bu.mutation.ActionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: block.FieldActionType,
		})
	}
	if bu.mutation.ActionTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: block.FieldActionType,
		})
	}
	if value, ok := bu.mutation.TriggerType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: block.FieldTriggerType,
		})
	}
	if bu.mutation.TriggerTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: block.FieldTriggerType,
		})
	}
	if value, ok := bu.mutation.StartParamDefinitions(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: block.FieldStartParamDefinitions,
		})
	}
	if bu.mutation.StartParamDefinitionsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: block.FieldStartParamDefinitions,
		})
	}
	if value, ok := bu.mutation.InputParams(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: block.FieldInputParams,
		})
	}
	if bu.mutation.InputParamsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: block.FieldInputParams,
		})
	}
	if value, ok := bu.mutation.UIRepresentation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: block.FieldUIRepresentation,
		})
	}
	if bu.mutation.UIRepresentationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: block.FieldUIRepresentation,
		})
	}
	if bu.mutation.FlowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   block.FlowTable,
			Columns: []string{block.FlowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flow.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.FlowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   block.FlowTable,
			Columns: []string{block.FlowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.FlowTemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   block.FlowTemplateTable,
			Columns: []string{block.FlowTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowexecutiontemplate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.FlowTemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   block.FlowTemplateTable,
			Columns: []string{block.FlowTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowexecutiontemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.FlowDraftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   block.FlowDraftTable,
			Columns: []string{block.FlowDraftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowdraft.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.FlowDraftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   block.FlowDraftTable,
			Columns: []string{block.FlowDraftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowdraft.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.SubFlowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   block.SubFlowTable,
			Columns: []string{block.SubFlowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flow.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.SubFlowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   block.SubFlowTable,
			Columns: []string{block.SubFlowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.SourceBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   block.SourceBlockTable,
			Columns: []string{block.SourceBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedSourceBlockIDs(); len(nodes) > 0 && !bu.mutation.SourceBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   block.SourceBlockTable,
			Columns: []string{block.SourceBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.SourceBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   block.SourceBlockTable,
			Columns: []string{block.SourceBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.GotoBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   block.GotoBlockTable,
			Columns: []string{block.GotoBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.GotoBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   block.GotoBlockTable,
			Columns: []string{block.GotoBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   block.InstancesTable,
			Columns: []string{block.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: blockinstance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedInstancesIDs(); len(nodes) > 0 && !bu.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   block.InstancesTable,
			Columns: []string{block.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: blockinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.InstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   block.InstancesTable,
			Columns: []string{block.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: blockinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.EntryPointCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   block.EntryPointTable,
			Columns: []string{block.EntryPointColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entrypoint.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.EntryPointIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   block.EntryPointTable,
			Columns: []string{block.EntryPointColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entrypoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.ExitPointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   block.ExitPointsTable,
			Columns: []string{block.ExitPointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: exitpoint.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedExitPointsIDs(); len(nodes) > 0 && !bu.mutation.ExitPointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   block.ExitPointsTable,
			Columns: []string{block.ExitPointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: exitpoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.ExitPointsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   block.ExitPointsTable,
			Columns: []string{block.ExitPointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: exitpoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{block.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BlockUpdateOne is the builder for updating a single Block entity.
type BlockUpdateOne struct {
	config
	hooks    []Hook
	mutation *BlockMutation
}

// SetCid sets the cid field.
func (buo *BlockUpdateOne) SetCid(s string) *BlockUpdateOne {
	buo.mutation.SetCid(s)
	return buo
}

// SetType sets the type field.
func (buo *BlockUpdateOne) SetType(b block.Type) *BlockUpdateOne {
	buo.mutation.SetType(b)
	return buo
}

// SetActionType sets the action_type field.
func (buo *BlockUpdateOne) SetActionType(fti flowschema.ActionTypeID) *BlockUpdateOne {
	buo.mutation.SetActionType(fti)
	return buo
}

// SetNillableActionType sets the action_type field if the given value is not nil.
func (buo *BlockUpdateOne) SetNillableActionType(fti *flowschema.ActionTypeID) *BlockUpdateOne {
	if fti != nil {
		buo.SetActionType(*fti)
	}
	return buo
}

// ClearActionType clears the value of action_type.
func (buo *BlockUpdateOne) ClearActionType() *BlockUpdateOne {
	buo.mutation.ClearActionType()
	return buo
}

// SetTriggerType sets the trigger_type field.
func (buo *BlockUpdateOne) SetTriggerType(fti flowschema.TriggerTypeID) *BlockUpdateOne {
	buo.mutation.SetTriggerType(fti)
	return buo
}

// SetNillableTriggerType sets the trigger_type field if the given value is not nil.
func (buo *BlockUpdateOne) SetNillableTriggerType(fti *flowschema.TriggerTypeID) *BlockUpdateOne {
	if fti != nil {
		buo.SetTriggerType(*fti)
	}
	return buo
}

// ClearTriggerType clears the value of trigger_type.
func (buo *BlockUpdateOne) ClearTriggerType() *BlockUpdateOne {
	buo.mutation.ClearTriggerType()
	return buo
}

// SetStartParamDefinitions sets the start_param_definitions field.
func (buo *BlockUpdateOne) SetStartParamDefinitions(fd []*flowschema.VariableDefinition) *BlockUpdateOne {
	buo.mutation.SetStartParamDefinitions(fd)
	return buo
}

// ClearStartParamDefinitions clears the value of start_param_definitions.
func (buo *BlockUpdateOne) ClearStartParamDefinitions() *BlockUpdateOne {
	buo.mutation.ClearStartParamDefinitions()
	return buo
}

// SetInputParams sets the input_params field.
func (buo *BlockUpdateOne) SetInputParams(fe []*flowschema.VariableExpression) *BlockUpdateOne {
	buo.mutation.SetInputParams(fe)
	return buo
}

// ClearInputParams clears the value of input_params.
func (buo *BlockUpdateOne) ClearInputParams() *BlockUpdateOne {
	buo.mutation.ClearInputParams()
	return buo
}

// SetUIRepresentation sets the ui_representation field.
func (buo *BlockUpdateOne) SetUIRepresentation(fur *flowschema.BlockUIRepresentation) *BlockUpdateOne {
	buo.mutation.SetUIRepresentation(fur)
	return buo
}

// ClearUIRepresentation clears the value of ui_representation.
func (buo *BlockUpdateOne) ClearUIRepresentation() *BlockUpdateOne {
	buo.mutation.ClearUIRepresentation()
	return buo
}

// SetFlowID sets the flow edge to Flow by id.
func (buo *BlockUpdateOne) SetFlowID(id int) *BlockUpdateOne {
	buo.mutation.SetFlowID(id)
	return buo
}

// SetNillableFlowID sets the flow edge to Flow by id if the given value is not nil.
func (buo *BlockUpdateOne) SetNillableFlowID(id *int) *BlockUpdateOne {
	if id != nil {
		buo = buo.SetFlowID(*id)
	}
	return buo
}

// SetFlow sets the flow edge to Flow.
func (buo *BlockUpdateOne) SetFlow(f *Flow) *BlockUpdateOne {
	return buo.SetFlowID(f.ID)
}

// SetFlowTemplateID sets the flow_template edge to FlowExecutionTemplate by id.
func (buo *BlockUpdateOne) SetFlowTemplateID(id int) *BlockUpdateOne {
	buo.mutation.SetFlowTemplateID(id)
	return buo
}

// SetNillableFlowTemplateID sets the flow_template edge to FlowExecutionTemplate by id if the given value is not nil.
func (buo *BlockUpdateOne) SetNillableFlowTemplateID(id *int) *BlockUpdateOne {
	if id != nil {
		buo = buo.SetFlowTemplateID(*id)
	}
	return buo
}

// SetFlowTemplate sets the flow_template edge to FlowExecutionTemplate.
func (buo *BlockUpdateOne) SetFlowTemplate(f *FlowExecutionTemplate) *BlockUpdateOne {
	return buo.SetFlowTemplateID(f.ID)
}

// SetFlowDraftID sets the flow_draft edge to FlowDraft by id.
func (buo *BlockUpdateOne) SetFlowDraftID(id int) *BlockUpdateOne {
	buo.mutation.SetFlowDraftID(id)
	return buo
}

// SetNillableFlowDraftID sets the flow_draft edge to FlowDraft by id if the given value is not nil.
func (buo *BlockUpdateOne) SetNillableFlowDraftID(id *int) *BlockUpdateOne {
	if id != nil {
		buo = buo.SetFlowDraftID(*id)
	}
	return buo
}

// SetFlowDraft sets the flow_draft edge to FlowDraft.
func (buo *BlockUpdateOne) SetFlowDraft(f *FlowDraft) *BlockUpdateOne {
	return buo.SetFlowDraftID(f.ID)
}

// SetSubFlowID sets the sub_flow edge to Flow by id.
func (buo *BlockUpdateOne) SetSubFlowID(id int) *BlockUpdateOne {
	buo.mutation.SetSubFlowID(id)
	return buo
}

// SetNillableSubFlowID sets the sub_flow edge to Flow by id if the given value is not nil.
func (buo *BlockUpdateOne) SetNillableSubFlowID(id *int) *BlockUpdateOne {
	if id != nil {
		buo = buo.SetSubFlowID(*id)
	}
	return buo
}

// SetSubFlow sets the sub_flow edge to Flow.
func (buo *BlockUpdateOne) SetSubFlow(f *Flow) *BlockUpdateOne {
	return buo.SetSubFlowID(f.ID)
}

// AddSourceBlockIDs adds the source_block edge to Block by ids.
func (buo *BlockUpdateOne) AddSourceBlockIDs(ids ...int) *BlockUpdateOne {
	buo.mutation.AddSourceBlockIDs(ids...)
	return buo
}

// AddSourceBlock adds the source_block edges to Block.
func (buo *BlockUpdateOne) AddSourceBlock(b ...*Block) *BlockUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.AddSourceBlockIDs(ids...)
}

// SetGotoBlockID sets the goto_block edge to Block by id.
func (buo *BlockUpdateOne) SetGotoBlockID(id int) *BlockUpdateOne {
	buo.mutation.SetGotoBlockID(id)
	return buo
}

// SetNillableGotoBlockID sets the goto_block edge to Block by id if the given value is not nil.
func (buo *BlockUpdateOne) SetNillableGotoBlockID(id *int) *BlockUpdateOne {
	if id != nil {
		buo = buo.SetGotoBlockID(*id)
	}
	return buo
}

// SetGotoBlock sets the goto_block edge to Block.
func (buo *BlockUpdateOne) SetGotoBlock(b *Block) *BlockUpdateOne {
	return buo.SetGotoBlockID(b.ID)
}

// AddInstanceIDs adds the instances edge to BlockInstance by ids.
func (buo *BlockUpdateOne) AddInstanceIDs(ids ...int) *BlockUpdateOne {
	buo.mutation.AddInstanceIDs(ids...)
	return buo
}

// AddInstances adds the instances edges to BlockInstance.
func (buo *BlockUpdateOne) AddInstances(b ...*BlockInstance) *BlockUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.AddInstanceIDs(ids...)
}

// SetEntryPointID sets the entry_point edge to EntryPoint by id.
func (buo *BlockUpdateOne) SetEntryPointID(id int) *BlockUpdateOne {
	buo.mutation.SetEntryPointID(id)
	return buo
}

// SetNillableEntryPointID sets the entry_point edge to EntryPoint by id if the given value is not nil.
func (buo *BlockUpdateOne) SetNillableEntryPointID(id *int) *BlockUpdateOne {
	if id != nil {
		buo = buo.SetEntryPointID(*id)
	}
	return buo
}

// SetEntryPoint sets the entry_point edge to EntryPoint.
func (buo *BlockUpdateOne) SetEntryPoint(e *EntryPoint) *BlockUpdateOne {
	return buo.SetEntryPointID(e.ID)
}

// AddExitPointIDs adds the exit_points edge to ExitPoint by ids.
func (buo *BlockUpdateOne) AddExitPointIDs(ids ...int) *BlockUpdateOne {
	buo.mutation.AddExitPointIDs(ids...)
	return buo
}

// AddExitPoints adds the exit_points edges to ExitPoint.
func (buo *BlockUpdateOne) AddExitPoints(e ...*ExitPoint) *BlockUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return buo.AddExitPointIDs(ids...)
}

// Mutation returns the BlockMutation object of the builder.
func (buo *BlockUpdateOne) Mutation() *BlockMutation {
	return buo.mutation
}

// ClearFlow clears the "flow" edge to type Flow.
func (buo *BlockUpdateOne) ClearFlow() *BlockUpdateOne {
	buo.mutation.ClearFlow()
	return buo
}

// ClearFlowTemplate clears the "flow_template" edge to type FlowExecutionTemplate.
func (buo *BlockUpdateOne) ClearFlowTemplate() *BlockUpdateOne {
	buo.mutation.ClearFlowTemplate()
	return buo
}

// ClearFlowDraft clears the "flow_draft" edge to type FlowDraft.
func (buo *BlockUpdateOne) ClearFlowDraft() *BlockUpdateOne {
	buo.mutation.ClearFlowDraft()
	return buo
}

// ClearSubFlow clears the "sub_flow" edge to type Flow.
func (buo *BlockUpdateOne) ClearSubFlow() *BlockUpdateOne {
	buo.mutation.ClearSubFlow()
	return buo
}

// ClearSourceBlock clears all "source_block" edges to type Block.
func (buo *BlockUpdateOne) ClearSourceBlock() *BlockUpdateOne {
	buo.mutation.ClearSourceBlock()
	return buo
}

// RemoveSourceBlockIDs removes the source_block edge to Block by ids.
func (buo *BlockUpdateOne) RemoveSourceBlockIDs(ids ...int) *BlockUpdateOne {
	buo.mutation.RemoveSourceBlockIDs(ids...)
	return buo
}

// RemoveSourceBlock removes source_block edges to Block.
func (buo *BlockUpdateOne) RemoveSourceBlock(b ...*Block) *BlockUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.RemoveSourceBlockIDs(ids...)
}

// ClearGotoBlock clears the "goto_block" edge to type Block.
func (buo *BlockUpdateOne) ClearGotoBlock() *BlockUpdateOne {
	buo.mutation.ClearGotoBlock()
	return buo
}

// ClearInstances clears all "instances" edges to type BlockInstance.
func (buo *BlockUpdateOne) ClearInstances() *BlockUpdateOne {
	buo.mutation.ClearInstances()
	return buo
}

// RemoveInstanceIDs removes the instances edge to BlockInstance by ids.
func (buo *BlockUpdateOne) RemoveInstanceIDs(ids ...int) *BlockUpdateOne {
	buo.mutation.RemoveInstanceIDs(ids...)
	return buo
}

// RemoveInstances removes instances edges to BlockInstance.
func (buo *BlockUpdateOne) RemoveInstances(b ...*BlockInstance) *BlockUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.RemoveInstanceIDs(ids...)
}

// ClearEntryPoint clears the "entry_point" edge to type EntryPoint.
func (buo *BlockUpdateOne) ClearEntryPoint() *BlockUpdateOne {
	buo.mutation.ClearEntryPoint()
	return buo
}

// ClearExitPoints clears all "exit_points" edges to type ExitPoint.
func (buo *BlockUpdateOne) ClearExitPoints() *BlockUpdateOne {
	buo.mutation.ClearExitPoints()
	return buo
}

// RemoveExitPointIDs removes the exit_points edge to ExitPoint by ids.
func (buo *BlockUpdateOne) RemoveExitPointIDs(ids ...int) *BlockUpdateOne {
	buo.mutation.RemoveExitPointIDs(ids...)
	return buo
}

// RemoveExitPoints removes exit_points edges to ExitPoint.
func (buo *BlockUpdateOne) RemoveExitPoints(e ...*ExitPoint) *BlockUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return buo.RemoveExitPointIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (buo *BlockUpdateOne) Save(ctx context.Context) (*Block, error) {
	var (
		err  error
		node *Block
	)
	buo.defaults()
	if len(buo.hooks) == 0 {
		if err = buo.check(); err != nil {
			return nil, err
		}
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlockMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = buo.check(); err != nil {
				return nil, err
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			mut = buo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BlockUpdateOne) SaveX(ctx context.Context) *Block {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BlockUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BlockUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BlockUpdateOne) defaults() {
	if _, ok := buo.mutation.UpdateTime(); !ok {
		v := block.UpdateDefaultUpdateTime()
		buo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BlockUpdateOne) check() error {
	if v, ok := buo.mutation.Cid(); ok {
		if err := block.CidValidator(v); err != nil {
			return &ValidationError{Name: "cid", err: fmt.Errorf("ent: validator failed for field \"cid\": %w", err)}
		}
	}
	if v, ok := buo.mutation.GetType(); ok {
		if err := block.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if v, ok := buo.mutation.ActionType(); ok {
		if err := block.ActionTypeValidator(v); err != nil {
			return &ValidationError{Name: "action_type", err: fmt.Errorf("ent: validator failed for field \"action_type\": %w", err)}
		}
	}
	if v, ok := buo.mutation.TriggerType(); ok {
		if err := block.TriggerTypeValidator(v); err != nil {
			return &ValidationError{Name: "trigger_type", err: fmt.Errorf("ent: validator failed for field \"trigger_type\": %w", err)}
		}
	}
	return nil
}

func (buo *BlockUpdateOne) sqlSave(ctx context.Context) (_node *Block, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   block.Table,
			Columns: block.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: block.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Block.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := buo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: block.FieldUpdateTime,
		})
	}
	if value, ok := buo.mutation.Cid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: block.FieldCid,
		})
	}
	if value, ok := buo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: block.FieldType,
		})
	}
	if value, ok := buo.mutation.ActionType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: block.FieldActionType,
		})
	}
	if buo.mutation.ActionTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: block.FieldActionType,
		})
	}
	if value, ok := buo.mutation.TriggerType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: block.FieldTriggerType,
		})
	}
	if buo.mutation.TriggerTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: block.FieldTriggerType,
		})
	}
	if value, ok := buo.mutation.StartParamDefinitions(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: block.FieldStartParamDefinitions,
		})
	}
	if buo.mutation.StartParamDefinitionsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: block.FieldStartParamDefinitions,
		})
	}
	if value, ok := buo.mutation.InputParams(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: block.FieldInputParams,
		})
	}
	if buo.mutation.InputParamsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: block.FieldInputParams,
		})
	}
	if value, ok := buo.mutation.UIRepresentation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: block.FieldUIRepresentation,
		})
	}
	if buo.mutation.UIRepresentationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: block.FieldUIRepresentation,
		})
	}
	if buo.mutation.FlowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   block.FlowTable,
			Columns: []string{block.FlowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flow.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.FlowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   block.FlowTable,
			Columns: []string{block.FlowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.FlowTemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   block.FlowTemplateTable,
			Columns: []string{block.FlowTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowexecutiontemplate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.FlowTemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   block.FlowTemplateTable,
			Columns: []string{block.FlowTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowexecutiontemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.FlowDraftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   block.FlowDraftTable,
			Columns: []string{block.FlowDraftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowdraft.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.FlowDraftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   block.FlowDraftTable,
			Columns: []string{block.FlowDraftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowdraft.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.SubFlowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   block.SubFlowTable,
			Columns: []string{block.SubFlowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flow.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.SubFlowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   block.SubFlowTable,
			Columns: []string{block.SubFlowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.SourceBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   block.SourceBlockTable,
			Columns: []string{block.SourceBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedSourceBlockIDs(); len(nodes) > 0 && !buo.mutation.SourceBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   block.SourceBlockTable,
			Columns: []string{block.SourceBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.SourceBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   block.SourceBlockTable,
			Columns: []string{block.SourceBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.GotoBlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   block.GotoBlockTable,
			Columns: []string{block.GotoBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.GotoBlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   block.GotoBlockTable,
			Columns: []string{block.GotoBlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   block.InstancesTable,
			Columns: []string{block.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: blockinstance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedInstancesIDs(); len(nodes) > 0 && !buo.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   block.InstancesTable,
			Columns: []string{block.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: blockinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.InstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   block.InstancesTable,
			Columns: []string{block.InstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: blockinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.EntryPointCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   block.EntryPointTable,
			Columns: []string{block.EntryPointColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entrypoint.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.EntryPointIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   block.EntryPointTable,
			Columns: []string{block.EntryPointColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entrypoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.ExitPointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   block.ExitPointsTable,
			Columns: []string{block.ExitPointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: exitpoint.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedExitPointsIDs(); len(nodes) > 0 && !buo.mutation.ExitPointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   block.ExitPointsTable,
			Columns: []string{block.ExitPointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: exitpoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.ExitPointsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   block.ExitPointsTable,
			Columns: []string{block.ExitPointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: exitpoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Block{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{block.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
