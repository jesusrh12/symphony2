// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/domain"
	"github.com/facebookincubator/symphony/pkg/ent/tech"
)

// Tech is the model entity for the Tech schema.
type Tech struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TechQuery when eager-loading is set.
	Edges             TechEdges `json:"edges"`
	domain_techdomain *int
}

// TechEdges holds the relations/edges for other nodes in the graph.
type TechEdges struct {
	// Domain holds the value of the domain edge.
	Domain *Domain
	// Formulatech holds the value of the formulatech edge.
	Formulatech []*Formula
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// DomainOrErr returns the Domain value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TechEdges) DomainOrErr() (*Domain, error) {
	if e.loadedTypes[0] {
		if e.Domain == nil {
			// The edge domain was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: domain.Label}
		}
		return e.Domain, nil
	}
	return nil, &NotLoadedError{edge: "domain"}
}

// FormulatechOrErr returns the Formulatech value or an error if the edge
// was not loaded in eager-loading.
func (e TechEdges) FormulatechOrErr() ([]*Formula, error) {
	if e.loadedTypes[1] {
		return e.Formulatech, nil
	}
	return nil, &NotLoadedError{edge: "formulatech"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tech) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // name
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Tech) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // domain_techdomain
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tech fields.
func (t *Tech) assignValues(values ...interface{}) error {
	if m, n := len(values), len(tech.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	t.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		t.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		t.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[2])
	} else if value.Valid {
		t.Name = value.String
	}
	values = values[3:]
	if len(values) == len(tech.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field domain_techdomain", value)
		} else if value.Valid {
			t.domain_techdomain = new(int)
			*t.domain_techdomain = int(value.Int64)
		}
	}
	return nil
}

// QueryDomain queries the domain edge of the Tech.
func (t *Tech) QueryDomain() *DomainQuery {
	return (&TechClient{config: t.config}).QueryDomain(t)
}

// QueryFormulatech queries the formulatech edge of the Tech.
func (t *Tech) QueryFormulatech() *FormulaQuery {
	return (&TechClient{config: t.config}).QueryFormulatech(t)
}

// Update returns a builder for updating this Tech.
// Note that, you need to call Tech.Unwrap() before calling this method, if this Tech
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tech) Update() *TechUpdateOne {
	return (&TechClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Tech) Unwrap() *Tech {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tech is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tech) String() string {
	var builder strings.Builder
	builder.WriteString("Tech(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(t.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(t.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(t.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Teches is a parsable slice of Tech.
type Teches []*Tech

func (t Teches) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
