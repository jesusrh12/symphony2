// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/kqi"
	"github.com/facebookincubator/symphony/pkg/ent/kqicomparator"
	"github.com/facebookincubator/symphony/pkg/ent/kqitarget"
)

// KqiTargetCreate is the builder for creating a KqiTarget entity.
type KqiTargetCreate struct {
	config
	mutation *KqiTargetMutation
	hooks    []Hook
}

// SetCreateTime sets the create_time field.
func (ktc *KqiTargetCreate) SetCreateTime(t time.Time) *KqiTargetCreate {
	ktc.mutation.SetCreateTime(t)
	return ktc
}

// SetNillableCreateTime sets the create_time field if the given value is not nil.
func (ktc *KqiTargetCreate) SetNillableCreateTime(t *time.Time) *KqiTargetCreate {
	if t != nil {
		ktc.SetCreateTime(*t)
	}
	return ktc
}

// SetUpdateTime sets the update_time field.
func (ktc *KqiTargetCreate) SetUpdateTime(t time.Time) *KqiTargetCreate {
	ktc.mutation.SetUpdateTime(t)
	return ktc
}

// SetNillableUpdateTime sets the update_time field if the given value is not nil.
func (ktc *KqiTargetCreate) SetNillableUpdateTime(t *time.Time) *KqiTargetCreate {
	if t != nil {
		ktc.SetUpdateTime(*t)
	}
	return ktc
}

// SetName sets the name field.
func (ktc *KqiTargetCreate) SetName(s string) *KqiTargetCreate {
	ktc.mutation.SetName(s)
	return ktc
}

// SetPeriod sets the period field.
func (ktc *KqiTargetCreate) SetPeriod(f float64) *KqiTargetCreate {
	ktc.mutation.SetPeriod(f)
	return ktc
}

// SetAllowedVariation sets the allowedVariation field.
func (ktc *KqiTargetCreate) SetAllowedVariation(f float64) *KqiTargetCreate {
	ktc.mutation.SetAllowedVariation(f)
	return ktc
}

// SetInitTime sets the initTime field.
func (ktc *KqiTargetCreate) SetInitTime(t time.Time) *KqiTargetCreate {
	ktc.mutation.SetInitTime(t)
	return ktc
}

// SetEndTime sets the endTime field.
func (ktc *KqiTargetCreate) SetEndTime(t time.Time) *KqiTargetCreate {
	ktc.mutation.SetEndTime(t)
	return ktc
}

// SetImpact sets the impact field.
func (ktc *KqiTargetCreate) SetImpact(s string) *KqiTargetCreate {
	ktc.mutation.SetImpact(s)
	return ktc
}

// SetStatus sets the status field.
func (ktc *KqiTargetCreate) SetStatus(b bool) *KqiTargetCreate {
	ktc.mutation.SetStatus(b)
	return ktc
}

// SetKqiTargetFkID sets the kqiTargetFk edge to Kqi by id.
func (ktc *KqiTargetCreate) SetKqiTargetFkID(id int) *KqiTargetCreate {
	ktc.mutation.SetKqiTargetFkID(id)
	return ktc
}

// SetNillableKqiTargetFkID sets the kqiTargetFk edge to Kqi by id if the given value is not nil.
func (ktc *KqiTargetCreate) SetNillableKqiTargetFkID(id *int) *KqiTargetCreate {
	if id != nil {
		ktc = ktc.SetKqiTargetFkID(*id)
	}
	return ktc
}

// SetKqiTargetFk sets the kqiTargetFk edge to Kqi.
func (ktc *KqiTargetCreate) SetKqiTargetFk(k *Kqi) *KqiTargetCreate {
	return ktc.SetKqiTargetFkID(k.ID)
}

// AddKqitargetcomparatorfkIDs adds the kqitargetcomparatorfk edge to KqiComparator by ids.
func (ktc *KqiTargetCreate) AddKqitargetcomparatorfkIDs(ids ...int) *KqiTargetCreate {
	ktc.mutation.AddKqitargetcomparatorfkIDs(ids...)
	return ktc
}

// AddKqitargetcomparatorfk adds the kqitargetcomparatorfk edges to KqiComparator.
func (ktc *KqiTargetCreate) AddKqitargetcomparatorfk(k ...*KqiComparator) *KqiTargetCreate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return ktc.AddKqitargetcomparatorfkIDs(ids...)
}

// Mutation returns the KqiTargetMutation object of the builder.
func (ktc *KqiTargetCreate) Mutation() *KqiTargetMutation {
	return ktc.mutation
}

// Save creates the KqiTarget in the database.
func (ktc *KqiTargetCreate) Save(ctx context.Context) (*KqiTarget, error) {
	var (
		err  error
		node *KqiTarget
	)
	ktc.defaults()
	if len(ktc.hooks) == 0 {
		if err = ktc.check(); err != nil {
			return nil, err
		}
		node, err = ktc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KqiTargetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ktc.check(); err != nil {
				return nil, err
			}
			ktc.mutation = mutation
			node, err = ktc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ktc.hooks) - 1; i >= 0; i-- {
			mut = ktc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ktc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ktc *KqiTargetCreate) SaveX(ctx context.Context) *KqiTarget {
	v, err := ktc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ktc *KqiTargetCreate) defaults() {
	if _, ok := ktc.mutation.CreateTime(); !ok {
		v := kqitarget.DefaultCreateTime()
		ktc.mutation.SetCreateTime(v)
	}
	if _, ok := ktc.mutation.UpdateTime(); !ok {
		v := kqitarget.DefaultUpdateTime()
		ktc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ktc *KqiTargetCreate) check() error {
	if _, ok := ktc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := ktc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := ktc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := ktc.mutation.Name(); ok {
		if err := kqitarget.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := ktc.mutation.Period(); !ok {
		return &ValidationError{Name: "period", err: errors.New("ent: missing required field \"period\"")}
	}
	if _, ok := ktc.mutation.AllowedVariation(); !ok {
		return &ValidationError{Name: "allowedVariation", err: errors.New("ent: missing required field \"allowedVariation\"")}
	}
	if _, ok := ktc.mutation.InitTime(); !ok {
		return &ValidationError{Name: "initTime", err: errors.New("ent: missing required field \"initTime\"")}
	}
	if _, ok := ktc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "endTime", err: errors.New("ent: missing required field \"endTime\"")}
	}
	if _, ok := ktc.mutation.Impact(); !ok {
		return &ValidationError{Name: "impact", err: errors.New("ent: missing required field \"impact\"")}
	}
	if _, ok := ktc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	return nil
}

func (ktc *KqiTargetCreate) sqlSave(ctx context.Context) (*KqiTarget, error) {
	_node, _spec := ktc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ktc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ktc *KqiTargetCreate) createSpec() (*KqiTarget, *sqlgraph.CreateSpec) {
	var (
		_node = &KqiTarget{config: ktc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: kqitarget.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kqitarget.FieldID,
			},
		}
	)
	if value, ok := ktc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kqitarget.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := ktc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kqitarget.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := ktc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kqitarget.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ktc.mutation.Period(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kqitarget.FieldPeriod,
		})
		_node.Period = value
	}
	if value, ok := ktc.mutation.AllowedVariation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: kqitarget.FieldAllowedVariation,
		})
		_node.AllowedVariation = value
	}
	if value, ok := ktc.mutation.InitTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kqitarget.FieldInitTime,
		})
		_node.InitTime = value
	}
	if value, ok := ktc.mutation.EndTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kqitarget.FieldEndTime,
		})
		_node.EndTime = value
	}
	if value, ok := ktc.mutation.Impact(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kqitarget.FieldImpact,
		})
		_node.Impact = value
	}
	if value, ok := ktc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: kqitarget.FieldStatus,
		})
		_node.Status = value
	}
	if nodes := ktc.mutation.KqiTargetFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kqitarget.KqiTargetFkTable,
			Columns: []string{kqitarget.KqiTargetFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqi.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ktc.mutation.KqitargetcomparatorfkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kqitarget.KqitargetcomparatorfkTable,
			Columns: []string{kqitarget.KqitargetcomparatorfkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqicomparator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// KqiTargetCreateBulk is the builder for creating a bulk of KqiTarget entities.
type KqiTargetCreateBulk struct {
	config
	builders []*KqiTargetCreate
}

// Save creates the KqiTarget entities in the database.
func (ktcb *KqiTargetCreateBulk) Save(ctx context.Context) ([]*KqiTarget, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ktcb.builders))
	nodes := make([]*KqiTarget, len(ktcb.builders))
	mutators := make([]Mutator, len(ktcb.builders))
	for i := range ktcb.builders {
		func(i int, root context.Context) {
			builder := ktcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*KqiTargetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ktcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ktcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ktcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (ktcb *KqiTargetCreateBulk) SaveX(ctx context.Context) []*KqiTarget {
	v, err := ktcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
