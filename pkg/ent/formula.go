// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/formula"
	"github.com/facebookincubator/symphony/pkg/ent/kpi"
	"github.com/facebookincubator/symphony/pkg/ent/networktype"
	"github.com/facebookincubator/symphony/pkg/ent/tech"
)

// Formula is the model entity for the Formula schema.
type Formula struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// TextFormula holds the value of the "textFormula" field.
	TextFormula string `json:"textFormula,omitempty"`
	// Status holds the value of the "status" field.
	Status bool `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FormulaQuery when eager-loading is set.
	Edges                                FormulaEdges `json:"edges"`
	kpi_formulakpi                       *int
	network_type_formula_network_type_fk *int
	tech_formulatech                     *int
}

// FormulaEdges holds the relations/edges for other nodes in the graph.
type FormulaEdges struct {
	// NetworkType holds the value of the networkType edge.
	NetworkType *NetworkType
	// Tech holds the value of the tech edge.
	Tech *Tech
	// Kpi holds the value of the kpi edge.
	Kpi *Kpi
	// Counterformula holds the value of the counterformula edge.
	Counterformula []*CounterFormula
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// NetworkTypeOrErr returns the NetworkType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FormulaEdges) NetworkTypeOrErr() (*NetworkType, error) {
	if e.loadedTypes[0] {
		if e.NetworkType == nil {
			// The edge networkType was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: networktype.Label}
		}
		return e.NetworkType, nil
	}
	return nil, &NotLoadedError{edge: "networkType"}
}

// TechOrErr returns the Tech value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FormulaEdges) TechOrErr() (*Tech, error) {
	if e.loadedTypes[1] {
		if e.Tech == nil {
			// The edge tech was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tech.Label}
		}
		return e.Tech, nil
	}
	return nil, &NotLoadedError{edge: "tech"}
}

// KpiOrErr returns the Kpi value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FormulaEdges) KpiOrErr() (*Kpi, error) {
	if e.loadedTypes[2] {
		if e.Kpi == nil {
			// The edge kpi was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: kpi.Label}
		}
		return e.Kpi, nil
	}
	return nil, &NotLoadedError{edge: "kpi"}
}

// CounterformulaOrErr returns the Counterformula value or an error if the edge
// was not loaded in eager-loading.
func (e FormulaEdges) CounterformulaOrErr() ([]*CounterFormula, error) {
	if e.loadedTypes[3] {
		return e.Counterformula, nil
	}
	return nil, &NotLoadedError{edge: "counterformula"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Formula) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // textFormula
		&sql.NullBool{},   // status
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Formula) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // kpi_formulakpi
		&sql.NullInt64{}, // network_type_formula_network_type_fk
		&sql.NullInt64{}, // tech_formulatech
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Formula fields.
func (f *Formula) assignValues(values ...interface{}) error {
	if m, n := len(values), len(formula.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	f.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		f.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		f.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field textFormula", values[2])
	} else if value.Valid {
		f.TextFormula = value.String
	}
	if value, ok := values[3].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[3])
	} else if value.Valid {
		f.Status = value.Bool
	}
	values = values[4:]
	if len(values) == len(formula.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field kpi_formulakpi", value)
		} else if value.Valid {
			f.kpi_formulakpi = new(int)
			*f.kpi_formulakpi = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field network_type_formula_network_type_fk", value)
		} else if value.Valid {
			f.network_type_formula_network_type_fk = new(int)
			*f.network_type_formula_network_type_fk = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field tech_formulatech", value)
		} else if value.Valid {
			f.tech_formulatech = new(int)
			*f.tech_formulatech = int(value.Int64)
		}
	}
	return nil
}

// QueryNetworkType queries the networkType edge of the Formula.
func (f *Formula) QueryNetworkType() *NetworkTypeQuery {
	return (&FormulaClient{config: f.config}).QueryNetworkType(f)
}

// QueryTech queries the tech edge of the Formula.
func (f *Formula) QueryTech() *TechQuery {
	return (&FormulaClient{config: f.config}).QueryTech(f)
}

// QueryKpi queries the kpi edge of the Formula.
func (f *Formula) QueryKpi() *KpiQuery {
	return (&FormulaClient{config: f.config}).QueryKpi(f)
}

// QueryCounterformula queries the counterformula edge of the Formula.
func (f *Formula) QueryCounterformula() *CounterFormulaQuery {
	return (&FormulaClient{config: f.config}).QueryCounterformula(f)
}

// Update returns a builder for updating this Formula.
// Note that, you need to call Formula.Unwrap() before calling this method, if this Formula
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Formula) Update() *FormulaUpdateOne {
	return (&FormulaClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (f *Formula) Unwrap() *Formula {
	tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Formula is not a transactional entity")
	}
	f.config.driver = tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Formula) String() string {
	var builder strings.Builder
	builder.WriteString("Formula(")
	builder.WriteString(fmt.Sprintf("id=%v", f.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(f.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(f.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", textFormula=")
	builder.WriteString(f.TextFormula)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", f.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Formulas is a parsable slice of Formula.
type Formulas []*Formula

func (f Formulas) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
