// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/kpi"
	"github.com/facebookincubator/symphony/pkg/ent/threshold"
)

// Threshold is the model entity for the Threshold schema.
type Threshold struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Status holds the value of the "status" field.
	Status bool `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ThresholdQuery when eager-loading is set.
	Edges            ThresholdEdges `json:"edges"`
	kpi_thresholdkpi *int
}

// ThresholdEdges holds the relations/edges for other nodes in the graph.
type ThresholdEdges struct {
	// Kpi holds the value of the kpi edge.
	Kpi *Kpi
	// Rulethreshold holds the value of the rulethreshold edge.
	Rulethreshold []*Rule
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// KpiOrErr returns the Kpi value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ThresholdEdges) KpiOrErr() (*Kpi, error) {
	if e.loadedTypes[0] {
		if e.Kpi == nil {
			// The edge kpi was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: kpi.Label}
		}
		return e.Kpi, nil
	}
	return nil, &NotLoadedError{edge: "kpi"}
}

// RulethresholdOrErr returns the Rulethreshold value or an error if the edge
// was not loaded in eager-loading.
func (e ThresholdEdges) RulethresholdOrErr() ([]*Rule, error) {
	if e.loadedTypes[1] {
		return e.Rulethreshold, nil
	}
	return nil, &NotLoadedError{edge: "rulethreshold"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Threshold) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // name
		&sql.NullString{}, // description
		&sql.NullBool{},   // status
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Threshold) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // kpi_thresholdkpi
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Threshold fields.
func (t *Threshold) assignValues(values ...interface{}) error {
	if m, n := len(values), len(threshold.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	t.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		t.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		t.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[2])
	} else if value.Valid {
		t.Name = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field description", values[3])
	} else if value.Valid {
		t.Description = value.String
	}
	if value, ok := values[4].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[4])
	} else if value.Valid {
		t.Status = value.Bool
	}
	values = values[5:]
	if len(values) == len(threshold.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field kpi_thresholdkpi", value)
		} else if value.Valid {
			t.kpi_thresholdkpi = new(int)
			*t.kpi_thresholdkpi = int(value.Int64)
		}
	}
	return nil
}

// QueryKpi queries the kpi edge of the Threshold.
func (t *Threshold) QueryKpi() *KpiQuery {
	return (&ThresholdClient{config: t.config}).QueryKpi(t)
}

// QueryRulethreshold queries the rulethreshold edge of the Threshold.
func (t *Threshold) QueryRulethreshold() *RuleQuery {
	return (&ThresholdClient{config: t.config}).QueryRulethreshold(t)
}

// Update returns a builder for updating this Threshold.
// Note that, you need to call Threshold.Unwrap() before calling this method, if this Threshold
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Threshold) Update() *ThresholdUpdateOne {
	return (&ThresholdClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Threshold) Unwrap() *Threshold {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Threshold is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Threshold) String() string {
	var builder strings.Builder
	builder.WriteString("Threshold(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(t.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(t.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(t.Name)
	builder.WriteString(", description=")
	builder.WriteString(t.Description)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Thresholds is a parsable slice of Threshold.
type Thresholds []*Threshold

func (t Thresholds) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
