// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/block"
	"github.com/facebookincubator/symphony/pkg/ent/entrypoint"
	"github.com/facebookincubator/symphony/pkg/flowengine/flowschema"
)

// EntryPoint is the model entity for the EntryPoint schema.
type EntryPoint struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Role holds the value of the "role" field.
	Role flowschema.EntryPointRole `json:"role,omitempty"`
	// Cid holds the value of the "cid" field.
	Cid *string `json:"cid,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EntryPointQuery when eager-loading is set.
	Edges             EntryPointEdges `json:"edges"`
	block_entry_point *int
}

// EntryPointEdges holds the relations/edges for other nodes in the graph.
type EntryPointEdges struct {
	// PrevExitPoints holds the value of the prev_exit_points edge.
	PrevExitPoints []*ExitPoint
	// ParentBlock holds the value of the parent_block edge.
	ParentBlock *Block
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PrevExitPointsOrErr returns the PrevExitPoints value or an error if the edge
// was not loaded in eager-loading.
func (e EntryPointEdges) PrevExitPointsOrErr() ([]*ExitPoint, error) {
	if e.loadedTypes[0] {
		return e.PrevExitPoints, nil
	}
	return nil, &NotLoadedError{edge: "prev_exit_points"}
}

// ParentBlockOrErr returns the ParentBlock value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntryPointEdges) ParentBlockOrErr() (*Block, error) {
	if e.loadedTypes[1] {
		if e.ParentBlock == nil {
			// The edge parent_block was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: block.Label}
		}
		return e.ParentBlock, nil
	}
	return nil, &NotLoadedError{edge: "parent_block"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EntryPoint) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // role
		&sql.NullString{}, // cid
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*EntryPoint) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // block_entry_point
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EntryPoint fields.
func (ep *EntryPoint) assignValues(values ...interface{}) error {
	if m, n := len(values), len(entrypoint.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ep.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		ep.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		ep.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field role", values[2])
	} else if value.Valid {
		ep.Role = flowschema.EntryPointRole(value.String)
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field cid", values[3])
	} else if value.Valid {
		ep.Cid = new(string)
		*ep.Cid = value.String
	}
	values = values[4:]
	if len(values) == len(entrypoint.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field block_entry_point", value)
		} else if value.Valid {
			ep.block_entry_point = new(int)
			*ep.block_entry_point = int(value.Int64)
		}
	}
	return nil
}

// QueryPrevExitPoints queries the prev_exit_points edge of the EntryPoint.
func (ep *EntryPoint) QueryPrevExitPoints() *ExitPointQuery {
	return (&EntryPointClient{config: ep.config}).QueryPrevExitPoints(ep)
}

// QueryParentBlock queries the parent_block edge of the EntryPoint.
func (ep *EntryPoint) QueryParentBlock() *BlockQuery {
	return (&EntryPointClient{config: ep.config}).QueryParentBlock(ep)
}

// Update returns a builder for updating this EntryPoint.
// Note that, you need to call EntryPoint.Unwrap() before calling this method, if this EntryPoint
// was returned from a transaction, and the transaction was committed or rolled back.
func (ep *EntryPoint) Update() *EntryPointUpdateOne {
	return (&EntryPointClient{config: ep.config}).UpdateOne(ep)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ep *EntryPoint) Unwrap() *EntryPoint {
	tx, ok := ep.config.driver.(*txDriver)
	if !ok {
		panic("ent: EntryPoint is not a transactional entity")
	}
	ep.config.driver = tx.drv
	return ep
}

// String implements the fmt.Stringer.
func (ep *EntryPoint) String() string {
	var builder strings.Builder
	builder.WriteString("EntryPoint(")
	builder.WriteString(fmt.Sprintf("id=%v", ep.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(ep.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(ep.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", role=")
	builder.WriteString(fmt.Sprintf("%v", ep.Role))
	if v := ep.Cid; v != nil {
		builder.WriteString(", cid=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// EntryPoints is a parsable slice of EntryPoint.
type EntryPoints []*EntryPoint

func (ep EntryPoints) config(cfg config) {
	for _i := range ep {
		ep[_i].config = cfg
	}
}
