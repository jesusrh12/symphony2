// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/alarmfilter"
	"github.com/facebookincubator/symphony/pkg/ent/alarmstatus"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
)

// AlarmFilterUpdate is the builder for updating AlarmFilter entities.
type AlarmFilterUpdate struct {
	config
	hooks    []Hook
	mutation *AlarmFilterMutation
}

// Where adds a new predicate for the builder.
func (afu *AlarmFilterUpdate) Where(ps ...predicate.AlarmFilter) *AlarmFilterUpdate {
	afu.mutation.predicates = append(afu.mutation.predicates, ps...)
	return afu
}

// SetName sets the name field.
func (afu *AlarmFilterUpdate) SetName(s string) *AlarmFilterUpdate {
	afu.mutation.SetName(s)
	return afu
}

// SetNetworkResource sets the networkResource field.
func (afu *AlarmFilterUpdate) SetNetworkResource(s string) *AlarmFilterUpdate {
	afu.mutation.SetNetworkResource(s)
	return afu
}

// SetBeginTime sets the beginTime field.
func (afu *AlarmFilterUpdate) SetBeginTime(t time.Time) *AlarmFilterUpdate {
	afu.mutation.SetBeginTime(t)
	return afu
}

// SetEndTime sets the endTime field.
func (afu *AlarmFilterUpdate) SetEndTime(t time.Time) *AlarmFilterUpdate {
	afu.mutation.SetEndTime(t)
	return afu
}

// SetReason sets the reason field.
func (afu *AlarmFilterUpdate) SetReason(s string) *AlarmFilterUpdate {
	afu.mutation.SetReason(s)
	return afu
}

// SetUser sets the user field.
func (afu *AlarmFilterUpdate) SetUser(s string) *AlarmFilterUpdate {
	afu.mutation.SetUser(s)
	return afu
}

// SetCreationTime sets the creationTime field.
func (afu *AlarmFilterUpdate) SetCreationTime(t time.Time) *AlarmFilterUpdate {
	afu.mutation.SetCreationTime(t)
	return afu
}

// SetEnable sets the enable field.
func (afu *AlarmFilterUpdate) SetEnable(b bool) *AlarmFilterUpdate {
	afu.mutation.SetEnable(b)
	return afu
}

// SetAlarmStatusFkID sets the alarmStatusFk edge to AlarmStatus by id.
func (afu *AlarmFilterUpdate) SetAlarmStatusFkID(id int) *AlarmFilterUpdate {
	afu.mutation.SetAlarmStatusFkID(id)
	return afu
}

// SetNillableAlarmStatusFkID sets the alarmStatusFk edge to AlarmStatus by id if the given value is not nil.
func (afu *AlarmFilterUpdate) SetNillableAlarmStatusFkID(id *int) *AlarmFilterUpdate {
	if id != nil {
		afu = afu.SetAlarmStatusFkID(*id)
	}
	return afu
}

// SetAlarmStatusFk sets the alarmStatusFk edge to AlarmStatus.
func (afu *AlarmFilterUpdate) SetAlarmStatusFk(a *AlarmStatus) *AlarmFilterUpdate {
	return afu.SetAlarmStatusFkID(a.ID)
}

// Mutation returns the AlarmFilterMutation object of the builder.
func (afu *AlarmFilterUpdate) Mutation() *AlarmFilterMutation {
	return afu.mutation
}

// ClearAlarmStatusFk clears the "alarmStatusFk" edge to type AlarmStatus.
func (afu *AlarmFilterUpdate) ClearAlarmStatusFk() *AlarmFilterUpdate {
	afu.mutation.ClearAlarmStatusFk()
	return afu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (afu *AlarmFilterUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	afu.defaults()
	if len(afu.hooks) == 0 {
		if err = afu.check(); err != nil {
			return 0, err
		}
		affected, err = afu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AlarmFilterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = afu.check(); err != nil {
				return 0, err
			}
			afu.mutation = mutation
			affected, err = afu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(afu.hooks) - 1; i >= 0; i-- {
			mut = afu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, afu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (afu *AlarmFilterUpdate) SaveX(ctx context.Context) int {
	affected, err := afu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (afu *AlarmFilterUpdate) Exec(ctx context.Context) error {
	_, err := afu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (afu *AlarmFilterUpdate) ExecX(ctx context.Context) {
	if err := afu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (afu *AlarmFilterUpdate) defaults() {
	if _, ok := afu.mutation.UpdateTime(); !ok {
		v := alarmfilter.UpdateDefaultUpdateTime()
		afu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (afu *AlarmFilterUpdate) check() error {
	if v, ok := afu.mutation.Name(); ok {
		if err := alarmfilter.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (afu *AlarmFilterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   alarmfilter.Table,
			Columns: alarmfilter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: alarmfilter.FieldID,
			},
		},
	}
	if ps := afu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := afu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: alarmfilter.FieldUpdateTime,
		})
	}
	if value, ok := afu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alarmfilter.FieldName,
		})
	}
	if value, ok := afu.mutation.NetworkResource(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alarmfilter.FieldNetworkResource,
		})
	}
	if value, ok := afu.mutation.BeginTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: alarmfilter.FieldBeginTime,
		})
	}
	if value, ok := afu.mutation.EndTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: alarmfilter.FieldEndTime,
		})
	}
	if value, ok := afu.mutation.Reason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alarmfilter.FieldReason,
		})
	}
	if value, ok := afu.mutation.User(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alarmfilter.FieldUser,
		})
	}
	if value, ok := afu.mutation.CreationTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: alarmfilter.FieldCreationTime,
		})
	}
	if value, ok := afu.mutation.Enable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: alarmfilter.FieldEnable,
		})
	}
	if afu.mutation.AlarmStatusFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   alarmfilter.AlarmStatusFkTable,
			Columns: []string{alarmfilter.AlarmStatusFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: alarmstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := afu.mutation.AlarmStatusFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   alarmfilter.AlarmStatusFkTable,
			Columns: []string{alarmfilter.AlarmStatusFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: alarmstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, afu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{alarmfilter.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AlarmFilterUpdateOne is the builder for updating a single AlarmFilter entity.
type AlarmFilterUpdateOne struct {
	config
	hooks    []Hook
	mutation *AlarmFilterMutation
}

// SetName sets the name field.
func (afuo *AlarmFilterUpdateOne) SetName(s string) *AlarmFilterUpdateOne {
	afuo.mutation.SetName(s)
	return afuo
}

// SetNetworkResource sets the networkResource field.
func (afuo *AlarmFilterUpdateOne) SetNetworkResource(s string) *AlarmFilterUpdateOne {
	afuo.mutation.SetNetworkResource(s)
	return afuo
}

// SetBeginTime sets the beginTime field.
func (afuo *AlarmFilterUpdateOne) SetBeginTime(t time.Time) *AlarmFilterUpdateOne {
	afuo.mutation.SetBeginTime(t)
	return afuo
}

// SetEndTime sets the endTime field.
func (afuo *AlarmFilterUpdateOne) SetEndTime(t time.Time) *AlarmFilterUpdateOne {
	afuo.mutation.SetEndTime(t)
	return afuo
}

// SetReason sets the reason field.
func (afuo *AlarmFilterUpdateOne) SetReason(s string) *AlarmFilterUpdateOne {
	afuo.mutation.SetReason(s)
	return afuo
}

// SetUser sets the user field.
func (afuo *AlarmFilterUpdateOne) SetUser(s string) *AlarmFilterUpdateOne {
	afuo.mutation.SetUser(s)
	return afuo
}

// SetCreationTime sets the creationTime field.
func (afuo *AlarmFilterUpdateOne) SetCreationTime(t time.Time) *AlarmFilterUpdateOne {
	afuo.mutation.SetCreationTime(t)
	return afuo
}

// SetEnable sets the enable field.
func (afuo *AlarmFilterUpdateOne) SetEnable(b bool) *AlarmFilterUpdateOne {
	afuo.mutation.SetEnable(b)
	return afuo
}

// SetAlarmStatusFkID sets the alarmStatusFk edge to AlarmStatus by id.
func (afuo *AlarmFilterUpdateOne) SetAlarmStatusFkID(id int) *AlarmFilterUpdateOne {
	afuo.mutation.SetAlarmStatusFkID(id)
	return afuo
}

// SetNillableAlarmStatusFkID sets the alarmStatusFk edge to AlarmStatus by id if the given value is not nil.
func (afuo *AlarmFilterUpdateOne) SetNillableAlarmStatusFkID(id *int) *AlarmFilterUpdateOne {
	if id != nil {
		afuo = afuo.SetAlarmStatusFkID(*id)
	}
	return afuo
}

// SetAlarmStatusFk sets the alarmStatusFk edge to AlarmStatus.
func (afuo *AlarmFilterUpdateOne) SetAlarmStatusFk(a *AlarmStatus) *AlarmFilterUpdateOne {
	return afuo.SetAlarmStatusFkID(a.ID)
}

// Mutation returns the AlarmFilterMutation object of the builder.
func (afuo *AlarmFilterUpdateOne) Mutation() *AlarmFilterMutation {
	return afuo.mutation
}

// ClearAlarmStatusFk clears the "alarmStatusFk" edge to type AlarmStatus.
func (afuo *AlarmFilterUpdateOne) ClearAlarmStatusFk() *AlarmFilterUpdateOne {
	afuo.mutation.ClearAlarmStatusFk()
	return afuo
}

// Save executes the query and returns the updated entity.
func (afuo *AlarmFilterUpdateOne) Save(ctx context.Context) (*AlarmFilter, error) {
	var (
		err  error
		node *AlarmFilter
	)
	afuo.defaults()
	if len(afuo.hooks) == 0 {
		if err = afuo.check(); err != nil {
			return nil, err
		}
		node, err = afuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AlarmFilterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = afuo.check(); err != nil {
				return nil, err
			}
			afuo.mutation = mutation
			node, err = afuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(afuo.hooks) - 1; i >= 0; i-- {
			mut = afuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, afuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (afuo *AlarmFilterUpdateOne) SaveX(ctx context.Context) *AlarmFilter {
	node, err := afuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (afuo *AlarmFilterUpdateOne) Exec(ctx context.Context) error {
	_, err := afuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (afuo *AlarmFilterUpdateOne) ExecX(ctx context.Context) {
	if err := afuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (afuo *AlarmFilterUpdateOne) defaults() {
	if _, ok := afuo.mutation.UpdateTime(); !ok {
		v := alarmfilter.UpdateDefaultUpdateTime()
		afuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (afuo *AlarmFilterUpdateOne) check() error {
	if v, ok := afuo.mutation.Name(); ok {
		if err := alarmfilter.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (afuo *AlarmFilterUpdateOne) sqlSave(ctx context.Context) (_node *AlarmFilter, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   alarmfilter.Table,
			Columns: alarmfilter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: alarmfilter.FieldID,
			},
		},
	}
	id, ok := afuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AlarmFilter.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := afuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: alarmfilter.FieldUpdateTime,
		})
	}
	if value, ok := afuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alarmfilter.FieldName,
		})
	}
	if value, ok := afuo.mutation.NetworkResource(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alarmfilter.FieldNetworkResource,
		})
	}
	if value, ok := afuo.mutation.BeginTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: alarmfilter.FieldBeginTime,
		})
	}
	if value, ok := afuo.mutation.EndTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: alarmfilter.FieldEndTime,
		})
	}
	if value, ok := afuo.mutation.Reason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alarmfilter.FieldReason,
		})
	}
	if value, ok := afuo.mutation.User(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: alarmfilter.FieldUser,
		})
	}
	if value, ok := afuo.mutation.CreationTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: alarmfilter.FieldCreationTime,
		})
	}
	if value, ok := afuo.mutation.Enable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: alarmfilter.FieldEnable,
		})
	}
	if afuo.mutation.AlarmStatusFkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   alarmfilter.AlarmStatusFkTable,
			Columns: []string{alarmfilter.AlarmStatusFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: alarmstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := afuo.mutation.AlarmStatusFkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   alarmfilter.AlarmStatusFkTable,
			Columns: []string{alarmfilter.AlarmStatusFkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: alarmstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AlarmFilter{config: afuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, afuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{alarmfilter.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
