// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/comparator"
	"github.com/facebookincubator/symphony/pkg/ent/kqicomparator"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/rulelimit"
)

// ComparatorUpdate is the builder for updating Comparator entities.
type ComparatorUpdate struct {
	config
	hooks    []Hook
	mutation *ComparatorMutation
}

// Where adds a new predicate for the builder.
func (cu *ComparatorUpdate) Where(ps ...predicate.Comparator) *ComparatorUpdate {
	cu.mutation.predicates = append(cu.mutation.predicates, ps...)
	return cu
}

// SetName sets the name field.
func (cu *ComparatorUpdate) SetName(s string) *ComparatorUpdate {
	cu.mutation.SetName(s)
	return cu
}

// AddComparatorrulelimitIDs adds the comparatorrulelimit edge to RuleLimit by ids.
func (cu *ComparatorUpdate) AddComparatorrulelimitIDs(ids ...int) *ComparatorUpdate {
	cu.mutation.AddComparatorrulelimitIDs(ids...)
	return cu
}

// AddComparatorrulelimit adds the comparatorrulelimit edges to RuleLimit.
func (cu *ComparatorUpdate) AddComparatorrulelimit(r ...*RuleLimit) *ComparatorUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.AddComparatorrulelimitIDs(ids...)
}

// AddComparatorkqitargetfkIDs adds the comparatorkqitargetfk edge to KqiComparator by ids.
func (cu *ComparatorUpdate) AddComparatorkqitargetfkIDs(ids ...int) *ComparatorUpdate {
	cu.mutation.AddComparatorkqitargetfkIDs(ids...)
	return cu
}

// AddComparatorkqitargetfk adds the comparatorkqitargetfk edges to KqiComparator.
func (cu *ComparatorUpdate) AddComparatorkqitargetfk(k ...*KqiComparator) *ComparatorUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return cu.AddComparatorkqitargetfkIDs(ids...)
}

// Mutation returns the ComparatorMutation object of the builder.
func (cu *ComparatorUpdate) Mutation() *ComparatorMutation {
	return cu.mutation
}

// ClearComparatorrulelimit clears all "comparatorrulelimit" edges to type RuleLimit.
func (cu *ComparatorUpdate) ClearComparatorrulelimit() *ComparatorUpdate {
	cu.mutation.ClearComparatorrulelimit()
	return cu
}

// RemoveComparatorrulelimitIDs removes the comparatorrulelimit edge to RuleLimit by ids.
func (cu *ComparatorUpdate) RemoveComparatorrulelimitIDs(ids ...int) *ComparatorUpdate {
	cu.mutation.RemoveComparatorrulelimitIDs(ids...)
	return cu
}

// RemoveComparatorrulelimit removes comparatorrulelimit edges to RuleLimit.
func (cu *ComparatorUpdate) RemoveComparatorrulelimit(r ...*RuleLimit) *ComparatorUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.RemoveComparatorrulelimitIDs(ids...)
}

// ClearComparatorkqitargetfk clears all "comparatorkqitargetfk" edges to type KqiComparator.
func (cu *ComparatorUpdate) ClearComparatorkqitargetfk() *ComparatorUpdate {
	cu.mutation.ClearComparatorkqitargetfk()
	return cu
}

// RemoveComparatorkqitargetfkIDs removes the comparatorkqitargetfk edge to KqiComparator by ids.
func (cu *ComparatorUpdate) RemoveComparatorkqitargetfkIDs(ids ...int) *ComparatorUpdate {
	cu.mutation.RemoveComparatorkqitargetfkIDs(ids...)
	return cu
}

// RemoveComparatorkqitargetfk removes comparatorkqitargetfk edges to KqiComparator.
func (cu *ComparatorUpdate) RemoveComparatorkqitargetfk(k ...*KqiComparator) *ComparatorUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return cu.RemoveComparatorkqitargetfkIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ComparatorUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ComparatorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ComparatorUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ComparatorUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ComparatorUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ComparatorUpdate) defaults() {
	if _, ok := cu.mutation.UpdateTime(); !ok {
		v := comparator.UpdateDefaultUpdateTime()
		cu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ComparatorUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := comparator.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (cu *ComparatorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   comparator.Table,
			Columns: comparator.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: comparator.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: comparator.FieldUpdateTime,
		})
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: comparator.FieldName,
		})
	}
	if cu.mutation.ComparatorrulelimitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comparator.ComparatorrulelimitTable,
			Columns: []string{comparator.ComparatorrulelimitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rulelimit.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedComparatorrulelimitIDs(); len(nodes) > 0 && !cu.mutation.ComparatorrulelimitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comparator.ComparatorrulelimitTable,
			Columns: []string{comparator.ComparatorrulelimitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rulelimit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ComparatorrulelimitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comparator.ComparatorrulelimitTable,
			Columns: []string{comparator.ComparatorrulelimitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rulelimit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ComparatorkqitargetfkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comparator.ComparatorkqitargetfkTable,
			Columns: []string{comparator.ComparatorkqitargetfkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqicomparator.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedComparatorkqitargetfkIDs(); len(nodes) > 0 && !cu.mutation.ComparatorkqitargetfkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comparator.ComparatorkqitargetfkTable,
			Columns: []string{comparator.ComparatorkqitargetfkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqicomparator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ComparatorkqitargetfkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comparator.ComparatorkqitargetfkTable,
			Columns: []string{comparator.ComparatorkqitargetfkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqicomparator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comparator.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ComparatorUpdateOne is the builder for updating a single Comparator entity.
type ComparatorUpdateOne struct {
	config
	hooks    []Hook
	mutation *ComparatorMutation
}

// SetName sets the name field.
func (cuo *ComparatorUpdateOne) SetName(s string) *ComparatorUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// AddComparatorrulelimitIDs adds the comparatorrulelimit edge to RuleLimit by ids.
func (cuo *ComparatorUpdateOne) AddComparatorrulelimitIDs(ids ...int) *ComparatorUpdateOne {
	cuo.mutation.AddComparatorrulelimitIDs(ids...)
	return cuo
}

// AddComparatorrulelimit adds the comparatorrulelimit edges to RuleLimit.
func (cuo *ComparatorUpdateOne) AddComparatorrulelimit(r ...*RuleLimit) *ComparatorUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.AddComparatorrulelimitIDs(ids...)
}

// AddComparatorkqitargetfkIDs adds the comparatorkqitargetfk edge to KqiComparator by ids.
func (cuo *ComparatorUpdateOne) AddComparatorkqitargetfkIDs(ids ...int) *ComparatorUpdateOne {
	cuo.mutation.AddComparatorkqitargetfkIDs(ids...)
	return cuo
}

// AddComparatorkqitargetfk adds the comparatorkqitargetfk edges to KqiComparator.
func (cuo *ComparatorUpdateOne) AddComparatorkqitargetfk(k ...*KqiComparator) *ComparatorUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return cuo.AddComparatorkqitargetfkIDs(ids...)
}

// Mutation returns the ComparatorMutation object of the builder.
func (cuo *ComparatorUpdateOne) Mutation() *ComparatorMutation {
	return cuo.mutation
}

// ClearComparatorrulelimit clears all "comparatorrulelimit" edges to type RuleLimit.
func (cuo *ComparatorUpdateOne) ClearComparatorrulelimit() *ComparatorUpdateOne {
	cuo.mutation.ClearComparatorrulelimit()
	return cuo
}

// RemoveComparatorrulelimitIDs removes the comparatorrulelimit edge to RuleLimit by ids.
func (cuo *ComparatorUpdateOne) RemoveComparatorrulelimitIDs(ids ...int) *ComparatorUpdateOne {
	cuo.mutation.RemoveComparatorrulelimitIDs(ids...)
	return cuo
}

// RemoveComparatorrulelimit removes comparatorrulelimit edges to RuleLimit.
func (cuo *ComparatorUpdateOne) RemoveComparatorrulelimit(r ...*RuleLimit) *ComparatorUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.RemoveComparatorrulelimitIDs(ids...)
}

// ClearComparatorkqitargetfk clears all "comparatorkqitargetfk" edges to type KqiComparator.
func (cuo *ComparatorUpdateOne) ClearComparatorkqitargetfk() *ComparatorUpdateOne {
	cuo.mutation.ClearComparatorkqitargetfk()
	return cuo
}

// RemoveComparatorkqitargetfkIDs removes the comparatorkqitargetfk edge to KqiComparator by ids.
func (cuo *ComparatorUpdateOne) RemoveComparatorkqitargetfkIDs(ids ...int) *ComparatorUpdateOne {
	cuo.mutation.RemoveComparatorkqitargetfkIDs(ids...)
	return cuo
}

// RemoveComparatorkqitargetfk removes comparatorkqitargetfk edges to KqiComparator.
func (cuo *ComparatorUpdateOne) RemoveComparatorkqitargetfk(k ...*KqiComparator) *ComparatorUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return cuo.RemoveComparatorkqitargetfkIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (cuo *ComparatorUpdateOne) Save(ctx context.Context) (*Comparator, error) {
	var (
		err  error
		node *Comparator
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ComparatorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ComparatorUpdateOne) SaveX(ctx context.Context) *Comparator {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ComparatorUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ComparatorUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ComparatorUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdateTime(); !ok {
		v := comparator.UpdateDefaultUpdateTime()
		cuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ComparatorUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := comparator.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (cuo *ComparatorUpdateOne) sqlSave(ctx context.Context) (_node *Comparator, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   comparator.Table,
			Columns: comparator.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: comparator.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Comparator.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: comparator.FieldUpdateTime,
		})
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: comparator.FieldName,
		})
	}
	if cuo.mutation.ComparatorrulelimitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comparator.ComparatorrulelimitTable,
			Columns: []string{comparator.ComparatorrulelimitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rulelimit.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedComparatorrulelimitIDs(); len(nodes) > 0 && !cuo.mutation.ComparatorrulelimitCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comparator.ComparatorrulelimitTable,
			Columns: []string{comparator.ComparatorrulelimitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rulelimit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ComparatorrulelimitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comparator.ComparatorrulelimitTable,
			Columns: []string{comparator.ComparatorrulelimitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rulelimit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ComparatorkqitargetfkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comparator.ComparatorkqitargetfkTable,
			Columns: []string{comparator.ComparatorkqitargetfkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqicomparator.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedComparatorkqitargetfkIDs(); len(nodes) > 0 && !cuo.mutation.ComparatorkqitargetfkCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comparator.ComparatorkqitargetfkTable,
			Columns: []string{comparator.ComparatorkqitargetfkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqicomparator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ComparatorkqitargetfkIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comparator.ComparatorkqitargetfkTable,
			Columns: []string{comparator.ComparatorkqitargetfkColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kqicomparator.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Comparator{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comparator.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
