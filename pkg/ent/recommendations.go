// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/recommendations"
	"github.com/facebookincubator/symphony/pkg/ent/recommendationscategory"
	"github.com/facebookincubator/symphony/pkg/ent/recommendationssources"
	"github.com/facebookincubator/symphony/pkg/ent/user"
	"github.com/facebookincubator/symphony/pkg/ent/vendor"
)

// Recommendations is the model entity for the Recommendations schema.
type Recommendations struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// ExternalId holds the value of the "externalId" field.
	ExternalId string `json:"externalId,omitempty"`
	// Resource holds the value of the "resource" field.
	Resource string `json:"resource,omitempty"`
	// AlarmType holds the value of the "alarmType" field.
	AlarmType string `json:"alarmType,omitempty"`
	// ShortDescription holds the value of the "shortDescription" field.
	ShortDescription string `json:"shortDescription,omitempty"`
	// LongDescription holds the value of the "longDescription" field.
	LongDescription string `json:"longDescription,omitempty"`
	// Command holds the value of the "command" field.
	Command *string `json:"command,omitempty"`
	// Priority holds the value of the "priority" field.
	Priority int `json:"priority,omitempty"`
	// Status holds the value of the "status" field.
	Status bool `json:"status,omitempty"`
	// Used holds the value of the "used" field.
	Used *int `json:"used,omitempty"`
	// Runbook holds the value of the "runbook" field.
	Runbook *string `json:"runbook,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RecommendationsQuery when eager-loading is set.
	Edges                                    RecommendationsEdges `json:"edges"`
	recommendations_category_recommendations *int
	recommendations_sources_recommendations  *int
	user_user_create                         *int
	user_user_approved                       *int
	vendor_vendors_recomendations            *int
}

// RecommendationsEdges holds the relations/edges for other nodes in the graph.
type RecommendationsEdges struct {
	// RecomendationSources holds the value of the recomendation_sources edge.
	RecomendationSources *RecommendationsSources
	// RecomendationCategory holds the value of the recomendation_category edge.
	RecomendationCategory *RecommendationsCategory
	// UserCreate holds the value of the UserCreate edge.
	UserCreate *User
	// UserApprobed holds the value of the UserApprobed edge.
	UserApprobed *User
	// VendorsRecomendations holds the value of the vendors_recomendations edge.
	VendorsRecomendations *Vendor
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// RecomendationSourcesOrErr returns the RecomendationSources value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RecommendationsEdges) RecomendationSourcesOrErr() (*RecommendationsSources, error) {
	if e.loadedTypes[0] {
		if e.RecomendationSources == nil {
			// The edge recomendation_sources was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: recommendationssources.Label}
		}
		return e.RecomendationSources, nil
	}
	return nil, &NotLoadedError{edge: "recomendation_sources"}
}

// RecomendationCategoryOrErr returns the RecomendationCategory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RecommendationsEdges) RecomendationCategoryOrErr() (*RecommendationsCategory, error) {
	if e.loadedTypes[1] {
		if e.RecomendationCategory == nil {
			// The edge recomendation_category was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: recommendationscategory.Label}
		}
		return e.RecomendationCategory, nil
	}
	return nil, &NotLoadedError{edge: "recomendation_category"}
}

// UserCreateOrErr returns the UserCreate value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RecommendationsEdges) UserCreateOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.UserCreate == nil {
			// The edge UserCreate was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.UserCreate, nil
	}
	return nil, &NotLoadedError{edge: "UserCreate"}
}

// UserApprobedOrErr returns the UserApprobed value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RecommendationsEdges) UserApprobedOrErr() (*User, error) {
	if e.loadedTypes[3] {
		if e.UserApprobed == nil {
			// The edge UserApprobed was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.UserApprobed, nil
	}
	return nil, &NotLoadedError{edge: "UserApprobed"}
}

// VendorsRecomendationsOrErr returns the VendorsRecomendations value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RecommendationsEdges) VendorsRecomendationsOrErr() (*Vendor, error) {
	if e.loadedTypes[4] {
		if e.VendorsRecomendations == nil {
			// The edge vendors_recomendations was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: vendor.Label}
		}
		return e.VendorsRecomendations, nil
	}
	return nil, &NotLoadedError{edge: "vendors_recomendations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Recommendations) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // create_time
		&sql.NullTime{},   // update_time
		&sql.NullString{}, // externalId
		&sql.NullString{}, // resource
		&sql.NullString{}, // alarmType
		&sql.NullString{}, // shortDescription
		&sql.NullString{}, // longDescription
		&sql.NullString{}, // command
		&sql.NullInt64{},  // priority
		&sql.NullBool{},   // status
		&sql.NullInt64{},  // used
		&sql.NullString{}, // runbook
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Recommendations) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // recommendations_category_recommendations
		&sql.NullInt64{}, // recommendations_sources_recommendations
		&sql.NullInt64{}, // user_user_create
		&sql.NullInt64{}, // user_user_approved
		&sql.NullInt64{}, // vendor_vendors_recomendations
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Recommendations fields.
func (r *Recommendations) assignValues(values ...interface{}) error {
	if m, n := len(values), len(recommendations.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		r.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		r.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field externalId", values[2])
	} else if value.Valid {
		r.ExternalId = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field resource", values[3])
	} else if value.Valid {
		r.Resource = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field alarmType", values[4])
	} else if value.Valid {
		r.AlarmType = value.String
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field shortDescription", values[5])
	} else if value.Valid {
		r.ShortDescription = value.String
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field longDescription", values[6])
	} else if value.Valid {
		r.LongDescription = value.String
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field command", values[7])
	} else if value.Valid {
		r.Command = new(string)
		*r.Command = value.String
	}
	if value, ok := values[8].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field priority", values[8])
	} else if value.Valid {
		r.Priority = int(value.Int64)
	}
	if value, ok := values[9].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[9])
	} else if value.Valid {
		r.Status = value.Bool
	}
	if value, ok := values[10].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field used", values[10])
	} else if value.Valid {
		r.Used = new(int)
		*r.Used = int(value.Int64)
	}
	if value, ok := values[11].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field runbook", values[11])
	} else if value.Valid {
		r.Runbook = new(string)
		*r.Runbook = value.String
	}
	values = values[12:]
	if len(values) == len(recommendations.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field recommendations_category_recommendations", value)
		} else if value.Valid {
			r.recommendations_category_recommendations = new(int)
			*r.recommendations_category_recommendations = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field recommendations_sources_recommendations", value)
		} else if value.Valid {
			r.recommendations_sources_recommendations = new(int)
			*r.recommendations_sources_recommendations = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_user_create", value)
		} else if value.Valid {
			r.user_user_create = new(int)
			*r.user_user_create = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_user_approved", value)
		} else if value.Valid {
			r.user_user_approved = new(int)
			*r.user_user_approved = int(value.Int64)
		}
		if value, ok := values[4].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field vendor_vendors_recomendations", value)
		} else if value.Valid {
			r.vendor_vendors_recomendations = new(int)
			*r.vendor_vendors_recomendations = int(value.Int64)
		}
	}
	return nil
}

// QueryRecomendationSources queries the recomendation_sources edge of the Recommendations.
func (r *Recommendations) QueryRecomendationSources() *RecommendationsSourcesQuery {
	return (&RecommendationsClient{config: r.config}).QueryRecomendationSources(r)
}

// QueryRecomendationCategory queries the recomendation_category edge of the Recommendations.
func (r *Recommendations) QueryRecomendationCategory() *RecommendationsCategoryQuery {
	return (&RecommendationsClient{config: r.config}).QueryRecomendationCategory(r)
}

// QueryUserCreate queries the UserCreate edge of the Recommendations.
func (r *Recommendations) QueryUserCreate() *UserQuery {
	return (&RecommendationsClient{config: r.config}).QueryUserCreate(r)
}

// QueryUserApprobed queries the UserApprobed edge of the Recommendations.
func (r *Recommendations) QueryUserApprobed() *UserQuery {
	return (&RecommendationsClient{config: r.config}).QueryUserApprobed(r)
}

// QueryVendorsRecomendations queries the vendors_recomendations edge of the Recommendations.
func (r *Recommendations) QueryVendorsRecomendations() *VendorQuery {
	return (&RecommendationsClient{config: r.config}).QueryVendorsRecomendations(r)
}

// Update returns a builder for updating this Recommendations.
// Note that, you need to call Recommendations.Unwrap() before calling this method, if this Recommendations
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Recommendations) Update() *RecommendationsUpdateOne {
	return (&RecommendationsClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Recommendations) Unwrap() *Recommendations {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Recommendations is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Recommendations) String() string {
	var builder strings.Builder
	builder.WriteString("Recommendations(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(r.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(r.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", externalId=")
	builder.WriteString(r.ExternalId)
	builder.WriteString(", resource=")
	builder.WriteString(r.Resource)
	builder.WriteString(", alarmType=")
	builder.WriteString(r.AlarmType)
	builder.WriteString(", shortDescription=")
	builder.WriteString(r.ShortDescription)
	builder.WriteString(", longDescription=")
	builder.WriteString(r.LongDescription)
	if v := r.Command; v != nil {
		builder.WriteString(", command=")
		builder.WriteString(*v)
	}
	builder.WriteString(", priority=")
	builder.WriteString(fmt.Sprintf("%v", r.Priority))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", r.Status))
	if v := r.Used; v != nil {
		builder.WriteString(", used=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := r.Runbook; v != nil {
		builder.WriteString(", runbook=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// RecommendationsSlice is a parsable slice of Recommendations.
type RecommendationsSlice []*Recommendations

func (r RecommendationsSlice) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
