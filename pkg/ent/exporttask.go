// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/exporttask"
)

// ExportTask is the model entity for the ExportTask schema.
type ExportTask struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type exporttask.Type `json:"type,omitempty"`
	// Status holds the value of the "status" field.
	Status exporttask.Status `json:"status,omitempty"`
	// Progress holds the value of the "progress" field.
	Progress float64 `json:"progress,omitempty"`
	// Filters holds the value of the "filters" field.
	Filters string `json:"filters,omitempty"`
	// StoreKey holds the value of the "store_key" field.
	StoreKey *string `json:"store_key,omitempty"`
	// WoIDToExport holds the value of the "wo_id_to_export" field.
	WoIDToExport *int `json:"wo_id_to_export,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ExportTask) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},   // id
		&sql.NullString{},  // type
		&sql.NullString{},  // status
		&sql.NullFloat64{}, // progress
		&sql.NullString{},  // filters
		&sql.NullString{},  // store_key
		&sql.NullInt64{},   // wo_id_to_export
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ExportTask fields.
func (et *ExportTask) assignValues(values ...interface{}) error {
	if m, n := len(values), len(exporttask.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	et.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field type", values[0])
	} else if value.Valid {
		et.Type = exporttask.Type(value.String)
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[1])
	} else if value.Valid {
		et.Status = exporttask.Status(value.String)
	}
	if value, ok := values[2].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field progress", values[2])
	} else if value.Valid {
		et.Progress = value.Float64
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field filters", values[3])
	} else if value.Valid {
		et.Filters = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field store_key", values[4])
	} else if value.Valid {
		et.StoreKey = new(string)
		*et.StoreKey = value.String
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field wo_id_to_export", values[5])
	} else if value.Valid {
		et.WoIDToExport = new(int)
		*et.WoIDToExport = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this ExportTask.
// Note that, you need to call ExportTask.Unwrap() before calling this method, if this ExportTask
// was returned from a transaction, and the transaction was committed or rolled back.
func (et *ExportTask) Update() *ExportTaskUpdateOne {
	return (&ExportTaskClient{config: et.config}).UpdateOne(et)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (et *ExportTask) Unwrap() *ExportTask {
	tx, ok := et.config.driver.(*txDriver)
	if !ok {
		panic("ent: ExportTask is not a transactional entity")
	}
	et.config.driver = tx.drv
	return et
}

// String implements the fmt.Stringer.
func (et *ExportTask) String() string {
	var builder strings.Builder
	builder.WriteString("ExportTask(")
	builder.WriteString(fmt.Sprintf("id=%v", et.ID))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", et.Type))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", et.Status))
	builder.WriteString(", progress=")
	builder.WriteString(fmt.Sprintf("%v", et.Progress))
	builder.WriteString(", filters=")
	builder.WriteString(et.Filters)
	if v := et.StoreKey; v != nil {
		builder.WriteString(", store_key=")
		builder.WriteString(*v)
	}
	if v := et.WoIDToExport; v != nil {
		builder.WriteString(", wo_id_to_export=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// ExportTasks is a parsable slice of ExportTask.
type ExportTasks []*ExportTask

func (et ExportTasks) config(cfg config) {
	for _i := range et {
		et[_i].config = cfg
	}
}
