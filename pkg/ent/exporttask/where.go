// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package exporttask

import (
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Progress applies equality check predicate on the "progress" field. It's identical to ProgressEQ.
func Progress(v float64) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProgress), v))
	})
}

// Filters applies equality check predicate on the "filters" field. It's identical to FiltersEQ.
func Filters(v string) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFilters), v))
	})
}

// StoreKey applies equality check predicate on the "store_key" field. It's identical to StoreKeyEQ.
func StoreKey(v string) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreKey), v))
	})
}

// WoIDToExport applies equality check predicate on the "wo_id_to_export" field. It's identical to WoIDToExportEQ.
func WoIDToExport(v int) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWoIDToExport), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.ExportTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExportTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.ExportTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExportTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.ExportTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExportTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.ExportTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExportTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// ProgressEQ applies the EQ predicate on the "progress" field.
func ProgressEQ(v float64) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProgress), v))
	})
}

// ProgressNEQ applies the NEQ predicate on the "progress" field.
func ProgressNEQ(v float64) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProgress), v))
	})
}

// ProgressIn applies the In predicate on the "progress" field.
func ProgressIn(vs ...float64) predicate.ExportTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExportTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProgress), v...))
	})
}

// ProgressNotIn applies the NotIn predicate on the "progress" field.
func ProgressNotIn(vs ...float64) predicate.ExportTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExportTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProgress), v...))
	})
}

// ProgressGT applies the GT predicate on the "progress" field.
func ProgressGT(v float64) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProgress), v))
	})
}

// ProgressGTE applies the GTE predicate on the "progress" field.
func ProgressGTE(v float64) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProgress), v))
	})
}

// ProgressLT applies the LT predicate on the "progress" field.
func ProgressLT(v float64) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProgress), v))
	})
}

// ProgressLTE applies the LTE predicate on the "progress" field.
func ProgressLTE(v float64) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProgress), v))
	})
}

// FiltersEQ applies the EQ predicate on the "filters" field.
func FiltersEQ(v string) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFilters), v))
	})
}

// FiltersNEQ applies the NEQ predicate on the "filters" field.
func FiltersNEQ(v string) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFilters), v))
	})
}

// FiltersIn applies the In predicate on the "filters" field.
func FiltersIn(vs ...string) predicate.ExportTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExportTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFilters), v...))
	})
}

// FiltersNotIn applies the NotIn predicate on the "filters" field.
func FiltersNotIn(vs ...string) predicate.ExportTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExportTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFilters), v...))
	})
}

// FiltersGT applies the GT predicate on the "filters" field.
func FiltersGT(v string) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFilters), v))
	})
}

// FiltersGTE applies the GTE predicate on the "filters" field.
func FiltersGTE(v string) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFilters), v))
	})
}

// FiltersLT applies the LT predicate on the "filters" field.
func FiltersLT(v string) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFilters), v))
	})
}

// FiltersLTE applies the LTE predicate on the "filters" field.
func FiltersLTE(v string) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFilters), v))
	})
}

// FiltersContains applies the Contains predicate on the "filters" field.
func FiltersContains(v string) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFilters), v))
	})
}

// FiltersHasPrefix applies the HasPrefix predicate on the "filters" field.
func FiltersHasPrefix(v string) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFilters), v))
	})
}

// FiltersHasSuffix applies the HasSuffix predicate on the "filters" field.
func FiltersHasSuffix(v string) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFilters), v))
	})
}

// FiltersEqualFold applies the EqualFold predicate on the "filters" field.
func FiltersEqualFold(v string) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFilters), v))
	})
}

// FiltersContainsFold applies the ContainsFold predicate on the "filters" field.
func FiltersContainsFold(v string) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFilters), v))
	})
}

// StoreKeyEQ applies the EQ predicate on the "store_key" field.
func StoreKeyEQ(v string) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreKey), v))
	})
}

// StoreKeyNEQ applies the NEQ predicate on the "store_key" field.
func StoreKeyNEQ(v string) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStoreKey), v))
	})
}

// StoreKeyIn applies the In predicate on the "store_key" field.
func StoreKeyIn(vs ...string) predicate.ExportTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExportTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStoreKey), v...))
	})
}

// StoreKeyNotIn applies the NotIn predicate on the "store_key" field.
func StoreKeyNotIn(vs ...string) predicate.ExportTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExportTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStoreKey), v...))
	})
}

// StoreKeyGT applies the GT predicate on the "store_key" field.
func StoreKeyGT(v string) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStoreKey), v))
	})
}

// StoreKeyGTE applies the GTE predicate on the "store_key" field.
func StoreKeyGTE(v string) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStoreKey), v))
	})
}

// StoreKeyLT applies the LT predicate on the "store_key" field.
func StoreKeyLT(v string) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStoreKey), v))
	})
}

// StoreKeyLTE applies the LTE predicate on the "store_key" field.
func StoreKeyLTE(v string) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStoreKey), v))
	})
}

// StoreKeyContains applies the Contains predicate on the "store_key" field.
func StoreKeyContains(v string) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStoreKey), v))
	})
}

// StoreKeyHasPrefix applies the HasPrefix predicate on the "store_key" field.
func StoreKeyHasPrefix(v string) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStoreKey), v))
	})
}

// StoreKeyHasSuffix applies the HasSuffix predicate on the "store_key" field.
func StoreKeyHasSuffix(v string) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStoreKey), v))
	})
}

// StoreKeyIsNil applies the IsNil predicate on the "store_key" field.
func StoreKeyIsNil() predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStoreKey)))
	})
}

// StoreKeyNotNil applies the NotNil predicate on the "store_key" field.
func StoreKeyNotNil() predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStoreKey)))
	})
}

// StoreKeyEqualFold applies the EqualFold predicate on the "store_key" field.
func StoreKeyEqualFold(v string) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStoreKey), v))
	})
}

// StoreKeyContainsFold applies the ContainsFold predicate on the "store_key" field.
func StoreKeyContainsFold(v string) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStoreKey), v))
	})
}

// WoIDToExportEQ applies the EQ predicate on the "wo_id_to_export" field.
func WoIDToExportEQ(v int) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWoIDToExport), v))
	})
}

// WoIDToExportNEQ applies the NEQ predicate on the "wo_id_to_export" field.
func WoIDToExportNEQ(v int) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWoIDToExport), v))
	})
}

// WoIDToExportIn applies the In predicate on the "wo_id_to_export" field.
func WoIDToExportIn(vs ...int) predicate.ExportTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExportTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWoIDToExport), v...))
	})
}

// WoIDToExportNotIn applies the NotIn predicate on the "wo_id_to_export" field.
func WoIDToExportNotIn(vs ...int) predicate.ExportTask {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ExportTask(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWoIDToExport), v...))
	})
}

// WoIDToExportGT applies the GT predicate on the "wo_id_to_export" field.
func WoIDToExportGT(v int) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWoIDToExport), v))
	})
}

// WoIDToExportGTE applies the GTE predicate on the "wo_id_to_export" field.
func WoIDToExportGTE(v int) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWoIDToExport), v))
	})
}

// WoIDToExportLT applies the LT predicate on the "wo_id_to_export" field.
func WoIDToExportLT(v int) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWoIDToExport), v))
	})
}

// WoIDToExportLTE applies the LTE predicate on the "wo_id_to_export" field.
func WoIDToExportLTE(v int) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWoIDToExport), v))
	})
}

// WoIDToExportIsNil applies the IsNil predicate on the "wo_id_to_export" field.
func WoIDToExportIsNil() predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWoIDToExport)))
	})
}

// WoIDToExportNotNil applies the NotNil predicate on the "wo_id_to_export" field.
func WoIDToExportNotNil() predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWoIDToExport)))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.ExportTask) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.ExportTask) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ExportTask) predicate.ExportTask {
	return predicate.ExportTask(func(s *sql.Selector) {
		p(s.Not())
	})
}
