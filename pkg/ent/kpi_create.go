// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/domain"
	"github.com/facebookincubator/symphony/pkg/ent/formula"
	"github.com/facebookincubator/symphony/pkg/ent/kpi"
	"github.com/facebookincubator/symphony/pkg/ent/kpicategory"
	"github.com/facebookincubator/symphony/pkg/ent/threshold"
)

// KpiCreate is the builder for creating a Kpi entity.
type KpiCreate struct {
	config
	mutation *KpiMutation
	hooks    []Hook
}

// SetCreateTime sets the create_time field.
func (kc *KpiCreate) SetCreateTime(t time.Time) *KpiCreate {
	kc.mutation.SetCreateTime(t)
	return kc
}

// SetNillableCreateTime sets the create_time field if the given value is not nil.
func (kc *KpiCreate) SetNillableCreateTime(t *time.Time) *KpiCreate {
	if t != nil {
		kc.SetCreateTime(*t)
	}
	return kc
}

// SetUpdateTime sets the update_time field.
func (kc *KpiCreate) SetUpdateTime(t time.Time) *KpiCreate {
	kc.mutation.SetUpdateTime(t)
	return kc
}

// SetNillableUpdateTime sets the update_time field if the given value is not nil.
func (kc *KpiCreate) SetNillableUpdateTime(t *time.Time) *KpiCreate {
	if t != nil {
		kc.SetUpdateTime(*t)
	}
	return kc
}

// SetName sets the name field.
func (kc *KpiCreate) SetName(s string) *KpiCreate {
	kc.mutation.SetName(s)
	return kc
}

// SetDescription sets the description field.
func (kc *KpiCreate) SetDescription(s string) *KpiCreate {
	kc.mutation.SetDescription(s)
	return kc
}

// SetStatus sets the status field.
func (kc *KpiCreate) SetStatus(b bool) *KpiCreate {
	kc.mutation.SetStatus(b)
	return kc
}

// SetDomainID sets the domain edge to Domain by id.
func (kc *KpiCreate) SetDomainID(id int) *KpiCreate {
	kc.mutation.SetDomainID(id)
	return kc
}

// SetNillableDomainID sets the domain edge to Domain by id if the given value is not nil.
func (kc *KpiCreate) SetNillableDomainID(id *int) *KpiCreate {
	if id != nil {
		kc = kc.SetDomainID(*id)
	}
	return kc
}

// SetDomain sets the domain edge to Domain.
func (kc *KpiCreate) SetDomain(d *Domain) *KpiCreate {
	return kc.SetDomainID(d.ID)
}

// SetKpiCategoryID sets the KpiCategory edge to KpiCategory by id.
func (kc *KpiCreate) SetKpiCategoryID(id int) *KpiCreate {
	kc.mutation.SetKpiCategoryID(id)
	return kc
}

// SetNillableKpiCategoryID sets the KpiCategory edge to KpiCategory by id if the given value is not nil.
func (kc *KpiCreate) SetNillableKpiCategoryID(id *int) *KpiCreate {
	if id != nil {
		kc = kc.SetKpiCategoryID(*id)
	}
	return kc
}

// SetKpiCategory sets the KpiCategory edge to KpiCategory.
func (kc *KpiCreate) SetKpiCategory(k *KpiCategory) *KpiCreate {
	return kc.SetKpiCategoryID(k.ID)
}

// AddFormulakpiIDs adds the formulakpi edge to Formula by ids.
func (kc *KpiCreate) AddFormulakpiIDs(ids ...int) *KpiCreate {
	kc.mutation.AddFormulakpiIDs(ids...)
	return kc
}

// AddFormulakpi adds the formulakpi edges to Formula.
func (kc *KpiCreate) AddFormulakpi(f ...*Formula) *KpiCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return kc.AddFormulakpiIDs(ids...)
}

// SetThresholdkpiID sets the thresholdkpi edge to Threshold by id.
func (kc *KpiCreate) SetThresholdkpiID(id int) *KpiCreate {
	kc.mutation.SetThresholdkpiID(id)
	return kc
}

// SetNillableThresholdkpiID sets the thresholdkpi edge to Threshold by id if the given value is not nil.
func (kc *KpiCreate) SetNillableThresholdkpiID(id *int) *KpiCreate {
	if id != nil {
		kc = kc.SetThresholdkpiID(*id)
	}
	return kc
}

// SetThresholdkpi sets the thresholdkpi edge to Threshold.
func (kc *KpiCreate) SetThresholdkpi(t *Threshold) *KpiCreate {
	return kc.SetThresholdkpiID(t.ID)
}

// Mutation returns the KpiMutation object of the builder.
func (kc *KpiCreate) Mutation() *KpiMutation {
	return kc.mutation
}

// Save creates the Kpi in the database.
func (kc *KpiCreate) Save(ctx context.Context) (*Kpi, error) {
	var (
		err  error
		node *Kpi
	)
	kc.defaults()
	if len(kc.hooks) == 0 {
		if err = kc.check(); err != nil {
			return nil, err
		}
		node, err = kc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KpiMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = kc.check(); err != nil {
				return nil, err
			}
			kc.mutation = mutation
			node, err = kc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kc.hooks) - 1; i >= 0; i-- {
			mut = kc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (kc *KpiCreate) SaveX(ctx context.Context) *Kpi {
	v, err := kc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (kc *KpiCreate) defaults() {
	if _, ok := kc.mutation.CreateTime(); !ok {
		v := kpi.DefaultCreateTime()
		kc.mutation.SetCreateTime(v)
	}
	if _, ok := kc.mutation.UpdateTime(); !ok {
		v := kpi.DefaultUpdateTime()
		kc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kc *KpiCreate) check() error {
	if _, ok := kc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := kc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := kc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := kc.mutation.Name(); ok {
		if err := kpi.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := kc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New("ent: missing required field \"description\"")}
	}
	if v, ok := kc.mutation.Description(); ok {
		if err := kpi.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	if _, ok := kc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	return nil
}

func (kc *KpiCreate) sqlSave(ctx context.Context) (*Kpi, error) {
	_node, _spec := kc.createSpec()
	if err := sqlgraph.CreateNode(ctx, kc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (kc *KpiCreate) createSpec() (*Kpi, *sqlgraph.CreateSpec) {
	var (
		_node = &Kpi{config: kc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: kpi.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kpi.FieldID,
			},
		}
	)
	if value, ok := kc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kpi.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := kc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: kpi.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := kc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kpi.FieldName,
		})
		_node.Name = value
	}
	if value, ok := kc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kpi.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := kc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: kpi.FieldStatus,
		})
		_node.Status = value
	}
	if nodes := kc.mutation.DomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kpi.DomainTable,
			Columns: []string{kpi.DomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: domain.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := kc.mutation.KpiCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   kpi.KpiCategoryTable,
			Columns: []string{kpi.KpiCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kpicategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := kc.mutation.FormulakpiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kpi.FormulakpiTable,
			Columns: []string{kpi.FormulakpiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: formula.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := kc.mutation.ThresholdkpiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   kpi.ThresholdkpiTable,
			Columns: []string{kpi.ThresholdkpiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: threshold.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// KpiCreateBulk is the builder for creating a bulk of Kpi entities.
type KpiCreateBulk struct {
	config
	builders []*KpiCreate
}

// Save creates the Kpi entities in the database.
func (kcb *KpiCreateBulk) Save(ctx context.Context) ([]*Kpi, error) {
	specs := make([]*sqlgraph.CreateSpec, len(kcb.builders))
	nodes := make([]*Kpi, len(kcb.builders))
	mutators := make([]Mutator, len(kcb.builders))
	for i := range kcb.builders {
		func(i int, root context.Context) {
			builder := kcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*KpiMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, kcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, kcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, kcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (kcb *KpiCreateBulk) SaveX(ctx context.Context) []*Kpi {
	v, err := kcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
