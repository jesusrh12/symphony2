// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/feature"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/user"
	"github.com/facebookincubator/symphony/pkg/ent/usersgroup"
)

// FeatureUpdate is the builder for updating Feature entities.
type FeatureUpdate struct {
	config
	hooks    []Hook
	mutation *FeatureMutation
}

// Where adds a new predicate for the builder.
func (fu *FeatureUpdate) Where(ps ...predicate.Feature) *FeatureUpdate {
	fu.mutation.predicates = append(fu.mutation.predicates, ps...)
	return fu
}

// SetGlobal sets the global field.
func (fu *FeatureUpdate) SetGlobal(b bool) *FeatureUpdate {
	fu.mutation.SetGlobal(b)
	return fu
}

// SetNillableGlobal sets the global field if the given value is not nil.
func (fu *FeatureUpdate) SetNillableGlobal(b *bool) *FeatureUpdate {
	if b != nil {
		fu.SetGlobal(*b)
	}
	return fu
}

// SetEnabled sets the enabled field.
func (fu *FeatureUpdate) SetEnabled(b bool) *FeatureUpdate {
	fu.mutation.SetEnabled(b)
	return fu
}

// SetNillableEnabled sets the enabled field if the given value is not nil.
func (fu *FeatureUpdate) SetNillableEnabled(b *bool) *FeatureUpdate {
	if b != nil {
		fu.SetEnabled(*b)
	}
	return fu
}

// SetDescription sets the description field.
func (fu *FeatureUpdate) SetDescription(s string) *FeatureUpdate {
	fu.mutation.SetDescription(s)
	return fu
}

// SetNillableDescription sets the description field if the given value is not nil.
func (fu *FeatureUpdate) SetNillableDescription(s *string) *FeatureUpdate {
	if s != nil {
		fu.SetDescription(*s)
	}
	return fu
}

// ClearDescription clears the value of description.
func (fu *FeatureUpdate) ClearDescription() *FeatureUpdate {
	fu.mutation.ClearDescription()
	return fu
}

// AddUserIDs adds the users edge to User by ids.
func (fu *FeatureUpdate) AddUserIDs(ids ...int) *FeatureUpdate {
	fu.mutation.AddUserIDs(ids...)
	return fu
}

// AddUsers adds the users edges to User.
func (fu *FeatureUpdate) AddUsers(u ...*User) *FeatureUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fu.AddUserIDs(ids...)
}

// AddGroupIDs adds the groups edge to UsersGroup by ids.
func (fu *FeatureUpdate) AddGroupIDs(ids ...int) *FeatureUpdate {
	fu.mutation.AddGroupIDs(ids...)
	return fu
}

// AddGroups adds the groups edges to UsersGroup.
func (fu *FeatureUpdate) AddGroups(u ...*UsersGroup) *FeatureUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fu.AddGroupIDs(ids...)
}

// Mutation returns the FeatureMutation object of the builder.
func (fu *FeatureUpdate) Mutation() *FeatureMutation {
	return fu.mutation
}

// ClearUsers clears all "users" edges to type User.
func (fu *FeatureUpdate) ClearUsers() *FeatureUpdate {
	fu.mutation.ClearUsers()
	return fu
}

// RemoveUserIDs removes the users edge to User by ids.
func (fu *FeatureUpdate) RemoveUserIDs(ids ...int) *FeatureUpdate {
	fu.mutation.RemoveUserIDs(ids...)
	return fu
}

// RemoveUsers removes users edges to User.
func (fu *FeatureUpdate) RemoveUsers(u ...*User) *FeatureUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fu.RemoveUserIDs(ids...)
}

// ClearGroups clears all "groups" edges to type UsersGroup.
func (fu *FeatureUpdate) ClearGroups() *FeatureUpdate {
	fu.mutation.ClearGroups()
	return fu
}

// RemoveGroupIDs removes the groups edge to UsersGroup by ids.
func (fu *FeatureUpdate) RemoveGroupIDs(ids ...int) *FeatureUpdate {
	fu.mutation.RemoveGroupIDs(ids...)
	return fu
}

// RemoveGroups removes groups edges to UsersGroup.
func (fu *FeatureUpdate) RemoveGroups(u ...*UsersGroup) *FeatureUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fu.RemoveGroupIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FeatureUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	fu.defaults()
	if len(fu.hooks) == 0 {
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FeatureMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FeatureUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FeatureUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FeatureUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FeatureUpdate) defaults() {
	if _, ok := fu.mutation.UpdateTime(); !ok {
		v := feature.UpdateDefaultUpdateTime()
		fu.mutation.SetUpdateTime(v)
	}
}

func (fu *FeatureUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   feature.Table,
			Columns: feature.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: feature.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: feature.FieldUpdateTime,
		})
	}
	if value, ok := fu.mutation.Global(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: feature.FieldGlobal,
		})
	}
	if value, ok := fu.mutation.Enabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: feature.FieldEnabled,
		})
	}
	if value, ok := fu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feature.FieldDescription,
		})
	}
	if fu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: feature.FieldDescription,
		})
	}
	if fu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   feature.UsersTable,
			Columns: feature.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !fu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   feature.UsersTable,
			Columns: feature.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   feature.UsersTable,
			Columns: feature.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   feature.GroupsTable,
			Columns: feature.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usersgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !fu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   feature.GroupsTable,
			Columns: feature.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usersgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   feature.GroupsTable,
			Columns: feature.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usersgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feature.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// FeatureUpdateOne is the builder for updating a single Feature entity.
type FeatureUpdateOne struct {
	config
	hooks    []Hook
	mutation *FeatureMutation
}

// SetGlobal sets the global field.
func (fuo *FeatureUpdateOne) SetGlobal(b bool) *FeatureUpdateOne {
	fuo.mutation.SetGlobal(b)
	return fuo
}

// SetNillableGlobal sets the global field if the given value is not nil.
func (fuo *FeatureUpdateOne) SetNillableGlobal(b *bool) *FeatureUpdateOne {
	if b != nil {
		fuo.SetGlobal(*b)
	}
	return fuo
}

// SetEnabled sets the enabled field.
func (fuo *FeatureUpdateOne) SetEnabled(b bool) *FeatureUpdateOne {
	fuo.mutation.SetEnabled(b)
	return fuo
}

// SetNillableEnabled sets the enabled field if the given value is not nil.
func (fuo *FeatureUpdateOne) SetNillableEnabled(b *bool) *FeatureUpdateOne {
	if b != nil {
		fuo.SetEnabled(*b)
	}
	return fuo
}

// SetDescription sets the description field.
func (fuo *FeatureUpdateOne) SetDescription(s string) *FeatureUpdateOne {
	fuo.mutation.SetDescription(s)
	return fuo
}

// SetNillableDescription sets the description field if the given value is not nil.
func (fuo *FeatureUpdateOne) SetNillableDescription(s *string) *FeatureUpdateOne {
	if s != nil {
		fuo.SetDescription(*s)
	}
	return fuo
}

// ClearDescription clears the value of description.
func (fuo *FeatureUpdateOne) ClearDescription() *FeatureUpdateOne {
	fuo.mutation.ClearDescription()
	return fuo
}

// AddUserIDs adds the users edge to User by ids.
func (fuo *FeatureUpdateOne) AddUserIDs(ids ...int) *FeatureUpdateOne {
	fuo.mutation.AddUserIDs(ids...)
	return fuo
}

// AddUsers adds the users edges to User.
func (fuo *FeatureUpdateOne) AddUsers(u ...*User) *FeatureUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fuo.AddUserIDs(ids...)
}

// AddGroupIDs adds the groups edge to UsersGroup by ids.
func (fuo *FeatureUpdateOne) AddGroupIDs(ids ...int) *FeatureUpdateOne {
	fuo.mutation.AddGroupIDs(ids...)
	return fuo
}

// AddGroups adds the groups edges to UsersGroup.
func (fuo *FeatureUpdateOne) AddGroups(u ...*UsersGroup) *FeatureUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fuo.AddGroupIDs(ids...)
}

// Mutation returns the FeatureMutation object of the builder.
func (fuo *FeatureUpdateOne) Mutation() *FeatureMutation {
	return fuo.mutation
}

// ClearUsers clears all "users" edges to type User.
func (fuo *FeatureUpdateOne) ClearUsers() *FeatureUpdateOne {
	fuo.mutation.ClearUsers()
	return fuo
}

// RemoveUserIDs removes the users edge to User by ids.
func (fuo *FeatureUpdateOne) RemoveUserIDs(ids ...int) *FeatureUpdateOne {
	fuo.mutation.RemoveUserIDs(ids...)
	return fuo
}

// RemoveUsers removes users edges to User.
func (fuo *FeatureUpdateOne) RemoveUsers(u ...*User) *FeatureUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fuo.RemoveUserIDs(ids...)
}

// ClearGroups clears all "groups" edges to type UsersGroup.
func (fuo *FeatureUpdateOne) ClearGroups() *FeatureUpdateOne {
	fuo.mutation.ClearGroups()
	return fuo
}

// RemoveGroupIDs removes the groups edge to UsersGroup by ids.
func (fuo *FeatureUpdateOne) RemoveGroupIDs(ids ...int) *FeatureUpdateOne {
	fuo.mutation.RemoveGroupIDs(ids...)
	return fuo
}

// RemoveGroups removes groups edges to UsersGroup.
func (fuo *FeatureUpdateOne) RemoveGroups(u ...*UsersGroup) *FeatureUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fuo.RemoveGroupIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (fuo *FeatureUpdateOne) Save(ctx context.Context) (*Feature, error) {
	var (
		err  error
		node *Feature
	)
	fuo.defaults()
	if len(fuo.hooks) == 0 {
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FeatureMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			mut = fuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FeatureUpdateOne) SaveX(ctx context.Context) *Feature {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FeatureUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FeatureUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FeatureUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdateTime(); !ok {
		v := feature.UpdateDefaultUpdateTime()
		fuo.mutation.SetUpdateTime(v)
	}
}

func (fuo *FeatureUpdateOne) sqlSave(ctx context.Context) (_node *Feature, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   feature.Table,
			Columns: feature.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: feature.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Feature.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := fuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: feature.FieldUpdateTime,
		})
	}
	if value, ok := fuo.mutation.Global(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: feature.FieldGlobal,
		})
	}
	if value, ok := fuo.mutation.Enabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: feature.FieldEnabled,
		})
	}
	if value, ok := fuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feature.FieldDescription,
		})
	}
	if fuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: feature.FieldDescription,
		})
	}
	if fuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   feature.UsersTable,
			Columns: feature.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !fuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   feature.UsersTable,
			Columns: feature.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   feature.UsersTable,
			Columns: feature.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   feature.GroupsTable,
			Columns: feature.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usersgroup.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !fuo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   feature.GroupsTable,
			Columns: feature.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usersgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   feature.GroupsTable,
			Columns: feature.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usersgroup.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Feature{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feature.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
