// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/block"
	"github.com/facebookincubator/symphony/pkg/ent/flowexecutiontemplate"
	"github.com/facebookincubator/symphony/pkg/flowengine/flowschema"
)

// FlowExecutionTemplateCreate is the builder for creating a FlowExecutionTemplate entity.
type FlowExecutionTemplateCreate struct {
	config
	mutation *FlowExecutionTemplateMutation
	hooks    []Hook
}

// SetCreateTime sets the create_time field.
func (fetc *FlowExecutionTemplateCreate) SetCreateTime(t time.Time) *FlowExecutionTemplateCreate {
	fetc.mutation.SetCreateTime(t)
	return fetc
}

// SetNillableCreateTime sets the create_time field if the given value is not nil.
func (fetc *FlowExecutionTemplateCreate) SetNillableCreateTime(t *time.Time) *FlowExecutionTemplateCreate {
	if t != nil {
		fetc.SetCreateTime(*t)
	}
	return fetc
}

// SetUpdateTime sets the update_time field.
func (fetc *FlowExecutionTemplateCreate) SetUpdateTime(t time.Time) *FlowExecutionTemplateCreate {
	fetc.mutation.SetUpdateTime(t)
	return fetc
}

// SetNillableUpdateTime sets the update_time field if the given value is not nil.
func (fetc *FlowExecutionTemplateCreate) SetNillableUpdateTime(t *time.Time) *FlowExecutionTemplateCreate {
	if t != nil {
		fetc.SetUpdateTime(*t)
	}
	return fetc
}

// SetName sets the name field.
func (fetc *FlowExecutionTemplateCreate) SetName(s string) *FlowExecutionTemplateCreate {
	fetc.mutation.SetName(s)
	return fetc
}

// SetDescription sets the description field.
func (fetc *FlowExecutionTemplateCreate) SetDescription(s string) *FlowExecutionTemplateCreate {
	fetc.mutation.SetDescription(s)
	return fetc
}

// SetNillableDescription sets the description field if the given value is not nil.
func (fetc *FlowExecutionTemplateCreate) SetNillableDescription(s *string) *FlowExecutionTemplateCreate {
	if s != nil {
		fetc.SetDescription(*s)
	}
	return fetc
}

// SetEndParamDefinitions sets the end_param_definitions field.
func (fetc *FlowExecutionTemplateCreate) SetEndParamDefinitions(fd []*flowschema.VariableDefinition) *FlowExecutionTemplateCreate {
	fetc.mutation.SetEndParamDefinitions(fd)
	return fetc
}

// AddBlockIDs adds the blocks edge to Block by ids.
func (fetc *FlowExecutionTemplateCreate) AddBlockIDs(ids ...int) *FlowExecutionTemplateCreate {
	fetc.mutation.AddBlockIDs(ids...)
	return fetc
}

// AddBlocks adds the blocks edges to Block.
func (fetc *FlowExecutionTemplateCreate) AddBlocks(b ...*Block) *FlowExecutionTemplateCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return fetc.AddBlockIDs(ids...)
}

// Mutation returns the FlowExecutionTemplateMutation object of the builder.
func (fetc *FlowExecutionTemplateCreate) Mutation() *FlowExecutionTemplateMutation {
	return fetc.mutation
}

// Save creates the FlowExecutionTemplate in the database.
func (fetc *FlowExecutionTemplateCreate) Save(ctx context.Context) (*FlowExecutionTemplate, error) {
	var (
		err  error
		node *FlowExecutionTemplate
	)
	fetc.defaults()
	if len(fetc.hooks) == 0 {
		if err = fetc.check(); err != nil {
			return nil, err
		}
		node, err = fetc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlowExecutionTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fetc.check(); err != nil {
				return nil, err
			}
			fetc.mutation = mutation
			node, err = fetc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fetc.hooks) - 1; i >= 0; i-- {
			mut = fetc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fetc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fetc *FlowExecutionTemplateCreate) SaveX(ctx context.Context) *FlowExecutionTemplate {
	v, err := fetc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (fetc *FlowExecutionTemplateCreate) defaults() {
	if _, ok := fetc.mutation.CreateTime(); !ok {
		v := flowexecutiontemplate.DefaultCreateTime()
		fetc.mutation.SetCreateTime(v)
	}
	if _, ok := fetc.mutation.UpdateTime(); !ok {
		v := flowexecutiontemplate.DefaultUpdateTime()
		fetc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fetc *FlowExecutionTemplateCreate) check() error {
	if _, ok := fetc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New("ent: missing required field \"create_time\"")}
	}
	if _, ok := fetc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New("ent: missing required field \"update_time\"")}
	}
	if _, ok := fetc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := fetc.mutation.Name(); ok {
		if err := flowexecutiontemplate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (fetc *FlowExecutionTemplateCreate) sqlSave(ctx context.Context) (*FlowExecutionTemplate, error) {
	_node, _spec := fetc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fetc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (fetc *FlowExecutionTemplateCreate) createSpec() (*FlowExecutionTemplate, *sqlgraph.CreateSpec) {
	var (
		_node = &FlowExecutionTemplate{config: fetc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: flowexecutiontemplate.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: flowexecutiontemplate.FieldID,
			},
		}
	)
	if value, ok := fetc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flowexecutiontemplate.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := fetc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flowexecutiontemplate.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := fetc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flowexecutiontemplate.FieldName,
		})
		_node.Name = value
	}
	if value, ok := fetc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flowexecutiontemplate.FieldDescription,
		})
		_node.Description = &value
	}
	if value, ok := fetc.mutation.EndParamDefinitions(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: flowexecutiontemplate.FieldEndParamDefinitions,
		})
		_node.EndParamDefinitions = value
	}
	if nodes := fetc.mutation.BlocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flowexecutiontemplate.BlocksTable,
			Columns: []string{flowexecutiontemplate.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FlowExecutionTemplateCreateBulk is the builder for creating a bulk of FlowExecutionTemplate entities.
type FlowExecutionTemplateCreateBulk struct {
	config
	builders []*FlowExecutionTemplateCreate
}

// Save creates the FlowExecutionTemplate entities in the database.
func (fetcb *FlowExecutionTemplateCreateBulk) Save(ctx context.Context) ([]*FlowExecutionTemplate, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fetcb.builders))
	nodes := make([]*FlowExecutionTemplate, len(fetcb.builders))
	mutators := make([]Mutator, len(fetcb.builders))
	for i := range fetcb.builders {
		func(i int, root context.Context) {
			builder := fetcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FlowExecutionTemplateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fetcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fetcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fetcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (fetcb *FlowExecutionTemplateCreateBulk) SaveX(ctx context.Context) []*FlowExecutionTemplate {
	v, err := fetcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
