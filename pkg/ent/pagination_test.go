// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent_test

import (
	"bytes"
	"strconv"
	"testing"

	"github.com/facebookincubator/symphony/pkg/ent"
	"github.com/stretchr/testify/require"
)

func TestCursorEncoding(t *testing.T) {
	t.Run("EncodeDecode", func(t *testing.T) {
		const (
			id    = 42
			value = "foobar"
			quote = uint8('"')
		)
		var buf bytes.Buffer
		c := ent.Cursor{ID: id, Value: value}
		c.MarshalGQL(&buf)
		s := buf.String()
		require.Equal(t, quote, s[0])
		n := len(s) - 1
		require.Equal(t, quote, s[n])
		c = ent.Cursor{}
		err := c.UnmarshalGQL(s[1:n])
		require.NoError(t, err)
		require.Equal(t, id, c.ID)
		require.Equal(t, value, c.Value)
	})
	t.Run("EncodeNoValue", func(t *testing.T) {
		const id = 55
		var buf bytes.Buffer
		c := ent.Cursor{ID: id}
		c.MarshalGQL(&buf)
		s, err := strconv.Unquote(buf.String())
		require.NoError(t, err)
		c = ent.Cursor{}
		err = c.UnmarshalGQL(s)
		require.NoError(t, err)
		require.Equal(t, id, c.ID)
		require.Nil(t, c.Value)
	})
	t.Run("DecodeBadInput", func(t *testing.T) {
		inputs := []interface{}{
			0xbadbeef,
			"cursor@bad123",
			"Y3Vyc29yQGJhZDEyMw==",
		}
		for _, input := range inputs {
			var c ent.Cursor
			err := c.UnmarshalGQL(input)
			require.Error(t, err)
		}
	})
}
