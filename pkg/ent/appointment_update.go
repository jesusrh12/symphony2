// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/appointment"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/user"
	"github.com/facebookincubator/symphony/pkg/ent/workorder"
)

// AppointmentUpdate is the builder for updating Appointment entities.
type AppointmentUpdate struct {
	config
	hooks    []Hook
	mutation *AppointmentMutation
}

// Where adds a new predicate for the builder.
func (au *AppointmentUpdate) Where(ps ...predicate.Appointment) *AppointmentUpdate {
	au.mutation.predicates = append(au.mutation.predicates, ps...)
	return au
}

// SetStart sets the start field.
func (au *AppointmentUpdate) SetStart(t time.Time) *AppointmentUpdate {
	au.mutation.SetStart(t)
	return au
}

// SetEnd sets the end field.
func (au *AppointmentUpdate) SetEnd(t time.Time) *AppointmentUpdate {
	au.mutation.SetEnd(t)
	return au
}

// SetDuration sets the duration field.
func (au *AppointmentUpdate) SetDuration(f float64) *AppointmentUpdate {
	au.mutation.ResetDuration()
	au.mutation.SetDuration(f)
	return au
}

// AddDuration adds f to duration.
func (au *AppointmentUpdate) AddDuration(f float64) *AppointmentUpdate {
	au.mutation.AddDuration(f)
	return au
}

// SetStatus sets the status field.
func (au *AppointmentUpdate) SetStatus(a appointment.Status) *AppointmentUpdate {
	au.mutation.SetStatus(a)
	return au
}

// SetNillableStatus sets the status field if the given value is not nil.
func (au *AppointmentUpdate) SetNillableStatus(a *appointment.Status) *AppointmentUpdate {
	if a != nil {
		au.SetStatus(*a)
	}
	return au
}

// SetCreationDate sets the creation_date field.
func (au *AppointmentUpdate) SetCreationDate(t time.Time) *AppointmentUpdate {
	au.mutation.SetCreationDate(t)
	return au
}

// SetWorkorderID sets the workorder edge to WorkOrder by id.
func (au *AppointmentUpdate) SetWorkorderID(id int) *AppointmentUpdate {
	au.mutation.SetWorkorderID(id)
	return au
}

// SetNillableWorkorderID sets the workorder edge to WorkOrder by id if the given value is not nil.
func (au *AppointmentUpdate) SetNillableWorkorderID(id *int) *AppointmentUpdate {
	if id != nil {
		au = au.SetWorkorderID(*id)
	}
	return au
}

// SetWorkorder sets the workorder edge to WorkOrder.
func (au *AppointmentUpdate) SetWorkorder(w *WorkOrder) *AppointmentUpdate {
	return au.SetWorkorderID(w.ID)
}

// SetAssigneeID sets the assignee edge to User by id.
func (au *AppointmentUpdate) SetAssigneeID(id int) *AppointmentUpdate {
	au.mutation.SetAssigneeID(id)
	return au
}

// SetNillableAssigneeID sets the assignee edge to User by id if the given value is not nil.
func (au *AppointmentUpdate) SetNillableAssigneeID(id *int) *AppointmentUpdate {
	if id != nil {
		au = au.SetAssigneeID(*id)
	}
	return au
}

// SetAssignee sets the assignee edge to User.
func (au *AppointmentUpdate) SetAssignee(u *User) *AppointmentUpdate {
	return au.SetAssigneeID(u.ID)
}

// Mutation returns the AppointmentMutation object of the builder.
func (au *AppointmentUpdate) Mutation() *AppointmentMutation {
	return au.mutation
}

// ClearWorkorder clears the "workorder" edge to type WorkOrder.
func (au *AppointmentUpdate) ClearWorkorder() *AppointmentUpdate {
	au.mutation.ClearWorkorder()
	return au
}

// ClearAssignee clears the "assignee" edge to type User.
func (au *AppointmentUpdate) ClearAssignee() *AppointmentUpdate {
	au.mutation.ClearAssignee()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AppointmentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		if err = au.check(); err != nil {
			return 0, err
		}
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppointmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = au.check(); err != nil {
				return 0, err
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AppointmentUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AppointmentUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AppointmentUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AppointmentUpdate) defaults() {
	if _, ok := au.mutation.UpdateTime(); !ok {
		v := appointment.UpdateDefaultUpdateTime()
		au.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AppointmentUpdate) check() error {
	if v, ok := au.mutation.Status(); ok {
		if err := appointment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	return nil
}

func (au *AppointmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appointment.Table,
			Columns: appointment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: appointment.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldUpdateTime,
		})
	}
	if value, ok := au.mutation.Start(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldStart,
		})
	}
	if value, ok := au.mutation.End(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldEnd,
		})
	}
	if value, ok := au.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: appointment.FieldDuration,
		})
	}
	if value, ok := au.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: appointment.FieldDuration,
		})
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: appointment.FieldStatus,
		})
	}
	if value, ok := au.mutation.CreationDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldCreationDate,
		})
	}
	if au.mutation.WorkorderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.WorkorderTable,
			Columns: []string{appointment.WorkorderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workorder.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.WorkorderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.WorkorderTable,
			Columns: []string{appointment.WorkorderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workorder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AssigneeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.AssigneeTable,
			Columns: []string{appointment.AssigneeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AssigneeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.AssigneeTable,
			Columns: []string{appointment.AssigneeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appointment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AppointmentUpdateOne is the builder for updating a single Appointment entity.
type AppointmentUpdateOne struct {
	config
	hooks    []Hook
	mutation *AppointmentMutation
}

// SetStart sets the start field.
func (auo *AppointmentUpdateOne) SetStart(t time.Time) *AppointmentUpdateOne {
	auo.mutation.SetStart(t)
	return auo
}

// SetEnd sets the end field.
func (auo *AppointmentUpdateOne) SetEnd(t time.Time) *AppointmentUpdateOne {
	auo.mutation.SetEnd(t)
	return auo
}

// SetDuration sets the duration field.
func (auo *AppointmentUpdateOne) SetDuration(f float64) *AppointmentUpdateOne {
	auo.mutation.ResetDuration()
	auo.mutation.SetDuration(f)
	return auo
}

// AddDuration adds f to duration.
func (auo *AppointmentUpdateOne) AddDuration(f float64) *AppointmentUpdateOne {
	auo.mutation.AddDuration(f)
	return auo
}

// SetStatus sets the status field.
func (auo *AppointmentUpdateOne) SetStatus(a appointment.Status) *AppointmentUpdateOne {
	auo.mutation.SetStatus(a)
	return auo
}

// SetNillableStatus sets the status field if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableStatus(a *appointment.Status) *AppointmentUpdateOne {
	if a != nil {
		auo.SetStatus(*a)
	}
	return auo
}

// SetCreationDate sets the creation_date field.
func (auo *AppointmentUpdateOne) SetCreationDate(t time.Time) *AppointmentUpdateOne {
	auo.mutation.SetCreationDate(t)
	return auo
}

// SetWorkorderID sets the workorder edge to WorkOrder by id.
func (auo *AppointmentUpdateOne) SetWorkorderID(id int) *AppointmentUpdateOne {
	auo.mutation.SetWorkorderID(id)
	return auo
}

// SetNillableWorkorderID sets the workorder edge to WorkOrder by id if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableWorkorderID(id *int) *AppointmentUpdateOne {
	if id != nil {
		auo = auo.SetWorkorderID(*id)
	}
	return auo
}

// SetWorkorder sets the workorder edge to WorkOrder.
func (auo *AppointmentUpdateOne) SetWorkorder(w *WorkOrder) *AppointmentUpdateOne {
	return auo.SetWorkorderID(w.ID)
}

// SetAssigneeID sets the assignee edge to User by id.
func (auo *AppointmentUpdateOne) SetAssigneeID(id int) *AppointmentUpdateOne {
	auo.mutation.SetAssigneeID(id)
	return auo
}

// SetNillableAssigneeID sets the assignee edge to User by id if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableAssigneeID(id *int) *AppointmentUpdateOne {
	if id != nil {
		auo = auo.SetAssigneeID(*id)
	}
	return auo
}

// SetAssignee sets the assignee edge to User.
func (auo *AppointmentUpdateOne) SetAssignee(u *User) *AppointmentUpdateOne {
	return auo.SetAssigneeID(u.ID)
}

// Mutation returns the AppointmentMutation object of the builder.
func (auo *AppointmentUpdateOne) Mutation() *AppointmentMutation {
	return auo.mutation
}

// ClearWorkorder clears the "workorder" edge to type WorkOrder.
func (auo *AppointmentUpdateOne) ClearWorkorder() *AppointmentUpdateOne {
	auo.mutation.ClearWorkorder()
	return auo
}

// ClearAssignee clears the "assignee" edge to type User.
func (auo *AppointmentUpdateOne) ClearAssignee() *AppointmentUpdateOne {
	auo.mutation.ClearAssignee()
	return auo
}

// Save executes the query and returns the updated entity.
func (auo *AppointmentUpdateOne) Save(ctx context.Context) (*Appointment, error) {
	var (
		err  error
		node *Appointment
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		if err = auo.check(); err != nil {
			return nil, err
		}
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppointmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auo.check(); err != nil {
				return nil, err
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AppointmentUpdateOne) SaveX(ctx context.Context) *Appointment {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AppointmentUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AppointmentUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AppointmentUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdateTime(); !ok {
		v := appointment.UpdateDefaultUpdateTime()
		auo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AppointmentUpdateOne) check() error {
	if v, ok := auo.mutation.Status(); ok {
		if err := appointment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	return nil
}

func (auo *AppointmentUpdateOne) sqlSave(ctx context.Context) (_node *Appointment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appointment.Table,
			Columns: appointment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: appointment.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Appointment.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := auo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldUpdateTime,
		})
	}
	if value, ok := auo.mutation.Start(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldStart,
		})
	}
	if value, ok := auo.mutation.End(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldEnd,
		})
	}
	if value, ok := auo.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: appointment.FieldDuration,
		})
	}
	if value, ok := auo.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: appointment.FieldDuration,
		})
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: appointment.FieldStatus,
		})
	}
	if value, ok := auo.mutation.CreationDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldCreationDate,
		})
	}
	if auo.mutation.WorkorderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.WorkorderTable,
			Columns: []string{appointment.WorkorderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workorder.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.WorkorderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.WorkorderTable,
			Columns: []string{appointment.WorkorderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: workorder.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AssigneeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.AssigneeTable,
			Columns: []string{appointment.AssigneeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AssigneeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.AssigneeTable,
			Columns: []string{appointment.AssigneeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Appointment{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appointment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
