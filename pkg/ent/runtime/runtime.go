// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package runtime

import (
	"context"
	"time"

	"github.com/facebookincubator/symphony/pkg/ent/activity"
	"github.com/facebookincubator/symphony/pkg/ent/alarmfilter"
	"github.com/facebookincubator/symphony/pkg/ent/alarmstatus"
	"github.com/facebookincubator/symphony/pkg/ent/appointment"
	"github.com/facebookincubator/symphony/pkg/ent/block"
	"github.com/facebookincubator/symphony/pkg/ent/blockinstance"
	"github.com/facebookincubator/symphony/pkg/ent/checklistcategory"
	"github.com/facebookincubator/symphony/pkg/ent/checklistcategorydefinition"
	"github.com/facebookincubator/symphony/pkg/ent/checklistitem"
	"github.com/facebookincubator/symphony/pkg/ent/checklistitemdefinition"
	"github.com/facebookincubator/symphony/pkg/ent/comment"
	"github.com/facebookincubator/symphony/pkg/ent/comparator"
	"github.com/facebookincubator/symphony/pkg/ent/counter"
	"github.com/facebookincubator/symphony/pkg/ent/counterfamily"
	"github.com/facebookincubator/symphony/pkg/ent/counterformula"
	"github.com/facebookincubator/symphony/pkg/ent/customer"
	"github.com/facebookincubator/symphony/pkg/ent/documentcategory"
	"github.com/facebookincubator/symphony/pkg/ent/domain"
	"github.com/facebookincubator/symphony/pkg/ent/entrypoint"
	"github.com/facebookincubator/symphony/pkg/ent/equipment"
	"github.com/facebookincubator/symphony/pkg/ent/equipmentcategory"
	"github.com/facebookincubator/symphony/pkg/ent/equipmentport"
	"github.com/facebookincubator/symphony/pkg/ent/equipmentportdefinition"
	"github.com/facebookincubator/symphony/pkg/ent/equipmentporttype"
	"github.com/facebookincubator/symphony/pkg/ent/equipmentposition"
	"github.com/facebookincubator/symphony/pkg/ent/equipmentpositiondefinition"
	"github.com/facebookincubator/symphony/pkg/ent/equipmenttype"
	"github.com/facebookincubator/symphony/pkg/ent/eventseverity"
	"github.com/facebookincubator/symphony/pkg/ent/exitpoint"
	"github.com/facebookincubator/symphony/pkg/ent/exporttask"
	"github.com/facebookincubator/symphony/pkg/ent/feature"
	"github.com/facebookincubator/symphony/pkg/ent/file"
	"github.com/facebookincubator/symphony/pkg/ent/floorplan"
	"github.com/facebookincubator/symphony/pkg/ent/floorplanreferencepoint"
	"github.com/facebookincubator/symphony/pkg/ent/floorplanscale"
	"github.com/facebookincubator/symphony/pkg/ent/flow"
	"github.com/facebookincubator/symphony/pkg/ent/flowdraft"
	"github.com/facebookincubator/symphony/pkg/ent/flowexecutiontemplate"
	"github.com/facebookincubator/symphony/pkg/ent/flowinstance"
	"github.com/facebookincubator/symphony/pkg/ent/formula"
	"github.com/facebookincubator/symphony/pkg/ent/hyperlink"
	"github.com/facebookincubator/symphony/pkg/ent/kpi"
	"github.com/facebookincubator/symphony/pkg/ent/kpicategory"
	"github.com/facebookincubator/symphony/pkg/ent/kqi"
	"github.com/facebookincubator/symphony/pkg/ent/kqicategory"
	"github.com/facebookincubator/symphony/pkg/ent/kqicomparator"
	"github.com/facebookincubator/symphony/pkg/ent/kqiperspective"
	"github.com/facebookincubator/symphony/pkg/ent/kqisource"
	"github.com/facebookincubator/symphony/pkg/ent/kqitarget"
	"github.com/facebookincubator/symphony/pkg/ent/kqitemporalfrequency"
	"github.com/facebookincubator/symphony/pkg/ent/link"
	"github.com/facebookincubator/symphony/pkg/ent/location"
	"github.com/facebookincubator/symphony/pkg/ent/locationtype"
	"github.com/facebookincubator/symphony/pkg/ent/networktype"
	"github.com/facebookincubator/symphony/pkg/ent/organization"
	"github.com/facebookincubator/symphony/pkg/ent/parametercatalog"
	"github.com/facebookincubator/symphony/pkg/ent/permissionspolicy"
	"github.com/facebookincubator/symphony/pkg/ent/project"
	"github.com/facebookincubator/symphony/pkg/ent/projecttemplate"
	"github.com/facebookincubator/symphony/pkg/ent/projecttype"
	"github.com/facebookincubator/symphony/pkg/ent/property"
	"github.com/facebookincubator/symphony/pkg/ent/propertycategory"
	"github.com/facebookincubator/symphony/pkg/ent/propertytype"
	"github.com/facebookincubator/symphony/pkg/ent/recommendations"
	"github.com/facebookincubator/symphony/pkg/ent/recommendationscategory"
	"github.com/facebookincubator/symphony/pkg/ent/recommendationssources"
	"github.com/facebookincubator/symphony/pkg/ent/reportfilter"
	"github.com/facebookincubator/symphony/pkg/ent/rule"
	"github.com/facebookincubator/symphony/pkg/ent/rulelimit"
	"github.com/facebookincubator/symphony/pkg/ent/ruletype"
	"github.com/facebookincubator/symphony/pkg/ent/schema"
	"github.com/facebookincubator/symphony/pkg/ent/service"
	"github.com/facebookincubator/symphony/pkg/ent/serviceendpoint"
	"github.com/facebookincubator/symphony/pkg/ent/serviceendpointdefinition"
	"github.com/facebookincubator/symphony/pkg/ent/servicetype"
	"github.com/facebookincubator/symphony/pkg/ent/survey"
	"github.com/facebookincubator/symphony/pkg/ent/surveycellscan"
	"github.com/facebookincubator/symphony/pkg/ent/surveyquestion"
	"github.com/facebookincubator/symphony/pkg/ent/surveytemplatecategory"
	"github.com/facebookincubator/symphony/pkg/ent/surveytemplatequestion"
	"github.com/facebookincubator/symphony/pkg/ent/surveywifiscan"
	"github.com/facebookincubator/symphony/pkg/ent/tech"
	"github.com/facebookincubator/symphony/pkg/ent/threshold"
	"github.com/facebookincubator/symphony/pkg/ent/user"
	"github.com/facebookincubator/symphony/pkg/ent/usersgroup"
	"github.com/facebookincubator/symphony/pkg/ent/vendor"
	"github.com/facebookincubator/symphony/pkg/ent/workertype"
	"github.com/facebookincubator/symphony/pkg/ent/workorder"
	"github.com/facebookincubator/symphony/pkg/ent/workorderdefinition"
	"github.com/facebookincubator/symphony/pkg/ent/workordertemplate"
	"github.com/facebookincubator/symphony/pkg/ent/workordertype"

	"github.com/facebook/ent"
	"github.com/facebook/ent/privacy"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	activityMixin := schema.Activity{}.Mixin()
	activity.Policy = privacy.NewPolicies(schema.Activity{})
	activity.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := activity.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	activityMixinFields0 := activityMixin[0].Fields()
	activityFields := schema.Activity{}.Fields()
	_ = activityFields
	// activityDescCreateTime is the schema descriptor for create_time field.
	activityDescCreateTime := activityMixinFields0[0].Descriptor()
	// activity.DefaultCreateTime holds the default value on creation for the create_time field.
	activity.DefaultCreateTime = activityDescCreateTime.Default.(func() time.Time)
	// activityDescUpdateTime is the schema descriptor for update_time field.
	activityDescUpdateTime := activityMixinFields0[1].Descriptor()
	// activity.DefaultUpdateTime holds the default value on creation for the update_time field.
	activity.DefaultUpdateTime = activityDescUpdateTime.Default.(func() time.Time)
	// activity.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	activity.UpdateDefaultUpdateTime = activityDescUpdateTime.UpdateDefault.(func() time.Time)
	// activityDescIsCreate is the schema descriptor for is_create field.
	activityDescIsCreate := activityFields[1].Descriptor()
	// activity.DefaultIsCreate holds the default value on creation for the is_create field.
	activity.DefaultIsCreate = activityDescIsCreate.Default.(bool)
	alarmfilterMixin := schema.AlarmFilter{}.Mixin()
	alarmfilter.Policy = privacy.NewPolicies(schema.AlarmFilter{})
	alarmfilter.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := alarmfilter.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	alarmfilterMixinFields0 := alarmfilterMixin[0].Fields()
	alarmfilterFields := schema.AlarmFilter{}.Fields()
	_ = alarmfilterFields
	// alarmfilterDescCreateTime is the schema descriptor for create_time field.
	alarmfilterDescCreateTime := alarmfilterMixinFields0[0].Descriptor()
	// alarmfilter.DefaultCreateTime holds the default value on creation for the create_time field.
	alarmfilter.DefaultCreateTime = alarmfilterDescCreateTime.Default.(func() time.Time)
	// alarmfilterDescUpdateTime is the schema descriptor for update_time field.
	alarmfilterDescUpdateTime := alarmfilterMixinFields0[1].Descriptor()
	// alarmfilter.DefaultUpdateTime holds the default value on creation for the update_time field.
	alarmfilter.DefaultUpdateTime = alarmfilterDescUpdateTime.Default.(func() time.Time)
	// alarmfilter.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	alarmfilter.UpdateDefaultUpdateTime = alarmfilterDescUpdateTime.UpdateDefault.(func() time.Time)
	// alarmfilterDescName is the schema descriptor for name field.
	alarmfilterDescName := alarmfilterFields[0].Descriptor()
	// alarmfilter.NameValidator is a validator for the "name" field. It is called by the builders before save.
	alarmfilter.NameValidator = alarmfilterDescName.Validators[0].(func(string) error)
	alarmstatusMixin := schema.AlarmStatus{}.Mixin()
	alarmstatus.Policy = privacy.NewPolicies(schema.AlarmStatus{})
	alarmstatus.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := alarmstatus.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	alarmstatusMixinFields0 := alarmstatusMixin[0].Fields()
	alarmstatusFields := schema.AlarmStatus{}.Fields()
	_ = alarmstatusFields
	// alarmstatusDescCreateTime is the schema descriptor for create_time field.
	alarmstatusDescCreateTime := alarmstatusMixinFields0[0].Descriptor()
	// alarmstatus.DefaultCreateTime holds the default value on creation for the create_time field.
	alarmstatus.DefaultCreateTime = alarmstatusDescCreateTime.Default.(func() time.Time)
	// alarmstatusDescUpdateTime is the schema descriptor for update_time field.
	alarmstatusDescUpdateTime := alarmstatusMixinFields0[1].Descriptor()
	// alarmstatus.DefaultUpdateTime holds the default value on creation for the update_time field.
	alarmstatus.DefaultUpdateTime = alarmstatusDescUpdateTime.Default.(func() time.Time)
	// alarmstatus.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	alarmstatus.UpdateDefaultUpdateTime = alarmstatusDescUpdateTime.UpdateDefault.(func() time.Time)
	// alarmstatusDescName is the schema descriptor for name field.
	alarmstatusDescName := alarmstatusFields[0].Descriptor()
	// alarmstatus.NameValidator is a validator for the "name" field. It is called by the builders before save.
	alarmstatus.NameValidator = alarmstatusDescName.Validators[0].(func(string) error)
	appointmentMixin := schema.Appointment{}.Mixin()
	appointment.Policy = privacy.NewPolicies(schema.Appointment{})
	appointment.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := appointment.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	appointmentMixinFields0 := appointmentMixin[0].Fields()
	appointmentFields := schema.Appointment{}.Fields()
	_ = appointmentFields
	// appointmentDescCreateTime is the schema descriptor for create_time field.
	appointmentDescCreateTime := appointmentMixinFields0[0].Descriptor()
	// appointment.DefaultCreateTime holds the default value on creation for the create_time field.
	appointment.DefaultCreateTime = appointmentDescCreateTime.Default.(func() time.Time)
	// appointmentDescUpdateTime is the schema descriptor for update_time field.
	appointmentDescUpdateTime := appointmentMixinFields0[1].Descriptor()
	// appointment.DefaultUpdateTime holds the default value on creation for the update_time field.
	appointment.DefaultUpdateTime = appointmentDescUpdateTime.Default.(func() time.Time)
	// appointment.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	appointment.UpdateDefaultUpdateTime = appointmentDescUpdateTime.UpdateDefault.(func() time.Time)
	blockMixin := schema.Block{}.Mixin()
	block.Policy = privacy.NewPolicies(schema.Block{})
	block.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := block.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	blockHooks := schema.Block{}.Hooks()

	block.Hooks[1] = blockHooks[0]

	block.Hooks[2] = blockHooks[1]

	block.Hooks[3] = blockHooks[2]

	block.Hooks[4] = blockHooks[3]
	blockMixinFields0 := blockMixin[0].Fields()
	blockFields := schema.Block{}.Fields()
	_ = blockFields
	// blockDescCreateTime is the schema descriptor for create_time field.
	blockDescCreateTime := blockMixinFields0[0].Descriptor()
	// block.DefaultCreateTime holds the default value on creation for the create_time field.
	block.DefaultCreateTime = blockDescCreateTime.Default.(func() time.Time)
	// blockDescUpdateTime is the schema descriptor for update_time field.
	blockDescUpdateTime := blockMixinFields0[1].Descriptor()
	// block.DefaultUpdateTime holds the default value on creation for the update_time field.
	block.DefaultUpdateTime = blockDescUpdateTime.Default.(func() time.Time)
	// block.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	block.UpdateDefaultUpdateTime = blockDescUpdateTime.UpdateDefault.(func() time.Time)
	// blockDescCid is the schema descriptor for cid field.
	blockDescCid := blockFields[0].Descriptor()
	// block.CidValidator is a validator for the "cid" field. It is called by the builders before save.
	block.CidValidator = blockDescCid.Validators[0].(func(string) error)
	blockinstanceMixin := schema.BlockInstance{}.Mixin()
	blockinstance.Policy = privacy.NewPolicies(schema.BlockInstance{})
	blockinstance.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := blockinstance.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	blockinstanceHooks := schema.BlockInstance{}.Hooks()

	blockinstance.Hooks[1] = blockinstanceHooks[0]
	blockinstanceMixinFields0 := blockinstanceMixin[0].Fields()
	blockinstanceMixinFields1 := blockinstanceMixin[1].Fields()
	blockinstanceFields := schema.BlockInstance{}.Fields()
	_ = blockinstanceFields
	// blockinstanceDescCreateTime is the schema descriptor for create_time field.
	blockinstanceDescCreateTime := blockinstanceMixinFields0[0].Descriptor()
	// blockinstance.DefaultCreateTime holds the default value on creation for the create_time field.
	blockinstance.DefaultCreateTime = blockinstanceDescCreateTime.Default.(func() time.Time)
	// blockinstanceDescUpdateTime is the schema descriptor for update_time field.
	blockinstanceDescUpdateTime := blockinstanceMixinFields1[0].Descriptor()
	// blockinstance.DefaultUpdateTime holds the default value on creation for the update_time field.
	blockinstance.DefaultUpdateTime = blockinstanceDescUpdateTime.Default.(func() time.Time)
	// blockinstance.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	blockinstance.UpdateDefaultUpdateTime = blockinstanceDescUpdateTime.UpdateDefault.(func() time.Time)
	checklistcategoryMixin := schema.CheckListCategory{}.Mixin()
	checklistcategory.Policy = privacy.NewPolicies(schema.CheckListCategory{})
	checklistcategory.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := checklistcategory.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	checklistcategoryMixinFields0 := checklistcategoryMixin[0].Fields()
	checklistcategoryFields := schema.CheckListCategory{}.Fields()
	_ = checklistcategoryFields
	// checklistcategoryDescCreateTime is the schema descriptor for create_time field.
	checklistcategoryDescCreateTime := checklistcategoryMixinFields0[0].Descriptor()
	// checklistcategory.DefaultCreateTime holds the default value on creation for the create_time field.
	checklistcategory.DefaultCreateTime = checklistcategoryDescCreateTime.Default.(func() time.Time)
	// checklistcategoryDescUpdateTime is the schema descriptor for update_time field.
	checklistcategoryDescUpdateTime := checklistcategoryMixinFields0[1].Descriptor()
	// checklistcategory.DefaultUpdateTime holds the default value on creation for the update_time field.
	checklistcategory.DefaultUpdateTime = checklistcategoryDescUpdateTime.Default.(func() time.Time)
	// checklistcategory.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	checklistcategory.UpdateDefaultUpdateTime = checklistcategoryDescUpdateTime.UpdateDefault.(func() time.Time)
	checklistcategorydefinitionMixin := schema.CheckListCategoryDefinition{}.Mixin()
	checklistcategorydefinition.Policy = privacy.NewPolicies(schema.CheckListCategoryDefinition{})
	checklistcategorydefinition.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := checklistcategorydefinition.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	checklistcategorydefinitionMixinFields0 := checklistcategorydefinitionMixin[0].Fields()
	checklistcategorydefinitionFields := schema.CheckListCategoryDefinition{}.Fields()
	_ = checklistcategorydefinitionFields
	// checklistcategorydefinitionDescCreateTime is the schema descriptor for create_time field.
	checklistcategorydefinitionDescCreateTime := checklistcategorydefinitionMixinFields0[0].Descriptor()
	// checklistcategorydefinition.DefaultCreateTime holds the default value on creation for the create_time field.
	checklistcategorydefinition.DefaultCreateTime = checklistcategorydefinitionDescCreateTime.Default.(func() time.Time)
	// checklistcategorydefinitionDescUpdateTime is the schema descriptor for update_time field.
	checklistcategorydefinitionDescUpdateTime := checklistcategorydefinitionMixinFields0[1].Descriptor()
	// checklistcategorydefinition.DefaultUpdateTime holds the default value on creation for the update_time field.
	checklistcategorydefinition.DefaultUpdateTime = checklistcategorydefinitionDescUpdateTime.Default.(func() time.Time)
	// checklistcategorydefinition.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	checklistcategorydefinition.UpdateDefaultUpdateTime = checklistcategorydefinitionDescUpdateTime.UpdateDefault.(func() time.Time)
	// checklistcategorydefinitionDescTitle is the schema descriptor for title field.
	checklistcategorydefinitionDescTitle := checklistcategorydefinitionFields[0].Descriptor()
	// checklistcategorydefinition.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	checklistcategorydefinition.TitleValidator = checklistcategorydefinitionDescTitle.Validators[0].(func(string) error)
	checklistitem.Policy = privacy.NewPolicies(schema.CheckListItem{})
	checklistitem.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := checklistitem.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	checklistitemdefinitionMixin := schema.CheckListItemDefinition{}.Mixin()
	checklistitemdefinition.Policy = privacy.NewPolicies(schema.CheckListItemDefinition{})
	checklistitemdefinition.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := checklistitemdefinition.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	checklistitemdefinitionMixinFields0 := checklistitemdefinitionMixin[0].Fields()
	checklistitemdefinitionFields := schema.CheckListItemDefinition{}.Fields()
	_ = checklistitemdefinitionFields
	// checklistitemdefinitionDescCreateTime is the schema descriptor for create_time field.
	checklistitemdefinitionDescCreateTime := checklistitemdefinitionMixinFields0[0].Descriptor()
	// checklistitemdefinition.DefaultCreateTime holds the default value on creation for the create_time field.
	checklistitemdefinition.DefaultCreateTime = checklistitemdefinitionDescCreateTime.Default.(func() time.Time)
	// checklistitemdefinitionDescUpdateTime is the schema descriptor for update_time field.
	checklistitemdefinitionDescUpdateTime := checklistitemdefinitionMixinFields0[1].Descriptor()
	// checklistitemdefinition.DefaultUpdateTime holds the default value on creation for the update_time field.
	checklistitemdefinition.DefaultUpdateTime = checklistitemdefinitionDescUpdateTime.Default.(func() time.Time)
	// checklistitemdefinition.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	checklistitemdefinition.UpdateDefaultUpdateTime = checklistitemdefinitionDescUpdateTime.UpdateDefault.(func() time.Time)
	commentMixin := schema.Comment{}.Mixin()
	comment.Policy = privacy.NewPolicies(schema.Comment{})
	comment.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := comment.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	commentMixinFields0 := commentMixin[0].Fields()
	commentFields := schema.Comment{}.Fields()
	_ = commentFields
	// commentDescCreateTime is the schema descriptor for create_time field.
	commentDescCreateTime := commentMixinFields0[0].Descriptor()
	// comment.DefaultCreateTime holds the default value on creation for the create_time field.
	comment.DefaultCreateTime = commentDescCreateTime.Default.(func() time.Time)
	// commentDescUpdateTime is the schema descriptor for update_time field.
	commentDescUpdateTime := commentMixinFields0[1].Descriptor()
	// comment.DefaultUpdateTime holds the default value on creation for the update_time field.
	comment.DefaultUpdateTime = commentDescUpdateTime.Default.(func() time.Time)
	// comment.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	comment.UpdateDefaultUpdateTime = commentDescUpdateTime.UpdateDefault.(func() time.Time)
	comparatorMixin := schema.Comparator{}.Mixin()
	comparator.Policy = privacy.NewPolicies(schema.Comparator{})
	comparator.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := comparator.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	comparatorMixinFields0 := comparatorMixin[0].Fields()
	comparatorFields := schema.Comparator{}.Fields()
	_ = comparatorFields
	// comparatorDescCreateTime is the schema descriptor for create_time field.
	comparatorDescCreateTime := comparatorMixinFields0[0].Descriptor()
	// comparator.DefaultCreateTime holds the default value on creation for the create_time field.
	comparator.DefaultCreateTime = comparatorDescCreateTime.Default.(func() time.Time)
	// comparatorDescUpdateTime is the schema descriptor for update_time field.
	comparatorDescUpdateTime := comparatorMixinFields0[1].Descriptor()
	// comparator.DefaultUpdateTime holds the default value on creation for the update_time field.
	comparator.DefaultUpdateTime = comparatorDescUpdateTime.Default.(func() time.Time)
	// comparator.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	comparator.UpdateDefaultUpdateTime = comparatorDescUpdateTime.UpdateDefault.(func() time.Time)
	// comparatorDescName is the schema descriptor for name field.
	comparatorDescName := comparatorFields[0].Descriptor()
	// comparator.NameValidator is a validator for the "name" field. It is called by the builders before save.
	comparator.NameValidator = comparatorDescName.Validators[0].(func(string) error)
	counterMixin := schema.Counter{}.Mixin()
	counter.Policy = privacy.NewPolicies(schema.Counter{})
	counter.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := counter.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	counterMixinFields0 := counterMixin[0].Fields()
	counterFields := schema.Counter{}.Fields()
	_ = counterFields
	// counterDescCreateTime is the schema descriptor for create_time field.
	counterDescCreateTime := counterMixinFields0[0].Descriptor()
	// counter.DefaultCreateTime holds the default value on creation for the create_time field.
	counter.DefaultCreateTime = counterDescCreateTime.Default.(func() time.Time)
	// counterDescUpdateTime is the schema descriptor for update_time field.
	counterDescUpdateTime := counterMixinFields0[1].Descriptor()
	// counter.DefaultUpdateTime holds the default value on creation for the update_time field.
	counter.DefaultUpdateTime = counterDescUpdateTime.Default.(func() time.Time)
	// counter.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	counter.UpdateDefaultUpdateTime = counterDescUpdateTime.UpdateDefault.(func() time.Time)
	// counterDescName is the schema descriptor for name field.
	counterDescName := counterFields[0].Descriptor()
	// counter.NameValidator is a validator for the "name" field. It is called by the builders before save.
	counter.NameValidator = counterDescName.Validators[0].(func(string) error)
	counterfamilyMixin := schema.CounterFamily{}.Mixin()
	counterfamily.Policy = privacy.NewPolicies(schema.CounterFamily{})
	counterfamily.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := counterfamily.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	counterfamilyMixinFields0 := counterfamilyMixin[0].Fields()
	counterfamilyFields := schema.CounterFamily{}.Fields()
	_ = counterfamilyFields
	// counterfamilyDescCreateTime is the schema descriptor for create_time field.
	counterfamilyDescCreateTime := counterfamilyMixinFields0[0].Descriptor()
	// counterfamily.DefaultCreateTime holds the default value on creation for the create_time field.
	counterfamily.DefaultCreateTime = counterfamilyDescCreateTime.Default.(func() time.Time)
	// counterfamilyDescUpdateTime is the schema descriptor for update_time field.
	counterfamilyDescUpdateTime := counterfamilyMixinFields0[1].Descriptor()
	// counterfamily.DefaultUpdateTime holds the default value on creation for the update_time field.
	counterfamily.DefaultUpdateTime = counterfamilyDescUpdateTime.Default.(func() time.Time)
	// counterfamily.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	counterfamily.UpdateDefaultUpdateTime = counterfamilyDescUpdateTime.UpdateDefault.(func() time.Time)
	// counterfamilyDescName is the schema descriptor for name field.
	counterfamilyDescName := counterfamilyFields[0].Descriptor()
	// counterfamily.NameValidator is a validator for the "name" field. It is called by the builders before save.
	counterfamily.NameValidator = counterfamilyDescName.Validators[0].(func(string) error)
	counterformulaMixin := schema.CounterFormula{}.Mixin()
	counterformula.Policy = privacy.NewPolicies(schema.CounterFormula{})
	counterformula.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := counterformula.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	counterformulaMixinFields0 := counterformulaMixin[0].Fields()
	counterformulaFields := schema.CounterFormula{}.Fields()
	_ = counterformulaFields
	// counterformulaDescCreateTime is the schema descriptor for create_time field.
	counterformulaDescCreateTime := counterformulaMixinFields0[0].Descriptor()
	// counterformula.DefaultCreateTime holds the default value on creation for the create_time field.
	counterformula.DefaultCreateTime = counterformulaDescCreateTime.Default.(func() time.Time)
	// counterformulaDescUpdateTime is the schema descriptor for update_time field.
	counterformulaDescUpdateTime := counterformulaMixinFields0[1].Descriptor()
	// counterformula.DefaultUpdateTime holds the default value on creation for the update_time field.
	counterformula.DefaultUpdateTime = counterformulaDescUpdateTime.Default.(func() time.Time)
	// counterformula.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	counterformula.UpdateDefaultUpdateTime = counterformulaDescUpdateTime.UpdateDefault.(func() time.Time)
	customerMixin := schema.Customer{}.Mixin()
	customer.Policy = privacy.NewPolicies(schema.Customer{})
	customer.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := customer.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	customerMixinFields0 := customerMixin[0].Fields()
	customerFields := schema.Customer{}.Fields()
	_ = customerFields
	// customerDescCreateTime is the schema descriptor for create_time field.
	customerDescCreateTime := customerMixinFields0[0].Descriptor()
	// customer.DefaultCreateTime holds the default value on creation for the create_time field.
	customer.DefaultCreateTime = customerDescCreateTime.Default.(func() time.Time)
	// customerDescUpdateTime is the schema descriptor for update_time field.
	customerDescUpdateTime := customerMixinFields0[1].Descriptor()
	// customer.DefaultUpdateTime holds the default value on creation for the update_time field.
	customer.DefaultUpdateTime = customerDescUpdateTime.Default.(func() time.Time)
	// customer.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	customer.UpdateDefaultUpdateTime = customerDescUpdateTime.UpdateDefault.(func() time.Time)
	// customerDescName is the schema descriptor for name field.
	customerDescName := customerFields[0].Descriptor()
	// customer.NameValidator is a validator for the "name" field. It is called by the builders before save.
	customer.NameValidator = customerDescName.Validators[0].(func(string) error)
	// customerDescExternalID is the schema descriptor for external_id field.
	customerDescExternalID := customerFields[1].Descriptor()
	// customer.ExternalIDValidator is a validator for the "external_id" field. It is called by the builders before save.
	customer.ExternalIDValidator = customerDescExternalID.Validators[0].(func(string) error)
	documentcategoryMixin := schema.DocumentCategory{}.Mixin()
	documentcategory.Policy = privacy.NewPolicies(schema.DocumentCategory{})
	documentcategory.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := documentcategory.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	documentcategoryMixinFields0 := documentcategoryMixin[0].Fields()
	documentcategoryFields := schema.DocumentCategory{}.Fields()
	_ = documentcategoryFields
	// documentcategoryDescCreateTime is the schema descriptor for create_time field.
	documentcategoryDescCreateTime := documentcategoryMixinFields0[0].Descriptor()
	// documentcategory.DefaultCreateTime holds the default value on creation for the create_time field.
	documentcategory.DefaultCreateTime = documentcategoryDescCreateTime.Default.(func() time.Time)
	// documentcategoryDescUpdateTime is the schema descriptor for update_time field.
	documentcategoryDescUpdateTime := documentcategoryMixinFields0[1].Descriptor()
	// documentcategory.DefaultUpdateTime holds the default value on creation for the update_time field.
	documentcategory.DefaultUpdateTime = documentcategoryDescUpdateTime.Default.(func() time.Time)
	// documentcategory.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	documentcategory.UpdateDefaultUpdateTime = documentcategoryDescUpdateTime.UpdateDefault.(func() time.Time)
	// documentcategoryDescName is the schema descriptor for name field.
	documentcategoryDescName := documentcategoryFields[0].Descriptor()
	// documentcategory.NameValidator is a validator for the "name" field. It is called by the builders before save.
	documentcategory.NameValidator = documentcategoryDescName.Validators[0].(func(string) error)
	domainMixin := schema.Domain{}.Mixin()
	domain.Policy = privacy.NewPolicies(schema.Domain{})
	domain.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := domain.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	domainMixinFields0 := domainMixin[0].Fields()
	domainFields := schema.Domain{}.Fields()
	_ = domainFields
	// domainDescCreateTime is the schema descriptor for create_time field.
	domainDescCreateTime := domainMixinFields0[0].Descriptor()
	// domain.DefaultCreateTime holds the default value on creation for the create_time field.
	domain.DefaultCreateTime = domainDescCreateTime.Default.(func() time.Time)
	// domainDescUpdateTime is the schema descriptor for update_time field.
	domainDescUpdateTime := domainMixinFields0[1].Descriptor()
	// domain.DefaultUpdateTime holds the default value on creation for the update_time field.
	domain.DefaultUpdateTime = domainDescUpdateTime.Default.(func() time.Time)
	// domain.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	domain.UpdateDefaultUpdateTime = domainDescUpdateTime.UpdateDefault.(func() time.Time)
	// domainDescName is the schema descriptor for name field.
	domainDescName := domainFields[0].Descriptor()
	// domain.NameValidator is a validator for the "name" field. It is called by the builders before save.
	domain.NameValidator = domainDescName.Validators[0].(func(string) error)
	entrypointMixin := schema.EntryPoint{}.Mixin()
	entrypoint.Policy = privacy.NewPolicies(schema.EntryPoint{})
	entrypoint.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := entrypoint.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	entrypointHooks := schema.EntryPoint{}.Hooks()

	entrypoint.Hooks[1] = entrypointHooks[0]

	entrypoint.Hooks[2] = entrypointHooks[1]
	entrypointMixinFields0 := entrypointMixin[0].Fields()
	entrypointFields := schema.EntryPoint{}.Fields()
	_ = entrypointFields
	// entrypointDescCreateTime is the schema descriptor for create_time field.
	entrypointDescCreateTime := entrypointMixinFields0[0].Descriptor()
	// entrypoint.DefaultCreateTime holds the default value on creation for the create_time field.
	entrypoint.DefaultCreateTime = entrypointDescCreateTime.Default.(func() time.Time)
	// entrypointDescUpdateTime is the schema descriptor for update_time field.
	entrypointDescUpdateTime := entrypointMixinFields0[1].Descriptor()
	// entrypoint.DefaultUpdateTime holds the default value on creation for the update_time field.
	entrypoint.DefaultUpdateTime = entrypointDescUpdateTime.Default.(func() time.Time)
	// entrypoint.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	entrypoint.UpdateDefaultUpdateTime = entrypointDescUpdateTime.UpdateDefault.(func() time.Time)
	equipmentMixin := schema.Equipment{}.Mixin()
	equipment.Policy = privacy.NewPolicies(schema.Equipment{})
	equipment.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := equipment.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	equipmentMixinFields0 := equipmentMixin[0].Fields()
	equipmentFields := schema.Equipment{}.Fields()
	_ = equipmentFields
	// equipmentDescCreateTime is the schema descriptor for create_time field.
	equipmentDescCreateTime := equipmentMixinFields0[0].Descriptor()
	// equipment.DefaultCreateTime holds the default value on creation for the create_time field.
	equipment.DefaultCreateTime = equipmentDescCreateTime.Default.(func() time.Time)
	// equipmentDescUpdateTime is the schema descriptor for update_time field.
	equipmentDescUpdateTime := equipmentMixinFields0[1].Descriptor()
	// equipment.DefaultUpdateTime holds the default value on creation for the update_time field.
	equipment.DefaultUpdateTime = equipmentDescUpdateTime.Default.(func() time.Time)
	// equipment.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	equipment.UpdateDefaultUpdateTime = equipmentDescUpdateTime.UpdateDefault.(func() time.Time)
	// equipmentDescName is the schema descriptor for name field.
	equipmentDescName := equipmentFields[0].Descriptor()
	// equipment.NameValidator is a validator for the "name" field. It is called by the builders before save.
	equipment.NameValidator = equipmentDescName.Validators[0].(func(string) error)
	// equipmentDescDeviceID is the schema descriptor for device_id field.
	equipmentDescDeviceID := equipmentFields[2].Descriptor()
	// equipment.DeviceIDValidator is a validator for the "device_id" field. It is called by the builders before save.
	equipment.DeviceIDValidator = equipmentDescDeviceID.Validators[0].(func(string) error)
	equipmentcategoryMixin := schema.EquipmentCategory{}.Mixin()
	equipmentcategory.Policy = privacy.NewPolicies(schema.EquipmentCategory{})
	equipmentcategory.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := equipmentcategory.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	equipmentcategoryMixinFields0 := equipmentcategoryMixin[0].Fields()
	equipmentcategoryFields := schema.EquipmentCategory{}.Fields()
	_ = equipmentcategoryFields
	// equipmentcategoryDescCreateTime is the schema descriptor for create_time field.
	equipmentcategoryDescCreateTime := equipmentcategoryMixinFields0[0].Descriptor()
	// equipmentcategory.DefaultCreateTime holds the default value on creation for the create_time field.
	equipmentcategory.DefaultCreateTime = equipmentcategoryDescCreateTime.Default.(func() time.Time)
	// equipmentcategoryDescUpdateTime is the schema descriptor for update_time field.
	equipmentcategoryDescUpdateTime := equipmentcategoryMixinFields0[1].Descriptor()
	// equipmentcategory.DefaultUpdateTime holds the default value on creation for the update_time field.
	equipmentcategory.DefaultUpdateTime = equipmentcategoryDescUpdateTime.Default.(func() time.Time)
	// equipmentcategory.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	equipmentcategory.UpdateDefaultUpdateTime = equipmentcategoryDescUpdateTime.UpdateDefault.(func() time.Time)
	equipmentportMixin := schema.EquipmentPort{}.Mixin()
	equipmentport.Policy = privacy.NewPolicies(schema.EquipmentPort{})
	equipmentport.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := equipmentport.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	equipmentportMixinFields0 := equipmentportMixin[0].Fields()
	equipmentportFields := schema.EquipmentPort{}.Fields()
	_ = equipmentportFields
	// equipmentportDescCreateTime is the schema descriptor for create_time field.
	equipmentportDescCreateTime := equipmentportMixinFields0[0].Descriptor()
	// equipmentport.DefaultCreateTime holds the default value on creation for the create_time field.
	equipmentport.DefaultCreateTime = equipmentportDescCreateTime.Default.(func() time.Time)
	// equipmentportDescUpdateTime is the schema descriptor for update_time field.
	equipmentportDescUpdateTime := equipmentportMixinFields0[1].Descriptor()
	// equipmentport.DefaultUpdateTime holds the default value on creation for the update_time field.
	equipmentport.DefaultUpdateTime = equipmentportDescUpdateTime.Default.(func() time.Time)
	// equipmentport.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	equipmentport.UpdateDefaultUpdateTime = equipmentportDescUpdateTime.UpdateDefault.(func() time.Time)
	equipmentportdefinitionMixin := schema.EquipmentPortDefinition{}.Mixin()
	equipmentportdefinition.Policy = privacy.NewPolicies(schema.EquipmentPortDefinition{})
	equipmentportdefinition.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := equipmentportdefinition.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	equipmentportdefinitionMixinFields0 := equipmentportdefinitionMixin[0].Fields()
	equipmentportdefinitionFields := schema.EquipmentPortDefinition{}.Fields()
	_ = equipmentportdefinitionFields
	// equipmentportdefinitionDescCreateTime is the schema descriptor for create_time field.
	equipmentportdefinitionDescCreateTime := equipmentportdefinitionMixinFields0[0].Descriptor()
	// equipmentportdefinition.DefaultCreateTime holds the default value on creation for the create_time field.
	equipmentportdefinition.DefaultCreateTime = equipmentportdefinitionDescCreateTime.Default.(func() time.Time)
	// equipmentportdefinitionDescUpdateTime is the schema descriptor for update_time field.
	equipmentportdefinitionDescUpdateTime := equipmentportdefinitionMixinFields0[1].Descriptor()
	// equipmentportdefinition.DefaultUpdateTime holds the default value on creation for the update_time field.
	equipmentportdefinition.DefaultUpdateTime = equipmentportdefinitionDescUpdateTime.Default.(func() time.Time)
	// equipmentportdefinition.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	equipmentportdefinition.UpdateDefaultUpdateTime = equipmentportdefinitionDescUpdateTime.UpdateDefault.(func() time.Time)
	equipmentporttypeMixin := schema.EquipmentPortType{}.Mixin()
	equipmentporttype.Policy = privacy.NewPolicies(schema.EquipmentPortType{})
	equipmentporttype.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := equipmentporttype.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	equipmentporttypeMixinFields0 := equipmentporttypeMixin[0].Fields()
	equipmentporttypeFields := schema.EquipmentPortType{}.Fields()
	_ = equipmentporttypeFields
	// equipmentporttypeDescCreateTime is the schema descriptor for create_time field.
	equipmentporttypeDescCreateTime := equipmentporttypeMixinFields0[0].Descriptor()
	// equipmentporttype.DefaultCreateTime holds the default value on creation for the create_time field.
	equipmentporttype.DefaultCreateTime = equipmentporttypeDescCreateTime.Default.(func() time.Time)
	// equipmentporttypeDescUpdateTime is the schema descriptor for update_time field.
	equipmentporttypeDescUpdateTime := equipmentporttypeMixinFields0[1].Descriptor()
	// equipmentporttype.DefaultUpdateTime holds the default value on creation for the update_time field.
	equipmentporttype.DefaultUpdateTime = equipmentporttypeDescUpdateTime.Default.(func() time.Time)
	// equipmentporttype.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	equipmentporttype.UpdateDefaultUpdateTime = equipmentporttypeDescUpdateTime.UpdateDefault.(func() time.Time)
	equipmentpositionMixin := schema.EquipmentPosition{}.Mixin()
	equipmentposition.Policy = privacy.NewPolicies(schema.EquipmentPosition{})
	equipmentposition.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := equipmentposition.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	equipmentpositionMixinFields0 := equipmentpositionMixin[0].Fields()
	equipmentpositionFields := schema.EquipmentPosition{}.Fields()
	_ = equipmentpositionFields
	// equipmentpositionDescCreateTime is the schema descriptor for create_time field.
	equipmentpositionDescCreateTime := equipmentpositionMixinFields0[0].Descriptor()
	// equipmentposition.DefaultCreateTime holds the default value on creation for the create_time field.
	equipmentposition.DefaultCreateTime = equipmentpositionDescCreateTime.Default.(func() time.Time)
	// equipmentpositionDescUpdateTime is the schema descriptor for update_time field.
	equipmentpositionDescUpdateTime := equipmentpositionMixinFields0[1].Descriptor()
	// equipmentposition.DefaultUpdateTime holds the default value on creation for the update_time field.
	equipmentposition.DefaultUpdateTime = equipmentpositionDescUpdateTime.Default.(func() time.Time)
	// equipmentposition.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	equipmentposition.UpdateDefaultUpdateTime = equipmentpositionDescUpdateTime.UpdateDefault.(func() time.Time)
	equipmentpositiondefinitionMixin := schema.EquipmentPositionDefinition{}.Mixin()
	equipmentpositiondefinition.Policy = privacy.NewPolicies(schema.EquipmentPositionDefinition{})
	equipmentpositiondefinition.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := equipmentpositiondefinition.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	equipmentpositiondefinitionMixinFields0 := equipmentpositiondefinitionMixin[0].Fields()
	equipmentpositiondefinitionFields := schema.EquipmentPositionDefinition{}.Fields()
	_ = equipmentpositiondefinitionFields
	// equipmentpositiondefinitionDescCreateTime is the schema descriptor for create_time field.
	equipmentpositiondefinitionDescCreateTime := equipmentpositiondefinitionMixinFields0[0].Descriptor()
	// equipmentpositiondefinition.DefaultCreateTime holds the default value on creation for the create_time field.
	equipmentpositiondefinition.DefaultCreateTime = equipmentpositiondefinitionDescCreateTime.Default.(func() time.Time)
	// equipmentpositiondefinitionDescUpdateTime is the schema descriptor for update_time field.
	equipmentpositiondefinitionDescUpdateTime := equipmentpositiondefinitionMixinFields0[1].Descriptor()
	// equipmentpositiondefinition.DefaultUpdateTime holds the default value on creation for the update_time field.
	equipmentpositiondefinition.DefaultUpdateTime = equipmentpositiondefinitionDescUpdateTime.Default.(func() time.Time)
	// equipmentpositiondefinition.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	equipmentpositiondefinition.UpdateDefaultUpdateTime = equipmentpositiondefinitionDescUpdateTime.UpdateDefault.(func() time.Time)
	equipmenttypeMixin := schema.EquipmentType{}.Mixin()
	equipmenttype.Policy = privacy.NewPolicies(schema.EquipmentType{})
	equipmenttype.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := equipmenttype.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	equipmenttypeMixinFields0 := equipmenttypeMixin[0].Fields()
	equipmenttypeFields := schema.EquipmentType{}.Fields()
	_ = equipmenttypeFields
	// equipmenttypeDescCreateTime is the schema descriptor for create_time field.
	equipmenttypeDescCreateTime := equipmenttypeMixinFields0[0].Descriptor()
	// equipmenttype.DefaultCreateTime holds the default value on creation for the create_time field.
	equipmenttype.DefaultCreateTime = equipmenttypeDescCreateTime.Default.(func() time.Time)
	// equipmenttypeDescUpdateTime is the schema descriptor for update_time field.
	equipmenttypeDescUpdateTime := equipmenttypeMixinFields0[1].Descriptor()
	// equipmenttype.DefaultUpdateTime holds the default value on creation for the update_time field.
	equipmenttype.DefaultUpdateTime = equipmenttypeDescUpdateTime.Default.(func() time.Time)
	// equipmenttype.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	equipmenttype.UpdateDefaultUpdateTime = equipmenttypeDescUpdateTime.UpdateDefault.(func() time.Time)
	eventseverityMixin := schema.EventSeverity{}.Mixin()
	eventseverity.Policy = privacy.NewPolicies(schema.EventSeverity{})
	eventseverity.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := eventseverity.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	eventseverityMixinFields0 := eventseverityMixin[0].Fields()
	eventseverityFields := schema.EventSeverity{}.Fields()
	_ = eventseverityFields
	// eventseverityDescCreateTime is the schema descriptor for create_time field.
	eventseverityDescCreateTime := eventseverityMixinFields0[0].Descriptor()
	// eventseverity.DefaultCreateTime holds the default value on creation for the create_time field.
	eventseverity.DefaultCreateTime = eventseverityDescCreateTime.Default.(func() time.Time)
	// eventseverityDescUpdateTime is the schema descriptor for update_time field.
	eventseverityDescUpdateTime := eventseverityMixinFields0[1].Descriptor()
	// eventseverity.DefaultUpdateTime holds the default value on creation for the update_time field.
	eventseverity.DefaultUpdateTime = eventseverityDescUpdateTime.Default.(func() time.Time)
	// eventseverity.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	eventseverity.UpdateDefaultUpdateTime = eventseverityDescUpdateTime.UpdateDefault.(func() time.Time)
	// eventseverityDescName is the schema descriptor for name field.
	eventseverityDescName := eventseverityFields[0].Descriptor()
	// eventseverity.NameValidator is a validator for the "name" field. It is called by the builders before save.
	eventseverity.NameValidator = eventseverityDescName.Validators[0].(func(string) error)
	exitpointMixin := schema.ExitPoint{}.Mixin()
	exitpoint.Policy = privacy.NewPolicies(schema.ExitPoint{})
	exitpoint.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := exitpoint.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	exitpointHooks := schema.ExitPoint{}.Hooks()

	exitpoint.Hooks[1] = exitpointHooks[0]

	exitpoint.Hooks[2] = exitpointHooks[1]
	exitpointMixinFields0 := exitpointMixin[0].Fields()
	exitpointFields := schema.ExitPoint{}.Fields()
	_ = exitpointFields
	// exitpointDescCreateTime is the schema descriptor for create_time field.
	exitpointDescCreateTime := exitpointMixinFields0[0].Descriptor()
	// exitpoint.DefaultCreateTime holds the default value on creation for the create_time field.
	exitpoint.DefaultCreateTime = exitpointDescCreateTime.Default.(func() time.Time)
	// exitpointDescUpdateTime is the schema descriptor for update_time field.
	exitpointDescUpdateTime := exitpointMixinFields0[1].Descriptor()
	// exitpoint.DefaultUpdateTime holds the default value on creation for the update_time field.
	exitpoint.DefaultUpdateTime = exitpointDescUpdateTime.Default.(func() time.Time)
	// exitpoint.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	exitpoint.UpdateDefaultUpdateTime = exitpointDescUpdateTime.UpdateDefault.(func() time.Time)
	exporttask.Policy = privacy.NewPolicies(schema.ExportTask{})
	exporttask.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := exporttask.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	exporttaskFields := schema.ExportTask{}.Fields()
	_ = exporttaskFields
	// exporttaskDescProgress is the schema descriptor for progress field.
	exporttaskDescProgress := exporttaskFields[2].Descriptor()
	// exporttask.DefaultProgress holds the default value on creation for the progress field.
	exporttask.DefaultProgress = exporttaskDescProgress.Default.(float64)
	// exporttask.ProgressValidator is a validator for the "progress" field. It is called by the builders before save.
	exporttask.ProgressValidator = exporttaskDescProgress.Validators[0].(func(float64) error)
	// exporttaskDescFilters is the schema descriptor for filters field.
	exporttaskDescFilters := exporttaskFields[3].Descriptor()
	// exporttask.DefaultFilters holds the default value on creation for the filters field.
	exporttask.DefaultFilters = exporttaskDescFilters.Default.(string)
	featureMixin := schema.Feature{}.Mixin()
	feature.Policy = privacy.NewPolicies(schema.Feature{})
	feature.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := feature.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	featureMixinFields0 := featureMixin[0].Fields()
	featureFields := schema.Feature{}.Fields()
	_ = featureFields
	// featureDescCreateTime is the schema descriptor for create_time field.
	featureDescCreateTime := featureMixinFields0[0].Descriptor()
	// feature.DefaultCreateTime holds the default value on creation for the create_time field.
	feature.DefaultCreateTime = featureDescCreateTime.Default.(func() time.Time)
	// featureDescUpdateTime is the schema descriptor for update_time field.
	featureDescUpdateTime := featureMixinFields0[1].Descriptor()
	// feature.DefaultUpdateTime holds the default value on creation for the update_time field.
	feature.DefaultUpdateTime = featureDescUpdateTime.Default.(func() time.Time)
	// feature.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	feature.UpdateDefaultUpdateTime = featureDescUpdateTime.UpdateDefault.(func() time.Time)
	// featureDescName is the schema descriptor for name field.
	featureDescName := featureFields[0].Descriptor()
	// feature.NameValidator is a validator for the "name" field. It is called by the builders before save.
	feature.NameValidator = featureDescName.Validators[0].(func(string) error)
	// featureDescGlobal is the schema descriptor for global field.
	featureDescGlobal := featureFields[1].Descriptor()
	// feature.DefaultGlobal holds the default value on creation for the global field.
	feature.DefaultGlobal = featureDescGlobal.Default.(bool)
	// featureDescEnabled is the schema descriptor for enabled field.
	featureDescEnabled := featureFields[2].Descriptor()
	// feature.DefaultEnabled holds the default value on creation for the enabled field.
	feature.DefaultEnabled = featureDescEnabled.Default.(bool)
	fileMixin := schema.File{}.Mixin()
	file.Policy = privacy.NewPolicies(schema.File{})
	file.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := file.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	fileMixinFields0 := fileMixin[0].Fields()
	fileFields := schema.File{}.Fields()
	_ = fileFields
	// fileDescCreateTime is the schema descriptor for create_time field.
	fileDescCreateTime := fileMixinFields0[0].Descriptor()
	// file.DefaultCreateTime holds the default value on creation for the create_time field.
	file.DefaultCreateTime = fileDescCreateTime.Default.(func() time.Time)
	// fileDescUpdateTime is the schema descriptor for update_time field.
	fileDescUpdateTime := fileMixinFields0[1].Descriptor()
	// file.DefaultUpdateTime holds the default value on creation for the update_time field.
	file.DefaultUpdateTime = fileDescUpdateTime.Default.(func() time.Time)
	// file.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	file.UpdateDefaultUpdateTime = fileDescUpdateTime.UpdateDefault.(func() time.Time)
	// fileDescSize is the schema descriptor for size field.
	fileDescSize := fileFields[2].Descriptor()
	// file.SizeValidator is a validator for the "size" field. It is called by the builders before save.
	file.SizeValidator = fileDescSize.Validators[0].(func(int) error)
	floorplanMixin := schema.FloorPlan{}.Mixin()
	floorplan.Policy = privacy.NewPolicies(schema.FloorPlan{})
	floorplan.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := floorplan.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	floorplanMixinFields0 := floorplanMixin[0].Fields()
	floorplanFields := schema.FloorPlan{}.Fields()
	_ = floorplanFields
	// floorplanDescCreateTime is the schema descriptor for create_time field.
	floorplanDescCreateTime := floorplanMixinFields0[0].Descriptor()
	// floorplan.DefaultCreateTime holds the default value on creation for the create_time field.
	floorplan.DefaultCreateTime = floorplanDescCreateTime.Default.(func() time.Time)
	// floorplanDescUpdateTime is the schema descriptor for update_time field.
	floorplanDescUpdateTime := floorplanMixinFields0[1].Descriptor()
	// floorplan.DefaultUpdateTime holds the default value on creation for the update_time field.
	floorplan.DefaultUpdateTime = floorplanDescUpdateTime.Default.(func() time.Time)
	// floorplan.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	floorplan.UpdateDefaultUpdateTime = floorplanDescUpdateTime.UpdateDefault.(func() time.Time)
	floorplanreferencepointMixin := schema.FloorPlanReferencePoint{}.Mixin()
	floorplanreferencepoint.Policy = privacy.NewPolicies(schema.FloorPlanReferencePoint{})
	floorplanreferencepoint.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := floorplanreferencepoint.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	floorplanreferencepointMixinFields0 := floorplanreferencepointMixin[0].Fields()
	floorplanreferencepointFields := schema.FloorPlanReferencePoint{}.Fields()
	_ = floorplanreferencepointFields
	// floorplanreferencepointDescCreateTime is the schema descriptor for create_time field.
	floorplanreferencepointDescCreateTime := floorplanreferencepointMixinFields0[0].Descriptor()
	// floorplanreferencepoint.DefaultCreateTime holds the default value on creation for the create_time field.
	floorplanreferencepoint.DefaultCreateTime = floorplanreferencepointDescCreateTime.Default.(func() time.Time)
	// floorplanreferencepointDescUpdateTime is the schema descriptor for update_time field.
	floorplanreferencepointDescUpdateTime := floorplanreferencepointMixinFields0[1].Descriptor()
	// floorplanreferencepoint.DefaultUpdateTime holds the default value on creation for the update_time field.
	floorplanreferencepoint.DefaultUpdateTime = floorplanreferencepointDescUpdateTime.Default.(func() time.Time)
	// floorplanreferencepoint.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	floorplanreferencepoint.UpdateDefaultUpdateTime = floorplanreferencepointDescUpdateTime.UpdateDefault.(func() time.Time)
	floorplanscaleMixin := schema.FloorPlanScale{}.Mixin()
	floorplanscale.Policy = privacy.NewPolicies(schema.FloorPlanScale{})
	floorplanscale.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := floorplanscale.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	floorplanscaleMixinFields0 := floorplanscaleMixin[0].Fields()
	floorplanscaleFields := schema.FloorPlanScale{}.Fields()
	_ = floorplanscaleFields
	// floorplanscaleDescCreateTime is the schema descriptor for create_time field.
	floorplanscaleDescCreateTime := floorplanscaleMixinFields0[0].Descriptor()
	// floorplanscale.DefaultCreateTime holds the default value on creation for the create_time field.
	floorplanscale.DefaultCreateTime = floorplanscaleDescCreateTime.Default.(func() time.Time)
	// floorplanscaleDescUpdateTime is the schema descriptor for update_time field.
	floorplanscaleDescUpdateTime := floorplanscaleMixinFields0[1].Descriptor()
	// floorplanscale.DefaultUpdateTime holds the default value on creation for the update_time field.
	floorplanscale.DefaultUpdateTime = floorplanscaleDescUpdateTime.Default.(func() time.Time)
	// floorplanscale.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	floorplanscale.UpdateDefaultUpdateTime = floorplanscaleDescUpdateTime.UpdateDefault.(func() time.Time)
	flowMixin := schema.Flow{}.Mixin()
	flow.Policy = privacy.NewPolicies(schema.Flow{})
	flow.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := flow.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	flowMixinHooks1 := flowMixin[1].Hooks()

	flow.Hooks[1] = flowMixinHooks1[0]
	flowMixinFields0 := flowMixin[0].Fields()
	flowMixinFields1 := flowMixin[1].Fields()
	flowFields := schema.Flow{}.Fields()
	_ = flowFields
	// flowDescCreateTime is the schema descriptor for create_time field.
	flowDescCreateTime := flowMixinFields0[0].Descriptor()
	// flow.DefaultCreateTime holds the default value on creation for the create_time field.
	flow.DefaultCreateTime = flowDescCreateTime.Default.(func() time.Time)
	// flowDescUpdateTime is the schema descriptor for update_time field.
	flowDescUpdateTime := flowMixinFields0[1].Descriptor()
	// flow.DefaultUpdateTime holds the default value on creation for the update_time field.
	flow.DefaultUpdateTime = flowDescUpdateTime.Default.(func() time.Time)
	// flow.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	flow.UpdateDefaultUpdateTime = flowDescUpdateTime.UpdateDefault.(func() time.Time)
	// flowDescName is the schema descriptor for name field.
	flowDescName := flowMixinFields1[0].Descriptor()
	// flow.NameValidator is a validator for the "name" field. It is called by the builders before save.
	flow.NameValidator = flowDescName.Validators[0].(func(string) error)
	flowdraftMixin := schema.FlowDraft{}.Mixin()
	flowdraft.Policy = privacy.NewPolicies(schema.FlowDraft{})
	flowdraft.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := flowdraft.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	flowdraftMixinHooks1 := flowdraftMixin[1].Hooks()
	flowdraftHooks := schema.FlowDraft{}.Hooks()

	flowdraft.Hooks[1] = flowdraftMixinHooks1[0]

	flowdraft.Hooks[2] = flowdraftHooks[0]
	flowdraftMixinFields0 := flowdraftMixin[0].Fields()
	flowdraftMixinFields1 := flowdraftMixin[1].Fields()
	flowdraftFields := schema.FlowDraft{}.Fields()
	_ = flowdraftFields
	// flowdraftDescCreateTime is the schema descriptor for create_time field.
	flowdraftDescCreateTime := flowdraftMixinFields0[0].Descriptor()
	// flowdraft.DefaultCreateTime holds the default value on creation for the create_time field.
	flowdraft.DefaultCreateTime = flowdraftDescCreateTime.Default.(func() time.Time)
	// flowdraftDescUpdateTime is the schema descriptor for update_time field.
	flowdraftDescUpdateTime := flowdraftMixinFields0[1].Descriptor()
	// flowdraft.DefaultUpdateTime holds the default value on creation for the update_time field.
	flowdraft.DefaultUpdateTime = flowdraftDescUpdateTime.Default.(func() time.Time)
	// flowdraft.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	flowdraft.UpdateDefaultUpdateTime = flowdraftDescUpdateTime.UpdateDefault.(func() time.Time)
	// flowdraftDescName is the schema descriptor for name field.
	flowdraftDescName := flowdraftMixinFields1[0].Descriptor()
	// flowdraft.NameValidator is a validator for the "name" field. It is called by the builders before save.
	flowdraft.NameValidator = flowdraftDescName.Validators[0].(func(string) error)
	// flowdraftDescSameAsFlow is the schema descriptor for sameAsFlow field.
	flowdraftDescSameAsFlow := flowdraftFields[0].Descriptor()
	// flowdraft.DefaultSameAsFlow holds the default value on creation for the sameAsFlow field.
	flowdraft.DefaultSameAsFlow = flowdraftDescSameAsFlow.Default.(bool)
	flowexecutiontemplateMixin := schema.FlowExecutionTemplate{}.Mixin()
	flowexecutiontemplate.Policy = privacy.NewPolicies(schema.FlowExecutionTemplate{})
	flowexecutiontemplate.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := flowexecutiontemplate.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	flowexecutiontemplateMixinHooks1 := flowexecutiontemplateMixin[1].Hooks()

	flowexecutiontemplate.Hooks[1] = flowexecutiontemplateMixinHooks1[0]
	flowexecutiontemplateMixinFields0 := flowexecutiontemplateMixin[0].Fields()
	flowexecutiontemplateMixinFields1 := flowexecutiontemplateMixin[1].Fields()
	flowexecutiontemplateFields := schema.FlowExecutionTemplate{}.Fields()
	_ = flowexecutiontemplateFields
	// flowexecutiontemplateDescCreateTime is the schema descriptor for create_time field.
	flowexecutiontemplateDescCreateTime := flowexecutiontemplateMixinFields0[0].Descriptor()
	// flowexecutiontemplate.DefaultCreateTime holds the default value on creation for the create_time field.
	flowexecutiontemplate.DefaultCreateTime = flowexecutiontemplateDescCreateTime.Default.(func() time.Time)
	// flowexecutiontemplateDescUpdateTime is the schema descriptor for update_time field.
	flowexecutiontemplateDescUpdateTime := flowexecutiontemplateMixinFields0[1].Descriptor()
	// flowexecutiontemplate.DefaultUpdateTime holds the default value on creation for the update_time field.
	flowexecutiontemplate.DefaultUpdateTime = flowexecutiontemplateDescUpdateTime.Default.(func() time.Time)
	// flowexecutiontemplate.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	flowexecutiontemplate.UpdateDefaultUpdateTime = flowexecutiontemplateDescUpdateTime.UpdateDefault.(func() time.Time)
	// flowexecutiontemplateDescName is the schema descriptor for name field.
	flowexecutiontemplateDescName := flowexecutiontemplateMixinFields1[0].Descriptor()
	// flowexecutiontemplate.NameValidator is a validator for the "name" field. It is called by the builders before save.
	flowexecutiontemplate.NameValidator = flowexecutiontemplateDescName.Validators[0].(func(string) error)
	flowinstanceMixin := schema.FlowInstance{}.Mixin()
	flowinstance.Policy = privacy.NewPolicies(schema.FlowInstance{})
	flowinstance.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := flowinstance.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	flowinstanceHooks := schema.FlowInstance{}.Hooks()

	flowinstance.Hooks[1] = flowinstanceHooks[0]

	flowinstance.Hooks[2] = flowinstanceHooks[1]
	flowinstanceMixinFields0 := flowinstanceMixin[0].Fields()
	flowinstanceMixinFields1 := flowinstanceMixin[1].Fields()
	flowinstanceFields := schema.FlowInstance{}.Fields()
	_ = flowinstanceFields
	// flowinstanceDescCreateTime is the schema descriptor for create_time field.
	flowinstanceDescCreateTime := flowinstanceMixinFields0[0].Descriptor()
	// flowinstance.DefaultCreateTime holds the default value on creation for the create_time field.
	flowinstance.DefaultCreateTime = flowinstanceDescCreateTime.Default.(func() time.Time)
	// flowinstanceDescUpdateTime is the schema descriptor for update_time field.
	flowinstanceDescUpdateTime := flowinstanceMixinFields1[0].Descriptor()
	// flowinstance.DefaultUpdateTime holds the default value on creation for the update_time field.
	flowinstance.DefaultUpdateTime = flowinstanceDescUpdateTime.Default.(func() time.Time)
	// flowinstance.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	flowinstance.UpdateDefaultUpdateTime = flowinstanceDescUpdateTime.UpdateDefault.(func() time.Time)
	formulaMixin := schema.Formula{}.Mixin()
	formula.Policy = privacy.NewPolicies(schema.Formula{})
	formula.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := formula.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	formulaMixinFields0 := formulaMixin[0].Fields()
	formulaFields := schema.Formula{}.Fields()
	_ = formulaFields
	// formulaDescCreateTime is the schema descriptor for create_time field.
	formulaDescCreateTime := formulaMixinFields0[0].Descriptor()
	// formula.DefaultCreateTime holds the default value on creation for the create_time field.
	formula.DefaultCreateTime = formulaDescCreateTime.Default.(func() time.Time)
	// formulaDescUpdateTime is the schema descriptor for update_time field.
	formulaDescUpdateTime := formulaMixinFields0[1].Descriptor()
	// formula.DefaultUpdateTime holds the default value on creation for the update_time field.
	formula.DefaultUpdateTime = formulaDescUpdateTime.Default.(func() time.Time)
	// formula.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	formula.UpdateDefaultUpdateTime = formulaDescUpdateTime.UpdateDefault.(func() time.Time)
	// formulaDescTextFormula is the schema descriptor for textFormula field.
	formulaDescTextFormula := formulaFields[0].Descriptor()
	// formula.TextFormulaValidator is a validator for the "textFormula" field. It is called by the builders before save.
	formula.TextFormulaValidator = formulaDescTextFormula.Validators[0].(func(string) error)
	hyperlinkMixin := schema.Hyperlink{}.Mixin()
	hyperlink.Policy = privacy.NewPolicies(schema.Hyperlink{})
	hyperlink.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := hyperlink.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	hyperlinkMixinFields0 := hyperlinkMixin[0].Fields()
	hyperlinkFields := schema.Hyperlink{}.Fields()
	_ = hyperlinkFields
	// hyperlinkDescCreateTime is the schema descriptor for create_time field.
	hyperlinkDescCreateTime := hyperlinkMixinFields0[0].Descriptor()
	// hyperlink.DefaultCreateTime holds the default value on creation for the create_time field.
	hyperlink.DefaultCreateTime = hyperlinkDescCreateTime.Default.(func() time.Time)
	// hyperlinkDescUpdateTime is the schema descriptor for update_time field.
	hyperlinkDescUpdateTime := hyperlinkMixinFields0[1].Descriptor()
	// hyperlink.DefaultUpdateTime holds the default value on creation for the update_time field.
	hyperlink.DefaultUpdateTime = hyperlinkDescUpdateTime.Default.(func() time.Time)
	// hyperlink.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	hyperlink.UpdateDefaultUpdateTime = hyperlinkDescUpdateTime.UpdateDefault.(func() time.Time)
	kpiMixin := schema.Kpi{}.Mixin()
	kpi.Policy = privacy.NewPolicies(schema.Kpi{})
	kpi.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := kpi.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	kpiMixinFields0 := kpiMixin[0].Fields()
	kpiFields := schema.Kpi{}.Fields()
	_ = kpiFields
	// kpiDescCreateTime is the schema descriptor for create_time field.
	kpiDescCreateTime := kpiMixinFields0[0].Descriptor()
	// kpi.DefaultCreateTime holds the default value on creation for the create_time field.
	kpi.DefaultCreateTime = kpiDescCreateTime.Default.(func() time.Time)
	// kpiDescUpdateTime is the schema descriptor for update_time field.
	kpiDescUpdateTime := kpiMixinFields0[1].Descriptor()
	// kpi.DefaultUpdateTime holds the default value on creation for the update_time field.
	kpi.DefaultUpdateTime = kpiDescUpdateTime.Default.(func() time.Time)
	// kpi.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	kpi.UpdateDefaultUpdateTime = kpiDescUpdateTime.UpdateDefault.(func() time.Time)
	// kpiDescName is the schema descriptor for name field.
	kpiDescName := kpiFields[0].Descriptor()
	// kpi.NameValidator is a validator for the "name" field. It is called by the builders before save.
	kpi.NameValidator = kpiDescName.Validators[0].(func(string) error)
	// kpiDescDescription is the schema descriptor for description field.
	kpiDescDescription := kpiFields[1].Descriptor()
	// kpi.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	kpi.DescriptionValidator = kpiDescDescription.Validators[0].(func(string) error)
	kpicategoryMixin := schema.KpiCategory{}.Mixin()
	kpicategory.Policy = privacy.NewPolicies(schema.KpiCategory{})
	kpicategory.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := kpicategory.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	kpicategoryMixinFields0 := kpicategoryMixin[0].Fields()
	kpicategoryFields := schema.KpiCategory{}.Fields()
	_ = kpicategoryFields
	// kpicategoryDescCreateTime is the schema descriptor for create_time field.
	kpicategoryDescCreateTime := kpicategoryMixinFields0[0].Descriptor()
	// kpicategory.DefaultCreateTime holds the default value on creation for the create_time field.
	kpicategory.DefaultCreateTime = kpicategoryDescCreateTime.Default.(func() time.Time)
	// kpicategoryDescUpdateTime is the schema descriptor for update_time field.
	kpicategoryDescUpdateTime := kpicategoryMixinFields0[1].Descriptor()
	// kpicategory.DefaultUpdateTime holds the default value on creation for the update_time field.
	kpicategory.DefaultUpdateTime = kpicategoryDescUpdateTime.Default.(func() time.Time)
	// kpicategory.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	kpicategory.UpdateDefaultUpdateTime = kpicategoryDescUpdateTime.UpdateDefault.(func() time.Time)
	// kpicategoryDescName is the schema descriptor for name field.
	kpicategoryDescName := kpicategoryFields[0].Descriptor()
	// kpicategory.NameValidator is a validator for the "name" field. It is called by the builders before save.
	kpicategory.NameValidator = kpicategoryDescName.Validators[0].(func(string) error)
	kqiMixin := schema.Kqi{}.Mixin()
	kqi.Policy = privacy.NewPolicies(schema.Kqi{})
	kqi.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := kqi.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	kqiMixinFields0 := kqiMixin[0].Fields()
	kqiFields := schema.Kqi{}.Fields()
	_ = kqiFields
	// kqiDescCreateTime is the schema descriptor for create_time field.
	kqiDescCreateTime := kqiMixinFields0[0].Descriptor()
	// kqi.DefaultCreateTime holds the default value on creation for the create_time field.
	kqi.DefaultCreateTime = kqiDescCreateTime.Default.(func() time.Time)
	// kqiDescUpdateTime is the schema descriptor for update_time field.
	kqiDescUpdateTime := kqiMixinFields0[1].Descriptor()
	// kqi.DefaultUpdateTime holds the default value on creation for the update_time field.
	kqi.DefaultUpdateTime = kqiDescUpdateTime.Default.(func() time.Time)
	// kqi.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	kqi.UpdateDefaultUpdateTime = kqiDescUpdateTime.UpdateDefault.(func() time.Time)
	// kqiDescName is the schema descriptor for name field.
	kqiDescName := kqiFields[0].Descriptor()
	// kqi.NameValidator is a validator for the "name" field. It is called by the builders before save.
	kqi.NameValidator = kqiDescName.Validators[0].(func(string) error)
	kqicategoryMixin := schema.KqiCategory{}.Mixin()
	kqicategory.Policy = privacy.NewPolicies(schema.KqiCategory{})
	kqicategory.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := kqicategory.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	kqicategoryMixinFields0 := kqicategoryMixin[0].Fields()
	kqicategoryFields := schema.KqiCategory{}.Fields()
	_ = kqicategoryFields
	// kqicategoryDescCreateTime is the schema descriptor for create_time field.
	kqicategoryDescCreateTime := kqicategoryMixinFields0[0].Descriptor()
	// kqicategory.DefaultCreateTime holds the default value on creation for the create_time field.
	kqicategory.DefaultCreateTime = kqicategoryDescCreateTime.Default.(func() time.Time)
	// kqicategoryDescUpdateTime is the schema descriptor for update_time field.
	kqicategoryDescUpdateTime := kqicategoryMixinFields0[1].Descriptor()
	// kqicategory.DefaultUpdateTime holds the default value on creation for the update_time field.
	kqicategory.DefaultUpdateTime = kqicategoryDescUpdateTime.Default.(func() time.Time)
	// kqicategory.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	kqicategory.UpdateDefaultUpdateTime = kqicategoryDescUpdateTime.UpdateDefault.(func() time.Time)
	// kqicategoryDescName is the schema descriptor for name field.
	kqicategoryDescName := kqicategoryFields[0].Descriptor()
	// kqicategory.NameValidator is a validator for the "name" field. It is called by the builders before save.
	kqicategory.NameValidator = kqicategoryDescName.Validators[0].(func(string) error)
	kqicomparatorMixin := schema.KqiComparator{}.Mixin()
	kqicomparator.Policy = privacy.NewPolicies(schema.KqiComparator{})
	kqicomparator.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := kqicomparator.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	kqicomparatorMixinFields0 := kqicomparatorMixin[0].Fields()
	kqicomparatorFields := schema.KqiComparator{}.Fields()
	_ = kqicomparatorFields
	// kqicomparatorDescCreateTime is the schema descriptor for create_time field.
	kqicomparatorDescCreateTime := kqicomparatorMixinFields0[0].Descriptor()
	// kqicomparator.DefaultCreateTime holds the default value on creation for the create_time field.
	kqicomparator.DefaultCreateTime = kqicomparatorDescCreateTime.Default.(func() time.Time)
	// kqicomparatorDescUpdateTime is the schema descriptor for update_time field.
	kqicomparatorDescUpdateTime := kqicomparatorMixinFields0[1].Descriptor()
	// kqicomparator.DefaultUpdateTime holds the default value on creation for the update_time field.
	kqicomparator.DefaultUpdateTime = kqicomparatorDescUpdateTime.Default.(func() time.Time)
	// kqicomparator.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	kqicomparator.UpdateDefaultUpdateTime = kqicomparatorDescUpdateTime.UpdateDefault.(func() time.Time)
	// kqicomparatorDescComparatorType is the schema descriptor for comparatorType field.
	kqicomparatorDescComparatorType := kqicomparatorFields[1].Descriptor()
	// kqicomparator.ComparatorTypeValidator is a validator for the "comparatorType" field. It is called by the builders before save.
	kqicomparator.ComparatorTypeValidator = kqicomparatorDescComparatorType.Validators[0].(func(string) error)
	kqiperspectiveMixin := schema.KqiPerspective{}.Mixin()
	kqiperspective.Policy = privacy.NewPolicies(schema.KqiPerspective{})
	kqiperspective.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := kqiperspective.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	kqiperspectiveMixinFields0 := kqiperspectiveMixin[0].Fields()
	kqiperspectiveFields := schema.KqiPerspective{}.Fields()
	_ = kqiperspectiveFields
	// kqiperspectiveDescCreateTime is the schema descriptor for create_time field.
	kqiperspectiveDescCreateTime := kqiperspectiveMixinFields0[0].Descriptor()
	// kqiperspective.DefaultCreateTime holds the default value on creation for the create_time field.
	kqiperspective.DefaultCreateTime = kqiperspectiveDescCreateTime.Default.(func() time.Time)
	// kqiperspectiveDescUpdateTime is the schema descriptor for update_time field.
	kqiperspectiveDescUpdateTime := kqiperspectiveMixinFields0[1].Descriptor()
	// kqiperspective.DefaultUpdateTime holds the default value on creation for the update_time field.
	kqiperspective.DefaultUpdateTime = kqiperspectiveDescUpdateTime.Default.(func() time.Time)
	// kqiperspective.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	kqiperspective.UpdateDefaultUpdateTime = kqiperspectiveDescUpdateTime.UpdateDefault.(func() time.Time)
	// kqiperspectiveDescName is the schema descriptor for name field.
	kqiperspectiveDescName := kqiperspectiveFields[0].Descriptor()
	// kqiperspective.NameValidator is a validator for the "name" field. It is called by the builders before save.
	kqiperspective.NameValidator = kqiperspectiveDescName.Validators[0].(func(string) error)
	kqisourceMixin := schema.KqiSource{}.Mixin()
	kqisource.Policy = privacy.NewPolicies(schema.KqiSource{})
	kqisource.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := kqisource.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	kqisourceMixinFields0 := kqisourceMixin[0].Fields()
	kqisourceFields := schema.KqiSource{}.Fields()
	_ = kqisourceFields
	// kqisourceDescCreateTime is the schema descriptor for create_time field.
	kqisourceDescCreateTime := kqisourceMixinFields0[0].Descriptor()
	// kqisource.DefaultCreateTime holds the default value on creation for the create_time field.
	kqisource.DefaultCreateTime = kqisourceDescCreateTime.Default.(func() time.Time)
	// kqisourceDescUpdateTime is the schema descriptor for update_time field.
	kqisourceDescUpdateTime := kqisourceMixinFields0[1].Descriptor()
	// kqisource.DefaultUpdateTime holds the default value on creation for the update_time field.
	kqisource.DefaultUpdateTime = kqisourceDescUpdateTime.Default.(func() time.Time)
	// kqisource.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	kqisource.UpdateDefaultUpdateTime = kqisourceDescUpdateTime.UpdateDefault.(func() time.Time)
	// kqisourceDescName is the schema descriptor for name field.
	kqisourceDescName := kqisourceFields[0].Descriptor()
	// kqisource.NameValidator is a validator for the "name" field. It is called by the builders before save.
	kqisource.NameValidator = kqisourceDescName.Validators[0].(func(string) error)
	kqitargetMixin := schema.KqiTarget{}.Mixin()
	kqitarget.Policy = privacy.NewPolicies(schema.KqiTarget{})
	kqitarget.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := kqitarget.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	kqitargetMixinFields0 := kqitargetMixin[0].Fields()
	kqitargetFields := schema.KqiTarget{}.Fields()
	_ = kqitargetFields
	// kqitargetDescCreateTime is the schema descriptor for create_time field.
	kqitargetDescCreateTime := kqitargetMixinFields0[0].Descriptor()
	// kqitarget.DefaultCreateTime holds the default value on creation for the create_time field.
	kqitarget.DefaultCreateTime = kqitargetDescCreateTime.Default.(func() time.Time)
	// kqitargetDescUpdateTime is the schema descriptor for update_time field.
	kqitargetDescUpdateTime := kqitargetMixinFields0[1].Descriptor()
	// kqitarget.DefaultUpdateTime holds the default value on creation for the update_time field.
	kqitarget.DefaultUpdateTime = kqitargetDescUpdateTime.Default.(func() time.Time)
	// kqitarget.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	kqitarget.UpdateDefaultUpdateTime = kqitargetDescUpdateTime.UpdateDefault.(func() time.Time)
	// kqitargetDescName is the schema descriptor for name field.
	kqitargetDescName := kqitargetFields[0].Descriptor()
	// kqitarget.NameValidator is a validator for the "name" field. It is called by the builders before save.
	kqitarget.NameValidator = kqitargetDescName.Validators[0].(func(string) error)
	kqitemporalfrequencyMixin := schema.KqiTemporalFrequency{}.Mixin()
	kqitemporalfrequency.Policy = privacy.NewPolicies(schema.KqiTemporalFrequency{})
	kqitemporalfrequency.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := kqitemporalfrequency.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	kqitemporalfrequencyMixinFields0 := kqitemporalfrequencyMixin[0].Fields()
	kqitemporalfrequencyFields := schema.KqiTemporalFrequency{}.Fields()
	_ = kqitemporalfrequencyFields
	// kqitemporalfrequencyDescCreateTime is the schema descriptor for create_time field.
	kqitemporalfrequencyDescCreateTime := kqitemporalfrequencyMixinFields0[0].Descriptor()
	// kqitemporalfrequency.DefaultCreateTime holds the default value on creation for the create_time field.
	kqitemporalfrequency.DefaultCreateTime = kqitemporalfrequencyDescCreateTime.Default.(func() time.Time)
	// kqitemporalfrequencyDescUpdateTime is the schema descriptor for update_time field.
	kqitemporalfrequencyDescUpdateTime := kqitemporalfrequencyMixinFields0[1].Descriptor()
	// kqitemporalfrequency.DefaultUpdateTime holds the default value on creation for the update_time field.
	kqitemporalfrequency.DefaultUpdateTime = kqitemporalfrequencyDescUpdateTime.Default.(func() time.Time)
	// kqitemporalfrequency.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	kqitemporalfrequency.UpdateDefaultUpdateTime = kqitemporalfrequencyDescUpdateTime.UpdateDefault.(func() time.Time)
	// kqitemporalfrequencyDescName is the schema descriptor for name field.
	kqitemporalfrequencyDescName := kqitemporalfrequencyFields[0].Descriptor()
	// kqitemporalfrequency.NameValidator is a validator for the "name" field. It is called by the builders before save.
	kqitemporalfrequency.NameValidator = kqitemporalfrequencyDescName.Validators[0].(func(string) error)
	linkMixin := schema.Link{}.Mixin()
	link.Policy = privacy.NewPolicies(schema.Link{})
	link.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := link.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	linkMixinFields0 := linkMixin[0].Fields()
	linkFields := schema.Link{}.Fields()
	_ = linkFields
	// linkDescCreateTime is the schema descriptor for create_time field.
	linkDescCreateTime := linkMixinFields0[0].Descriptor()
	// link.DefaultCreateTime holds the default value on creation for the create_time field.
	link.DefaultCreateTime = linkDescCreateTime.Default.(func() time.Time)
	// linkDescUpdateTime is the schema descriptor for update_time field.
	linkDescUpdateTime := linkMixinFields0[1].Descriptor()
	// link.DefaultUpdateTime holds the default value on creation for the update_time field.
	link.DefaultUpdateTime = linkDescUpdateTime.Default.(func() time.Time)
	// link.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	link.UpdateDefaultUpdateTime = linkDescUpdateTime.UpdateDefault.(func() time.Time)
	locationMixin := schema.Location{}.Mixin()
	location.Policy = privacy.NewPolicies(schema.Location{})
	location.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := location.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	locationMixinFields0 := locationMixin[0].Fields()
	locationFields := schema.Location{}.Fields()
	_ = locationFields
	// locationDescCreateTime is the schema descriptor for create_time field.
	locationDescCreateTime := locationMixinFields0[0].Descriptor()
	// location.DefaultCreateTime holds the default value on creation for the create_time field.
	location.DefaultCreateTime = locationDescCreateTime.Default.(func() time.Time)
	// locationDescUpdateTime is the schema descriptor for update_time field.
	locationDescUpdateTime := locationMixinFields0[1].Descriptor()
	// location.DefaultUpdateTime holds the default value on creation for the update_time field.
	location.DefaultUpdateTime = locationDescUpdateTime.Default.(func() time.Time)
	// location.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	location.UpdateDefaultUpdateTime = locationDescUpdateTime.UpdateDefault.(func() time.Time)
	// locationDescName is the schema descriptor for name field.
	locationDescName := locationFields[0].Descriptor()
	// location.NameValidator is a validator for the "name" field. It is called by the builders before save.
	location.NameValidator = locationDescName.Validators[0].(func(string) error)
	// locationDescLatitude is the schema descriptor for latitude field.
	locationDescLatitude := locationFields[2].Descriptor()
	// location.DefaultLatitude holds the default value on creation for the latitude field.
	location.DefaultLatitude = locationDescLatitude.Default.(float64)
	// location.LatitudeValidator is a validator for the "latitude" field. It is called by the builders before save.
	location.LatitudeValidator = locationDescLatitude.Validators[0].(func(float64) error)
	// locationDescLongitude is the schema descriptor for longitude field.
	locationDescLongitude := locationFields[3].Descriptor()
	// location.DefaultLongitude holds the default value on creation for the longitude field.
	location.DefaultLongitude = locationDescLongitude.Default.(float64)
	// location.LongitudeValidator is a validator for the "longitude" field. It is called by the builders before save.
	location.LongitudeValidator = locationDescLongitude.Validators[0].(func(float64) error)
	// locationDescSiteSurveyNeeded is the schema descriptor for site_survey_needed field.
	locationDescSiteSurveyNeeded := locationFields[4].Descriptor()
	// location.DefaultSiteSurveyNeeded holds the default value on creation for the site_survey_needed field.
	location.DefaultSiteSurveyNeeded = locationDescSiteSurveyNeeded.Default.(bool)
	locationtypeMixin := schema.LocationType{}.Mixin()
	locationtype.Policy = privacy.NewPolicies(schema.LocationType{})
	locationtype.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := locationtype.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	locationtypeMixinFields0 := locationtypeMixin[0].Fields()
	locationtypeFields := schema.LocationType{}.Fields()
	_ = locationtypeFields
	// locationtypeDescCreateTime is the schema descriptor for create_time field.
	locationtypeDescCreateTime := locationtypeMixinFields0[0].Descriptor()
	// locationtype.DefaultCreateTime holds the default value on creation for the create_time field.
	locationtype.DefaultCreateTime = locationtypeDescCreateTime.Default.(func() time.Time)
	// locationtypeDescUpdateTime is the schema descriptor for update_time field.
	locationtypeDescUpdateTime := locationtypeMixinFields0[1].Descriptor()
	// locationtype.DefaultUpdateTime holds the default value on creation for the update_time field.
	locationtype.DefaultUpdateTime = locationtypeDescUpdateTime.Default.(func() time.Time)
	// locationtype.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	locationtype.UpdateDefaultUpdateTime = locationtypeDescUpdateTime.UpdateDefault.(func() time.Time)
	// locationtypeDescSite is the schema descriptor for site field.
	locationtypeDescSite := locationtypeFields[0].Descriptor()
	// locationtype.DefaultSite holds the default value on creation for the site field.
	locationtype.DefaultSite = locationtypeDescSite.Default.(bool)
	// locationtypeDescMapZoomLevel is the schema descriptor for map_zoom_level field.
	locationtypeDescMapZoomLevel := locationtypeFields[3].Descriptor()
	// locationtype.DefaultMapZoomLevel holds the default value on creation for the map_zoom_level field.
	locationtype.DefaultMapZoomLevel = locationtypeDescMapZoomLevel.Default.(int)
	// locationtypeDescIndex is the schema descriptor for index field.
	locationtypeDescIndex := locationtypeFields[4].Descriptor()
	// locationtype.DefaultIndex holds the default value on creation for the index field.
	locationtype.DefaultIndex = locationtypeDescIndex.Default.(int)
	networktypeMixin := schema.NetworkType{}.Mixin()
	networktype.Policy = privacy.NewPolicies(schema.NetworkType{})
	networktype.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := networktype.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	networktypeMixinFields0 := networktypeMixin[0].Fields()
	networktypeFields := schema.NetworkType{}.Fields()
	_ = networktypeFields
	// networktypeDescCreateTime is the schema descriptor for create_time field.
	networktypeDescCreateTime := networktypeMixinFields0[0].Descriptor()
	// networktype.DefaultCreateTime holds the default value on creation for the create_time field.
	networktype.DefaultCreateTime = networktypeDescCreateTime.Default.(func() time.Time)
	// networktypeDescUpdateTime is the schema descriptor for update_time field.
	networktypeDescUpdateTime := networktypeMixinFields0[1].Descriptor()
	// networktype.DefaultUpdateTime holds the default value on creation for the update_time field.
	networktype.DefaultUpdateTime = networktypeDescUpdateTime.Default.(func() time.Time)
	// networktype.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	networktype.UpdateDefaultUpdateTime = networktypeDescUpdateTime.UpdateDefault.(func() time.Time)
	// networktypeDescName is the schema descriptor for name field.
	networktypeDescName := networktypeFields[0].Descriptor()
	// networktype.NameValidator is a validator for the "name" field. It is called by the builders before save.
	networktype.NameValidator = networktypeDescName.Validators[0].(func(string) error)
	organizationMixin := schema.Organization{}.Mixin()
	organization.Policy = privacy.NewPolicies(schema.Organization{})
	organization.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := organization.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	organizationMixinFields0 := organizationMixin[0].Fields()
	organizationFields := schema.Organization{}.Fields()
	_ = organizationFields
	// organizationDescCreateTime is the schema descriptor for create_time field.
	organizationDescCreateTime := organizationMixinFields0[0].Descriptor()
	// organization.DefaultCreateTime holds the default value on creation for the create_time field.
	organization.DefaultCreateTime = organizationDescCreateTime.Default.(func() time.Time)
	// organizationDescUpdateTime is the schema descriptor for update_time field.
	organizationDescUpdateTime := organizationMixinFields0[1].Descriptor()
	// organization.DefaultUpdateTime holds the default value on creation for the update_time field.
	organization.DefaultUpdateTime = organizationDescUpdateTime.Default.(func() time.Time)
	// organization.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	organization.UpdateDefaultUpdateTime = organizationDescUpdateTime.UpdateDefault.(func() time.Time)
	// organizationDescName is the schema descriptor for name field.
	organizationDescName := organizationFields[0].Descriptor()
	// organization.NameValidator is a validator for the "name" field. It is called by the builders before save.
	organization.NameValidator = organizationDescName.Validators[0].(func(string) error)
	parametercatalogMixin := schema.ParameterCatalog{}.Mixin()
	parametercatalog.Policy = privacy.NewPolicies(schema.ParameterCatalog{})
	parametercatalog.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := parametercatalog.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	parametercatalogMixinFields0 := parametercatalogMixin[0].Fields()
	parametercatalogFields := schema.ParameterCatalog{}.Fields()
	_ = parametercatalogFields
	// parametercatalogDescCreateTime is the schema descriptor for create_time field.
	parametercatalogDescCreateTime := parametercatalogMixinFields0[0].Descriptor()
	// parametercatalog.DefaultCreateTime holds the default value on creation for the create_time field.
	parametercatalog.DefaultCreateTime = parametercatalogDescCreateTime.Default.(func() time.Time)
	// parametercatalogDescUpdateTime is the schema descriptor for update_time field.
	parametercatalogDescUpdateTime := parametercatalogMixinFields0[1].Descriptor()
	// parametercatalog.DefaultUpdateTime holds the default value on creation for the update_time field.
	parametercatalog.DefaultUpdateTime = parametercatalogDescUpdateTime.Default.(func() time.Time)
	// parametercatalog.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	parametercatalog.UpdateDefaultUpdateTime = parametercatalogDescUpdateTime.UpdateDefault.(func() time.Time)
	// parametercatalogDescIndex is the schema descriptor for index field.
	parametercatalogDescIndex := parametercatalogFields[1].Descriptor()
	// parametercatalog.DefaultIndex holds the default value on creation for the index field.
	parametercatalog.DefaultIndex = parametercatalogDescIndex.Default.(int)
	// parametercatalogDescDisabled is the schema descriptor for disabled field.
	parametercatalogDescDisabled := parametercatalogFields[2].Descriptor()
	// parametercatalog.DefaultDisabled holds the default value on creation for the disabled field.
	parametercatalog.DefaultDisabled = parametercatalogDescDisabled.Default.(bool)
	permissionspolicyMixin := schema.PermissionsPolicy{}.Mixin()
	permissionspolicy.Policy = privacy.NewPolicies(schema.PermissionsPolicy{})
	permissionspolicy.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := permissionspolicy.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	permissionspolicyMixinFields0 := permissionspolicyMixin[0].Fields()
	permissionspolicyFields := schema.PermissionsPolicy{}.Fields()
	_ = permissionspolicyFields
	// permissionspolicyDescCreateTime is the schema descriptor for create_time field.
	permissionspolicyDescCreateTime := permissionspolicyMixinFields0[0].Descriptor()
	// permissionspolicy.DefaultCreateTime holds the default value on creation for the create_time field.
	permissionspolicy.DefaultCreateTime = permissionspolicyDescCreateTime.Default.(func() time.Time)
	// permissionspolicyDescUpdateTime is the schema descriptor for update_time field.
	permissionspolicyDescUpdateTime := permissionspolicyMixinFields0[1].Descriptor()
	// permissionspolicy.DefaultUpdateTime holds the default value on creation for the update_time field.
	permissionspolicy.DefaultUpdateTime = permissionspolicyDescUpdateTime.Default.(func() time.Time)
	// permissionspolicy.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	permissionspolicy.UpdateDefaultUpdateTime = permissionspolicyDescUpdateTime.UpdateDefault.(func() time.Time)
	// permissionspolicyDescName is the schema descriptor for name field.
	permissionspolicyDescName := permissionspolicyFields[0].Descriptor()
	// permissionspolicy.NameValidator is a validator for the "name" field. It is called by the builders before save.
	permissionspolicy.NameValidator = permissionspolicyDescName.Validators[0].(func(string) error)
	// permissionspolicyDescIsGlobal is the schema descriptor for is_global field.
	permissionspolicyDescIsGlobal := permissionspolicyFields[2].Descriptor()
	// permissionspolicy.DefaultIsGlobal holds the default value on creation for the is_global field.
	permissionspolicy.DefaultIsGlobal = permissionspolicyDescIsGlobal.Default.(bool)
	projectMixin := schema.Project{}.Mixin()
	project.Policy = privacy.NewPolicies(schema.Project{})
	project.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := project.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	projectHooks := schema.Project{}.Hooks()

	project.Hooks[1] = projectHooks[0]
	projectMixinFields0 := projectMixin[0].Fields()
	projectMixinFields1 := projectMixin[1].Fields()
	projectFields := schema.Project{}.Fields()
	_ = projectFields
	// projectDescCreateTime is the schema descriptor for create_time field.
	projectDescCreateTime := projectMixinFields0[0].Descriptor()
	// project.DefaultCreateTime holds the default value on creation for the create_time field.
	project.DefaultCreateTime = projectDescCreateTime.Default.(func() time.Time)
	// projectDescUpdateTime is the schema descriptor for update_time field.
	projectDescUpdateTime := projectMixinFields1[0].Descriptor()
	// project.DefaultUpdateTime holds the default value on creation for the update_time field.
	project.DefaultUpdateTime = projectDescUpdateTime.Default.(func() time.Time)
	// project.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	project.UpdateDefaultUpdateTime = projectDescUpdateTime.UpdateDefault.(func() time.Time)
	// projectDescName is the schema descriptor for name field.
	projectDescName := projectFields[0].Descriptor()
	// project.NameValidator is a validator for the "name" field. It is called by the builders before save.
	project.NameValidator = projectDescName.Validators[0].(func(string) error)
	projecttemplateMixin := schema.ProjectTemplate{}.Mixin()
	projecttemplate.Policy = privacy.NewPolicies(schema.ProjectTemplate{})
	projecttemplate.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := projecttemplate.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	projecttemplateMixinFields0 := projecttemplateMixin[0].Fields()
	projecttemplateMixinFields1 := projecttemplateMixin[1].Fields()
	projecttemplateFields := schema.ProjectTemplate{}.Fields()
	_ = projecttemplateFields
	// projecttemplateDescCreateTime is the schema descriptor for create_time field.
	projecttemplateDescCreateTime := projecttemplateMixinFields0[0].Descriptor()
	// projecttemplate.DefaultCreateTime holds the default value on creation for the create_time field.
	projecttemplate.DefaultCreateTime = projecttemplateDescCreateTime.Default.(func() time.Time)
	// projecttemplateDescUpdateTime is the schema descriptor for update_time field.
	projecttemplateDescUpdateTime := projecttemplateMixinFields0[1].Descriptor()
	// projecttemplate.DefaultUpdateTime holds the default value on creation for the update_time field.
	projecttemplate.DefaultUpdateTime = projecttemplateDescUpdateTime.Default.(func() time.Time)
	// projecttemplate.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	projecttemplate.UpdateDefaultUpdateTime = projecttemplateDescUpdateTime.UpdateDefault.(func() time.Time)
	// projecttemplateDescName is the schema descriptor for name field.
	projecttemplateDescName := projecttemplateMixinFields1[0].Descriptor()
	// projecttemplate.NameValidator is a validator for the "name" field. It is called by the builders before save.
	projecttemplate.NameValidator = projecttemplateDescName.Validators[0].(func(string) error)
	projecttypeMixin := schema.ProjectType{}.Mixin()
	projecttype.Policy = privacy.NewPolicies(schema.ProjectType{})
	projecttype.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := projecttype.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	projecttypeMixinFields0 := projecttypeMixin[0].Fields()
	projecttypeMixinFields1 := projecttypeMixin[1].Fields()
	projecttypeFields := schema.ProjectType{}.Fields()
	_ = projecttypeFields
	// projecttypeDescCreateTime is the schema descriptor for create_time field.
	projecttypeDescCreateTime := projecttypeMixinFields0[0].Descriptor()
	// projecttype.DefaultCreateTime holds the default value on creation for the create_time field.
	projecttype.DefaultCreateTime = projecttypeDescCreateTime.Default.(func() time.Time)
	// projecttypeDescUpdateTime is the schema descriptor for update_time field.
	projecttypeDescUpdateTime := projecttypeMixinFields0[1].Descriptor()
	// projecttype.DefaultUpdateTime holds the default value on creation for the update_time field.
	projecttype.DefaultUpdateTime = projecttypeDescUpdateTime.Default.(func() time.Time)
	// projecttype.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	projecttype.UpdateDefaultUpdateTime = projecttypeDescUpdateTime.UpdateDefault.(func() time.Time)
	// projecttypeDescName is the schema descriptor for name field.
	projecttypeDescName := projecttypeMixinFields1[0].Descriptor()
	// projecttype.NameValidator is a validator for the "name" field. It is called by the builders before save.
	projecttype.NameValidator = projecttypeDescName.Validators[0].(func(string) error)
	propertyMixin := schema.Property{}.Mixin()
	property.Policy = privacy.NewPolicies(schema.Property{})
	property.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := property.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	propertyMixinFields0 := propertyMixin[0].Fields()
	propertyFields := schema.Property{}.Fields()
	_ = propertyFields
	// propertyDescCreateTime is the schema descriptor for create_time field.
	propertyDescCreateTime := propertyMixinFields0[0].Descriptor()
	// property.DefaultCreateTime holds the default value on creation for the create_time field.
	property.DefaultCreateTime = propertyDescCreateTime.Default.(func() time.Time)
	// propertyDescUpdateTime is the schema descriptor for update_time field.
	propertyDescUpdateTime := propertyMixinFields0[1].Descriptor()
	// property.DefaultUpdateTime holds the default value on creation for the update_time field.
	property.DefaultUpdateTime = propertyDescUpdateTime.Default.(func() time.Time)
	// property.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	property.UpdateDefaultUpdateTime = propertyDescUpdateTime.UpdateDefault.(func() time.Time)
	propertycategoryMixin := schema.PropertyCategory{}.Mixin()
	propertycategory.Policy = privacy.NewPolicies(schema.PropertyCategory{})
	propertycategory.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := propertycategory.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	propertycategoryMixinFields0 := propertycategoryMixin[0].Fields()
	propertycategoryFields := schema.PropertyCategory{}.Fields()
	_ = propertycategoryFields
	// propertycategoryDescCreateTime is the schema descriptor for create_time field.
	propertycategoryDescCreateTime := propertycategoryMixinFields0[0].Descriptor()
	// propertycategory.DefaultCreateTime holds the default value on creation for the create_time field.
	propertycategory.DefaultCreateTime = propertycategoryDescCreateTime.Default.(func() time.Time)
	// propertycategoryDescUpdateTime is the schema descriptor for update_time field.
	propertycategoryDescUpdateTime := propertycategoryMixinFields0[1].Descriptor()
	// propertycategory.DefaultUpdateTime holds the default value on creation for the update_time field.
	propertycategory.DefaultUpdateTime = propertycategoryDescUpdateTime.Default.(func() time.Time)
	// propertycategory.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	propertycategory.UpdateDefaultUpdateTime = propertycategoryDescUpdateTime.UpdateDefault.(func() time.Time)
	// propertycategoryDescName is the schema descriptor for name field.
	propertycategoryDescName := propertycategoryFields[0].Descriptor()
	// propertycategory.NameValidator is a validator for the "name" field. It is called by the builders before save.
	propertycategory.NameValidator = propertycategoryDescName.Validators[0].(func(string) error)
	propertytypeMixin := schema.PropertyType{}.Mixin()
	propertytype.Policy = privacy.NewPolicies(schema.PropertyType{})
	propertytype.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := propertytype.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	propertytypeMixinFields0 := propertytypeMixin[0].Fields()
	propertytypeFields := schema.PropertyType{}.Fields()
	_ = propertytypeFields
	// propertytypeDescCreateTime is the schema descriptor for create_time field.
	propertytypeDescCreateTime := propertytypeMixinFields0[0].Descriptor()
	// propertytype.DefaultCreateTime holds the default value on creation for the create_time field.
	propertytype.DefaultCreateTime = propertytypeDescCreateTime.Default.(func() time.Time)
	// propertytypeDescUpdateTime is the schema descriptor for update_time field.
	propertytypeDescUpdateTime := propertytypeMixinFields0[1].Descriptor()
	// propertytype.DefaultUpdateTime holds the default value on creation for the update_time field.
	propertytype.DefaultUpdateTime = propertytypeDescUpdateTime.Default.(func() time.Time)
	// propertytype.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	propertytype.UpdateDefaultUpdateTime = propertytypeDescUpdateTime.UpdateDefault.(func() time.Time)
	// propertytypeDescIsInstanceProperty is the schema descriptor for is_instance_property field.
	propertytypeDescIsInstanceProperty := propertytypeFields[13].Descriptor()
	// propertytype.DefaultIsInstanceProperty holds the default value on creation for the is_instance_property field.
	propertytype.DefaultIsInstanceProperty = propertytypeDescIsInstanceProperty.Default.(bool)
	// propertytypeDescEditable is the schema descriptor for editable field.
	propertytypeDescEditable := propertytypeFields[14].Descriptor()
	// propertytype.DefaultEditable holds the default value on creation for the editable field.
	propertytype.DefaultEditable = propertytypeDescEditable.Default.(bool)
	// propertytypeDescMandatory is the schema descriptor for mandatory field.
	propertytypeDescMandatory := propertytypeFields[15].Descriptor()
	// propertytype.DefaultMandatory holds the default value on creation for the mandatory field.
	propertytype.DefaultMandatory = propertytypeDescMandatory.Default.(bool)
	// propertytypeDescDeleted is the schema descriptor for deleted field.
	propertytypeDescDeleted := propertytypeFields[16].Descriptor()
	// propertytype.DefaultDeleted holds the default value on creation for the deleted field.
	propertytype.DefaultDeleted = propertytypeDescDeleted.Default.(bool)
	// propertytypeDescListable is the schema descriptor for listable field.
	propertytypeDescListable := propertytypeFields[17].Descriptor()
	// propertytype.DefaultListable holds the default value on creation for the listable field.
	propertytype.DefaultListable = propertytypeDescListable.Default.(bool)
	recommendationsMixin := schema.Recommendations{}.Mixin()
	recommendations.Policy = privacy.NewPolicies(schema.Recommendations{})
	recommendations.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := recommendations.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	recommendationsMixinFields0 := recommendationsMixin[0].Fields()
	recommendationsFields := schema.Recommendations{}.Fields()
	_ = recommendationsFields
	// recommendationsDescCreateTime is the schema descriptor for create_time field.
	recommendationsDescCreateTime := recommendationsMixinFields0[0].Descriptor()
	// recommendations.DefaultCreateTime holds the default value on creation for the create_time field.
	recommendations.DefaultCreateTime = recommendationsDescCreateTime.Default.(func() time.Time)
	// recommendationsDescUpdateTime is the schema descriptor for update_time field.
	recommendationsDescUpdateTime := recommendationsMixinFields0[1].Descriptor()
	// recommendations.DefaultUpdateTime holds the default value on creation for the update_time field.
	recommendations.DefaultUpdateTime = recommendationsDescUpdateTime.Default.(func() time.Time)
	// recommendations.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	recommendations.UpdateDefaultUpdateTime = recommendationsDescUpdateTime.UpdateDefault.(func() time.Time)
	recommendationscategoryMixin := schema.RecommendationsCategory{}.Mixin()
	recommendationscategory.Policy = privacy.NewPolicies(schema.RecommendationsCategory{})
	recommendationscategory.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := recommendationscategory.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	recommendationscategoryMixinFields0 := recommendationscategoryMixin[0].Fields()
	recommendationscategoryFields := schema.RecommendationsCategory{}.Fields()
	_ = recommendationscategoryFields
	// recommendationscategoryDescCreateTime is the schema descriptor for create_time field.
	recommendationscategoryDescCreateTime := recommendationscategoryMixinFields0[0].Descriptor()
	// recommendationscategory.DefaultCreateTime holds the default value on creation for the create_time field.
	recommendationscategory.DefaultCreateTime = recommendationscategoryDescCreateTime.Default.(func() time.Time)
	// recommendationscategoryDescUpdateTime is the schema descriptor for update_time field.
	recommendationscategoryDescUpdateTime := recommendationscategoryMixinFields0[1].Descriptor()
	// recommendationscategory.DefaultUpdateTime holds the default value on creation for the update_time field.
	recommendationscategory.DefaultUpdateTime = recommendationscategoryDescUpdateTime.Default.(func() time.Time)
	// recommendationscategory.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	recommendationscategory.UpdateDefaultUpdateTime = recommendationscategoryDescUpdateTime.UpdateDefault.(func() time.Time)
	// recommendationscategoryDescName is the schema descriptor for name field.
	recommendationscategoryDescName := recommendationscategoryFields[0].Descriptor()
	// recommendationscategory.NameValidator is a validator for the "name" field. It is called by the builders before save.
	recommendationscategory.NameValidator = recommendationscategoryDescName.Validators[0].(func(string) error)
	recommendationssourcesMixin := schema.RecommendationsSources{}.Mixin()
	recommendationssources.Policy = privacy.NewPolicies(schema.RecommendationsSources{})
	recommendationssources.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := recommendationssources.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	recommendationssourcesMixinFields0 := recommendationssourcesMixin[0].Fields()
	recommendationssourcesFields := schema.RecommendationsSources{}.Fields()
	_ = recommendationssourcesFields
	// recommendationssourcesDescCreateTime is the schema descriptor for create_time field.
	recommendationssourcesDescCreateTime := recommendationssourcesMixinFields0[0].Descriptor()
	// recommendationssources.DefaultCreateTime holds the default value on creation for the create_time field.
	recommendationssources.DefaultCreateTime = recommendationssourcesDescCreateTime.Default.(func() time.Time)
	// recommendationssourcesDescUpdateTime is the schema descriptor for update_time field.
	recommendationssourcesDescUpdateTime := recommendationssourcesMixinFields0[1].Descriptor()
	// recommendationssources.DefaultUpdateTime holds the default value on creation for the update_time field.
	recommendationssources.DefaultUpdateTime = recommendationssourcesDescUpdateTime.Default.(func() time.Time)
	// recommendationssources.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	recommendationssources.UpdateDefaultUpdateTime = recommendationssourcesDescUpdateTime.UpdateDefault.(func() time.Time)
	// recommendationssourcesDescName is the schema descriptor for name field.
	recommendationssourcesDescName := recommendationssourcesFields[0].Descriptor()
	// recommendationssources.NameValidator is a validator for the "name" field. It is called by the builders before save.
	recommendationssources.NameValidator = recommendationssourcesDescName.Validators[0].(func(string) error)
	reportfilterMixin := schema.ReportFilter{}.Mixin()
	reportfilter.Policy = privacy.NewPolicies(schema.ReportFilter{})
	reportfilter.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := reportfilter.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	reportfilterMixinFields0 := reportfilterMixin[0].Fields()
	reportfilterFields := schema.ReportFilter{}.Fields()
	_ = reportfilterFields
	// reportfilterDescCreateTime is the schema descriptor for create_time field.
	reportfilterDescCreateTime := reportfilterMixinFields0[0].Descriptor()
	// reportfilter.DefaultCreateTime holds the default value on creation for the create_time field.
	reportfilter.DefaultCreateTime = reportfilterDescCreateTime.Default.(func() time.Time)
	// reportfilterDescUpdateTime is the schema descriptor for update_time field.
	reportfilterDescUpdateTime := reportfilterMixinFields0[1].Descriptor()
	// reportfilter.DefaultUpdateTime holds the default value on creation for the update_time field.
	reportfilter.DefaultUpdateTime = reportfilterDescUpdateTime.Default.(func() time.Time)
	// reportfilter.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	reportfilter.UpdateDefaultUpdateTime = reportfilterDescUpdateTime.UpdateDefault.(func() time.Time)
	// reportfilterDescName is the schema descriptor for name field.
	reportfilterDescName := reportfilterFields[0].Descriptor()
	// reportfilter.NameValidator is a validator for the "name" field. It is called by the builders before save.
	reportfilter.NameValidator = reportfilterDescName.Validators[0].(func(string) error)
	// reportfilterDescFilters is the schema descriptor for filters field.
	reportfilterDescFilters := reportfilterFields[2].Descriptor()
	// reportfilter.DefaultFilters holds the default value on creation for the filters field.
	reportfilter.DefaultFilters = reportfilterDescFilters.Default.(string)
	ruleMixin := schema.Rule{}.Mixin()
	rule.Policy = privacy.NewPolicies(schema.Rule{})
	rule.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := rule.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	ruleMixinFields0 := ruleMixin[0].Fields()
	ruleFields := schema.Rule{}.Fields()
	_ = ruleFields
	// ruleDescCreateTime is the schema descriptor for create_time field.
	ruleDescCreateTime := ruleMixinFields0[0].Descriptor()
	// rule.DefaultCreateTime holds the default value on creation for the create_time field.
	rule.DefaultCreateTime = ruleDescCreateTime.Default.(func() time.Time)
	// ruleDescUpdateTime is the schema descriptor for update_time field.
	ruleDescUpdateTime := ruleMixinFields0[1].Descriptor()
	// rule.DefaultUpdateTime holds the default value on creation for the update_time field.
	rule.DefaultUpdateTime = ruleDescUpdateTime.Default.(func() time.Time)
	// rule.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	rule.UpdateDefaultUpdateTime = ruleDescUpdateTime.UpdateDefault.(func() time.Time)
	// ruleDescName is the schema descriptor for name field.
	ruleDescName := ruleFields[0].Descriptor()
	// rule.NameValidator is a validator for the "name" field. It is called by the builders before save.
	rule.NameValidator = ruleDescName.Validators[0].(func(string) error)
	rulelimitMixin := schema.RuleLimit{}.Mixin()
	rulelimit.Policy = privacy.NewPolicies(schema.RuleLimit{})
	rulelimit.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := rulelimit.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	rulelimitMixinFields0 := rulelimitMixin[0].Fields()
	rulelimitFields := schema.RuleLimit{}.Fields()
	_ = rulelimitFields
	// rulelimitDescCreateTime is the schema descriptor for create_time field.
	rulelimitDescCreateTime := rulelimitMixinFields0[0].Descriptor()
	// rulelimit.DefaultCreateTime holds the default value on creation for the create_time field.
	rulelimit.DefaultCreateTime = rulelimitDescCreateTime.Default.(func() time.Time)
	// rulelimitDescUpdateTime is the schema descriptor for update_time field.
	rulelimitDescUpdateTime := rulelimitMixinFields0[1].Descriptor()
	// rulelimit.DefaultUpdateTime holds the default value on creation for the update_time field.
	rulelimit.DefaultUpdateTime = rulelimitDescUpdateTime.Default.(func() time.Time)
	// rulelimit.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	rulelimit.UpdateDefaultUpdateTime = rulelimitDescUpdateTime.UpdateDefault.(func() time.Time)
	// rulelimitDescLimitType is the schema descriptor for limitType field.
	rulelimitDescLimitType := rulelimitFields[1].Descriptor()
	// rulelimit.LimitTypeValidator is a validator for the "limitType" field. It is called by the builders before save.
	rulelimit.LimitTypeValidator = rulelimitDescLimitType.Validators[0].(func(string) error)
	ruletypeMixin := schema.RuleType{}.Mixin()
	ruletype.Policy = privacy.NewPolicies(schema.RuleType{})
	ruletype.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := ruletype.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	ruletypeMixinFields0 := ruletypeMixin[0].Fields()
	ruletypeFields := schema.RuleType{}.Fields()
	_ = ruletypeFields
	// ruletypeDescCreateTime is the schema descriptor for create_time field.
	ruletypeDescCreateTime := ruletypeMixinFields0[0].Descriptor()
	// ruletype.DefaultCreateTime holds the default value on creation for the create_time field.
	ruletype.DefaultCreateTime = ruletypeDescCreateTime.Default.(func() time.Time)
	// ruletypeDescUpdateTime is the schema descriptor for update_time field.
	ruletypeDescUpdateTime := ruletypeMixinFields0[1].Descriptor()
	// ruletype.DefaultUpdateTime holds the default value on creation for the update_time field.
	ruletype.DefaultUpdateTime = ruletypeDescUpdateTime.Default.(func() time.Time)
	// ruletype.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	ruletype.UpdateDefaultUpdateTime = ruletypeDescUpdateTime.UpdateDefault.(func() time.Time)
	// ruletypeDescName is the schema descriptor for name field.
	ruletypeDescName := ruletypeFields[0].Descriptor()
	// ruletype.NameValidator is a validator for the "name" field. It is called by the builders before save.
	ruletype.NameValidator = ruletypeDescName.Validators[0].(func(string) error)
	serviceMixin := schema.Service{}.Mixin()
	service.Policy = privacy.NewPolicies(schema.Service{})
	service.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := service.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	serviceMixinFields0 := serviceMixin[0].Fields()
	serviceFields := schema.Service{}.Fields()
	_ = serviceFields
	// serviceDescCreateTime is the schema descriptor for create_time field.
	serviceDescCreateTime := serviceMixinFields0[0].Descriptor()
	// service.DefaultCreateTime holds the default value on creation for the create_time field.
	service.DefaultCreateTime = serviceDescCreateTime.Default.(func() time.Time)
	// serviceDescUpdateTime is the schema descriptor for update_time field.
	serviceDescUpdateTime := serviceMixinFields0[1].Descriptor()
	// service.DefaultUpdateTime holds the default value on creation for the update_time field.
	service.DefaultUpdateTime = serviceDescUpdateTime.Default.(func() time.Time)
	// service.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	service.UpdateDefaultUpdateTime = serviceDescUpdateTime.UpdateDefault.(func() time.Time)
	// serviceDescName is the schema descriptor for name field.
	serviceDescName := serviceFields[0].Descriptor()
	// service.NameValidator is a validator for the "name" field. It is called by the builders before save.
	service.NameValidator = serviceDescName.Validators[0].(func(string) error)
	// serviceDescExternalID is the schema descriptor for external_id field.
	serviceDescExternalID := serviceFields[1].Descriptor()
	// service.ExternalIDValidator is a validator for the "external_id" field. It is called by the builders before save.
	service.ExternalIDValidator = serviceDescExternalID.Validators[0].(func(string) error)
	serviceendpointMixin := schema.ServiceEndpoint{}.Mixin()
	serviceendpoint.Policy = privacy.NewPolicies(schema.ServiceEndpoint{})
	serviceendpoint.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := serviceendpoint.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	serviceendpointMixinFields0 := serviceendpointMixin[0].Fields()
	serviceendpointFields := schema.ServiceEndpoint{}.Fields()
	_ = serviceendpointFields
	// serviceendpointDescCreateTime is the schema descriptor for create_time field.
	serviceendpointDescCreateTime := serviceendpointMixinFields0[0].Descriptor()
	// serviceendpoint.DefaultCreateTime holds the default value on creation for the create_time field.
	serviceendpoint.DefaultCreateTime = serviceendpointDescCreateTime.Default.(func() time.Time)
	// serviceendpointDescUpdateTime is the schema descriptor for update_time field.
	serviceendpointDescUpdateTime := serviceendpointMixinFields0[1].Descriptor()
	// serviceendpoint.DefaultUpdateTime holds the default value on creation for the update_time field.
	serviceendpoint.DefaultUpdateTime = serviceendpointDescUpdateTime.Default.(func() time.Time)
	// serviceendpoint.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	serviceendpoint.UpdateDefaultUpdateTime = serviceendpointDescUpdateTime.UpdateDefault.(func() time.Time)
	serviceendpointdefinitionMixin := schema.ServiceEndpointDefinition{}.Mixin()
	serviceendpointdefinition.Policy = privacy.NewPolicies(schema.ServiceEndpointDefinition{})
	serviceendpointdefinition.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := serviceendpointdefinition.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	serviceendpointdefinitionMixinFields0 := serviceendpointdefinitionMixin[0].Fields()
	serviceendpointdefinitionFields := schema.ServiceEndpointDefinition{}.Fields()
	_ = serviceendpointdefinitionFields
	// serviceendpointdefinitionDescCreateTime is the schema descriptor for create_time field.
	serviceendpointdefinitionDescCreateTime := serviceendpointdefinitionMixinFields0[0].Descriptor()
	// serviceendpointdefinition.DefaultCreateTime holds the default value on creation for the create_time field.
	serviceendpointdefinition.DefaultCreateTime = serviceendpointdefinitionDescCreateTime.Default.(func() time.Time)
	// serviceendpointdefinitionDescUpdateTime is the schema descriptor for update_time field.
	serviceendpointdefinitionDescUpdateTime := serviceendpointdefinitionMixinFields0[1].Descriptor()
	// serviceendpointdefinition.DefaultUpdateTime holds the default value on creation for the update_time field.
	serviceendpointdefinition.DefaultUpdateTime = serviceendpointdefinitionDescUpdateTime.Default.(func() time.Time)
	// serviceendpointdefinition.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	serviceendpointdefinition.UpdateDefaultUpdateTime = serviceendpointdefinitionDescUpdateTime.UpdateDefault.(func() time.Time)
	// serviceendpointdefinitionDescName is the schema descriptor for name field.
	serviceendpointdefinitionDescName := serviceendpointdefinitionFields[1].Descriptor()
	// serviceendpointdefinition.NameValidator is a validator for the "name" field. It is called by the builders before save.
	serviceendpointdefinition.NameValidator = serviceendpointdefinitionDescName.Validators[0].(func(string) error)
	servicetypeMixin := schema.ServiceType{}.Mixin()
	servicetype.Policy = privacy.NewPolicies(schema.ServiceType{})
	servicetype.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := servicetype.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	servicetypeMixinFields0 := servicetypeMixin[0].Fields()
	servicetypeFields := schema.ServiceType{}.Fields()
	_ = servicetypeFields
	// servicetypeDescCreateTime is the schema descriptor for create_time field.
	servicetypeDescCreateTime := servicetypeMixinFields0[0].Descriptor()
	// servicetype.DefaultCreateTime holds the default value on creation for the create_time field.
	servicetype.DefaultCreateTime = servicetypeDescCreateTime.Default.(func() time.Time)
	// servicetypeDescUpdateTime is the schema descriptor for update_time field.
	servicetypeDescUpdateTime := servicetypeMixinFields0[1].Descriptor()
	// servicetype.DefaultUpdateTime holds the default value on creation for the update_time field.
	servicetype.DefaultUpdateTime = servicetypeDescUpdateTime.Default.(func() time.Time)
	// servicetype.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	servicetype.UpdateDefaultUpdateTime = servicetypeDescUpdateTime.UpdateDefault.(func() time.Time)
	// servicetypeDescHasCustomer is the schema descriptor for has_customer field.
	servicetypeDescHasCustomer := servicetypeFields[1].Descriptor()
	// servicetype.DefaultHasCustomer holds the default value on creation for the has_customer field.
	servicetype.DefaultHasCustomer = servicetypeDescHasCustomer.Default.(bool)
	// servicetypeDescIsDeleted is the schema descriptor for is_deleted field.
	servicetypeDescIsDeleted := servicetypeFields[2].Descriptor()
	// servicetype.DefaultIsDeleted holds the default value on creation for the is_deleted field.
	servicetype.DefaultIsDeleted = servicetypeDescIsDeleted.Default.(bool)
	surveyMixin := schema.Survey{}.Mixin()
	survey.Policy = privacy.NewPolicies(schema.Survey{})
	survey.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := survey.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	surveyMixinFields0 := surveyMixin[0].Fields()
	surveyFields := schema.Survey{}.Fields()
	_ = surveyFields
	// surveyDescCreateTime is the schema descriptor for create_time field.
	surveyDescCreateTime := surveyMixinFields0[0].Descriptor()
	// survey.DefaultCreateTime holds the default value on creation for the create_time field.
	survey.DefaultCreateTime = surveyDescCreateTime.Default.(func() time.Time)
	// surveyDescUpdateTime is the schema descriptor for update_time field.
	surveyDescUpdateTime := surveyMixinFields0[1].Descriptor()
	// survey.DefaultUpdateTime holds the default value on creation for the update_time field.
	survey.DefaultUpdateTime = surveyDescUpdateTime.Default.(func() time.Time)
	// survey.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	survey.UpdateDefaultUpdateTime = surveyDescUpdateTime.UpdateDefault.(func() time.Time)
	surveycellscanMixin := schema.SurveyCellScan{}.Mixin()
	surveycellscan.Policy = privacy.NewPolicies(schema.SurveyCellScan{})
	surveycellscan.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := surveycellscan.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	surveycellscanMixinFields0 := surveycellscanMixin[0].Fields()
	surveycellscanFields := schema.SurveyCellScan{}.Fields()
	_ = surveycellscanFields
	// surveycellscanDescCreateTime is the schema descriptor for create_time field.
	surveycellscanDescCreateTime := surveycellscanMixinFields0[0].Descriptor()
	// surveycellscan.DefaultCreateTime holds the default value on creation for the create_time field.
	surveycellscan.DefaultCreateTime = surveycellscanDescCreateTime.Default.(func() time.Time)
	// surveycellscanDescUpdateTime is the schema descriptor for update_time field.
	surveycellscanDescUpdateTime := surveycellscanMixinFields0[1].Descriptor()
	// surveycellscan.DefaultUpdateTime holds the default value on creation for the update_time field.
	surveycellscan.DefaultUpdateTime = surveycellscanDescUpdateTime.Default.(func() time.Time)
	// surveycellscan.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	surveycellscan.UpdateDefaultUpdateTime = surveycellscanDescUpdateTime.UpdateDefault.(func() time.Time)
	surveyquestionMixin := schema.SurveyQuestion{}.Mixin()
	surveyquestion.Policy = privacy.NewPolicies(schema.SurveyQuestion{})
	surveyquestion.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := surveyquestion.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	surveyquestionMixinFields0 := surveyquestionMixin[0].Fields()
	surveyquestionFields := schema.SurveyQuestion{}.Fields()
	_ = surveyquestionFields
	// surveyquestionDescCreateTime is the schema descriptor for create_time field.
	surveyquestionDescCreateTime := surveyquestionMixinFields0[0].Descriptor()
	// surveyquestion.DefaultCreateTime holds the default value on creation for the create_time field.
	surveyquestion.DefaultCreateTime = surveyquestionDescCreateTime.Default.(func() time.Time)
	// surveyquestionDescUpdateTime is the schema descriptor for update_time field.
	surveyquestionDescUpdateTime := surveyquestionMixinFields0[1].Descriptor()
	// surveyquestion.DefaultUpdateTime holds the default value on creation for the update_time field.
	surveyquestion.DefaultUpdateTime = surveyquestionDescUpdateTime.Default.(func() time.Time)
	// surveyquestion.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	surveyquestion.UpdateDefaultUpdateTime = surveyquestionDescUpdateTime.UpdateDefault.(func() time.Time)
	surveytemplatecategoryMixin := schema.SurveyTemplateCategory{}.Mixin()
	surveytemplatecategory.Policy = privacy.NewPolicies(schema.SurveyTemplateCategory{})
	surveytemplatecategory.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := surveytemplatecategory.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	surveytemplatecategoryMixinFields0 := surveytemplatecategoryMixin[0].Fields()
	surveytemplatecategoryFields := schema.SurveyTemplateCategory{}.Fields()
	_ = surveytemplatecategoryFields
	// surveytemplatecategoryDescCreateTime is the schema descriptor for create_time field.
	surveytemplatecategoryDescCreateTime := surveytemplatecategoryMixinFields0[0].Descriptor()
	// surveytemplatecategory.DefaultCreateTime holds the default value on creation for the create_time field.
	surveytemplatecategory.DefaultCreateTime = surveytemplatecategoryDescCreateTime.Default.(func() time.Time)
	// surveytemplatecategoryDescUpdateTime is the schema descriptor for update_time field.
	surveytemplatecategoryDescUpdateTime := surveytemplatecategoryMixinFields0[1].Descriptor()
	// surveytemplatecategory.DefaultUpdateTime holds the default value on creation for the update_time field.
	surveytemplatecategory.DefaultUpdateTime = surveytemplatecategoryDescUpdateTime.Default.(func() time.Time)
	// surveytemplatecategory.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	surveytemplatecategory.UpdateDefaultUpdateTime = surveytemplatecategoryDescUpdateTime.UpdateDefault.(func() time.Time)
	surveytemplatequestionMixin := schema.SurveyTemplateQuestion{}.Mixin()
	surveytemplatequestion.Policy = privacy.NewPolicies(schema.SurveyTemplateQuestion{})
	surveytemplatequestion.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := surveytemplatequestion.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	surveytemplatequestionMixinFields0 := surveytemplatequestionMixin[0].Fields()
	surveytemplatequestionFields := schema.SurveyTemplateQuestion{}.Fields()
	_ = surveytemplatequestionFields
	// surveytemplatequestionDescCreateTime is the schema descriptor for create_time field.
	surveytemplatequestionDescCreateTime := surveytemplatequestionMixinFields0[0].Descriptor()
	// surveytemplatequestion.DefaultCreateTime holds the default value on creation for the create_time field.
	surveytemplatequestion.DefaultCreateTime = surveytemplatequestionDescCreateTime.Default.(func() time.Time)
	// surveytemplatequestionDescUpdateTime is the schema descriptor for update_time field.
	surveytemplatequestionDescUpdateTime := surveytemplatequestionMixinFields0[1].Descriptor()
	// surveytemplatequestion.DefaultUpdateTime holds the default value on creation for the update_time field.
	surveytemplatequestion.DefaultUpdateTime = surveytemplatequestionDescUpdateTime.Default.(func() time.Time)
	// surveytemplatequestion.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	surveytemplatequestion.UpdateDefaultUpdateTime = surveytemplatequestionDescUpdateTime.UpdateDefault.(func() time.Time)
	surveywifiscanMixin := schema.SurveyWiFiScan{}.Mixin()
	surveywifiscan.Policy = privacy.NewPolicies(schema.SurveyWiFiScan{})
	surveywifiscan.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := surveywifiscan.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	surveywifiscanMixinFields0 := surveywifiscanMixin[0].Fields()
	surveywifiscanFields := schema.SurveyWiFiScan{}.Fields()
	_ = surveywifiscanFields
	// surveywifiscanDescCreateTime is the schema descriptor for create_time field.
	surveywifiscanDescCreateTime := surveywifiscanMixinFields0[0].Descriptor()
	// surveywifiscan.DefaultCreateTime holds the default value on creation for the create_time field.
	surveywifiscan.DefaultCreateTime = surveywifiscanDescCreateTime.Default.(func() time.Time)
	// surveywifiscanDescUpdateTime is the schema descriptor for update_time field.
	surveywifiscanDescUpdateTime := surveywifiscanMixinFields0[1].Descriptor()
	// surveywifiscan.DefaultUpdateTime holds the default value on creation for the update_time field.
	surveywifiscan.DefaultUpdateTime = surveywifiscanDescUpdateTime.Default.(func() time.Time)
	// surveywifiscan.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	surveywifiscan.UpdateDefaultUpdateTime = surveywifiscanDescUpdateTime.UpdateDefault.(func() time.Time)
	techMixin := schema.Tech{}.Mixin()
	tech.Policy = privacy.NewPolicies(schema.Tech{})
	tech.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := tech.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	techMixinFields0 := techMixin[0].Fields()
	techFields := schema.Tech{}.Fields()
	_ = techFields
	// techDescCreateTime is the schema descriptor for create_time field.
	techDescCreateTime := techMixinFields0[0].Descriptor()
	// tech.DefaultCreateTime holds the default value on creation for the create_time field.
	tech.DefaultCreateTime = techDescCreateTime.Default.(func() time.Time)
	// techDescUpdateTime is the schema descriptor for update_time field.
	techDescUpdateTime := techMixinFields0[1].Descriptor()
	// tech.DefaultUpdateTime holds the default value on creation for the update_time field.
	tech.DefaultUpdateTime = techDescUpdateTime.Default.(func() time.Time)
	// tech.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	tech.UpdateDefaultUpdateTime = techDescUpdateTime.UpdateDefault.(func() time.Time)
	// techDescName is the schema descriptor for name field.
	techDescName := techFields[0].Descriptor()
	// tech.NameValidator is a validator for the "name" field. It is called by the builders before save.
	tech.NameValidator = techDescName.Validators[0].(func(string) error)
	thresholdMixin := schema.Threshold{}.Mixin()
	threshold.Policy = privacy.NewPolicies(schema.Threshold{})
	threshold.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := threshold.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	thresholdMixinFields0 := thresholdMixin[0].Fields()
	thresholdFields := schema.Threshold{}.Fields()
	_ = thresholdFields
	// thresholdDescCreateTime is the schema descriptor for create_time field.
	thresholdDescCreateTime := thresholdMixinFields0[0].Descriptor()
	// threshold.DefaultCreateTime holds the default value on creation for the create_time field.
	threshold.DefaultCreateTime = thresholdDescCreateTime.Default.(func() time.Time)
	// thresholdDescUpdateTime is the schema descriptor for update_time field.
	thresholdDescUpdateTime := thresholdMixinFields0[1].Descriptor()
	// threshold.DefaultUpdateTime holds the default value on creation for the update_time field.
	threshold.DefaultUpdateTime = thresholdDescUpdateTime.Default.(func() time.Time)
	// threshold.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	threshold.UpdateDefaultUpdateTime = thresholdDescUpdateTime.UpdateDefault.(func() time.Time)
	// thresholdDescName is the schema descriptor for name field.
	thresholdDescName := thresholdFields[0].Descriptor()
	// threshold.NameValidator is a validator for the "name" field. It is called by the builders before save.
	threshold.NameValidator = thresholdDescName.Validators[0].(func(string) error)
	// thresholdDescDescription is the schema descriptor for description field.
	thresholdDescDescription := thresholdFields[1].Descriptor()
	// threshold.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	threshold.DescriptionValidator = thresholdDescDescription.Validators[0].(func(string) error)
	userMixin := schema.User{}.Mixin()
	user.Policy = privacy.NewPolicies(schema.User{})
	user.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := user.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	userHooks := schema.User{}.Hooks()

	user.Hooks[1] = userHooks[0]

	user.Hooks[2] = userHooks[1]
	userMixinFields0 := userMixin[0].Fields()
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreateTime is the schema descriptor for create_time field.
	userDescCreateTime := userMixinFields0[0].Descriptor()
	// user.DefaultCreateTime holds the default value on creation for the create_time field.
	user.DefaultCreateTime = userDescCreateTime.Default.(func() time.Time)
	// userDescUpdateTime is the schema descriptor for update_time field.
	userDescUpdateTime := userMixinFields0[1].Descriptor()
	// user.DefaultUpdateTime holds the default value on creation for the update_time field.
	user.DefaultUpdateTime = userDescUpdateTime.Default.(func() time.Time)
	// user.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	user.UpdateDefaultUpdateTime = userDescUpdateTime.UpdateDefault.(func() time.Time)
	// userDescAuthID is the schema descriptor for auth_id field.
	userDescAuthID := userFields[0].Descriptor()
	// user.AuthIDValidator is a validator for the "auth_id" field. It is called by the builders before save.
	user.AuthIDValidator = userDescAuthID.Validators[0].(func(string) error)
	// userDescFirstName is the schema descriptor for first_name field.
	userDescFirstName := userFields[1].Descriptor()
	// user.FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	user.FirstNameValidator = userDescFirstName.Validators[0].(func(string) error)
	// userDescLastName is the schema descriptor for last_name field.
	userDescLastName := userFields[2].Descriptor()
	// user.LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	user.LastNameValidator = userDescLastName.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[3].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	usersgroupMixin := schema.UsersGroup{}.Mixin()
	usersgroup.Policy = privacy.NewPolicies(schema.UsersGroup{})
	usersgroup.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := usersgroup.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	usersgroupMixinFields0 := usersgroupMixin[0].Fields()
	usersgroupFields := schema.UsersGroup{}.Fields()
	_ = usersgroupFields
	// usersgroupDescCreateTime is the schema descriptor for create_time field.
	usersgroupDescCreateTime := usersgroupMixinFields0[0].Descriptor()
	// usersgroup.DefaultCreateTime holds the default value on creation for the create_time field.
	usersgroup.DefaultCreateTime = usersgroupDescCreateTime.Default.(func() time.Time)
	// usersgroupDescUpdateTime is the schema descriptor for update_time field.
	usersgroupDescUpdateTime := usersgroupMixinFields0[1].Descriptor()
	// usersgroup.DefaultUpdateTime holds the default value on creation for the update_time field.
	usersgroup.DefaultUpdateTime = usersgroupDescUpdateTime.Default.(func() time.Time)
	// usersgroup.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	usersgroup.UpdateDefaultUpdateTime = usersgroupDescUpdateTime.UpdateDefault.(func() time.Time)
	// usersgroupDescName is the schema descriptor for name field.
	usersgroupDescName := usersgroupFields[0].Descriptor()
	// usersgroup.NameValidator is a validator for the "name" field. It is called by the builders before save.
	usersgroup.NameValidator = usersgroupDescName.Validators[0].(func(string) error)
	vendorMixin := schema.Vendor{}.Mixin()
	vendor.Policy = privacy.NewPolicies(schema.Vendor{})
	vendor.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := vendor.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	vendorMixinFields0 := vendorMixin[0].Fields()
	vendorFields := schema.Vendor{}.Fields()
	_ = vendorFields
	// vendorDescCreateTime is the schema descriptor for create_time field.
	vendorDescCreateTime := vendorMixinFields0[0].Descriptor()
	// vendor.DefaultCreateTime holds the default value on creation for the create_time field.
	vendor.DefaultCreateTime = vendorDescCreateTime.Default.(func() time.Time)
	// vendorDescUpdateTime is the schema descriptor for update_time field.
	vendorDescUpdateTime := vendorMixinFields0[1].Descriptor()
	// vendor.DefaultUpdateTime holds the default value on creation for the update_time field.
	vendor.DefaultUpdateTime = vendorDescUpdateTime.Default.(func() time.Time)
	// vendor.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	vendor.UpdateDefaultUpdateTime = vendorDescUpdateTime.UpdateDefault.(func() time.Time)
	// vendorDescName is the schema descriptor for name field.
	vendorDescName := vendorFields[0].Descriptor()
	// vendor.NameValidator is a validator for the "name" field. It is called by the builders before save.
	vendor.NameValidator = vendorDescName.Validators[0].(func(string) error)
	workorderMixin := schema.WorkOrder{}.Mixin()
	workorder.Policy = privacy.NewPolicies(schema.WorkOrder{})
	workorder.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := workorder.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	workorderHooks := schema.WorkOrder{}.Hooks()

	workorder.Hooks[1] = workorderHooks[0]

	workorder.Hooks[2] = workorderHooks[1]

	workorder.Hooks[3] = workorderHooks[2]

	workorder.Hooks[4] = workorderHooks[3]
	workorderMixinFields0 := workorderMixin[0].Fields()
	workorderMixinFields1 := workorderMixin[1].Fields()
	workorderFields := schema.WorkOrder{}.Fields()
	_ = workorderFields
	// workorderDescCreateTime is the schema descriptor for create_time field.
	workorderDescCreateTime := workorderMixinFields0[0].Descriptor()
	// workorder.DefaultCreateTime holds the default value on creation for the create_time field.
	workorder.DefaultCreateTime = workorderDescCreateTime.Default.(func() time.Time)
	// workorderDescUpdateTime is the schema descriptor for update_time field.
	workorderDescUpdateTime := workorderMixinFields1[0].Descriptor()
	// workorder.DefaultUpdateTime holds the default value on creation for the update_time field.
	workorder.DefaultUpdateTime = workorderDescUpdateTime.Default.(func() time.Time)
	// workorder.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	workorder.UpdateDefaultUpdateTime = workorderDescUpdateTime.UpdateDefault.(func() time.Time)
	// workorderDescName is the schema descriptor for name field.
	workorderDescName := workorderFields[0].Descriptor()
	// workorder.NameValidator is a validator for the "name" field. It is called by the builders before save.
	workorder.NameValidator = workorderDescName.Validators[0].(func(string) error)
	workorderdefinitionMixin := schema.WorkOrderDefinition{}.Mixin()
	workorderdefinition.Policy = privacy.NewPolicies(schema.WorkOrderDefinition{})
	workorderdefinition.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := workorderdefinition.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	workorderdefinitionMixinFields0 := workorderdefinitionMixin[0].Fields()
	workorderdefinitionFields := schema.WorkOrderDefinition{}.Fields()
	_ = workorderdefinitionFields
	// workorderdefinitionDescCreateTime is the schema descriptor for create_time field.
	workorderdefinitionDescCreateTime := workorderdefinitionMixinFields0[0].Descriptor()
	// workorderdefinition.DefaultCreateTime holds the default value on creation for the create_time field.
	workorderdefinition.DefaultCreateTime = workorderdefinitionDescCreateTime.Default.(func() time.Time)
	// workorderdefinitionDescUpdateTime is the schema descriptor for update_time field.
	workorderdefinitionDescUpdateTime := workorderdefinitionMixinFields0[1].Descriptor()
	// workorderdefinition.DefaultUpdateTime holds the default value on creation for the update_time field.
	workorderdefinition.DefaultUpdateTime = workorderdefinitionDescUpdateTime.Default.(func() time.Time)
	// workorderdefinition.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	workorderdefinition.UpdateDefaultUpdateTime = workorderdefinitionDescUpdateTime.UpdateDefault.(func() time.Time)
	workordertemplateMixin := schema.WorkOrderTemplate{}.Mixin()
	workordertemplate.Policy = privacy.NewPolicies(schema.WorkOrderTemplate{})
	workordertemplate.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := workordertemplate.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	workordertemplateMixinFields0 := workordertemplateMixin[0].Fields()
	workordertemplateMixinFields1 := workordertemplateMixin[1].Fields()
	workordertemplateFields := schema.WorkOrderTemplate{}.Fields()
	_ = workordertemplateFields
	// workordertemplateDescCreateTime is the schema descriptor for create_time field.
	workordertemplateDescCreateTime := workordertemplateMixinFields0[0].Descriptor()
	// workordertemplate.DefaultCreateTime holds the default value on creation for the create_time field.
	workordertemplate.DefaultCreateTime = workordertemplateDescCreateTime.Default.(func() time.Time)
	// workordertemplateDescUpdateTime is the schema descriptor for update_time field.
	workordertemplateDescUpdateTime := workordertemplateMixinFields0[1].Descriptor()
	// workordertemplate.DefaultUpdateTime holds the default value on creation for the update_time field.
	workordertemplate.DefaultUpdateTime = workordertemplateDescUpdateTime.Default.(func() time.Time)
	// workordertemplate.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	workordertemplate.UpdateDefaultUpdateTime = workordertemplateDescUpdateTime.UpdateDefault.(func() time.Time)
	// workordertemplateDescAssigneeCanCompleteWorkOrder is the schema descriptor for assignee_can_complete_work_order field.
	workordertemplateDescAssigneeCanCompleteWorkOrder := workordertemplateMixinFields1[2].Descriptor()
	// workordertemplate.DefaultAssigneeCanCompleteWorkOrder holds the default value on creation for the assignee_can_complete_work_order field.
	workordertemplate.DefaultAssigneeCanCompleteWorkOrder = workordertemplateDescAssigneeCanCompleteWorkOrder.Default.(bool)
	workordertypeMixin := schema.WorkOrderType{}.Mixin()
	workordertype.Policy = privacy.NewPolicies(schema.WorkOrderType{})
	workordertype.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := workordertype.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	workordertypeMixinFields0 := workordertypeMixin[0].Fields()
	workordertypeMixinFields1 := workordertypeMixin[1].Fields()
	workordertypeFields := schema.WorkOrderType{}.Fields()
	_ = workordertypeFields
	// workordertypeDescCreateTime is the schema descriptor for create_time field.
	workordertypeDescCreateTime := workordertypeMixinFields0[0].Descriptor()
	// workordertype.DefaultCreateTime holds the default value on creation for the create_time field.
	workordertype.DefaultCreateTime = workordertypeDescCreateTime.Default.(func() time.Time)
	// workordertypeDescUpdateTime is the schema descriptor for update_time field.
	workordertypeDescUpdateTime := workordertypeMixinFields0[1].Descriptor()
	// workordertype.DefaultUpdateTime holds the default value on creation for the update_time field.
	workordertype.DefaultUpdateTime = workordertypeDescUpdateTime.Default.(func() time.Time)
	// workordertype.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	workordertype.UpdateDefaultUpdateTime = workordertypeDescUpdateTime.UpdateDefault.(func() time.Time)
	// workordertypeDescAssigneeCanCompleteWorkOrder is the schema descriptor for assignee_can_complete_work_order field.
	workordertypeDescAssigneeCanCompleteWorkOrder := workordertypeMixinFields1[2].Descriptor()
	// workordertype.DefaultAssigneeCanCompleteWorkOrder holds the default value on creation for the assignee_can_complete_work_order field.
	workordertype.DefaultAssigneeCanCompleteWorkOrder = workordertypeDescAssigneeCanCompleteWorkOrder.Default.(bool)
	workertypeMixin := schema.WorkerType{}.Mixin()
	workertype.Policy = privacy.NewPolicies(schema.WorkerType{})
	workertype.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := workertype.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	workertypeMixinFields0 := workertypeMixin[0].Fields()
	workertypeFields := schema.WorkerType{}.Fields()
	_ = workertypeFields
	// workertypeDescCreateTime is the schema descriptor for create_time field.
	workertypeDescCreateTime := workertypeMixinFields0[0].Descriptor()
	// workertype.DefaultCreateTime holds the default value on creation for the create_time field.
	workertype.DefaultCreateTime = workertypeDescCreateTime.Default.(func() time.Time)
	// workertypeDescUpdateTime is the schema descriptor for update_time field.
	workertypeDescUpdateTime := workertypeMixinFields0[1].Descriptor()
	// workertype.DefaultUpdateTime holds the default value on creation for the update_time field.
	workertype.DefaultUpdateTime = workertypeDescUpdateTime.Default.(func() time.Time)
	// workertype.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	workertype.UpdateDefaultUpdateTime = workertypeDescUpdateTime.UpdateDefault.(func() time.Time)
}

const (
	Version = "(devel)" // Version of ent codegen.
)
