// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/eventseverity"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/ent/rule"
	"github.com/facebookincubator/symphony/pkg/ent/rulelimit"
	"github.com/facebookincubator/symphony/pkg/ent/ruletype"
	"github.com/facebookincubator/symphony/pkg/ent/threshold"
)

// RuleUpdate is the builder for updating Rule entities.
type RuleUpdate struct {
	config
	hooks    []Hook
	mutation *RuleMutation
}

// Where adds a new predicate for the builder.
func (ru *RuleUpdate) Where(ps ...predicate.Rule) *RuleUpdate {
	ru.mutation.predicates = append(ru.mutation.predicates, ps...)
	return ru
}

// SetName sets the name field.
func (ru *RuleUpdate) SetName(s string) *RuleUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetGracePeriod sets the gracePeriod field.
func (ru *RuleUpdate) SetGracePeriod(i int) *RuleUpdate {
	ru.mutation.ResetGracePeriod()
	ru.mutation.SetGracePeriod(i)
	return ru
}

// AddGracePeriod adds i to gracePeriod.
func (ru *RuleUpdate) AddGracePeriod(i int) *RuleUpdate {
	ru.mutation.AddGracePeriod(i)
	return ru
}

// SetStartDateTime sets the startDateTime field.
func (ru *RuleUpdate) SetStartDateTime(t time.Time) *RuleUpdate {
	ru.mutation.SetStartDateTime(t)
	return ru
}

// SetEndDateTime sets the endDateTime field.
func (ru *RuleUpdate) SetEndDateTime(t time.Time) *RuleUpdate {
	ru.mutation.SetEndDateTime(t)
	return ru
}

// SetStatus sets the status field.
func (ru *RuleUpdate) SetStatus(b bool) *RuleUpdate {
	ru.mutation.SetStatus(b)
	return ru
}

// SetEventTypeName sets the eventTypeName field.
func (ru *RuleUpdate) SetEventTypeName(s string) *RuleUpdate {
	ru.mutation.SetEventTypeName(s)
	return ru
}

// SetNillableEventTypeName sets the eventTypeName field if the given value is not nil.
func (ru *RuleUpdate) SetNillableEventTypeName(s *string) *RuleUpdate {
	if s != nil {
		ru.SetEventTypeName(*s)
	}
	return ru
}

// ClearEventTypeName clears the value of eventTypeName.
func (ru *RuleUpdate) ClearEventTypeName() *RuleUpdate {
	ru.mutation.ClearEventTypeName()
	return ru
}

// SetSpecificProblem sets the specificProblem field.
func (ru *RuleUpdate) SetSpecificProblem(s string) *RuleUpdate {
	ru.mutation.SetSpecificProblem(s)
	return ru
}

// SetNillableSpecificProblem sets the specificProblem field if the given value is not nil.
func (ru *RuleUpdate) SetNillableSpecificProblem(s *string) *RuleUpdate {
	if s != nil {
		ru.SetSpecificProblem(*s)
	}
	return ru
}

// ClearSpecificProblem clears the value of specificProblem.
func (ru *RuleUpdate) ClearSpecificProblem() *RuleUpdate {
	ru.mutation.ClearSpecificProblem()
	return ru
}

// SetAdditionalInfo sets the additionalInfo field.
func (ru *RuleUpdate) SetAdditionalInfo(s string) *RuleUpdate {
	ru.mutation.SetAdditionalInfo(s)
	return ru
}

// SetNillableAdditionalInfo sets the additionalInfo field if the given value is not nil.
func (ru *RuleUpdate) SetNillableAdditionalInfo(s *string) *RuleUpdate {
	if s != nil {
		ru.SetAdditionalInfo(*s)
	}
	return ru
}

// ClearAdditionalInfo clears the value of additionalInfo.
func (ru *RuleUpdate) ClearAdditionalInfo() *RuleUpdate {
	ru.mutation.ClearAdditionalInfo()
	return ru
}

// SetRuletypeID sets the ruletype edge to RuleType by id.
func (ru *RuleUpdate) SetRuletypeID(id int) *RuleUpdate {
	ru.mutation.SetRuletypeID(id)
	return ru
}

// SetNillableRuletypeID sets the ruletype edge to RuleType by id if the given value is not nil.
func (ru *RuleUpdate) SetNillableRuletypeID(id *int) *RuleUpdate {
	if id != nil {
		ru = ru.SetRuletypeID(*id)
	}
	return ru
}

// SetRuletype sets the ruletype edge to RuleType.
func (ru *RuleUpdate) SetRuletype(r *RuleType) *RuleUpdate {
	return ru.SetRuletypeID(r.ID)
}

// SetEventseverityID sets the eventseverity edge to EventSeverity by id.
func (ru *RuleUpdate) SetEventseverityID(id int) *RuleUpdate {
	ru.mutation.SetEventseverityID(id)
	return ru
}

// SetNillableEventseverityID sets the eventseverity edge to EventSeverity by id if the given value is not nil.
func (ru *RuleUpdate) SetNillableEventseverityID(id *int) *RuleUpdate {
	if id != nil {
		ru = ru.SetEventseverityID(*id)
	}
	return ru
}

// SetEventseverity sets the eventseverity edge to EventSeverity.
func (ru *RuleUpdate) SetEventseverity(e *EventSeverity) *RuleUpdate {
	return ru.SetEventseverityID(e.ID)
}

// SetThresholdID sets the threshold edge to Threshold by id.
func (ru *RuleUpdate) SetThresholdID(id int) *RuleUpdate {
	ru.mutation.SetThresholdID(id)
	return ru
}

// SetNillableThresholdID sets the threshold edge to Threshold by id if the given value is not nil.
func (ru *RuleUpdate) SetNillableThresholdID(id *int) *RuleUpdate {
	if id != nil {
		ru = ru.SetThresholdID(*id)
	}
	return ru
}

// SetThreshold sets the threshold edge to Threshold.
func (ru *RuleUpdate) SetThreshold(t *Threshold) *RuleUpdate {
	return ru.SetThresholdID(t.ID)
}

// AddRulelimitruleIDs adds the rulelimitrule edge to RuleLimit by ids.
func (ru *RuleUpdate) AddRulelimitruleIDs(ids ...int) *RuleUpdate {
	ru.mutation.AddRulelimitruleIDs(ids...)
	return ru
}

// AddRulelimitrule adds the rulelimitrule edges to RuleLimit.
func (ru *RuleUpdate) AddRulelimitrule(r ...*RuleLimit) *RuleUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddRulelimitruleIDs(ids...)
}

// Mutation returns the RuleMutation object of the builder.
func (ru *RuleUpdate) Mutation() *RuleMutation {
	return ru.mutation
}

// ClearRuletype clears the "ruletype" edge to type RuleType.
func (ru *RuleUpdate) ClearRuletype() *RuleUpdate {
	ru.mutation.ClearRuletype()
	return ru
}

// ClearEventseverity clears the "eventseverity" edge to type EventSeverity.
func (ru *RuleUpdate) ClearEventseverity() *RuleUpdate {
	ru.mutation.ClearEventseverity()
	return ru
}

// ClearThreshold clears the "threshold" edge to type Threshold.
func (ru *RuleUpdate) ClearThreshold() *RuleUpdate {
	ru.mutation.ClearThreshold()
	return ru
}

// ClearRulelimitrule clears all "rulelimitrule" edges to type RuleLimit.
func (ru *RuleUpdate) ClearRulelimitrule() *RuleUpdate {
	ru.mutation.ClearRulelimitrule()
	return ru
}

// RemoveRulelimitruleIDs removes the rulelimitrule edge to RuleLimit by ids.
func (ru *RuleUpdate) RemoveRulelimitruleIDs(ids ...int) *RuleUpdate {
	ru.mutation.RemoveRulelimitruleIDs(ids...)
	return ru
}

// RemoveRulelimitrule removes rulelimitrule edges to RuleLimit.
func (ru *RuleUpdate) RemoveRulelimitrule(r ...*RuleLimit) *RuleUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveRulelimitruleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RuleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ru.defaults()
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RuleUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RuleUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RuleUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RuleUpdate) defaults() {
	if _, ok := ru.mutation.UpdateTime(); !ok {
		v := rule.UpdateDefaultUpdateTime()
		ru.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RuleUpdate) check() error {
	if v, ok := ru.mutation.Name(); ok {
		if err := rule.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (ru *RuleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rule.Table,
			Columns: rule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rule.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rule.FieldUpdateTime,
		})
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rule.FieldName,
		})
	}
	if value, ok := ru.mutation.GracePeriod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rule.FieldGracePeriod,
		})
	}
	if value, ok := ru.mutation.AddedGracePeriod(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rule.FieldGracePeriod,
		})
	}
	if value, ok := ru.mutation.StartDateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rule.FieldStartDateTime,
		})
	}
	if value, ok := ru.mutation.EndDateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rule.FieldEndDateTime,
		})
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: rule.FieldStatus,
		})
	}
	if value, ok := ru.mutation.EventTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rule.FieldEventTypeName,
		})
	}
	if ru.mutation.EventTypeNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rule.FieldEventTypeName,
		})
	}
	if value, ok := ru.mutation.SpecificProblem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rule.FieldSpecificProblem,
		})
	}
	if ru.mutation.SpecificProblemCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rule.FieldSpecificProblem,
		})
	}
	if value, ok := ru.mutation.AdditionalInfo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rule.FieldAdditionalInfo,
		})
	}
	if ru.mutation.AdditionalInfoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rule.FieldAdditionalInfo,
		})
	}
	if ru.mutation.RuletypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rule.RuletypeTable,
			Columns: []string{rule.RuletypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ruletype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RuletypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rule.RuletypeTable,
			Columns: []string{rule.RuletypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ruletype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.EventseverityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rule.EventseverityTable,
			Columns: []string{rule.EventseverityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: eventseverity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.EventseverityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rule.EventseverityTable,
			Columns: []string{rule.EventseverityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: eventseverity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ThresholdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rule.ThresholdTable,
			Columns: []string{rule.ThresholdColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: threshold.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ThresholdIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rule.ThresholdTable,
			Columns: []string{rule.ThresholdColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: threshold.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.RulelimitruleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rule.RulelimitruleTable,
			Columns: []string{rule.RulelimitruleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rulelimit.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedRulelimitruleIDs(); len(nodes) > 0 && !ru.mutation.RulelimitruleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rule.RulelimitruleTable,
			Columns: []string{rule.RulelimitruleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rulelimit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RulelimitruleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rule.RulelimitruleTable,
			Columns: []string{rule.RulelimitruleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rulelimit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rule.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RuleUpdateOne is the builder for updating a single Rule entity.
type RuleUpdateOne struct {
	config
	hooks    []Hook
	mutation *RuleMutation
}

// SetName sets the name field.
func (ruo *RuleUpdateOne) SetName(s string) *RuleUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetGracePeriod sets the gracePeriod field.
func (ruo *RuleUpdateOne) SetGracePeriod(i int) *RuleUpdateOne {
	ruo.mutation.ResetGracePeriod()
	ruo.mutation.SetGracePeriod(i)
	return ruo
}

// AddGracePeriod adds i to gracePeriod.
func (ruo *RuleUpdateOne) AddGracePeriod(i int) *RuleUpdateOne {
	ruo.mutation.AddGracePeriod(i)
	return ruo
}

// SetStartDateTime sets the startDateTime field.
func (ruo *RuleUpdateOne) SetStartDateTime(t time.Time) *RuleUpdateOne {
	ruo.mutation.SetStartDateTime(t)
	return ruo
}

// SetEndDateTime sets the endDateTime field.
func (ruo *RuleUpdateOne) SetEndDateTime(t time.Time) *RuleUpdateOne {
	ruo.mutation.SetEndDateTime(t)
	return ruo
}

// SetStatus sets the status field.
func (ruo *RuleUpdateOne) SetStatus(b bool) *RuleUpdateOne {
	ruo.mutation.SetStatus(b)
	return ruo
}

// SetEventTypeName sets the eventTypeName field.
func (ruo *RuleUpdateOne) SetEventTypeName(s string) *RuleUpdateOne {
	ruo.mutation.SetEventTypeName(s)
	return ruo
}

// SetNillableEventTypeName sets the eventTypeName field if the given value is not nil.
func (ruo *RuleUpdateOne) SetNillableEventTypeName(s *string) *RuleUpdateOne {
	if s != nil {
		ruo.SetEventTypeName(*s)
	}
	return ruo
}

// ClearEventTypeName clears the value of eventTypeName.
func (ruo *RuleUpdateOne) ClearEventTypeName() *RuleUpdateOne {
	ruo.mutation.ClearEventTypeName()
	return ruo
}

// SetSpecificProblem sets the specificProblem field.
func (ruo *RuleUpdateOne) SetSpecificProblem(s string) *RuleUpdateOne {
	ruo.mutation.SetSpecificProblem(s)
	return ruo
}

// SetNillableSpecificProblem sets the specificProblem field if the given value is not nil.
func (ruo *RuleUpdateOne) SetNillableSpecificProblem(s *string) *RuleUpdateOne {
	if s != nil {
		ruo.SetSpecificProblem(*s)
	}
	return ruo
}

// ClearSpecificProblem clears the value of specificProblem.
func (ruo *RuleUpdateOne) ClearSpecificProblem() *RuleUpdateOne {
	ruo.mutation.ClearSpecificProblem()
	return ruo
}

// SetAdditionalInfo sets the additionalInfo field.
func (ruo *RuleUpdateOne) SetAdditionalInfo(s string) *RuleUpdateOne {
	ruo.mutation.SetAdditionalInfo(s)
	return ruo
}

// SetNillableAdditionalInfo sets the additionalInfo field if the given value is not nil.
func (ruo *RuleUpdateOne) SetNillableAdditionalInfo(s *string) *RuleUpdateOne {
	if s != nil {
		ruo.SetAdditionalInfo(*s)
	}
	return ruo
}

// ClearAdditionalInfo clears the value of additionalInfo.
func (ruo *RuleUpdateOne) ClearAdditionalInfo() *RuleUpdateOne {
	ruo.mutation.ClearAdditionalInfo()
	return ruo
}

// SetRuletypeID sets the ruletype edge to RuleType by id.
func (ruo *RuleUpdateOne) SetRuletypeID(id int) *RuleUpdateOne {
	ruo.mutation.SetRuletypeID(id)
	return ruo
}

// SetNillableRuletypeID sets the ruletype edge to RuleType by id if the given value is not nil.
func (ruo *RuleUpdateOne) SetNillableRuletypeID(id *int) *RuleUpdateOne {
	if id != nil {
		ruo = ruo.SetRuletypeID(*id)
	}
	return ruo
}

// SetRuletype sets the ruletype edge to RuleType.
func (ruo *RuleUpdateOne) SetRuletype(r *RuleType) *RuleUpdateOne {
	return ruo.SetRuletypeID(r.ID)
}

// SetEventseverityID sets the eventseverity edge to EventSeverity by id.
func (ruo *RuleUpdateOne) SetEventseverityID(id int) *RuleUpdateOne {
	ruo.mutation.SetEventseverityID(id)
	return ruo
}

// SetNillableEventseverityID sets the eventseverity edge to EventSeverity by id if the given value is not nil.
func (ruo *RuleUpdateOne) SetNillableEventseverityID(id *int) *RuleUpdateOne {
	if id != nil {
		ruo = ruo.SetEventseverityID(*id)
	}
	return ruo
}

// SetEventseverity sets the eventseverity edge to EventSeverity.
func (ruo *RuleUpdateOne) SetEventseverity(e *EventSeverity) *RuleUpdateOne {
	return ruo.SetEventseverityID(e.ID)
}

// SetThresholdID sets the threshold edge to Threshold by id.
func (ruo *RuleUpdateOne) SetThresholdID(id int) *RuleUpdateOne {
	ruo.mutation.SetThresholdID(id)
	return ruo
}

// SetNillableThresholdID sets the threshold edge to Threshold by id if the given value is not nil.
func (ruo *RuleUpdateOne) SetNillableThresholdID(id *int) *RuleUpdateOne {
	if id != nil {
		ruo = ruo.SetThresholdID(*id)
	}
	return ruo
}

// SetThreshold sets the threshold edge to Threshold.
func (ruo *RuleUpdateOne) SetThreshold(t *Threshold) *RuleUpdateOne {
	return ruo.SetThresholdID(t.ID)
}

// AddRulelimitruleIDs adds the rulelimitrule edge to RuleLimit by ids.
func (ruo *RuleUpdateOne) AddRulelimitruleIDs(ids ...int) *RuleUpdateOne {
	ruo.mutation.AddRulelimitruleIDs(ids...)
	return ruo
}

// AddRulelimitrule adds the rulelimitrule edges to RuleLimit.
func (ruo *RuleUpdateOne) AddRulelimitrule(r ...*RuleLimit) *RuleUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddRulelimitruleIDs(ids...)
}

// Mutation returns the RuleMutation object of the builder.
func (ruo *RuleUpdateOne) Mutation() *RuleMutation {
	return ruo.mutation
}

// ClearRuletype clears the "ruletype" edge to type RuleType.
func (ruo *RuleUpdateOne) ClearRuletype() *RuleUpdateOne {
	ruo.mutation.ClearRuletype()
	return ruo
}

// ClearEventseverity clears the "eventseverity" edge to type EventSeverity.
func (ruo *RuleUpdateOne) ClearEventseverity() *RuleUpdateOne {
	ruo.mutation.ClearEventseverity()
	return ruo
}

// ClearThreshold clears the "threshold" edge to type Threshold.
func (ruo *RuleUpdateOne) ClearThreshold() *RuleUpdateOne {
	ruo.mutation.ClearThreshold()
	return ruo
}

// ClearRulelimitrule clears all "rulelimitrule" edges to type RuleLimit.
func (ruo *RuleUpdateOne) ClearRulelimitrule() *RuleUpdateOne {
	ruo.mutation.ClearRulelimitrule()
	return ruo
}

// RemoveRulelimitruleIDs removes the rulelimitrule edge to RuleLimit by ids.
func (ruo *RuleUpdateOne) RemoveRulelimitruleIDs(ids ...int) *RuleUpdateOne {
	ruo.mutation.RemoveRulelimitruleIDs(ids...)
	return ruo
}

// RemoveRulelimitrule removes rulelimitrule edges to RuleLimit.
func (ruo *RuleUpdateOne) RemoveRulelimitrule(r ...*RuleLimit) *RuleUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveRulelimitruleIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (ruo *RuleUpdateOne) Save(ctx context.Context) (*Rule, error) {
	var (
		err  error
		node *Rule
	)
	ruo.defaults()
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RuleUpdateOne) SaveX(ctx context.Context) *Rule {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RuleUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RuleUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RuleUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdateTime(); !ok {
		v := rule.UpdateDefaultUpdateTime()
		ruo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RuleUpdateOne) check() error {
	if v, ok := ruo.mutation.Name(); ok {
		if err := rule.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (ruo *RuleUpdateOne) sqlSave(ctx context.Context) (_node *Rule, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rule.Table,
			Columns: rule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rule.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Rule.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ruo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rule.FieldUpdateTime,
		})
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rule.FieldName,
		})
	}
	if value, ok := ruo.mutation.GracePeriod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rule.FieldGracePeriod,
		})
	}
	if value, ok := ruo.mutation.AddedGracePeriod(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rule.FieldGracePeriod,
		})
	}
	if value, ok := ruo.mutation.StartDateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rule.FieldStartDateTime,
		})
	}
	if value, ok := ruo.mutation.EndDateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rule.FieldEndDateTime,
		})
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: rule.FieldStatus,
		})
	}
	if value, ok := ruo.mutation.EventTypeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rule.FieldEventTypeName,
		})
	}
	if ruo.mutation.EventTypeNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rule.FieldEventTypeName,
		})
	}
	if value, ok := ruo.mutation.SpecificProblem(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rule.FieldSpecificProblem,
		})
	}
	if ruo.mutation.SpecificProblemCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rule.FieldSpecificProblem,
		})
	}
	if value, ok := ruo.mutation.AdditionalInfo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rule.FieldAdditionalInfo,
		})
	}
	if ruo.mutation.AdditionalInfoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rule.FieldAdditionalInfo,
		})
	}
	if ruo.mutation.RuletypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rule.RuletypeTable,
			Columns: []string{rule.RuletypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ruletype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RuletypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rule.RuletypeTable,
			Columns: []string{rule.RuletypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ruletype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.EventseverityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rule.EventseverityTable,
			Columns: []string{rule.EventseverityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: eventseverity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.EventseverityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rule.EventseverityTable,
			Columns: []string{rule.EventseverityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: eventseverity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ThresholdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rule.ThresholdTable,
			Columns: []string{rule.ThresholdColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: threshold.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ThresholdIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rule.ThresholdTable,
			Columns: []string{rule.ThresholdColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: threshold.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.RulelimitruleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rule.RulelimitruleTable,
			Columns: []string{rule.RulelimitruleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rulelimit.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedRulelimitruleIDs(); len(nodes) > 0 && !ruo.mutation.RulelimitruleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rule.RulelimitruleTable,
			Columns: []string{rule.RulelimitruleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rulelimit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RulelimitruleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rule.RulelimitruleTable,
			Columns: []string{rule.RulelimitruleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rulelimit.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Rule{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rule.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
