// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/block"
	"github.com/facebookincubator/symphony/pkg/ent/blockinstance"
	"github.com/facebookincubator/symphony/pkg/ent/flowinstance"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/flowengine/flowschema"
)

// BlockInstanceUpdate is the builder for updating BlockInstance entities.
type BlockInstanceUpdate struct {
	config
	hooks    []Hook
	mutation *BlockInstanceMutation
}

// Where adds a new predicate for the builder.
func (biu *BlockInstanceUpdate) Where(ps ...predicate.BlockInstance) *BlockInstanceUpdate {
	biu.mutation.predicates = append(biu.mutation.predicates, ps...)
	return biu
}

// SetStatus sets the status field.
func (biu *BlockInstanceUpdate) SetStatus(b blockinstance.Status) *BlockInstanceUpdate {
	biu.mutation.SetStatus(b)
	return biu
}

// SetNillableStatus sets the status field if the given value is not nil.
func (biu *BlockInstanceUpdate) SetNillableStatus(b *blockinstance.Status) *BlockInstanceUpdate {
	if b != nil {
		biu.SetStatus(*b)
	}
	return biu
}

// SetInputs sets the inputs field.
func (biu *BlockInstanceUpdate) SetInputs(fv []*flowschema.VariableValue) *BlockInstanceUpdate {
	biu.mutation.SetInputs(fv)
	return biu
}

// ClearInputs clears the value of inputs.
func (biu *BlockInstanceUpdate) ClearInputs() *BlockInstanceUpdate {
	biu.mutation.ClearInputs()
	return biu
}

// SetOutputs sets the outputs field.
func (biu *BlockInstanceUpdate) SetOutputs(fv []*flowschema.VariableValue) *BlockInstanceUpdate {
	biu.mutation.SetOutputs(fv)
	return biu
}

// ClearOutputs clears the value of outputs.
func (biu *BlockInstanceUpdate) ClearOutputs() *BlockInstanceUpdate {
	biu.mutation.ClearOutputs()
	return biu
}

// SetFailureReason sets the failure_reason field.
func (biu *BlockInstanceUpdate) SetFailureReason(s string) *BlockInstanceUpdate {
	biu.mutation.SetFailureReason(s)
	return biu
}

// SetNillableFailureReason sets the failure_reason field if the given value is not nil.
func (biu *BlockInstanceUpdate) SetNillableFailureReason(s *string) *BlockInstanceUpdate {
	if s != nil {
		biu.SetFailureReason(*s)
	}
	return biu
}

// ClearFailureReason clears the value of failure_reason.
func (biu *BlockInstanceUpdate) ClearFailureReason() *BlockInstanceUpdate {
	biu.mutation.ClearFailureReason()
	return biu
}

// SetBlockInstanceCounter sets the block_instance_counter field.
func (biu *BlockInstanceUpdate) SetBlockInstanceCounter(i int) *BlockInstanceUpdate {
	biu.mutation.ResetBlockInstanceCounter()
	biu.mutation.SetBlockInstanceCounter(i)
	return biu
}

// SetNillableBlockInstanceCounter sets the block_instance_counter field if the given value is not nil.
func (biu *BlockInstanceUpdate) SetNillableBlockInstanceCounter(i *int) *BlockInstanceUpdate {
	if i != nil {
		biu.SetBlockInstanceCounter(*i)
	}
	return biu
}

// AddBlockInstanceCounter adds i to block_instance_counter.
func (biu *BlockInstanceUpdate) AddBlockInstanceCounter(i int) *BlockInstanceUpdate {
	biu.mutation.AddBlockInstanceCounter(i)
	return biu
}

// ClearBlockInstanceCounter clears the value of block_instance_counter.
func (biu *BlockInstanceUpdate) ClearBlockInstanceCounter() *BlockInstanceUpdate {
	biu.mutation.ClearBlockInstanceCounter()
	return biu
}

// SetStartDate sets the start_date field.
func (biu *BlockInstanceUpdate) SetStartDate(t time.Time) *BlockInstanceUpdate {
	biu.mutation.SetStartDate(t)
	return biu
}

// SetEndDate sets the end_date field.
func (biu *BlockInstanceUpdate) SetEndDate(t time.Time) *BlockInstanceUpdate {
	biu.mutation.SetEndDate(t)
	return biu
}

// SetNillableEndDate sets the end_date field if the given value is not nil.
func (biu *BlockInstanceUpdate) SetNillableEndDate(t *time.Time) *BlockInstanceUpdate {
	if t != nil {
		biu.SetEndDate(*t)
	}
	return biu
}

// ClearEndDate clears the value of end_date.
func (biu *BlockInstanceUpdate) ClearEndDate() *BlockInstanceUpdate {
	biu.mutation.ClearEndDate()
	return biu
}

// SetFlowInstanceID sets the flow_instance edge to FlowInstance by id.
func (biu *BlockInstanceUpdate) SetFlowInstanceID(id int) *BlockInstanceUpdate {
	biu.mutation.SetFlowInstanceID(id)
	return biu
}

// SetFlowInstance sets the flow_instance edge to FlowInstance.
func (biu *BlockInstanceUpdate) SetFlowInstance(f *FlowInstance) *BlockInstanceUpdate {
	return biu.SetFlowInstanceID(f.ID)
}

// SetBlockID sets the block edge to Block by id.
func (biu *BlockInstanceUpdate) SetBlockID(id int) *BlockInstanceUpdate {
	biu.mutation.SetBlockID(id)
	return biu
}

// SetBlock sets the block edge to Block.
func (biu *BlockInstanceUpdate) SetBlock(b *Block) *BlockInstanceUpdate {
	return biu.SetBlockID(b.ID)
}

// SetSubflowInstanceID sets the subflow_instance edge to FlowInstance by id.
func (biu *BlockInstanceUpdate) SetSubflowInstanceID(id int) *BlockInstanceUpdate {
	biu.mutation.SetSubflowInstanceID(id)
	return biu
}

// SetNillableSubflowInstanceID sets the subflow_instance edge to FlowInstance by id if the given value is not nil.
func (biu *BlockInstanceUpdate) SetNillableSubflowInstanceID(id *int) *BlockInstanceUpdate {
	if id != nil {
		biu = biu.SetSubflowInstanceID(*id)
	}
	return biu
}

// SetSubflowInstance sets the subflow_instance edge to FlowInstance.
func (biu *BlockInstanceUpdate) SetSubflowInstance(f *FlowInstance) *BlockInstanceUpdate {
	return biu.SetSubflowInstanceID(f.ID)
}

// Mutation returns the BlockInstanceMutation object of the builder.
func (biu *BlockInstanceUpdate) Mutation() *BlockInstanceMutation {
	return biu.mutation
}

// ClearFlowInstance clears the "flow_instance" edge to type FlowInstance.
func (biu *BlockInstanceUpdate) ClearFlowInstance() *BlockInstanceUpdate {
	biu.mutation.ClearFlowInstance()
	return biu
}

// ClearBlock clears the "block" edge to type Block.
func (biu *BlockInstanceUpdate) ClearBlock() *BlockInstanceUpdate {
	biu.mutation.ClearBlock()
	return biu
}

// ClearSubflowInstance clears the "subflow_instance" edge to type FlowInstance.
func (biu *BlockInstanceUpdate) ClearSubflowInstance() *BlockInstanceUpdate {
	biu.mutation.ClearSubflowInstance()
	return biu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (biu *BlockInstanceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	biu.defaults()
	if len(biu.hooks) == 0 {
		if err = biu.check(); err != nil {
			return 0, err
		}
		affected, err = biu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlockInstanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = biu.check(); err != nil {
				return 0, err
			}
			biu.mutation = mutation
			affected, err = biu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(biu.hooks) - 1; i >= 0; i-- {
			mut = biu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, biu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (biu *BlockInstanceUpdate) SaveX(ctx context.Context) int {
	affected, err := biu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (biu *BlockInstanceUpdate) Exec(ctx context.Context) error {
	_, err := biu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biu *BlockInstanceUpdate) ExecX(ctx context.Context) {
	if err := biu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (biu *BlockInstanceUpdate) defaults() {
	if _, ok := biu.mutation.UpdateTime(); !ok {
		v := blockinstance.UpdateDefaultUpdateTime()
		biu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (biu *BlockInstanceUpdate) check() error {
	if v, ok := biu.mutation.Status(); ok {
		if err := blockinstance.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if _, ok := biu.mutation.FlowInstanceID(); biu.mutation.FlowInstanceCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"flow_instance\"")
	}
	if _, ok := biu.mutation.BlockID(); biu.mutation.BlockCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"block\"")
	}
	return nil
}

func (biu *BlockInstanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   blockinstance.Table,
			Columns: blockinstance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blockinstance.FieldID,
			},
		},
	}
	if ps := biu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blockinstance.FieldUpdateTime,
		})
	}
	if value, ok := biu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: blockinstance.FieldStatus,
		})
	}
	if value, ok := biu.mutation.Inputs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: blockinstance.FieldInputs,
		})
	}
	if biu.mutation.InputsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: blockinstance.FieldInputs,
		})
	}
	if value, ok := biu.mutation.Outputs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: blockinstance.FieldOutputs,
		})
	}
	if biu.mutation.OutputsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: blockinstance.FieldOutputs,
		})
	}
	if value, ok := biu.mutation.FailureReason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blockinstance.FieldFailureReason,
		})
	}
	if biu.mutation.FailureReasonCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: blockinstance.FieldFailureReason,
		})
	}
	if value, ok := biu.mutation.BlockInstanceCounter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: blockinstance.FieldBlockInstanceCounter,
		})
	}
	if value, ok := biu.mutation.AddedBlockInstanceCounter(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: blockinstance.FieldBlockInstanceCounter,
		})
	}
	if biu.mutation.BlockInstanceCounterCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: blockinstance.FieldBlockInstanceCounter,
		})
	}
	if value, ok := biu.mutation.StartDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blockinstance.FieldStartDate,
		})
	}
	if value, ok := biu.mutation.EndDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blockinstance.FieldEndDate,
		})
	}
	if biu.mutation.EndDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: blockinstance.FieldEndDate,
		})
	}
	if biu.mutation.FlowInstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockinstance.FlowInstanceTable,
			Columns: []string{blockinstance.FlowInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowinstance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.FlowInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockinstance.FlowInstanceTable,
			Columns: []string{blockinstance.FlowInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biu.mutation.BlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   blockinstance.BlockTable,
			Columns: []string{blockinstance.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   blockinstance.BlockTable,
			Columns: []string{blockinstance.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biu.mutation.SubflowInstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   blockinstance.SubflowInstanceTable,
			Columns: []string{blockinstance.SubflowInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowinstance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biu.mutation.SubflowInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   blockinstance.SubflowInstanceTable,
			Columns: []string{blockinstance.SubflowInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, biu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockinstance.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BlockInstanceUpdateOne is the builder for updating a single BlockInstance entity.
type BlockInstanceUpdateOne struct {
	config
	hooks    []Hook
	mutation *BlockInstanceMutation
}

// SetStatus sets the status field.
func (biuo *BlockInstanceUpdateOne) SetStatus(b blockinstance.Status) *BlockInstanceUpdateOne {
	biuo.mutation.SetStatus(b)
	return biuo
}

// SetNillableStatus sets the status field if the given value is not nil.
func (biuo *BlockInstanceUpdateOne) SetNillableStatus(b *blockinstance.Status) *BlockInstanceUpdateOne {
	if b != nil {
		biuo.SetStatus(*b)
	}
	return biuo
}

// SetInputs sets the inputs field.
func (biuo *BlockInstanceUpdateOne) SetInputs(fv []*flowschema.VariableValue) *BlockInstanceUpdateOne {
	biuo.mutation.SetInputs(fv)
	return biuo
}

// ClearInputs clears the value of inputs.
func (biuo *BlockInstanceUpdateOne) ClearInputs() *BlockInstanceUpdateOne {
	biuo.mutation.ClearInputs()
	return biuo
}

// SetOutputs sets the outputs field.
func (biuo *BlockInstanceUpdateOne) SetOutputs(fv []*flowschema.VariableValue) *BlockInstanceUpdateOne {
	biuo.mutation.SetOutputs(fv)
	return biuo
}

// ClearOutputs clears the value of outputs.
func (biuo *BlockInstanceUpdateOne) ClearOutputs() *BlockInstanceUpdateOne {
	biuo.mutation.ClearOutputs()
	return biuo
}

// SetFailureReason sets the failure_reason field.
func (biuo *BlockInstanceUpdateOne) SetFailureReason(s string) *BlockInstanceUpdateOne {
	biuo.mutation.SetFailureReason(s)
	return biuo
}

// SetNillableFailureReason sets the failure_reason field if the given value is not nil.
func (biuo *BlockInstanceUpdateOne) SetNillableFailureReason(s *string) *BlockInstanceUpdateOne {
	if s != nil {
		biuo.SetFailureReason(*s)
	}
	return biuo
}

// ClearFailureReason clears the value of failure_reason.
func (biuo *BlockInstanceUpdateOne) ClearFailureReason() *BlockInstanceUpdateOne {
	biuo.mutation.ClearFailureReason()
	return biuo
}

// SetBlockInstanceCounter sets the block_instance_counter field.
func (biuo *BlockInstanceUpdateOne) SetBlockInstanceCounter(i int) *BlockInstanceUpdateOne {
	biuo.mutation.ResetBlockInstanceCounter()
	biuo.mutation.SetBlockInstanceCounter(i)
	return biuo
}

// SetNillableBlockInstanceCounter sets the block_instance_counter field if the given value is not nil.
func (biuo *BlockInstanceUpdateOne) SetNillableBlockInstanceCounter(i *int) *BlockInstanceUpdateOne {
	if i != nil {
		biuo.SetBlockInstanceCounter(*i)
	}
	return biuo
}

// AddBlockInstanceCounter adds i to block_instance_counter.
func (biuo *BlockInstanceUpdateOne) AddBlockInstanceCounter(i int) *BlockInstanceUpdateOne {
	biuo.mutation.AddBlockInstanceCounter(i)
	return biuo
}

// ClearBlockInstanceCounter clears the value of block_instance_counter.
func (biuo *BlockInstanceUpdateOne) ClearBlockInstanceCounter() *BlockInstanceUpdateOne {
	biuo.mutation.ClearBlockInstanceCounter()
	return biuo
}

// SetStartDate sets the start_date field.
func (biuo *BlockInstanceUpdateOne) SetStartDate(t time.Time) *BlockInstanceUpdateOne {
	biuo.mutation.SetStartDate(t)
	return biuo
}

// SetEndDate sets the end_date field.
func (biuo *BlockInstanceUpdateOne) SetEndDate(t time.Time) *BlockInstanceUpdateOne {
	biuo.mutation.SetEndDate(t)
	return biuo
}

// SetNillableEndDate sets the end_date field if the given value is not nil.
func (biuo *BlockInstanceUpdateOne) SetNillableEndDate(t *time.Time) *BlockInstanceUpdateOne {
	if t != nil {
		biuo.SetEndDate(*t)
	}
	return biuo
}

// ClearEndDate clears the value of end_date.
func (biuo *BlockInstanceUpdateOne) ClearEndDate() *BlockInstanceUpdateOne {
	biuo.mutation.ClearEndDate()
	return biuo
}

// SetFlowInstanceID sets the flow_instance edge to FlowInstance by id.
func (biuo *BlockInstanceUpdateOne) SetFlowInstanceID(id int) *BlockInstanceUpdateOne {
	biuo.mutation.SetFlowInstanceID(id)
	return biuo
}

// SetFlowInstance sets the flow_instance edge to FlowInstance.
func (biuo *BlockInstanceUpdateOne) SetFlowInstance(f *FlowInstance) *BlockInstanceUpdateOne {
	return biuo.SetFlowInstanceID(f.ID)
}

// SetBlockID sets the block edge to Block by id.
func (biuo *BlockInstanceUpdateOne) SetBlockID(id int) *BlockInstanceUpdateOne {
	biuo.mutation.SetBlockID(id)
	return biuo
}

// SetBlock sets the block edge to Block.
func (biuo *BlockInstanceUpdateOne) SetBlock(b *Block) *BlockInstanceUpdateOne {
	return biuo.SetBlockID(b.ID)
}

// SetSubflowInstanceID sets the subflow_instance edge to FlowInstance by id.
func (biuo *BlockInstanceUpdateOne) SetSubflowInstanceID(id int) *BlockInstanceUpdateOne {
	biuo.mutation.SetSubflowInstanceID(id)
	return biuo
}

// SetNillableSubflowInstanceID sets the subflow_instance edge to FlowInstance by id if the given value is not nil.
func (biuo *BlockInstanceUpdateOne) SetNillableSubflowInstanceID(id *int) *BlockInstanceUpdateOne {
	if id != nil {
		biuo = biuo.SetSubflowInstanceID(*id)
	}
	return biuo
}

// SetSubflowInstance sets the subflow_instance edge to FlowInstance.
func (biuo *BlockInstanceUpdateOne) SetSubflowInstance(f *FlowInstance) *BlockInstanceUpdateOne {
	return biuo.SetSubflowInstanceID(f.ID)
}

// Mutation returns the BlockInstanceMutation object of the builder.
func (biuo *BlockInstanceUpdateOne) Mutation() *BlockInstanceMutation {
	return biuo.mutation
}

// ClearFlowInstance clears the "flow_instance" edge to type FlowInstance.
func (biuo *BlockInstanceUpdateOne) ClearFlowInstance() *BlockInstanceUpdateOne {
	biuo.mutation.ClearFlowInstance()
	return biuo
}

// ClearBlock clears the "block" edge to type Block.
func (biuo *BlockInstanceUpdateOne) ClearBlock() *BlockInstanceUpdateOne {
	biuo.mutation.ClearBlock()
	return biuo
}

// ClearSubflowInstance clears the "subflow_instance" edge to type FlowInstance.
func (biuo *BlockInstanceUpdateOne) ClearSubflowInstance() *BlockInstanceUpdateOne {
	biuo.mutation.ClearSubflowInstance()
	return biuo
}

// Save executes the query and returns the updated entity.
func (biuo *BlockInstanceUpdateOne) Save(ctx context.Context) (*BlockInstance, error) {
	var (
		err  error
		node *BlockInstance
	)
	biuo.defaults()
	if len(biuo.hooks) == 0 {
		if err = biuo.check(); err != nil {
			return nil, err
		}
		node, err = biuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlockInstanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = biuo.check(); err != nil {
				return nil, err
			}
			biuo.mutation = mutation
			node, err = biuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(biuo.hooks) - 1; i >= 0; i-- {
			mut = biuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, biuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (biuo *BlockInstanceUpdateOne) SaveX(ctx context.Context) *BlockInstance {
	node, err := biuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (biuo *BlockInstanceUpdateOne) Exec(ctx context.Context) error {
	_, err := biuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biuo *BlockInstanceUpdateOne) ExecX(ctx context.Context) {
	if err := biuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (biuo *BlockInstanceUpdateOne) defaults() {
	if _, ok := biuo.mutation.UpdateTime(); !ok {
		v := blockinstance.UpdateDefaultUpdateTime()
		biuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (biuo *BlockInstanceUpdateOne) check() error {
	if v, ok := biuo.mutation.Status(); ok {
		if err := blockinstance.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if _, ok := biuo.mutation.FlowInstanceID(); biuo.mutation.FlowInstanceCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"flow_instance\"")
	}
	if _, ok := biuo.mutation.BlockID(); biuo.mutation.BlockCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"block\"")
	}
	return nil
}

func (biuo *BlockInstanceUpdateOne) sqlSave(ctx context.Context) (_node *BlockInstance, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   blockinstance.Table,
			Columns: blockinstance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blockinstance.FieldID,
			},
		},
	}
	id, ok := biuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing BlockInstance.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := biuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blockinstance.FieldUpdateTime,
		})
	}
	if value, ok := biuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: blockinstance.FieldStatus,
		})
	}
	if value, ok := biuo.mutation.Inputs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: blockinstance.FieldInputs,
		})
	}
	if biuo.mutation.InputsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: blockinstance.FieldInputs,
		})
	}
	if value, ok := biuo.mutation.Outputs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: blockinstance.FieldOutputs,
		})
	}
	if biuo.mutation.OutputsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: blockinstance.FieldOutputs,
		})
	}
	if value, ok := biuo.mutation.FailureReason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blockinstance.FieldFailureReason,
		})
	}
	if biuo.mutation.FailureReasonCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: blockinstance.FieldFailureReason,
		})
	}
	if value, ok := biuo.mutation.BlockInstanceCounter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: blockinstance.FieldBlockInstanceCounter,
		})
	}
	if value, ok := biuo.mutation.AddedBlockInstanceCounter(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: blockinstance.FieldBlockInstanceCounter,
		})
	}
	if biuo.mutation.BlockInstanceCounterCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: blockinstance.FieldBlockInstanceCounter,
		})
	}
	if value, ok := biuo.mutation.StartDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blockinstance.FieldStartDate,
		})
	}
	if value, ok := biuo.mutation.EndDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blockinstance.FieldEndDate,
		})
	}
	if biuo.mutation.EndDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: blockinstance.FieldEndDate,
		})
	}
	if biuo.mutation.FlowInstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockinstance.FlowInstanceTable,
			Columns: []string{blockinstance.FlowInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowinstance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.FlowInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   blockinstance.FlowInstanceTable,
			Columns: []string{blockinstance.FlowInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biuo.mutation.BlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   blockinstance.BlockTable,
			Columns: []string{blockinstance.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   blockinstance.BlockTable,
			Columns: []string{blockinstance.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if biuo.mutation.SubflowInstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   blockinstance.SubflowInstanceTable,
			Columns: []string{blockinstance.SubflowInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowinstance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := biuo.mutation.SubflowInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   blockinstance.SubflowInstanceTable,
			Columns: []string{blockinstance.SubflowInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BlockInstance{config: biuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, biuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockinstance.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
