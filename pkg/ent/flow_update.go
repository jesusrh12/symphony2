// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/block"
	"github.com/facebookincubator/symphony/pkg/ent/flow"
	"github.com/facebookincubator/symphony/pkg/ent/flowdraft"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
	"github.com/facebookincubator/symphony/pkg/flowengine/flowschema"
)

// FlowUpdate is the builder for updating Flow entities.
type FlowUpdate struct {
	config
	hooks    []Hook
	mutation *FlowMutation
}

// Where adds a new predicate for the builder.
func (fu *FlowUpdate) Where(ps ...predicate.Flow) *FlowUpdate {
	fu.mutation.predicates = append(fu.mutation.predicates, ps...)
	return fu
}

// SetName sets the name field.
func (fu *FlowUpdate) SetName(s string) *FlowUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetDescription sets the description field.
func (fu *FlowUpdate) SetDescription(s string) *FlowUpdate {
	fu.mutation.SetDescription(s)
	return fu
}

// SetNillableDescription sets the description field if the given value is not nil.
func (fu *FlowUpdate) SetNillableDescription(s *string) *FlowUpdate {
	if s != nil {
		fu.SetDescription(*s)
	}
	return fu
}

// ClearDescription clears the value of description.
func (fu *FlowUpdate) ClearDescription() *FlowUpdate {
	fu.mutation.ClearDescription()
	return fu
}

// SetEndParamDefinitions sets the end_param_definitions field.
func (fu *FlowUpdate) SetEndParamDefinitions(fd []*flowschema.VariableDefinition) *FlowUpdate {
	fu.mutation.SetEndParamDefinitions(fd)
	return fu
}

// ClearEndParamDefinitions clears the value of end_param_definitions.
func (fu *FlowUpdate) ClearEndParamDefinitions() *FlowUpdate {
	fu.mutation.ClearEndParamDefinitions()
	return fu
}

// SetStatus sets the status field.
func (fu *FlowUpdate) SetStatus(f flow.Status) *FlowUpdate {
	fu.mutation.SetStatus(f)
	return fu
}

// SetNillableStatus sets the status field if the given value is not nil.
func (fu *FlowUpdate) SetNillableStatus(f *flow.Status) *FlowUpdate {
	if f != nil {
		fu.SetStatus(*f)
	}
	return fu
}

// SetNewInstancesPolicy sets the newInstancesPolicy field.
func (fu *FlowUpdate) SetNewInstancesPolicy(fip flow.NewInstancesPolicy) *FlowUpdate {
	fu.mutation.SetNewInstancesPolicy(fip)
	return fu
}

// SetNillableNewInstancesPolicy sets the newInstancesPolicy field if the given value is not nil.
func (fu *FlowUpdate) SetNillableNewInstancesPolicy(fip *flow.NewInstancesPolicy) *FlowUpdate {
	if fip != nil {
		fu.SetNewInstancesPolicy(*fip)
	}
	return fu
}

// AddBlockIDs adds the blocks edge to Block by ids.
func (fu *FlowUpdate) AddBlockIDs(ids ...int) *FlowUpdate {
	fu.mutation.AddBlockIDs(ids...)
	return fu
}

// AddBlocks adds the blocks edges to Block.
func (fu *FlowUpdate) AddBlocks(b ...*Block) *FlowUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return fu.AddBlockIDs(ids...)
}

// SetDraftID sets the draft edge to FlowDraft by id.
func (fu *FlowUpdate) SetDraftID(id int) *FlowUpdate {
	fu.mutation.SetDraftID(id)
	return fu
}

// SetNillableDraftID sets the draft edge to FlowDraft by id if the given value is not nil.
func (fu *FlowUpdate) SetNillableDraftID(id *int) *FlowUpdate {
	if id != nil {
		fu = fu.SetDraftID(*id)
	}
	return fu
}

// SetDraft sets the draft edge to FlowDraft.
func (fu *FlowUpdate) SetDraft(f *FlowDraft) *FlowUpdate {
	return fu.SetDraftID(f.ID)
}

// Mutation returns the FlowMutation object of the builder.
func (fu *FlowUpdate) Mutation() *FlowMutation {
	return fu.mutation
}

// ClearBlocks clears all "blocks" edges to type Block.
func (fu *FlowUpdate) ClearBlocks() *FlowUpdate {
	fu.mutation.ClearBlocks()
	return fu
}

// RemoveBlockIDs removes the blocks edge to Block by ids.
func (fu *FlowUpdate) RemoveBlockIDs(ids ...int) *FlowUpdate {
	fu.mutation.RemoveBlockIDs(ids...)
	return fu
}

// RemoveBlocks removes blocks edges to Block.
func (fu *FlowUpdate) RemoveBlocks(b ...*Block) *FlowUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return fu.RemoveBlockIDs(ids...)
}

// ClearDraft clears the "draft" edge to type FlowDraft.
func (fu *FlowUpdate) ClearDraft() *FlowUpdate {
	fu.mutation.ClearDraft()
	return fu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FlowUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	fu.defaults()
	if len(fu.hooks) == 0 {
		if err = fu.check(); err != nil {
			return 0, err
		}
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlowMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fu.check(); err != nil {
				return 0, err
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FlowUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FlowUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FlowUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FlowUpdate) defaults() {
	if _, ok := fu.mutation.UpdateTime(); !ok {
		v := flow.UpdateDefaultUpdateTime()
		fu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FlowUpdate) check() error {
	if v, ok := fu.mutation.Name(); ok {
		if err := flow.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := fu.mutation.Status(); ok {
		if err := flow.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if v, ok := fu.mutation.NewInstancesPolicy(); ok {
		if err := flow.NewInstancesPolicyValidator(v); err != nil {
			return &ValidationError{Name: "newInstancesPolicy", err: fmt.Errorf("ent: validator failed for field \"newInstancesPolicy\": %w", err)}
		}
	}
	return nil
}

func (fu *FlowUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   flow.Table,
			Columns: flow.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: flow.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flow.FieldUpdateTime,
		})
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flow.FieldName,
		})
	}
	if value, ok := fu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flow.FieldDescription,
		})
	}
	if fu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: flow.FieldDescription,
		})
	}
	if value, ok := fu.mutation.EndParamDefinitions(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: flow.FieldEndParamDefinitions,
		})
	}
	if fu.mutation.EndParamDefinitionsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: flow.FieldEndParamDefinitions,
		})
	}
	if value, ok := fu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: flow.FieldStatus,
		})
	}
	if value, ok := fu.mutation.NewInstancesPolicy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: flow.FieldNewInstancesPolicy,
		})
	}
	if fu.mutation.BlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flow.BlocksTable,
			Columns: []string{flow.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedBlocksIDs(); len(nodes) > 0 && !fu.mutation.BlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flow.BlocksTable,
			Columns: []string{flow.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.BlocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flow.BlocksTable,
			Columns: []string{flow.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.DraftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   flow.DraftTable,
			Columns: []string{flow.DraftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowdraft.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.DraftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   flow.DraftTable,
			Columns: []string{flow.DraftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowdraft.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flow.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// FlowUpdateOne is the builder for updating a single Flow entity.
type FlowUpdateOne struct {
	config
	hooks    []Hook
	mutation *FlowMutation
}

// SetName sets the name field.
func (fuo *FlowUpdateOne) SetName(s string) *FlowUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetDescription sets the description field.
func (fuo *FlowUpdateOne) SetDescription(s string) *FlowUpdateOne {
	fuo.mutation.SetDescription(s)
	return fuo
}

// SetNillableDescription sets the description field if the given value is not nil.
func (fuo *FlowUpdateOne) SetNillableDescription(s *string) *FlowUpdateOne {
	if s != nil {
		fuo.SetDescription(*s)
	}
	return fuo
}

// ClearDescription clears the value of description.
func (fuo *FlowUpdateOne) ClearDescription() *FlowUpdateOne {
	fuo.mutation.ClearDescription()
	return fuo
}

// SetEndParamDefinitions sets the end_param_definitions field.
func (fuo *FlowUpdateOne) SetEndParamDefinitions(fd []*flowschema.VariableDefinition) *FlowUpdateOne {
	fuo.mutation.SetEndParamDefinitions(fd)
	return fuo
}

// ClearEndParamDefinitions clears the value of end_param_definitions.
func (fuo *FlowUpdateOne) ClearEndParamDefinitions() *FlowUpdateOne {
	fuo.mutation.ClearEndParamDefinitions()
	return fuo
}

// SetStatus sets the status field.
func (fuo *FlowUpdateOne) SetStatus(f flow.Status) *FlowUpdateOne {
	fuo.mutation.SetStatus(f)
	return fuo
}

// SetNillableStatus sets the status field if the given value is not nil.
func (fuo *FlowUpdateOne) SetNillableStatus(f *flow.Status) *FlowUpdateOne {
	if f != nil {
		fuo.SetStatus(*f)
	}
	return fuo
}

// SetNewInstancesPolicy sets the newInstancesPolicy field.
func (fuo *FlowUpdateOne) SetNewInstancesPolicy(fip flow.NewInstancesPolicy) *FlowUpdateOne {
	fuo.mutation.SetNewInstancesPolicy(fip)
	return fuo
}

// SetNillableNewInstancesPolicy sets the newInstancesPolicy field if the given value is not nil.
func (fuo *FlowUpdateOne) SetNillableNewInstancesPolicy(fip *flow.NewInstancesPolicy) *FlowUpdateOne {
	if fip != nil {
		fuo.SetNewInstancesPolicy(*fip)
	}
	return fuo
}

// AddBlockIDs adds the blocks edge to Block by ids.
func (fuo *FlowUpdateOne) AddBlockIDs(ids ...int) *FlowUpdateOne {
	fuo.mutation.AddBlockIDs(ids...)
	return fuo
}

// AddBlocks adds the blocks edges to Block.
func (fuo *FlowUpdateOne) AddBlocks(b ...*Block) *FlowUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return fuo.AddBlockIDs(ids...)
}

// SetDraftID sets the draft edge to FlowDraft by id.
func (fuo *FlowUpdateOne) SetDraftID(id int) *FlowUpdateOne {
	fuo.mutation.SetDraftID(id)
	return fuo
}

// SetNillableDraftID sets the draft edge to FlowDraft by id if the given value is not nil.
func (fuo *FlowUpdateOne) SetNillableDraftID(id *int) *FlowUpdateOne {
	if id != nil {
		fuo = fuo.SetDraftID(*id)
	}
	return fuo
}

// SetDraft sets the draft edge to FlowDraft.
func (fuo *FlowUpdateOne) SetDraft(f *FlowDraft) *FlowUpdateOne {
	return fuo.SetDraftID(f.ID)
}

// Mutation returns the FlowMutation object of the builder.
func (fuo *FlowUpdateOne) Mutation() *FlowMutation {
	return fuo.mutation
}

// ClearBlocks clears all "blocks" edges to type Block.
func (fuo *FlowUpdateOne) ClearBlocks() *FlowUpdateOne {
	fuo.mutation.ClearBlocks()
	return fuo
}

// RemoveBlockIDs removes the blocks edge to Block by ids.
func (fuo *FlowUpdateOne) RemoveBlockIDs(ids ...int) *FlowUpdateOne {
	fuo.mutation.RemoveBlockIDs(ids...)
	return fuo
}

// RemoveBlocks removes blocks edges to Block.
func (fuo *FlowUpdateOne) RemoveBlocks(b ...*Block) *FlowUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return fuo.RemoveBlockIDs(ids...)
}

// ClearDraft clears the "draft" edge to type FlowDraft.
func (fuo *FlowUpdateOne) ClearDraft() *FlowUpdateOne {
	fuo.mutation.ClearDraft()
	return fuo
}

// Save executes the query and returns the updated entity.
func (fuo *FlowUpdateOne) Save(ctx context.Context) (*Flow, error) {
	var (
		err  error
		node *Flow
	)
	fuo.defaults()
	if len(fuo.hooks) == 0 {
		if err = fuo.check(); err != nil {
			return nil, err
		}
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlowMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fuo.check(); err != nil {
				return nil, err
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			mut = fuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FlowUpdateOne) SaveX(ctx context.Context) *Flow {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FlowUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FlowUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FlowUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdateTime(); !ok {
		v := flow.UpdateDefaultUpdateTime()
		fuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FlowUpdateOne) check() error {
	if v, ok := fuo.mutation.Name(); ok {
		if err := flow.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := fuo.mutation.Status(); ok {
		if err := flow.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if v, ok := fuo.mutation.NewInstancesPolicy(); ok {
		if err := flow.NewInstancesPolicyValidator(v); err != nil {
			return &ValidationError{Name: "newInstancesPolicy", err: fmt.Errorf("ent: validator failed for field \"newInstancesPolicy\": %w", err)}
		}
	}
	return nil
}

func (fuo *FlowUpdateOne) sqlSave(ctx context.Context) (_node *Flow, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   flow.Table,
			Columns: flow.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: flow.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Flow.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := fuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: flow.FieldUpdateTime,
		})
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flow.FieldName,
		})
	}
	if value, ok := fuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flow.FieldDescription,
		})
	}
	if fuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: flow.FieldDescription,
		})
	}
	if value, ok := fuo.mutation.EndParamDefinitions(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: flow.FieldEndParamDefinitions,
		})
	}
	if fuo.mutation.EndParamDefinitionsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: flow.FieldEndParamDefinitions,
		})
	}
	if value, ok := fuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: flow.FieldStatus,
		})
	}
	if value, ok := fuo.mutation.NewInstancesPolicy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: flow.FieldNewInstancesPolicy,
		})
	}
	if fuo.mutation.BlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flow.BlocksTable,
			Columns: []string{flow.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedBlocksIDs(); len(nodes) > 0 && !fuo.mutation.BlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flow.BlocksTable,
			Columns: []string{flow.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.BlocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flow.BlocksTable,
			Columns: []string{flow.BlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.DraftCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   flow.DraftTable,
			Columns: []string{flow.DraftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowdraft.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.DraftIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   flow.DraftTable,
			Columns: []string{flow.DraftColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: flowdraft.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Flow{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flow.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
