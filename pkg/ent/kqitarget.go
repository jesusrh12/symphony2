// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebookincubator/symphony/pkg/ent/kqi"
	"github.com/facebookincubator/symphony/pkg/ent/kqitarget"
)

// KqiTarget is the model entity for the KqiTarget schema.
type KqiTarget struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Period holds the value of the "period" field.
	Period float64 `json:"period,omitempty"`
	// AllowedVariation holds the value of the "allowedVariation" field.
	AllowedVariation float64 `json:"allowedVariation,omitempty"`
	// InitTime holds the value of the "initTime" field.
	InitTime time.Time `json:"initTime,omitempty"`
	// EndTime holds the value of the "endTime" field.
	EndTime time.Time `json:"endTime,omitempty"`
	// Impact holds the value of the "impact" field.
	Impact string `json:"impact,omitempty"`
	// Status holds the value of the "status" field.
	Status bool `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the KqiTargetQuery when eager-loading is set.
	Edges             KqiTargetEdges `json:"edges"`
	kqi_kqi_target_fk *int
}

// KqiTargetEdges holds the relations/edges for other nodes in the graph.
type KqiTargetEdges struct {
	// KqiTargetFk holds the value of the kqiTargetFk edge.
	KqiTargetFk *Kqi
	// Kqitargetcomparatorfk holds the value of the kqitargetcomparatorfk edge.
	Kqitargetcomparatorfk []*KqiComparator
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// KqiTargetFkOrErr returns the KqiTargetFk value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KqiTargetEdges) KqiTargetFkOrErr() (*Kqi, error) {
	if e.loadedTypes[0] {
		if e.KqiTargetFk == nil {
			// The edge kqiTargetFk was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: kqi.Label}
		}
		return e.KqiTargetFk, nil
	}
	return nil, &NotLoadedError{edge: "kqiTargetFk"}
}

// KqitargetcomparatorfkOrErr returns the Kqitargetcomparatorfk value or an error if the edge
// was not loaded in eager-loading.
func (e KqiTargetEdges) KqitargetcomparatorfkOrErr() ([]*KqiComparator, error) {
	if e.loadedTypes[1] {
		return e.Kqitargetcomparatorfk, nil
	}
	return nil, &NotLoadedError{edge: "kqitargetcomparatorfk"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*KqiTarget) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},   // id
		&sql.NullTime{},    // create_time
		&sql.NullTime{},    // update_time
		&sql.NullString{},  // name
		&sql.NullFloat64{}, // period
		&sql.NullFloat64{}, // allowedVariation
		&sql.NullTime{},    // initTime
		&sql.NullTime{},    // endTime
		&sql.NullString{},  // impact
		&sql.NullBool{},    // status
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*KqiTarget) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // kqi_kqi_target_fk
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the KqiTarget fields.
func (kt *KqiTarget) assignValues(values ...interface{}) error {
	if m, n := len(values), len(kqitarget.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	kt.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		kt.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		kt.UpdateTime = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[2])
	} else if value.Valid {
		kt.Name = value.String
	}
	if value, ok := values[3].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field period", values[3])
	} else if value.Valid {
		kt.Period = value.Float64
	}
	if value, ok := values[4].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field allowedVariation", values[4])
	} else if value.Valid {
		kt.AllowedVariation = value.Float64
	}
	if value, ok := values[5].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field initTime", values[5])
	} else if value.Valid {
		kt.InitTime = value.Time
	}
	if value, ok := values[6].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field endTime", values[6])
	} else if value.Valid {
		kt.EndTime = value.Time
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field impact", values[7])
	} else if value.Valid {
		kt.Impact = value.String
	}
	if value, ok := values[8].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[8])
	} else if value.Valid {
		kt.Status = value.Bool
	}
	values = values[9:]
	if len(values) == len(kqitarget.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field kqi_kqi_target_fk", value)
		} else if value.Valid {
			kt.kqi_kqi_target_fk = new(int)
			*kt.kqi_kqi_target_fk = int(value.Int64)
		}
	}
	return nil
}

// QueryKqiTargetFk queries the kqiTargetFk edge of the KqiTarget.
func (kt *KqiTarget) QueryKqiTargetFk() *KqiQuery {
	return (&KqiTargetClient{config: kt.config}).QueryKqiTargetFk(kt)
}

// QueryKqitargetcomparatorfk queries the kqitargetcomparatorfk edge of the KqiTarget.
func (kt *KqiTarget) QueryKqitargetcomparatorfk() *KqiComparatorQuery {
	return (&KqiTargetClient{config: kt.config}).QueryKqitargetcomparatorfk(kt)
}

// Update returns a builder for updating this KqiTarget.
// Note that, you need to call KqiTarget.Unwrap() before calling this method, if this KqiTarget
// was returned from a transaction, and the transaction was committed or rolled back.
func (kt *KqiTarget) Update() *KqiTargetUpdateOne {
	return (&KqiTargetClient{config: kt.config}).UpdateOne(kt)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (kt *KqiTarget) Unwrap() *KqiTarget {
	tx, ok := kt.config.driver.(*txDriver)
	if !ok {
		panic("ent: KqiTarget is not a transactional entity")
	}
	kt.config.driver = tx.drv
	return kt
}

// String implements the fmt.Stringer.
func (kt *KqiTarget) String() string {
	var builder strings.Builder
	builder.WriteString("KqiTarget(")
	builder.WriteString(fmt.Sprintf("id=%v", kt.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(kt.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(kt.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(kt.Name)
	builder.WriteString(", period=")
	builder.WriteString(fmt.Sprintf("%v", kt.Period))
	builder.WriteString(", allowedVariation=")
	builder.WriteString(fmt.Sprintf("%v", kt.AllowedVariation))
	builder.WriteString(", initTime=")
	builder.WriteString(kt.InitTime.Format(time.ANSIC))
	builder.WriteString(", endTime=")
	builder.WriteString(kt.EndTime.Format(time.ANSIC))
	builder.WriteString(", impact=")
	builder.WriteString(kt.Impact)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", kt.Status))
	builder.WriteByte(')')
	return builder.String()
}

// KqiTargets is a parsable slice of KqiTarget.
type KqiTargets []*KqiTarget

func (kt KqiTargets) config(cfg config) {
	for _i := range kt {
		kt[_i].config = cfg
	}
}
