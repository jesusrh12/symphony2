// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/counter"
	"github.com/facebookincubator/symphony/pkg/ent/counterformula"
	"github.com/facebookincubator/symphony/pkg/ent/formula"
	"github.com/facebookincubator/symphony/pkg/ent/predicate"
)

// CounterFormulaUpdate is the builder for updating CounterFormula entities.
type CounterFormulaUpdate struct {
	config
	hooks    []Hook
	mutation *CounterFormulaMutation
}

// Where adds a new predicate for the builder.
func (cfu *CounterFormulaUpdate) Where(ps ...predicate.CounterFormula) *CounterFormulaUpdate {
	cfu.mutation.predicates = append(cfu.mutation.predicates, ps...)
	return cfu
}

// SetMandatory sets the mandatory field.
func (cfu *CounterFormulaUpdate) SetMandatory(b bool) *CounterFormulaUpdate {
	cfu.mutation.SetMandatory(b)
	return cfu
}

// SetFormulaID sets the formula edge to Formula by id.
func (cfu *CounterFormulaUpdate) SetFormulaID(id int) *CounterFormulaUpdate {
	cfu.mutation.SetFormulaID(id)
	return cfu
}

// SetNillableFormulaID sets the formula edge to Formula by id if the given value is not nil.
func (cfu *CounterFormulaUpdate) SetNillableFormulaID(id *int) *CounterFormulaUpdate {
	if id != nil {
		cfu = cfu.SetFormulaID(*id)
	}
	return cfu
}

// SetFormula sets the formula edge to Formula.
func (cfu *CounterFormulaUpdate) SetFormula(f *Formula) *CounterFormulaUpdate {
	return cfu.SetFormulaID(f.ID)
}

// SetCounterID sets the counter edge to Counter by id.
func (cfu *CounterFormulaUpdate) SetCounterID(id int) *CounterFormulaUpdate {
	cfu.mutation.SetCounterID(id)
	return cfu
}

// SetNillableCounterID sets the counter edge to Counter by id if the given value is not nil.
func (cfu *CounterFormulaUpdate) SetNillableCounterID(id *int) *CounterFormulaUpdate {
	if id != nil {
		cfu = cfu.SetCounterID(*id)
	}
	return cfu
}

// SetCounter sets the counter edge to Counter.
func (cfu *CounterFormulaUpdate) SetCounter(c *Counter) *CounterFormulaUpdate {
	return cfu.SetCounterID(c.ID)
}

// Mutation returns the CounterFormulaMutation object of the builder.
func (cfu *CounterFormulaUpdate) Mutation() *CounterFormulaMutation {
	return cfu.mutation
}

// ClearFormula clears the "formula" edge to type Formula.
func (cfu *CounterFormulaUpdate) ClearFormula() *CounterFormulaUpdate {
	cfu.mutation.ClearFormula()
	return cfu
}

// ClearCounter clears the "counter" edge to type Counter.
func (cfu *CounterFormulaUpdate) ClearCounter() *CounterFormulaUpdate {
	cfu.mutation.ClearCounter()
	return cfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cfu *CounterFormulaUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cfu.defaults()
	if len(cfu.hooks) == 0 {
		affected, err = cfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CounterFormulaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cfu.mutation = mutation
			affected, err = cfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cfu.hooks) - 1; i >= 0; i-- {
			mut = cfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cfu *CounterFormulaUpdate) SaveX(ctx context.Context) int {
	affected, err := cfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cfu *CounterFormulaUpdate) Exec(ctx context.Context) error {
	_, err := cfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfu *CounterFormulaUpdate) ExecX(ctx context.Context) {
	if err := cfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cfu *CounterFormulaUpdate) defaults() {
	if _, ok := cfu.mutation.UpdateTime(); !ok {
		v := counterformula.UpdateDefaultUpdateTime()
		cfu.mutation.SetUpdateTime(v)
	}
}

func (cfu *CounterFormulaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   counterformula.Table,
			Columns: counterformula.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: counterformula.FieldID,
			},
		},
	}
	if ps := cfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cfu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: counterformula.FieldUpdateTime,
		})
	}
	if value, ok := cfu.mutation.Mandatory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: counterformula.FieldMandatory,
		})
	}
	if cfu.mutation.FormulaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   counterformula.FormulaTable,
			Columns: []string{counterformula.FormulaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: formula.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfu.mutation.FormulaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   counterformula.FormulaTable,
			Columns: []string{counterformula.FormulaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: formula.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cfu.mutation.CounterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   counterformula.CounterTable,
			Columns: []string{counterformula.CounterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfu.mutation.CounterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   counterformula.CounterTable,
			Columns: []string{counterformula.CounterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{counterformula.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CounterFormulaUpdateOne is the builder for updating a single CounterFormula entity.
type CounterFormulaUpdateOne struct {
	config
	hooks    []Hook
	mutation *CounterFormulaMutation
}

// SetMandatory sets the mandatory field.
func (cfuo *CounterFormulaUpdateOne) SetMandatory(b bool) *CounterFormulaUpdateOne {
	cfuo.mutation.SetMandatory(b)
	return cfuo
}

// SetFormulaID sets the formula edge to Formula by id.
func (cfuo *CounterFormulaUpdateOne) SetFormulaID(id int) *CounterFormulaUpdateOne {
	cfuo.mutation.SetFormulaID(id)
	return cfuo
}

// SetNillableFormulaID sets the formula edge to Formula by id if the given value is not nil.
func (cfuo *CounterFormulaUpdateOne) SetNillableFormulaID(id *int) *CounterFormulaUpdateOne {
	if id != nil {
		cfuo = cfuo.SetFormulaID(*id)
	}
	return cfuo
}

// SetFormula sets the formula edge to Formula.
func (cfuo *CounterFormulaUpdateOne) SetFormula(f *Formula) *CounterFormulaUpdateOne {
	return cfuo.SetFormulaID(f.ID)
}

// SetCounterID sets the counter edge to Counter by id.
func (cfuo *CounterFormulaUpdateOne) SetCounterID(id int) *CounterFormulaUpdateOne {
	cfuo.mutation.SetCounterID(id)
	return cfuo
}

// SetNillableCounterID sets the counter edge to Counter by id if the given value is not nil.
func (cfuo *CounterFormulaUpdateOne) SetNillableCounterID(id *int) *CounterFormulaUpdateOne {
	if id != nil {
		cfuo = cfuo.SetCounterID(*id)
	}
	return cfuo
}

// SetCounter sets the counter edge to Counter.
func (cfuo *CounterFormulaUpdateOne) SetCounter(c *Counter) *CounterFormulaUpdateOne {
	return cfuo.SetCounterID(c.ID)
}

// Mutation returns the CounterFormulaMutation object of the builder.
func (cfuo *CounterFormulaUpdateOne) Mutation() *CounterFormulaMutation {
	return cfuo.mutation
}

// ClearFormula clears the "formula" edge to type Formula.
func (cfuo *CounterFormulaUpdateOne) ClearFormula() *CounterFormulaUpdateOne {
	cfuo.mutation.ClearFormula()
	return cfuo
}

// ClearCounter clears the "counter" edge to type Counter.
func (cfuo *CounterFormulaUpdateOne) ClearCounter() *CounterFormulaUpdateOne {
	cfuo.mutation.ClearCounter()
	return cfuo
}

// Save executes the query and returns the updated entity.
func (cfuo *CounterFormulaUpdateOne) Save(ctx context.Context) (*CounterFormula, error) {
	var (
		err  error
		node *CounterFormula
	)
	cfuo.defaults()
	if len(cfuo.hooks) == 0 {
		node, err = cfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CounterFormulaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cfuo.mutation = mutation
			node, err = cfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cfuo.hooks) - 1; i >= 0; i-- {
			mut = cfuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cfuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cfuo *CounterFormulaUpdateOne) SaveX(ctx context.Context) *CounterFormula {
	node, err := cfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cfuo *CounterFormulaUpdateOne) Exec(ctx context.Context) error {
	_, err := cfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfuo *CounterFormulaUpdateOne) ExecX(ctx context.Context) {
	if err := cfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cfuo *CounterFormulaUpdateOne) defaults() {
	if _, ok := cfuo.mutation.UpdateTime(); !ok {
		v := counterformula.UpdateDefaultUpdateTime()
		cfuo.mutation.SetUpdateTime(v)
	}
}

func (cfuo *CounterFormulaUpdateOne) sqlSave(ctx context.Context) (_node *CounterFormula, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   counterformula.Table,
			Columns: counterformula.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: counterformula.FieldID,
			},
		},
	}
	id, ok := cfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CounterFormula.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cfuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: counterformula.FieldUpdateTime,
		})
	}
	if value, ok := cfuo.mutation.Mandatory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: counterformula.FieldMandatory,
		})
	}
	if cfuo.mutation.FormulaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   counterformula.FormulaTable,
			Columns: []string{counterformula.FormulaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: formula.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfuo.mutation.FormulaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   counterformula.FormulaTable,
			Columns: []string{counterformula.FormulaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: formula.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cfuo.mutation.CounterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   counterformula.CounterTable,
			Columns: []string{counterformula.CounterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfuo.mutation.CounterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   counterformula.CounterTable,
			Columns: []string{counterformula.CounterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CounterFormula{config: cfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{counterformula.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
