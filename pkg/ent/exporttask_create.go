// Copyright (c) 2004-present Facebook All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/facebookincubator/symphony/pkg/ent/exporttask"
)

// ExportTaskCreate is the builder for creating a ExportTask entity.
type ExportTaskCreate struct {
	config
	mutation *ExportTaskMutation
	hooks    []Hook
}

// SetType sets the type field.
func (etc *ExportTaskCreate) SetType(e exporttask.Type) *ExportTaskCreate {
	etc.mutation.SetType(e)
	return etc
}

// SetStatus sets the status field.
func (etc *ExportTaskCreate) SetStatus(e exporttask.Status) *ExportTaskCreate {
	etc.mutation.SetStatus(e)
	return etc
}

// SetProgress sets the progress field.
func (etc *ExportTaskCreate) SetProgress(f float64) *ExportTaskCreate {
	etc.mutation.SetProgress(f)
	return etc
}

// SetNillableProgress sets the progress field if the given value is not nil.
func (etc *ExportTaskCreate) SetNillableProgress(f *float64) *ExportTaskCreate {
	if f != nil {
		etc.SetProgress(*f)
	}
	return etc
}

// SetFilters sets the filters field.
func (etc *ExportTaskCreate) SetFilters(s string) *ExportTaskCreate {
	etc.mutation.SetFilters(s)
	return etc
}

// SetNillableFilters sets the filters field if the given value is not nil.
func (etc *ExportTaskCreate) SetNillableFilters(s *string) *ExportTaskCreate {
	if s != nil {
		etc.SetFilters(*s)
	}
	return etc
}

// SetStoreKey sets the store_key field.
func (etc *ExportTaskCreate) SetStoreKey(s string) *ExportTaskCreate {
	etc.mutation.SetStoreKey(s)
	return etc
}

// SetNillableStoreKey sets the store_key field if the given value is not nil.
func (etc *ExportTaskCreate) SetNillableStoreKey(s *string) *ExportTaskCreate {
	if s != nil {
		etc.SetStoreKey(*s)
	}
	return etc
}

// SetWoIDToExport sets the wo_id_to_export field.
func (etc *ExportTaskCreate) SetWoIDToExport(i int) *ExportTaskCreate {
	etc.mutation.SetWoIDToExport(i)
	return etc
}

// SetNillableWoIDToExport sets the wo_id_to_export field if the given value is not nil.
func (etc *ExportTaskCreate) SetNillableWoIDToExport(i *int) *ExportTaskCreate {
	if i != nil {
		etc.SetWoIDToExport(*i)
	}
	return etc
}

// Mutation returns the ExportTaskMutation object of the builder.
func (etc *ExportTaskCreate) Mutation() *ExportTaskMutation {
	return etc.mutation
}

// Save creates the ExportTask in the database.
func (etc *ExportTaskCreate) Save(ctx context.Context) (*ExportTask, error) {
	var (
		err  error
		node *ExportTask
	)
	etc.defaults()
	if len(etc.hooks) == 0 {
		if err = etc.check(); err != nil {
			return nil, err
		}
		node, err = etc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExportTaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = etc.check(); err != nil {
				return nil, err
			}
			etc.mutation = mutation
			node, err = etc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(etc.hooks) - 1; i >= 0; i-- {
			mut = etc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, etc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (etc *ExportTaskCreate) SaveX(ctx context.Context) *ExportTask {
	v, err := etc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (etc *ExportTaskCreate) defaults() {
	if _, ok := etc.mutation.Progress(); !ok {
		v := exporttask.DefaultProgress
		etc.mutation.SetProgress(v)
	}
	if _, ok := etc.mutation.Filters(); !ok {
		v := exporttask.DefaultFilters
		etc.mutation.SetFilters(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (etc *ExportTaskCreate) check() error {
	if _, ok := etc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if v, ok := etc.mutation.GetType(); ok {
		if err := exporttask.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if _, ok := etc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if v, ok := etc.mutation.Status(); ok {
		if err := exporttask.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if _, ok := etc.mutation.Progress(); !ok {
		return &ValidationError{Name: "progress", err: errors.New("ent: missing required field \"progress\"")}
	}
	if v, ok := etc.mutation.Progress(); ok {
		if err := exporttask.ProgressValidator(v); err != nil {
			return &ValidationError{Name: "progress", err: fmt.Errorf("ent: validator failed for field \"progress\": %w", err)}
		}
	}
	if _, ok := etc.mutation.Filters(); !ok {
		return &ValidationError{Name: "filters", err: errors.New("ent: missing required field \"filters\"")}
	}
	return nil
}

func (etc *ExportTaskCreate) sqlSave(ctx context.Context) (*ExportTask, error) {
	_node, _spec := etc.createSpec()
	if err := sqlgraph.CreateNode(ctx, etc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (etc *ExportTaskCreate) createSpec() (*ExportTask, *sqlgraph.CreateSpec) {
	var (
		_node = &ExportTask{config: etc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: exporttask.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: exporttask.FieldID,
			},
		}
	)
	if value, ok := etc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: exporttask.FieldType,
		})
		_node.Type = value
	}
	if value, ok := etc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: exporttask.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := etc.mutation.Progress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: exporttask.FieldProgress,
		})
		_node.Progress = value
	}
	if value, ok := etc.mutation.Filters(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exporttask.FieldFilters,
		})
		_node.Filters = value
	}
	if value, ok := etc.mutation.StoreKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exporttask.FieldStoreKey,
		})
		_node.StoreKey = &value
	}
	if value, ok := etc.mutation.WoIDToExport(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: exporttask.FieldWoIDToExport,
		})
		_node.WoIDToExport = &value
	}
	return _node, _spec
}

// ExportTaskCreateBulk is the builder for creating a bulk of ExportTask entities.
type ExportTaskCreateBulk struct {
	config
	builders []*ExportTaskCreate
}

// Save creates the ExportTask entities in the database.
func (etcb *ExportTaskCreateBulk) Save(ctx context.Context) ([]*ExportTask, error) {
	specs := make([]*sqlgraph.CreateSpec, len(etcb.builders))
	nodes := make([]*ExportTask, len(etcb.builders))
	mutators := make([]Mutator, len(etcb.builders))
	for i := range etcb.builders {
		func(i int, root context.Context) {
			builder := etcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExportTaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, etcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, etcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, etcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (etcb *ExportTaskCreateBulk) SaveX(ctx context.Context) []*ExportTask {
	v, err := etcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
