// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"context"
	"contrib.go.opencensus.io/integrations/ocsql"
	"database/sql"
	"github.com/facebook/ent/dialect"
	"github.com/facebookincubator/symphony/admin/graphql"
	"github.com/facebookincubator/symphony/pkg/database/mysql"
	"github.com/facebookincubator/symphony/pkg/log"
	"github.com/facebookincubator/symphony/pkg/server"
	"github.com/facebookincubator/symphony/pkg/server/metrics"
	"github.com/facebookincubator/symphony/pkg/server/xserver"
	"github.com/facebookincubator/symphony/pkg/strutil"
	"github.com/facebookincubator/symphony/pkg/telemetry"
	"github.com/facebookincubator/symphony/pkg/telemetry/ocgql"
	"github.com/facebookincubator/symphony/pkg/viewer"
	"go.opencensus.io/stats/view"
	"gocloud.dev/server/health"
	"gocloud.dev/server/health/sqlhealth"
	"net/url"
)

import (
	_ "github.com/facebookincubator/symphony/pkg/ent/runtime"
)

// Injectors from wire.go:

func NewApplication(ctx context.Context, flags *cliFlags) (*application, func(), error) {
	config := flags.LogConfig
	logger, cleanup, err := log.ProvideLogger(config)
	if err != nil {
		return nil, nil, err
	}
	zapLogger := log.ProvideZapLogger(logger)
	url := flags.DatabaseURL
	db, cleanup2, err := mysql.Provide(ctx, url)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	stringer := _wireStringerValue
	tenancy, err := provideTenancy(ctx, url)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	handlerConfig := graphql.HandlerConfig{
		DB:      db,
		Dialect: stringer,
		Tenancy: tenancy,
		Logger:  logger,
	}
	handler := graphql.NewHandler(handlerConfig)
	xserverZapLogger := xserver.NewRequestLogger(logger)
	v := provideHealthCheckers(db)
	telemetryConfig := flags.TelemetryConfig
	exporter, cleanup3, err := telemetry.ProvideTraceExporter(telemetryConfig)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	profilingAddress := _wireProfilingAddressValue
	sampler := telemetry.ProvideTraceSampler(telemetryConfig)
	handlerFunc := xserver.NewRecoveryHandler(logger)
	defaultDriver := _wireDefaultDriverValue
	options := &server.Options{
		RequestLogger:         xserverZapLogger,
		HealthChecks:          v,
		TraceExporter:         exporter,
		ProfilingAddress:      profilingAddress,
		DefaultSamplingPolicy: sampler,
		RecoveryHandler:       handlerFunc,
		Driver:                defaultDriver,
	}
	serverServer := server.New(handler, options)
	string2 := flags.ListenAddress
	viewExporter, err := telemetry.ProvideViewExporter(telemetryConfig)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	v2 := provideViews()
	metricsConfig := metrics.Config{
		Log:      zapLogger,
		Exporter: viewExporter,
		Views:    v2,
	}
	metricsMetrics := metrics.New(metricsConfig)
	addr := flags.MetricsAddress
	mainApplication := &application{
		Logger:      zapLogger,
		server:      serverServer,
		addr:        string2,
		metrics:     metricsMetrics,
		metricsAddr: addr,
	}
	return mainApplication, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

var (
	_wireStringerValue         = strutil.Stringer(dialect.MySQL)
	_wireProfilingAddressValue = server.ProfilingAddress(":6060")
	_wireDefaultDriverValue    = &server.DefaultDriver{}
)

// wire.go:

func provideTenancy(ctx context.Context, u *url.URL) (viewer.Tenancy, error) {
	tenancy, err := viewer.NewMySQLTenancy(ctx, u, 5)
	if err != nil {
		return nil, err
	}
	return viewer.NewCacheTenancy(tenancy, nil), nil
}

func provideHealthCheckers(db *sql.DB) []health.Checker {
	return []health.Checker{sqlhealth.New(db)}
}

func provideViews() []*view.View {
	views := xserver.DefaultViews()
	views = append(views, ocsql.DefaultViews...)
	views = append(views, ocgql.DefaultViews...)
	return views
}
