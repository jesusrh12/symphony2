// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"github.com/facebookincubator/symphony/pkg/ent"
	"github.com/facebookincubator/symphony/pkg/ent/user"
)

// An object with an ID.
type Node interface {
	IsNode()
}

// Input type of createFeature.
type CreateFeatureInput struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId"`
	// The name of the feature.
	Name string `json:"name"`
	// The state of the feature.
	Enabled bool `json:"enabled"`
	// The description of the feature.
	Description *string `json:"description"`
	// A list of tenants to create the feature for, defaults to all tenants.
	Tenants []*ID `json:"tenants"`
}

// Output type of createFeature.
type CreateFeaturePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId"`
	// A list of created features.
	Features []*Feature `json:"features"`
}

// Input type of createTenant.
type CreateTenantInput struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId"`
	// The name of the new tenant.
	Name string `json:"name"`
}

// Output type of createTenant.
type CreateTenantPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId"`
	// The new tenant.
	Tenant *Tenant `json:"tenant"`
}

// Input type of deleteFeature.
type DeleteFeatureInput struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId"`
	// The id of the feature.
	ID ID `json:"id"`
}

// Output type of deleteFeature.
type DeleteFeaturePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId"`
}

// Input type of deleteTenant.
type DeleteTenantInput struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId"`
	// The tenant id to delete.
	ID ID `json:"id"`
}

// Output type of deleteTenant.
type DeleteTenantPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId"`
}

// Ways in which to filter list of features.
type FeatureFilters struct {
	// A List of names to filter the features by.
	Names []string `json:"names"`
	// The state to filter the features by.
	Enabled *bool `json:"enabled"`
}

// A tenant encapsulates a set of resources.
type Tenant struct {
	// The id of the tenant.
	ID ID `json:"id"`
	// The name of the tenant.
	Name string `json:"name"`
	// A list of tenant features.
	Features []*Feature `json:"features"`
	// A list of tenant users.
	Users *UserConnection `json:"users"`
}

func (Tenant) IsNode() {}

// Ways in which to filter list of tenants.
type TenantFilters struct {
	// A List of names to filter the tenants by.
	Names []string `json:"names"`
}

// Input type of truncateTenant.
type TruncateTenantInput struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId"`
	// The tenant name to truncate data for.
	Name string `json:"name"`
}

// Output type of truncateTenant.
type TruncateTenantPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId"`
	// The truncated tenant.
	Tenant *Tenant `json:"tenant"`
}

// Input type of updateFeature.
type UpdateFeatureInput struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId"`
	// The id of the feature.
	ID ID `json:"id"`
	// The state of the feature.
	Enabled *bool `json:"enabled"`
	// The description of the feature.
	Description *string `json:"description"`
}

// Output type of updateFeature.
type UpdateFeaturePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId"`
	// The updated feature.
	Feature *Feature `json:"feature"`
}

// Input type of upsertFeature.
type UpsertFeatureInput struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId"`
	// The name of the feature.
	Name string `json:"name"`
	// The state of the feature.
	Enabled *bool `json:"enabled"`
	// The description of the feature.
	Description *string `json:"description"`
	// A list of tenants to upsert the feature for, defaults to all tenants.
	Tenants []*ID `json:"tenants"`
}

// Output type of upsertFeature.
type UpsertFeaturePayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId"`
	// A list of upserted features.
	Features []*Feature `json:"features"`
}

// Input type of upsertUser.
type UpsertUserInput struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId"`
	// The user's tenant.
	TenantID ID `json:"tenantId"`
	// The user's authenication identifier.
	AuthID string `json:"authId"`
	// The role of the user.
	Role *user.Role `json:"role"`
	// The status of the user.
	Status *user.Status `json:"status"`
}

// Output type of upsertUser.
type UpsertUserPayload struct {
	// A unique identifier for the client performing the mutation.
	ClientMutationID *string `json:"clientMutationId"`
	// The upserted user.
	User *User `json:"user"`
}

// The connection type for User.
type UserConnection struct {
	// A list of edges.
	Edges []*UserEdge `json:"edges"`
	// Information to aid in pagination.
	PageInfo *ent.PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount"`
}

// Represents a user.
type UserEdge struct {
	// A cursor for use in pagination.
	Cursor ent.Cursor `json:"cursor"`
	// The item at the end of the edge.
	Node *User `json:"node"`
}
