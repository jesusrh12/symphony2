/*
 * Copyright (c) Facebook, Inc. and its affiliates.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 */

apply plugin: "com.android.application"
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"
import com.android.build.OutputFile

project.ext.react = [
    entryFile: "index.js",
    enableHermes: true,  // clean and rebuild if changing
]

/**
 * Map for the version code that gives each ABI a value.
 * This is used when building an APK per supported ABI.
 *
 * For more info on ABIs, check the documentation here:
 * https://developer.android.com/ndk/guides/abis.html#sa
 */
project.ext.abiCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]

apply from: "../../node_modules/react-native/react.gradle"

// Set this to true to create separate APKs per supported ABI instead of one.
def getEnableSeparateBuildPerCPUArchitecture = { ->
  def hasProp = project.hasProperty('enableSeparateBuildPerCPUArchitecture');
  return hasProp ? (enableSeparateBuildPerCPUArchitecture == "true") : false
}

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy.MM.dd.HH:mm:ss')
    return formattedDate
}

def getVersionName = { ->
  return project.hasProperty('appVersionName') ? appVersionName : 'debug ' + getDate()
}

// Load the keystore
def getKeystorePropertiesFile = { ->
    return project.hasProperty('keystoreFile') ? keystoreFile : "keystores/debug-keystore.properties"
}

def keystorePropertiesFile = getKeystorePropertiesFile()
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", true);

android {
    packagingOptions {
      pickFirst '**/libc++_shared.so'
    }

    compileSdkVersion rootProject.ext.compileSdkVersion
    ndkVersion "21.3.6528147"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        multiDexEnabled true // This is for method limit
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        missingDimensionStrategy 'react-native-camera', 'general'
    }
    splits {
        abi {
            reset()
            enable getEnableSeparateBuildPerCPUArchitecture()
            universalApk true  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    dexOptions {
      jumboMode true // This for the string limit
    }
    flavorDimensions "default"
    productFlavors {
        platform {
            dimension "default"
            applicationId "cloud.thesymphony"
            versionCode 35
            versionName getVersionName()
            manifestPlaceholders = [
                appAuthRedirectScheme: 'cloud.thesymphony'
            ]
            resValue "string", "build_config_package", "com.fbc"
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            def abi = output.getFilter(OutputFile.ABI)
            def baseAbiVersionCode = project.ext.abiCodes.get(abi)

            // Because abiCodes.get() returns null for ABIs that are not mapped by ext.abiCodes,
            // the following code does not override the version code for universal APKs.
            // However, because we want universal APKs to have the lowest version code,
            // this outcome is desirable.
            if (baseAbiVersionCode != null) {
              // Assigns the new version code to versionCodeOverride, which changes the version code
              // for only the output APK, not for the variant itself. Skipping this step simply
              // causes Gradle to use the value of variant.versionCode for the APK.
              output.versionCodeOverride =
                      baseAbiVersionCode * 1000 + variant.versionCode
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.0.0'
    //noinspection GradleDynamicVersion
    implementation "com.facebook.react:react-native:+"  // From node_modules
    implementation 'androidx.multidex:multidex:2.0.0'
    implementation "org.greenrobot:eventbus:3.1.1"
    implementation "com.google.android.gms:play-services-location:16.0.0"

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
      exclude group:'com.facebook.fbjni'
    }
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }

    debugImplementation ('com.facebook.soloader:soloader:0.5.1')
    implementation 'androidx.appcompat:appcompat:1.1.0-rc01'
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
